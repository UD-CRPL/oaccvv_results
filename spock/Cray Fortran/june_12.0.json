var jsonResults = {
    "configs": [
        {
            "CC": "",
            "CCFlags": [],
            "CC_ACC_Version": null,
            "CPP": "",
            "CPPFlags": [],
            "CPP_ACC_Version": null,
            "FC": "ftn",
            "FCFlags": [],
            "FC_ACC_Version": "2.7",
            "PostCompileCommands": [],
            "PostRunCommands": [],
            "PreCompileCommands": [],
            "PreRunCommands": [],
            "build_dir": "/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build",
            "config_id": -1,
            "config_name": "init_config.txt",
            "env": null,
            "exclude_tags": [],
            "exclude_tests": [
                "acc_testsuite.Fh",
                "acc_testsuite.h",
                "acc_testsuite_declare.h"
            ],
            "export_format": "json",
            "fast": false,
            "id": 1,
            "include_by_default": true,
            "include_tags": [],
            "include_tests": [],
            "keep_build_dir": false,
            "keep_mutated_tests": false,
            "keep_partial_results": false,
            "keep_policy": "on-error",
            "mutated_test_dir": "/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/mutated_tests",
            "mutators": [],
            "partial": false,
            "partial_results_dir": "/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/partial_results",
            "runtime_prefix": "",
            "seed": null,
            "system_name": null,
            "tag_evaluation": null,
            "test_dir": "/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests",
            "timeout": 10
        }
    ],
    "runs": {
        "acc_async_test.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_async_test.F90/acc_async_test.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_async_test.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_async_test.F90, Line = 24, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0435 seconds\nCray Fortran : 246 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_28130/acc_async_test_1.o: in function `test1_':\n/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_async_test.F90:20: undefined reference to `acc_async_test'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_28130/acc_async_test_1.o: in function `test2_':\n/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_async_test.F90:73: undefined reference to `acc_async_test'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_28130/acc_async_test_1.o: in function `test3_':\n/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_async_test.F90:119: undefined reference to `acc_get_default_async_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_async_test.F90:126: undefined reference to `acc_async_test'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_28130/acc_async_test_1.o:(.data+0x0): undefined reference to `openacc_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_28130/acc_async_test_1.o:(.data+0x40): undefined reference to `openacc_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_28130/acc_async_test_1.o:(.data+0x80): undefined reference to `openacc_'\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 3.0692028030753136
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_async_test.F90/acc_async_test.F901 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_async_test.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_async_test.F90, Line = 77, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0096 seconds\nCray Fortran : 237 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_28146/acc_async_test_1.o: in function `test2_':\n/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_async_test.F90:73: undefined reference to `acc_async_test'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_28146/acc_async_test_1.o: in function `test3_':\n/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_async_test.F90:119: undefined reference to `acc_get_default_async_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_async_test.F90:126: undefined reference to `acc_async_test'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_28146/acc_async_test_1.o:(.data+0x0): undefined reference to `openacc_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_28146/acc_async_test_1.o:(.data+0x40): undefined reference to `openacc_'\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.3157605957239866
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT2 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_async_test.F90/acc_async_test.F902 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_async_test.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_async_test.F90, Line = 24, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0096 seconds\nCray Fortran : 237 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_28160/acc_async_test_1.o: in function `test1_':\n/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_async_test.F90:20: undefined reference to `acc_async_test'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_28160/acc_async_test_1.o: in function `test3_':\n/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_async_test.F90:119: undefined reference to `acc_get_default_async_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_async_test.F90:126: undefined reference to `acc_async_test'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_28160/acc_async_test_1.o:(.data+0x0): undefined reference to `openacc_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_28160/acc_async_test_1.o:(.data+0x40): undefined reference to `openacc_'\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.3156901840120554
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_async_test.F90/acc_async_test.F903 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_async_test.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_async_test.F90, Line = 77, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0093 seconds\nCray Fortran : 237 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_28174/acc_async_test_1.o: in function `test2_':\n/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_async_test.F90:73: undefined reference to `acc_async_test'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_28174/acc_async_test_1.o: in function `test3_':\n/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_async_test.F90:119: undefined reference to `acc_get_default_async_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_async_test.F90:126: undefined reference to `acc_async_test'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_28174/acc_async_test_1.o:(.data+0x0): undefined reference to `openacc_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_28174/acc_async_test_1.o:(.data+0x40): undefined reference to `openacc_'\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.3156378176063299
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT3 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_async_test.F90/acc_async_test.F904 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_async_test.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_async_test.F90, Line = 24, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0095 seconds\nCray Fortran : 237 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_28188/acc_async_test_1.o: in function `test1_':\n/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_async_test.F90:20: undefined reference to `acc_async_test'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_28188/acc_async_test_1.o: in function `test2_':\n/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_async_test.F90:73: undefined reference to `acc_async_test'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_28188/acc_async_test_1.o:(.data+0x0): undefined reference to `openacc_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_28188/acc_async_test_1.o:(.data+0x40): undefined reference to `openacc_'\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.315666263923049
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_async_test.F90/acc_async_test.F905 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_async_test.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_async_test.F90, Line = 77, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0093 seconds\nCray Fortran : 237 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_28202/acc_async_test_1.o: in function `test2_':\n/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_async_test.F90:73: undefined reference to `acc_async_test'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_28202/acc_async_test_1.o: in function `test3_':\n/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_async_test.F90:119: undefined reference to `acc_get_default_async_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_async_test.F90:126: undefined reference to `acc_async_test'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_28202/acc_async_test_1.o:(.data+0x0): undefined reference to `openacc_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_28202/acc_async_test_1.o:(.data+0x40): undefined reference to `openacc_'\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.26560918241739273
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT2 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_async_test.F90/acc_async_test.F906 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_async_test.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_async_test.F90, Line = 24, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0096 seconds\nCray Fortran : 237 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_28216/acc_async_test_1.o: in function `test1_':\n/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_async_test.F90:20: undefined reference to `acc_async_test'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_28216/acc_async_test_1.o: in function `test3_':\n/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_async_test.F90:119: undefined reference to `acc_get_default_async_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_async_test.F90:126: undefined reference to `acc_async_test'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_28216/acc_async_test_1.o:(.data+0x0): undefined reference to `openacc_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_28216/acc_async_test_1.o:(.data+0x40): undefined reference to `openacc_'\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.31565957330167294
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_async_test.F90/acc_async_test.F907 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_async_test.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_async_test.F90, Line = 77, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0093 seconds\nCray Fortran : 237 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_28230/acc_async_test_1.o: in function `test2_':\n/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_async_test.F90:73: undefined reference to `acc_async_test'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_28230/acc_async_test_1.o: in function `test3_':\n/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_async_test.F90:119: undefined reference to `acc_get_default_async_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_async_test.F90:126: undefined reference to `acc_async_test'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_28230/acc_async_test_1.o:(.data+0x0): undefined reference to `openacc_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_28230/acc_async_test_1.o:(.data+0x40): undefined reference to `openacc_'\n",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.2655557319521904
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_async_test_all.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_async_test_all.F90/acc_async_test_all.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_async_test_all.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_async_test_all.F90, Line = 24, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0126 seconds\nCray Fortran : 263 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_28246/acc_async_test_all_1.o: in function `test1_':\n/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_async_test_all.F90:20: undefined reference to `acc_async_test_all'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_28246/acc_async_test_all_1.o: in function `test2_':\n/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_async_test_all.F90:81: undefined reference to `acc_async_test_all'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_28246/acc_async_test_all_1.o: in function `test3_':\n/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_async_test_all.F90:146: undefined reference to `acc_set_default_async_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_async_test_all.F90:159: undefined reference to `acc_async_test_all'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_28246/acc_async_test_all_1.o:(.data+0x0): undefined reference to `openacc_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_28246/acc_async_test_all_1.o:(.data+0x40): undefined reference to `openacc_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_28246/acc_async_test_all_1.o:(.data+0x80): undefined reference to `openacc_'\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.3659661263227463
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_async_test_all.F90/acc_async_test_all.F901 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_async_test_all.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_async_test_all.F90, Line = 85, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0099 seconds\nCray Fortran : 254 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_28260/acc_async_test_all_1.o: in function `test2_':\n/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_async_test_all.F90:81: undefined reference to `acc_async_test_all'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_28260/acc_async_test_all_1.o: in function `test3_':\n/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_async_test_all.F90:146: undefined reference to `acc_set_default_async_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_async_test_all.F90:159: undefined reference to `acc_async_test_all'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_28260/acc_async_test_all_1.o:(.data+0x0): undefined reference to `openacc_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_28260/acc_async_test_all_1.o:(.data+0x40): undefined reference to `openacc_'\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.315584272146225
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT2 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_async_test_all.F90/acc_async_test_all.F902 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_async_test_all.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_async_test_all.F90, Line = 24, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0097 seconds\nCray Fortran : 254 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_28274/acc_async_test_all_1.o: in function `test1_':\n/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_async_test_all.F90:20: undefined reference to `acc_async_test_all'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_28274/acc_async_test_all_1.o: in function `test3_':\n/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_async_test_all.F90:146: undefined reference to `acc_set_default_async_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_async_test_all.F90:159: undefined reference to `acc_async_test_all'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_28274/acc_async_test_all_1.o:(.data+0x0): undefined reference to `openacc_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_28274/acc_async_test_all_1.o:(.data+0x40): undefined reference to `openacc_'\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.31566373631358147
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_async_test_all.F90/acc_async_test_all.F903 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_async_test_all.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_async_test_all.F90, Line = 85, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0097 seconds\nCray Fortran : 254 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_28288/acc_async_test_all_1.o: in function `test2_':\n/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_async_test_all.F90:81: undefined reference to `acc_async_test_all'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_28288/acc_async_test_all_1.o: in function `test3_':\n/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_async_test_all.F90:146: undefined reference to `acc_set_default_async_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_async_test_all.F90:159: undefined reference to `acc_async_test_all'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_28288/acc_async_test_all_1.o:(.data+0x0): undefined reference to `openacc_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_28288/acc_async_test_all_1.o:(.data+0x40): undefined reference to `openacc_'\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.31567869521677494
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT3 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_async_test_all.F90/acc_async_test_all.F904 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_async_test_all.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_async_test_all.F90, Line = 24, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0097 seconds\nCray Fortran : 254 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_28302/acc_async_test_all_1.o: in function `test1_':\n/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_async_test_all.F90:20: undefined reference to `acc_async_test_all'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_28302/acc_async_test_all_1.o: in function `test2_':\n/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_async_test_all.F90:81: undefined reference to `acc_async_test_all'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_28302/acc_async_test_all_1.o:(.data+0x0): undefined reference to `openacc_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_28302/acc_async_test_all_1.o:(.data+0x40): undefined reference to `openacc_'\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.31565046310424805
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_async_test_all.F90/acc_async_test_all.F905 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_async_test_all.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_async_test_all.F90, Line = 85, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0097 seconds\nCray Fortran : 254 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_28316/acc_async_test_all_1.o: in function `test2_':\n/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_async_test_all.F90:81: undefined reference to `acc_async_test_all'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_28316/acc_async_test_all_1.o: in function `test3_':\n/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_async_test_all.F90:146: undefined reference to `acc_set_default_async_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_async_test_all.F90:159: undefined reference to `acc_async_test_all'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_28316/acc_async_test_all_1.o:(.data+0x0): undefined reference to `openacc_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_28316/acc_async_test_all_1.o:(.data+0x40): undefined reference to `openacc_'\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.3156423680484295
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT2 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_async_test_all.F90/acc_async_test_all.F906 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_async_test_all.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_async_test_all.F90, Line = 24, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0093 seconds\nCray Fortran : 254 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_28332/acc_async_test_all_1.o: in function `test1_':\n/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_async_test_all.F90:20: undefined reference to `acc_async_test_all'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_28332/acc_async_test_all_1.o: in function `test3_':\n/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_async_test_all.F90:146: undefined reference to `acc_set_default_async_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_async_test_all.F90:159: undefined reference to `acc_async_test_all'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_28332/acc_async_test_all_1.o:(.data+0x0): undefined reference to `openacc_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_28332/acc_async_test_all_1.o:(.data+0x40): undefined reference to `openacc_'\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.3156577982008457
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_async_test_all.F90/acc_async_test_all.F907 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_async_test_all.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_async_test_all.F90, Line = 85, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0098 seconds\nCray Fortran : 254 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_28347/acc_async_test_all_1.o: in function `test2_':\n/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_async_test_all.F90:81: undefined reference to `acc_async_test_all'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_28347/acc_async_test_all_1.o: in function `test3_':\n/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_async_test_all.F90:146: undefined reference to `acc_set_default_async_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_async_test_all.F90:159: undefined reference to `acc_async_test_all'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_28347/acc_async_test_all_1.o:(.data+0x0): undefined reference to `openacc_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_28347/acc_async_test_all_1.o:(.data+0x40): undefined reference to `openacc_'\n",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.3156182449311018
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_copyin.F90": [
            {
                "compilation": {
                    "command": "ftn -DT1 -DT2 -DT3 -DT4 -DT5 -DT6 -DT7 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_copyin.F90/acc_copyin.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin.F90",
                    "config": 1,
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.26586239598691463
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.11531811207532883,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT2 -DT3 -DT4 -DT5 -DT6 -DT7 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_copyin.F90/acc_copyin.F901 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin.F90, Line = 23, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0063 seconds\nCray Fortran : 488 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_28379/acc_copyin_1.o: in function `test1_':\n/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin.F90:20: undefined reference to `acc_copyin_1_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin.F90:21: undefined reference to `acc_copyin_1_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_28379/acc_copyin_1.o:(.data+0x0): undefined reference to `openacc_'\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.26555225625634193
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT1 -DT3 -DT4 -DT5 -DT6 -DT7 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_copyin.F90/acc_copyin.F902 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin.F90, Line = 70, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0064 seconds\nCray Fortran : 488 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_28394/acc_copyin_1.o: in function `test2_':\n/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin.F90:67: undefined reference to `acc_copyin_1_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin.F90:68: undefined reference to `acc_copyin_1_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin.F90:79: undefined reference to `acc_copyout_1_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin.F90:80: undefined reference to `acc_copyout_1_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_28394/acc_copyin_1.o:(.data+0x0): undefined reference to `openacc_'\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.26582205668091774
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT1 -DT2 -DT4 -DT5 -DT6 -DT7 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_copyin.F90/acc_copyin.F903 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin.F90, Line = 108, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0067 seconds\nCray Fortran : 488 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_28408/acc_copyin_1.o:(.data+0x0): undefined reference to `openacc_'\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.2160287518054247
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT1 -DT2 -DT3 -DT5 -DT6 -DT7 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_copyin.F90/acc_copyin.F904 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST4, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin.F90, Line = 186, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0065 seconds\nCray Fortran : 488 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_28422/acc_copyin_1.o: in function `test4_':\n/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin.F90:183: undefined reference to `acc_pcopyin_1_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin.F90:184: undefined reference to `acc_pcopyin_1_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_28422/acc_copyin_1.o:(.data+0x0): undefined reference to `openacc_'\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.2657695207744837
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT1 -DT2 -DT3 -DT4 -DT6 -DT7 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_copyin.F90/acc_copyin.F905 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST5, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin.F90, Line = 234, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0060 seconds\nCray Fortran : 488 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_28436/acc_copyin_1.o: in function `test5_':\n/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin.F90:231: undefined reference to `acc_p_or_copyin_1_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin.F90:232: undefined reference to `acc_p_or_copyin_1_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_28436/acc_copyin_1.o:(.data+0x0): undefined reference to `openacc_'\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.2655629478394985
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT1 -DT2 -DT3 -DT4 -DT5 -DT7 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_copyin.F90/acc_copyin.F906 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST6, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin.F90, Line = 284, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0066 seconds\nCray Fortran : 488 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_28450/acc_copyin_1.o: in function `test6_':\n/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin.F90:279: undefined reference to `acc_copyin_1_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin.F90:280: undefined reference to `acc_copyin_1_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin.F90:281: undefined reference to `acc_copyin_1_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin.F90:282: undefined reference to `acc_copyin_1_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_28450/acc_copyin_1.o:(.data+0x0): undefined reference to `openacc_'\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.26557924784719944
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT1 -DT2 -DT3 -DT4 -DT5 -DT6 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_copyin.F90/acc_copyin.F907 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST7, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin.F90, Line = 322, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0062 seconds\nCray Fortran : 488 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_28465/acc_copyin_1.o:(.data+0x0): undefined reference to `openacc_'\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.21592547744512558
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT1 -DT2 -DT3 -DT4 -DT5 -DT6 -DT7 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_copyin.F90/acc_copyin.F908 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin.F90",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.21551095880568027
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009426672011613846,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_copyin_async.F90": [
            {
                "compilation": {
                    "command": "ftn -DT1 -DT2 -DT3 -DT4 -DT5 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_copyin_async.F90/acc_copyin_async.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin_async.F90",
                    "config": 1,
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.21592932380735874
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009094752371311188,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT2 -DT3 -DT4 -DT5 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_copyin_async.F90/acc_copyin_async.F901 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin_async.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin_async.F90, Line = 27, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0066 seconds\nCray Fortran : 365 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_28514/acc_copyin_async_1.o: in function `test1_':\n/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin_async.F90:24: undefined reference to `acc_copyin_async_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin_async.F90:25: undefined reference to `acc_copyin_async_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_28514/acc_copyin_async_1.o:(.data+0x0): undefined reference to `openacc_'\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.2654699310660362
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT1 -DT3 -DT4 -DT5 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_copyin_async.F90/acc_copyin_async.F902 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin_async.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin_async.F90, Line = 84, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0066 seconds\nCray Fortran : 365 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_28528/acc_copyin_async_1.o: in function `test2_':\n/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin_async.F90:81: undefined reference to `acc_copyin_async_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin_async.F90:82: undefined reference to `acc_copyin_async_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin_async.F90:82: undefined reference to `acc_async_test_all'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_28528/acc_copyin_async_1.o:(.data+0x0): undefined reference to `openacc_'\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.26550691202282906
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT1 -DT2 -DT4 -DT5 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_copyin_async.F90/acc_copyin_async.F903 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin_async.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin_async.F90, Line = 136, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0058 seconds\nCray Fortran : 365 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_28542/acc_copyin_async_1.o: in function `test3_':\n/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin_async.F90:133: undefined reference to `acc_copyin_async_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin_async.F90:134: undefined reference to `acc_copyin_async_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_28542/acc_copyin_async_1.o:(.data+0x0): undefined reference to `openacc_'\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.26558089070022106
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT1 -DT2 -DT3 -DT5 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_copyin_async.F90/acc_copyin_async.F904 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin_async.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST4, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin_async.F90, Line = 185, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0065 seconds\nCray Fortran : 365 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_28556/acc_copyin_async_1.o: in function `test4_':\n/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin_async.F90:193: undefined reference to `acc_copyin_async_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_28556/acc_copyin_async_1.o:(.data+0x0): undefined reference to `openacc_'\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.2660786993801594
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT1 -DT2 -DT3 -DT4 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_copyin_async.F90/acc_copyin_async.F905 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin_async.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST5, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin_async.F90, Line = 250, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0066 seconds\nCray Fortran : 365 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_28570/acc_copyin_async_1.o: in function `test5_':\n/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin_async.F90:244: undefined reference to `acc_copyin_async_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin_async.F90:245: undefined reference to `acc_copyin_async_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_28570/acc_copyin_async_1.o:(.data+0x0): undefined reference to `openacc_'\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.2656038533896208
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT1 -DT2 -DT3 -DT4 -DT5 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_copyin_async.F90/acc_copyin_async.F906 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin_async.F90",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.21559675596654415
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009216411039233208,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_copyin_async_with_len.F90": [
            {
                "compilation": {
                    "command": "ftn -DT1 -DT2 -DT3 -DT4 -DT5 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_copyin_async_with_len.F90/acc_copyin_async_with_len.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin_async_with_len.F90",
                    "config": 1,
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2156965248286724
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.00939488410949707,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT2 -DT3 -DT4 -DT5 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_copyin_async_with_len.F90/acc_copyin_async_with_len.F901 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin_async_with_len.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin_async_with_len.F90, Line = 27, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0068 seconds\nCray Fortran : 361 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_28620/acc_copyin_async_with_len_1.o: in function `test1_':\n/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin_async_with_len.F90:24: undefined reference to `acc_copyin_async_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin_async_with_len.F90:25: undefined reference to `acc_copyin_async_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_28620/acc_copyin_async_with_len_1.o:(.data+0x0): undefined reference to `openacc_'\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.26551733165979385
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT1 -DT3 -DT4 -DT5 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_copyin_async_with_len.F90/acc_copyin_async_with_len.F902 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin_async_with_len.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin_async_with_len.F90, Line = 85, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0065 seconds\nCray Fortran : 361 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_28634/acc_copyin_async_with_len_1.o: in function `test2_':\n/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin_async_with_len.F90:82: undefined reference to `acc_copyin_async_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin_async_with_len.F90:83: undefined reference to `acc_copyin_async_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin_async_with_len.F90:83: undefined reference to `acc_async_test_all'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_28634/acc_copyin_async_with_len_1.o:(.data+0x0): undefined reference to `openacc_'\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.26551787555217743
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT1 -DT2 -DT4 -DT5 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_copyin_async_with_len.F90/acc_copyin_async_with_len.F903 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin_async_with_len.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin_async_with_len.F90, Line = 137, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0064 seconds\nCray Fortran : 361 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_28648/acc_copyin_async_with_len_1.o: in function `test3_':\n/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin_async_with_len.F90:134: undefined reference to `acc_copyin_async_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin_async_with_len.F90:135: undefined reference to `acc_copyin_async_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_28648/acc_copyin_async_with_len_1.o:(.data+0x0): undefined reference to `openacc_'\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.26562285237014294
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT1 -DT2 -DT3 -DT5 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_copyin_async_with_len.F90/acc_copyin_async_with_len.F904 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin_async_with_len.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST4, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin_async_with_len.F90, Line = 186, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0065 seconds\nCray Fortran : 361 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_28662/acc_copyin_async_with_len_1.o: in function `test4_':\n/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin_async_with_len.F90:194: undefined reference to `acc_copyin_async_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_28662/acc_copyin_async_with_len_1.o:(.data+0x0): undefined reference to `openacc_'\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.26562597788870335
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT1 -DT2 -DT3 -DT4 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_copyin_async_with_len.F90/acc_copyin_async_with_len.F905 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin_async_with_len.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST5, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin_async_with_len.F90, Line = 246, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0064 seconds\nCray Fortran : 361 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_28676/acc_copyin_async_with_len_1.o: in function `test5_':\n/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin_async_with_len.F90:243: undefined reference to `acc_copyin_async_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin_async_with_len.F90:244: undefined reference to `acc_copyin_async_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_28676/acc_copyin_async_with_len_1.o:(.data+0x0): undefined reference to `openacc_'\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.2656900454312563
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT1 -DT2 -DT3 -DT4 -DT5 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_copyin_async_with_len.F90/acc_copyin_async_with_len.F906 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin_async_with_len.F90",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.21552353724837303
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009181404486298561,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_copyin_with_len.F90": [
            {
                "compilation": {
                    "command": "ftn -DT1 -DT2 -DT3 -DT4 -DT5 -DT6 -DT7 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_copyin_with_len.F90/acc_copyin_with_len.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin_with_len.F90",
                    "config": 1,
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.21590769477188587
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009193779900670052,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT2 -DT3 -DT4 -DT5 -DT6 -DT7 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_copyin_with_len.F90/acc_copyin_with_len.F901 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin_with_len.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin_with_len.F90, Line = 23, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0066 seconds\nCray Fortran : 490 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_28726/acc_copyin_with_len_1.o: in function `test1_':\n/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin_with_len.F90:21: undefined reference to `acc_copyin_2_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin_with_len.F90:22: undefined reference to `acc_copyin_2_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin_with_len.F90:32: undefined reference to `acc_copyout_1_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin_with_len.F90:33: undefined reference to `acc_copyout_1_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_28726/acc_copyin_with_len_1.o:(.data+0x0): undefined reference to `openacc_'\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.2657159846276045
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT1 -DT3 -DT4 -DT5 -DT6 -DT7 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_copyin_with_len.F90/acc_copyin_with_len.F902 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin_with_len.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin_with_len.F90, Line = 71, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0059 seconds\nCray Fortran : 490 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_28740/acc_copyin_with_len_1.o: in function `test2_':\n/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin_with_len.F90:69: undefined reference to `acc_copyin_2_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin_with_len.F90:70: undefined reference to `acc_copyin_2_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_28740/acc_copyin_with_len_1.o:(.data+0x0): undefined reference to `openacc_'\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.26626599207520485
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT1 -DT2 -DT4 -DT5 -DT6 -DT7 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_copyin_with_len.F90/acc_copyin_with_len.F903 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin_with_len.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin_with_len.F90, Line = 109, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0068 seconds\nCray Fortran : 490 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_28754/acc_copyin_with_len_1.o:(.data+0x0): undefined reference to `openacc_'\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.26556478440761566
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT1 -DT2 -DT3 -DT5 -DT6 -DT7 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_copyin_with_len.F90/acc_copyin_with_len.F904 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin_with_len.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST4, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin_with_len.F90, Line = 188, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0061 seconds\nCray Fortran : 490 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_28768/acc_copyin_with_len_1.o: in function `test4_':\n/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin_with_len.F90:185: undefined reference to `acc_pcopyin_2_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin_with_len.F90:186: undefined reference to `acc_pcopyin_2_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_28768/acc_copyin_with_len_1.o:(.data+0x0): undefined reference to `openacc_'\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.2655917312949896
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT1 -DT2 -DT3 -DT4 -DT6 -DT7 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_copyin_with_len.F90/acc_copyin_with_len.F905 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin_with_len.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST5, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin_with_len.F90, Line = 236, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0065 seconds\nCray Fortran : 490 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_28782/acc_copyin_with_len_1.o: in function `test5_':\n/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin_with_len.F90:233: undefined reference to `acc_p_or_copyin_2_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin_with_len.F90:234: undefined reference to `acc_p_or_copyin_2_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_28782/acc_copyin_with_len_1.o:(.data+0x0): undefined reference to `openacc_'\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.26560093089938164
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT1 -DT2 -DT3 -DT4 -DT5 -DT7 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_copyin_with_len.F90/acc_copyin_with_len.F906 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin_with_len.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST6, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin_with_len.F90, Line = 286, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0060 seconds\nCray Fortran : 490 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_28796/acc_copyin_with_len_1.o: in function `test6_':\n/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin_with_len.F90:281: undefined reference to `acc_copyin_2_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin_with_len.F90:282: undefined reference to `acc_copyin_2_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin_with_len.F90:283: undefined reference to `acc_copyin_2_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin_with_len.F90:284: undefined reference to `acc_copyin_2_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_28796/acc_copyin_with_len_1.o:(.data+0x0): undefined reference to `openacc_'\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.26566650345921516
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT1 -DT2 -DT3 -DT4 -DT5 -DT6 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_copyin_with_len.F90/acc_copyin_with_len.F907 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin_with_len.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST7, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin_with_len.F90, Line = 325, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0063 seconds\nCray Fortran : 490 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_28810/acc_copyin_with_len_1.o:(.data+0x0): undefined reference to `openacc_'\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.21558182686567307
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT1 -DT2 -DT3 -DT4 -DT5 -DT6 -DT7 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_copyin_with_len.F90/acc_copyin_with_len.F908 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin_with_len.F90",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2155611291527748
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.00917050614953041,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_copyout.F90": [
            {
                "compilation": {
                    "command": "ftn -DT1 -DT2 -DT3 -DT4 -DT5 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_copyout.F90/acc_copyout.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyout.F90",
                    "config": 1,
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.21570555679500103
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009369727224111557,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT2 -DT3 -DT4 -DT5 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_copyout.F90/acc_copyout.F901 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyout.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyout.F90, Line = 23, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0064 seconds\nCray Fortran : 338 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_28860/acc_copyout_1.o: in function `test1_':\n/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyout.F90:21: undefined reference to `acc_create_1_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyout.F90:32: undefined reference to `acc_copyout_1_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_28860/acc_copyout_1.o:(.data+0x0): undefined reference to `openacc_'\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.2654308844357729
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT1 -DT3 -DT4 -DT5 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_copyout.F90/acc_copyout.F902 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyout.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyout.F90, Line = 67, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0064 seconds\nCray Fortran : 338 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_28874/acc_copyout_1.o: in function `test2_':\n/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyout.F90:78: undefined reference to `acc_copyout_1_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_28874/acc_copyout_1.o:(.data+0x0): undefined reference to `openacc_'\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.265565887093544
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT1 -DT2 -DT4 -DT5 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_copyout.F90/acc_copyout.F903 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyout.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyout.F90, Line = 106, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0064 seconds\nCray Fortran : 338 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_28888/acc_copyout_1.o:(.data+0x0): undefined reference to `openacc_'\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.21561084128916264
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT1 -DT2 -DT3 -DT5 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_copyout.F90/acc_copyout.F904 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyout.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST4, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyout.F90, Line = 166, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0064 seconds\nCray Fortran : 338 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_28902/acc_copyout_1.o: in function `test4_':\n/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyout.F90:177: undefined reference to `acc_copyout_1_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_28902/acc_copyout_1.o:(.data+0x0): undefined reference to `openacc_'\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.26591979525983334
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT1 -DT2 -DT3 -DT4 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_copyout.F90/acc_copyout.F905 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyout.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST5, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyout.F90, Line = 205, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0064 seconds\nCray Fortran : 338 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_28916/acc_copyout_1.o:(.data+0x0): undefined reference to `openacc_'\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.2655409201979637
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT1 -DT2 -DT3 -DT4 -DT5 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_copyout.F90/acc_copyout.F906 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyout.F90",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2155920471996069
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009100355207920074,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_copyout_async.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_copyout_async.F90/acc_copyout_async.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyout_async.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyout_async.F90, Line = 25, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0065 seconds\nCray Fortran : 102 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_28948/acc_copyout_async_1.o: in function `test1_':\n/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyout_async.F90:40: undefined reference to `acc_copyout_async_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyout_async.F90:41: undefined reference to `acc_copyout_async_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_28948/acc_copyout_async_1.o:(.data+0x0): undefined reference to `openacc_'\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.26574937626719475
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_copyout_async.F90/acc_copyout_async.F901 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyout_async.F90",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.21546791307628155
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009295949712395668,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_copyout_async_with_len.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_copyout_async_with_len.F90/acc_copyout_async_with_len.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyout_async_with_len.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyout_async_with_len.F90, Line = 25, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0065 seconds\nCray Fortran : 102 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_28981/acc_copyout_async_with_len_1.o: in function `test1_':\n/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyout_async_with_len.F90:40: undefined reference to `acc_copyout_async_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyout_async_with_len.F90:41: undefined reference to `acc_copyout_async_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_28981/acc_copyout_async_with_len_1.o:(.data+0x0): undefined reference to `openacc_'\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.26582564786076546
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_copyout_async_with_len.F90/acc_copyout_async_with_len.F901 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyout_async_with_len.F90",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.21545031294226646
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009145841002464294,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_copyout_finalize.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_copyout_finalize.F90/acc_copyout_finalize.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyout_finalize.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyout_finalize.F90, Line = 21, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0064 seconds\nCray Fortran : 92 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_29013/acc_copyout_finalize_1.o: in function `test1_':\n/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyout_finalize.F90:33: undefined reference to `acc_copyout_finalize_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_29013/acc_copyout_finalize_1.o:(.data+0x0): undefined reference to `openacc_'\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.26569333113729954
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_copyout_finalize.F90/acc_copyout_finalize.F901 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyout_finalize.F90",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.21570776216685772
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.00963028147816658,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_copyout_finalize_async.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_copyout_finalize_async.F90/acc_copyout_finalize_async.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyout_finalize_async.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyout_finalize_async.F90, Line = 25, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0059 seconds\nCray Fortran : 105 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_29045/acc_copyout_finalize_async_1.o: in function `test1_':\n/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyout_finalize_async.F90:41: undefined reference to `acc_copyout_finalize_async_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyout_finalize_async.F90:42: undefined reference to `acc_copyout_finalize_async_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_29045/acc_copyout_finalize_async_1.o:(.data+0x0): undefined reference to `openacc_'\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.2656725961714983
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_copyout_finalize_async.F90/acc_copyout_finalize_async.F901 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyout_finalize_async.F90",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.21544913947582245
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.00920216552913189,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_copyout_finalize_async_with_len.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_copyout_finalize_async_with_len.F90/acc_copyout_finalize_async_with_len.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyout_finalize_async_with_len.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyout_finalize_async_with_len.F90, Line = 25, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0066 seconds\nCray Fortran : 105 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_29077/acc_copyout_finalize_async_with_len_1.o: in function `test1_':\n/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyout_finalize_async_with_len.F90:41: undefined reference to `acc_copyout_finalize_async_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyout_finalize_async_with_len.F90:42: undefined reference to `acc_copyout_finalize_async_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_29077/acc_copyout_finalize_async_with_len_1.o:(.data+0x0): undefined reference to `openacc_'\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.2657352611422539
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_copyout_finalize_async_with_len.F90/acc_copyout_finalize_async_with_len.F901 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyout_finalize_async_with_len.F90",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.21577611938118935
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009344227612018585,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_copyout_finalize_with_len.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_copyout_finalize_with_len.F90/acc_copyout_finalize_with_len.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyout_finalize_with_len.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyout_finalize_with_len.F90, Line = 22, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0062 seconds\nCray Fortran : 93 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_29110/acc_copyout_finalize_with_len_1.o: in function `test1_':\n/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyout_finalize_with_len.F90:34: undefined reference to `acc_copyout_finalize_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_29110/acc_copyout_finalize_with_len_1.o:(.data+0x0): undefined reference to `openacc_'\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.2657745350152254
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_copyout_finalize_with_len.F90/acc_copyout_finalize_with_len.F901 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyout_finalize_with_len.F90",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.21555529721081257
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.00929991900920868,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_copyout_with_len.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_copyout_with_len.F90/acc_copyout_with_len.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyout_with_len.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyout_with_len.F90, Line = 23, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0091 seconds\nCray Fortran : 157 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_29142/acc_copyout_with_len_1.o: in function `test1_':\n/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyout_with_len.F90:21: undefined reference to `acc_create_1_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyout_with_len.F90:32: undefined reference to `acc_copyout_2_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_29142/acc_copyout_with_len_1.o: in function `test2_':\n/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyout_with_len.F90:78: undefined reference to `acc_copyout_2_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_29142/acc_copyout_with_len_1.o:(.data+0x0): undefined reference to `openacc_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_29142/acc_copyout_with_len_1.o:(.data+0x40): undefined reference to `openacc_'\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.26572350040078163
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_copyout_with_len.F90/acc_copyout_with_len.F901 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyout_with_len.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyout_with_len.F90, Line = 67, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0063 seconds\nCray Fortran : 148 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_29156/acc_copyout_with_len_1.o: in function `test2_':\n/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyout_with_len.F90:78: undefined reference to `acc_copyout_2_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_29156/acc_copyout_with_len_1.o:(.data+0x0): undefined reference to `openacc_'\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.2655750438570976
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT2 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_copyout_with_len.F90/acc_copyout_with_len.F902 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyout_with_len.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyout_with_len.F90, Line = 23, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0058 seconds\nCray Fortran : 148 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_29170/acc_copyout_with_len_1.o: in function `test1_':\n/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyout_with_len.F90:21: undefined reference to `acc_create_1_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyout_with_len.F90:32: undefined reference to `acc_copyout_2_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_29170/acc_copyout_with_len_1.o:(.data+0x0): undefined reference to `openacc_'\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.26567186415195465
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_copyout_with_len.F90/acc_copyout_with_len.F903 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyout_with_len.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyout_with_len.F90, Line = 67, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0062 seconds\nCray Fortran : 148 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_29184/acc_copyout_with_len_1.o: in function `test2_':\n/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyout_with_len.F90:78: undefined reference to `acc_copyout_2_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_29184/acc_copyout_with_len_1.o:(.data+0x0): undefined reference to `openacc_'\n",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.2657106574624777
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_create.F90": [
            {
                "compilation": {
                    "command": "ftn -DT1 -DT2 -DT3 -DT4 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_create.F90/acc_create.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_create.F90",
                    "config": 1,
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.21597883850336075
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009405232965946198,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT2 -DT3 -DT4 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_create.F90/acc_create.F901 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_create.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_create.F90, Line = 24, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0063 seconds\nCray Fortran : 266 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_29218/acc_create_1.o: in function `test1_':\n/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_create.F90:22: undefined reference to `acc_create_1_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_create.F90:33: undefined reference to `acc_copyout_1_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_29218/acc_create_1.o:(.data+0x0): undefined reference to `openacc_'\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.2655507083982229
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT1 -DT3 -DT4 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_create.F90/acc_create.F902 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_create.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_create.F90, Line = 70, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0065 seconds\nCray Fortran : 266 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_29233/acc_create_1.o: in function `test2_':\n/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_create.F90:68: undefined reference to `acc_create_1_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_29233/acc_create_1.o:(.data+0x0): undefined reference to `openacc_'\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.2656465955078602
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT1 -DT2 -DT4 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_create.F90/acc_create.F903 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_create.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_create.F90, Line = 116, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0064 seconds\nCray Fortran : 266 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_29247/acc_create_1.o: in function `test3_':\n/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_create.F90:114: undefined reference to `acc_pcreate_1_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_29247/acc_create_1.o:(.data+0x0): undefined reference to `openacc_'\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.2658727578818798
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT1 -DT2 -DT3 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_create.F90/acc_create.F904 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_create.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST4, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_create.F90, Line = 162, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0060 seconds\nCray Fortran : 266 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_29261/acc_create_1.o: in function `test4_':\n/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_create.F90:160: undefined reference to `acc_p_or_create_1_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_29261/acc_create_1.o:(.data+0x0): undefined reference to `openacc_'\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.2656378298997879
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT1 -DT2 -DT3 -DT4 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_create.F90/acc_create.F905 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_create.F90",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.21591268479824066
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.00942695327103138,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_create_async.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_create_async.F90/acc_create_async.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_create_async.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_create_async.F90, Line = 25, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0064 seconds\nCray Fortran : 106 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_29293/acc_create_async_1.o: in function `test1_':\n/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_create_async.F90:26: undefined reference to `acc_create_async_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_create_async.F90:27: undefined reference to `acc_create_async_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_29293/acc_create_async_1.o:(.data+0x0): undefined reference to `openacc_'\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.2658643629401922
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_create_async.F90/acc_create_async.F901 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_create_async.F90",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2155995201319456
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009466975927352905,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_create_async_with_len.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_create_async_with_len.F90/acc_create_async_with_len.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_create_async_with_len.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_create_async_with_len.F90, Line = 25, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0066 seconds\nCray Fortran : 105 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_29325/acc_create_async_with_len_1.o: in function `test1_':\n/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_create_async_with_len.F90:26: undefined reference to `acc_create_async_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_create_async_with_len.F90:27: undefined reference to `acc_create_async_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_29325/acc_create_async_with_len_1.o:(.data+0x0): undefined reference to `openacc_'\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.2657430563122034
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_create_async_with_len.F90/acc_create_async_with_len.F901 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_create_async_with_len.F90",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2154593374580145
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009138273075222969,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_create_with_len.F90": [
            {
                "compilation": {
                    "command": "ftn -DT1 -DT2 -DT3 -DT4 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_create_with_len.F90/acc_create_with_len.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_create_with_len.F90",
                    "config": 1,
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.21567457914352417
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009302662685513496,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT2 -DT3 -DT4 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_create_with_len.F90/acc_create_with_len.F901 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_create_with_len.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_create_with_len.F90, Line = 24, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0059 seconds\nCray Fortran : 265 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_29375/acc_create_with_len_1.o: in function `test1_':\n/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_create_with_len.F90:22: undefined reference to `acc_create_2_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_create_with_len.F90:33: undefined reference to `acc_copyout_1_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_29375/acc_create_with_len_1.o:(.data+0x0): undefined reference to `openacc_'\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.2655627802014351
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT1 -DT3 -DT4 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_create_with_len.F90/acc_create_with_len.F902 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_create_with_len.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_create_with_len.F90, Line = 70, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0063 seconds\nCray Fortran : 265 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_29389/acc_create_with_len_1.o: in function `test2_':\n/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_create_with_len.F90:68: undefined reference to `acc_create_2_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_29389/acc_create_with_len_1.o:(.data+0x0): undefined reference to `openacc_'\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.26557386107742786
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT1 -DT2 -DT4 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_create_with_len.F90/acc_create_with_len.F903 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_create_with_len.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_create_with_len.F90, Line = 116, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\n\nftn-113 ftn: ERROR TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_create_with_len.F90, Line = 136, Column = 11 \n  IMPLICIT NONE is specified in the local scope, therefore an explicit type must be specified for data object \"TEST4\".\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0056 seconds\nCray Fortran : 265 source lines\nCray Fortran : 1 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.1154660265892744
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT1 -DT2 -DT3 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_create_with_len.F90/acc_create_with_len.F904 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_create_with_len.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST4, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_create_with_len.F90, Line = 162, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0065 seconds\nCray Fortran : 265 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_29414/acc_create_with_len_1.o: in function `test4_':\n/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_create_with_len.F90:160: undefined reference to `acc_p_or_create_2_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_29414/acc_create_with_len_1.o:(.data+0x0): undefined reference to `openacc_'\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.26563042774796486
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT1 -DT2 -DT3 -DT4 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_create_with_len.F90/acc_create_with_len.F905 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_create_with_len.F90",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.21553500927984715
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009216822683811188,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_delete.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_delete.F90/acc_delete.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete.F90, Line = 22, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0096 seconds\nCray Fortran : 161 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_29446/acc_delete_1.o: in function `test1_':\n/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete.F90:33: undefined reference to `acc_delete_1_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete.F90:34: undefined reference to `acc_delete_1_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_29446/acc_delete_1.o: in function `test2_':\n/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete.F90:69: undefined reference to `acc_copyin_1_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete.F90:70: undefined reference to `acc_copyin_1_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete.F90:81: undefined reference to `acc_delete_1_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete.F90:82: undefined reference to `acc_delete_1_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_29446/acc_delete_1.o:(.data+0x0): undefined reference to `openacc_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_29446/acc_delete_1.o:(.data+0x40): undefined reference to `openacc_'\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.3158069849014282
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_delete.F90/acc_delete.F901 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete.F90, Line = 72, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0064 seconds\nCray Fortran : 152 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_29460/acc_delete_1.o: in function `test2_':\n/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete.F90:69: undefined reference to `acc_copyin_1_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete.F90:70: undefined reference to `acc_copyin_1_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete.F90:81: undefined reference to `acc_delete_1_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete.F90:82: undefined reference to `acc_delete_1_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_29460/acc_delete_1.o:(.data+0x0): undefined reference to `openacc_'\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.2656880021095276
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT2 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_delete.F90/acc_delete.F902 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete.F90, Line = 22, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0059 seconds\nCray Fortran : 152 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_29474/acc_delete_1.o: in function `test1_':\n/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete.F90:33: undefined reference to `acc_delete_1_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete.F90:34: undefined reference to `acc_delete_1_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_29474/acc_delete_1.o:(.data+0x0): undefined reference to `openacc_'\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.2656262777745724
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_delete.F90/acc_delete.F903 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete.F90, Line = 72, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0063 seconds\nCray Fortran : 152 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_29489/acc_delete_1.o: in function `test2_':\n/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete.F90:69: undefined reference to `acc_copyin_1_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete.F90:70: undefined reference to `acc_copyin_1_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete.F90:81: undefined reference to `acc_delete_1_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete.F90:82: undefined reference to `acc_delete_1_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_29489/acc_delete_1.o:(.data+0x0): undefined reference to `openacc_'\n",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.2656235024333
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_delete_async.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_delete_async.F90/acc_delete_async.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete_async.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete_async.F90, Line = 24, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0096 seconds\nCray Fortran : 183 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_29504/acc_delete_async_1.o: in function `test1_':\n/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete_async.F90:39: undefined reference to `acc_delete_async_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete_async.F90:40: undefined reference to `acc_delete_async_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete_async.F90:41: undefined reference to `acc_delete_async_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete_async.F90:42: undefined reference to `acc_delete_async_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_29504/acc_delete_async_1.o:(.data+0x0): undefined reference to `openacc_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_29504/acc_delete_async_1.o:(.data+0x40): undefined reference to `openacc_'\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.26585601828992367
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_delete_async.F90/acc_delete_async.F901 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete_async.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete_async.F90, Line = 74, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0062 seconds\nCray Fortran : 174 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_29518/acc_delete_async_1.o:(.data+0x0): undefined reference to `openacc_'\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.2155976165086031
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT2 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_delete_async.F90/acc_delete_async.F902 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete_async.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete_async.F90, Line = 24, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0066 seconds\nCray Fortran : 174 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_29532/acc_delete_async_1.o: in function `test1_':\n/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete_async.F90:39: undefined reference to `acc_delete_async_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete_async.F90:40: undefined reference to `acc_delete_async_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete_async.F90:41: undefined reference to `acc_delete_async_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete_async.F90:42: undefined reference to `acc_delete_async_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_29532/acc_delete_async_1.o:(.data+0x0): undefined reference to `openacc_'\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.2656529787927866
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_delete_async.F90/acc_delete_async.F903 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete_async.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete_async.F90, Line = 74, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0058 seconds\nCray Fortran : 174 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_29546/acc_delete_async_1.o:(.data+0x0): undefined reference to `openacc_'\n",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.21555650979280472
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_delete_async_with_len.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_delete_async_with_len.F90/acc_delete_async_with_len.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete_async_with_len.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete_async_with_len.F90, Line = 25, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0096 seconds\nCray Fortran : 183 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_29561/acc_delete_async_with_len_1.o: in function `test1_':\n/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete_async_with_len.F90:40: undefined reference to `acc_delete_async_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete_async_with_len.F90:41: undefined reference to `acc_delete_async_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete_async_with_len.F90:42: undefined reference to `acc_delete_async_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete_async_with_len.F90:43: undefined reference to `acc_delete_async_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_29561/acc_delete_async_with_len_1.o:(.data+0x0): undefined reference to `openacc_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_29561/acc_delete_async_with_len_1.o:(.data+0x40): undefined reference to `openacc_'\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.26592510379850864
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_delete_async_with_len.F90/acc_delete_async_with_len.F901 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete_async_with_len.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete_async_with_len.F90, Line = 75, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0058 seconds\nCray Fortran : 174 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_29575/acc_delete_async_with_len_1.o:(.data+0x0): undefined reference to `openacc_'\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.21569718420505524
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT2 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_delete_async_with_len.F90/acc_delete_async_with_len.F902 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete_async_with_len.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete_async_with_len.F90, Line = 25, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0066 seconds\nCray Fortran : 174 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_29589/acc_delete_async_with_len_1.o: in function `test1_':\n/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete_async_with_len.F90:40: undefined reference to `acc_delete_async_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete_async_with_len.F90:41: undefined reference to `acc_delete_async_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete_async_with_len.F90:42: undefined reference to `acc_delete_async_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete_async_with_len.F90:43: undefined reference to `acc_delete_async_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_29589/acc_delete_async_with_len_1.o:(.data+0x0): undefined reference to `openacc_'\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.2656549718230963
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_delete_async_with_len.F90/acc_delete_async_with_len.F903 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete_async_with_len.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete_async_with_len.F90, Line = 75, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0059 seconds\nCray Fortran : 174 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_29603/acc_delete_async_with_len_1.o:(.data+0x0): undefined reference to `openacc_'\n",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.2155227791517973
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_delete_finalize.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_delete_finalize.F90/acc_delete_finalize.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete_finalize.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete_finalize.F90, Line = 21, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0094 seconds\nCray Fortran : 157 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_29619/acc_delete_finalize_1.o: in function `test1_':\n/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete_finalize.F90:33: undefined reference to `acc_delete_finalize_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete_finalize.F90:34: undefined reference to `acc_delete_finalize_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_29619/acc_delete_finalize_1.o: in function `test2_':\n/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete_finalize.F90:63: undefined reference to `acc_copyin_1_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete_finalize.F90:64: undefined reference to `acc_copyin_1_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete_finalize.F90:65: undefined reference to `acc_copyin_1_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete_finalize.F90:66: undefined reference to `acc_copyin_1_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete_finalize.F90:77: undefined reference to `acc_delete_finalize_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete_finalize.F90:78: undefined reference to `acc_delete_finalize_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_29619/acc_delete_finalize_1.o:(.data+0x0): undefined reference to `openacc_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_29619/acc_delete_finalize_1.o:(.data+0x40): undefined reference to `openacc_'\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.31598789244890213
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_delete_finalize.F90/acc_delete_finalize.F901 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete_finalize.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete_finalize.F90, Line = 68, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0064 seconds\nCray Fortran : 148 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_29633/acc_delete_finalize_1.o: in function `test2_':\n/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete_finalize.F90:63: undefined reference to `acc_copyin_1_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete_finalize.F90:64: undefined reference to `acc_copyin_1_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete_finalize.F90:65: undefined reference to `acc_copyin_1_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete_finalize.F90:66: undefined reference to `acc_copyin_1_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete_finalize.F90:77: undefined reference to `acc_delete_finalize_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete_finalize.F90:78: undefined reference to `acc_delete_finalize_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_29633/acc_delete_finalize_1.o:(.data+0x0): undefined reference to `openacc_'\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.26577206887304783
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT2 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_delete_finalize.F90/acc_delete_finalize.F902 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete_finalize.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete_finalize.F90, Line = 21, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0062 seconds\nCray Fortran : 148 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_29647/acc_delete_finalize_1.o: in function `test1_':\n/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete_finalize.F90:33: undefined reference to `acc_delete_finalize_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete_finalize.F90:34: undefined reference to `acc_delete_finalize_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_29647/acc_delete_finalize_1.o:(.data+0x0): undefined reference to `openacc_'\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.26561895571649075
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_delete_finalize.F90/acc_delete_finalize.F903 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete_finalize.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete_finalize.F90, Line = 68, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0063 seconds\nCray Fortran : 148 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_29661/acc_delete_finalize_1.o: in function `test2_':\n/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete_finalize.F90:63: undefined reference to `acc_copyin_1_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete_finalize.F90:64: undefined reference to `acc_copyin_1_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete_finalize.F90:65: undefined reference to `acc_copyin_1_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete_finalize.F90:66: undefined reference to `acc_copyin_1_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete_finalize.F90:77: undefined reference to `acc_delete_finalize_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete_finalize.F90:78: undefined reference to `acc_delete_finalize_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_29661/acc_delete_finalize_1.o:(.data+0x0): undefined reference to `openacc_'\n",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.2657984010875225
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_delete_finalize_async.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_delete_finalize_async.F90/acc_delete_finalize_async.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete_finalize_async.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete_finalize_async.F90, Line = 25, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0093 seconds\nCray Fortran : 181 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_29676/acc_delete_finalize_async_1.o: in function `test1_':\n/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete_finalize_async.F90:41: undefined reference to `acc_delete_finalize_async_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete_finalize_async.F90:42: undefined reference to `acc_delete_finalize_async_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete_finalize_async.F90:43: undefined reference to `acc_delete_finalize_async_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete_finalize_async.F90:44: undefined reference to `acc_delete_finalize_async_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_29676/acc_delete_finalize_async_1.o: in function `test2_':\n/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete_finalize_async.F90:90: undefined reference to `acc_delete_finalize_async_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_29676/acc_delete_finalize_async_1.o:(.data+0x0): undefined reference to `openacc_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_29676/acc_delete_finalize_async_1.o:(.data+0x40): undefined reference to `openacc_'\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.31618224270641804
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_delete_finalize_async.F90/acc_delete_finalize_async.F901 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete_finalize_async.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete_finalize_async.F90, Line = 79, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0063 seconds\nCray Fortran : 172 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_29690/acc_delete_finalize_async_1.o: in function `test2_':\n/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete_finalize_async.F90:90: undefined reference to `acc_delete_finalize_async_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_29690/acc_delete_finalize_async_1.o:(.data+0x0): undefined reference to `openacc_'\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.26561580784618855
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT2 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_delete_finalize_async.F90/acc_delete_finalize_async.F902 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete_finalize_async.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete_finalize_async.F90, Line = 25, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0065 seconds\nCray Fortran : 172 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_29705/acc_delete_finalize_async_1.o: in function `test1_':\n/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete_finalize_async.F90:41: undefined reference to `acc_delete_finalize_async_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete_finalize_async.F90:42: undefined reference to `acc_delete_finalize_async_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete_finalize_async.F90:43: undefined reference to `acc_delete_finalize_async_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete_finalize_async.F90:44: undefined reference to `acc_delete_finalize_async_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_29705/acc_delete_finalize_async_1.o:(.data+0x0): undefined reference to `openacc_'\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.26560763269662857
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_delete_finalize_async.F90/acc_delete_finalize_async.F903 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete_finalize_async.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete_finalize_async.F90, Line = 79, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0062 seconds\nCray Fortran : 172 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_29719/acc_delete_finalize_async_1.o: in function `test2_':\n/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete_finalize_async.F90:90: undefined reference to `acc_delete_finalize_async_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_29719/acc_delete_finalize_async_1.o:(.data+0x0): undefined reference to `openacc_'\n",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.2657347694039345
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_delete_finalize_async_with_len.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_delete_finalize_async_with_len.F90/acc_delete_finalize_async_with_len.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete_finalize_async_with_len.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete_finalize_async_with_len.F90, Line = 24, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0096 seconds\nCray Fortran : 184 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_29735/acc_delete_finalize_async_with_len_1.o: in function `test1_':\n/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete_finalize_async_with_len.F90:40: undefined reference to `acc_delete_finalize_async_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete_finalize_async_with_len.F90:41: undefined reference to `acc_delete_finalize_async_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete_finalize_async_with_len.F90:42: undefined reference to `acc_delete_finalize_async_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete_finalize_async_with_len.F90:43: undefined reference to `acc_delete_finalize_async_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_29735/acc_delete_finalize_async_with_len_1.o: in function `test2_':\n/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete_finalize_async_with_len.F90:93: undefined reference to `acc_delete_finalize_async_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_29735/acc_delete_finalize_async_with_len_1.o:(.data+0x0): undefined reference to `openacc_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_29735/acc_delete_finalize_async_with_len_1.o:(.data+0x40): undefined reference to `openacc_'\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.316006975248456
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_delete_finalize_async_with_len.F90/acc_delete_finalize_async_with_len.F901 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete_finalize_async_with_len.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete_finalize_async_with_len.F90, Line = 82, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0062 seconds\nCray Fortran : 175 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_29749/acc_delete_finalize_async_with_len_1.o: in function `test2_':\n/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete_finalize_async_with_len.F90:93: undefined reference to `acc_delete_finalize_async_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_29749/acc_delete_finalize_async_with_len_1.o:(.data+0x0): undefined reference to `openacc_'\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.26560210436582565
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT2 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_delete_finalize_async_with_len.F90/acc_delete_finalize_async_with_len.F902 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete_finalize_async_with_len.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete_finalize_async_with_len.F90, Line = 24, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0066 seconds\nCray Fortran : 175 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_29763/acc_delete_finalize_async_with_len_1.o: in function `test1_':\n/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete_finalize_async_with_len.F90:40: undefined reference to `acc_delete_finalize_async_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete_finalize_async_with_len.F90:41: undefined reference to `acc_delete_finalize_async_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete_finalize_async_with_len.F90:42: undefined reference to `acc_delete_finalize_async_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete_finalize_async_with_len.F90:43: undefined reference to `acc_delete_finalize_async_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_29763/acc_delete_finalize_async_with_len_1.o:(.data+0x0): undefined reference to `openacc_'\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.26561768166720867
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_delete_finalize_async_with_len.F90/acc_delete_finalize_async_with_len.F903 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete_finalize_async_with_len.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete_finalize_async_with_len.F90, Line = 82, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0062 seconds\nCray Fortran : 175 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_29777/acc_delete_finalize_async_with_len_1.o: in function `test2_':\n/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete_finalize_async_with_len.F90:93: undefined reference to `acc_delete_finalize_async_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_29777/acc_delete_finalize_async_with_len_1.o:(.data+0x0): undefined reference to `openacc_'\n",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.2658998388797045
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_delete_finalize_with_len.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_delete_finalize_with_len.F90/acc_delete_finalize_with_len.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete_finalize_with_len.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete_finalize_with_len.F90, Line = 22, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0095 seconds\nCray Fortran : 163 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_29792/acc_delete_finalize_with_len_1.o: in function `test1_':\n/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete_finalize_with_len.F90:34: undefined reference to `acc_delete_finalize_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete_finalize_with_len.F90:35: undefined reference to `acc_delete_finalize_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_29792/acc_delete_finalize_with_len_1.o: in function `test2_':\n/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete_finalize_with_len.F90:70: undefined reference to `acc_copyin_1_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete_finalize_with_len.F90:71: undefined reference to `acc_copyin_1_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete_finalize_with_len.F90:72: undefined reference to `acc_copyin_1_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete_finalize_with_len.F90:73: undefined reference to `acc_copyin_1_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete_finalize_with_len.F90:84: undefined reference to `acc_delete_finalize_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete_finalize_with_len.F90:85: undefined reference to `acc_delete_finalize_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_29792/acc_delete_finalize_with_len_1.o:(.data+0x0): undefined reference to `openacc_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_29792/acc_delete_finalize_with_len_1.o:(.data+0x40): undefined reference to `openacc_'\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.3159232083708048
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_delete_finalize_with_len.F90/acc_delete_finalize_with_len.F901 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete_finalize_with_len.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete_finalize_with_len.F90, Line = 75, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0064 seconds\nCray Fortran : 154 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_29806/acc_delete_finalize_with_len_1.o: in function `test2_':\n/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete_finalize_with_len.F90:70: undefined reference to `acc_copyin_1_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete_finalize_with_len.F90:71: undefined reference to `acc_copyin_1_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete_finalize_with_len.F90:72: undefined reference to `acc_copyin_1_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete_finalize_with_len.F90:73: undefined reference to `acc_copyin_1_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete_finalize_with_len.F90:84: undefined reference to `acc_delete_finalize_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete_finalize_with_len.F90:85: undefined reference to `acc_delete_finalize_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_29806/acc_delete_finalize_with_len_1.o:(.data+0x0): undefined reference to `openacc_'\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.2656003814190626
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT2 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_delete_finalize_with_len.F90/acc_delete_finalize_with_len.F902 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete_finalize_with_len.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete_finalize_with_len.F90, Line = 22, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0057 seconds\nCray Fortran : 154 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_29820/acc_delete_finalize_with_len_1.o: in function `test1_':\n/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete_finalize_with_len.F90:34: undefined reference to `acc_delete_finalize_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete_finalize_with_len.F90:35: undefined reference to `acc_delete_finalize_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_29820/acc_delete_finalize_with_len_1.o:(.data+0x0): undefined reference to `openacc_'\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.2659119702875614
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_delete_finalize_with_len.F90/acc_delete_finalize_with_len.F903 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete_finalize_with_len.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete_finalize_with_len.F90, Line = 75, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0063 seconds\nCray Fortran : 154 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_29834/acc_delete_finalize_with_len_1.o: in function `test2_':\n/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete_finalize_with_len.F90:70: undefined reference to `acc_copyin_1_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete_finalize_with_len.F90:71: undefined reference to `acc_copyin_1_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete_finalize_with_len.F90:72: undefined reference to `acc_copyin_1_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete_finalize_with_len.F90:73: undefined reference to `acc_copyin_1_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete_finalize_with_len.F90:84: undefined reference to `acc_delete_finalize_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete_finalize_with_len.F90:85: undefined reference to `acc_delete_finalize_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_29834/acc_delete_finalize_with_len_1.o:(.data+0x0): undefined reference to `openacc_'\n",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.26588618382811546
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_delete_with_len.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_delete_with_len.F90/acc_delete_with_len.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete_with_len.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete_with_len.F90, Line = 22, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0094 seconds\nCray Fortran : 161 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_29850/acc_delete_with_len_1.o: in function `test1_':\n/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete_with_len.F90:33: undefined reference to `acc_delete_2_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete_with_len.F90:34: undefined reference to `acc_delete_2_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_29850/acc_delete_with_len_1.o: in function `test2_':\n/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete_with_len.F90:70: undefined reference to `acc_copyin_1_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete_with_len.F90:71: undefined reference to `acc_copyin_1_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete_with_len.F90:82: undefined reference to `acc_delete_2_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete_with_len.F90:83: undefined reference to `acc_delete_2_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_29850/acc_delete_with_len_1.o:(.data+0x0): undefined reference to `openacc_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_29850/acc_delete_with_len_1.o:(.data+0x40): undefined reference to `openacc_'\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.31591702811419964
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_delete_with_len.F90/acc_delete_with_len.F901 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete_with_len.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete_with_len.F90, Line = 73, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0063 seconds\nCray Fortran : 152 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_29864/acc_delete_with_len_1.o: in function `test2_':\n/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete_with_len.F90:70: undefined reference to `acc_copyin_1_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete_with_len.F90:71: undefined reference to `acc_copyin_1_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete_with_len.F90:82: undefined reference to `acc_delete_2_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete_with_len.F90:83: undefined reference to `acc_delete_2_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_29864/acc_delete_with_len_1.o:(.data+0x0): undefined reference to `openacc_'\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.2656108271330595
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT2 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_delete_with_len.F90/acc_delete_with_len.F902 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete_with_len.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete_with_len.F90, Line = 22, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0057 seconds\nCray Fortran : 152 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_29878/acc_delete_with_len_1.o: in function `test1_':\n/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete_with_len.F90:33: undefined reference to `acc_delete_2_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete_with_len.F90:34: undefined reference to `acc_delete_2_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_29878/acc_delete_with_len_1.o:(.data+0x0): undefined reference to `openacc_'\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.265640826895833
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_delete_with_len.F90/acc_delete_with_len.F903 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete_with_len.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete_with_len.F90, Line = 73, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0064 seconds\nCray Fortran : 152 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_29892/acc_delete_with_len_1.o: in function `test2_':\n/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete_with_len.F90:70: undefined reference to `acc_copyin_1_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete_with_len.F90:71: undefined reference to `acc_copyin_1_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete_with_len.F90:82: undefined reference to `acc_delete_2_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete_with_len.F90:83: undefined reference to `acc_delete_2_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_29892/acc_delete_with_len_1.o:(.data+0x0): undefined reference to `openacc_'\n",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.26562163047492504
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_get_default_async.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_get_default_async.F90/acc_get_default_async.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_get_default_async.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_get_default_async.F90, Line = 23, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0057 seconds\nCray Fortran : 93 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_29909/acc_get_default_async_1.o: in function `test1_':\n/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_get_default_async.F90:12: undefined reference to `acc_get_default_async_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_get_default_async.F90:39: undefined reference to `acc_get_default_async_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_29909/acc_get_default_async_1.o:(.data+0x0): undefined reference to `openacc_'\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.26580761559307575
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_get_default_async.F90/acc_get_default_async.F901 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_get_default_async.F90",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2155880182981491
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009141452610492706,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_get_device_num.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_get_device_num.F90/acc_get_device_num.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_get_device_num.F90",
                    "config": 1,
                    "errors": "/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_29941/acc_get_device_num_1.o: in function `test1_':\n/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_get_device_num.F90:11: undefined reference to `acc_get_device_type'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_get_device_num.F90:12: undefined reference to `acc_get_device_type'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_get_device_num.F90:12: undefined reference to `acc_get_num_devices'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_get_device_num.F90:13: undefined reference to `acc_get_device_type'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_get_device_num.F90:13: undefined reference to `acc_set_device_num'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_get_device_num.F90:14: undefined reference to `acc_get_device_type'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_get_device_num.F90:14: undefined reference to `acc_get_device_num'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_29941/acc_get_device_num_1.o:(.data+0x0): undefined reference to `openacc_'\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.2656882740557194
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_get_device_num.F90/acc_get_device_num.F901 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_get_device_num.F90",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.21581457182765007
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009218484163284302,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_get_num_devices.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_get_num_devices.F90/acc_get_num_devices.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_get_num_devices.F90",
                    "config": 1,
                    "errors": "/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_29976/acc_get_num_devices_1.o: in function `test1_':\n/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_get_num_devices.F90:10: undefined reference to `acc_get_device_type'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_get_num_devices.F90:11: undefined reference to `acc_get_device_type'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_get_num_devices.F90:11: undefined reference to `acc_get_num_devices'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_29976/acc_get_num_devices_1.o:(.data+0x0): undefined reference to `openacc_'\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.2158258557319641
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_get_num_devices.F90/acc_get_num_devices.F901 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_get_num_devices.F90",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2156202681362629
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009241215884685516,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_get_property.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_get_property.F90/acc_get_property.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_get_property.F90",
                    "config": 1,
                    "errors": "\n\nftn-232 ftn: ERROR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_get_property.F90, Line = 9, Column = 20 \n  IMPLICIT NONE is specified in the local scope, therefore an explicit type must be specified for function \"ACC_GET_PROPERTY\".\n\n\nftn-113 ftn: ERROR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_get_property.F90, Line = 9, Column = 103 \n  IMPLICIT NONE is specified in the local scope, therefore an explicit type must be specified for data object \"ACC_PROPERTY_MEMORY\".\n\n\nftn-113 ftn: ERROR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_get_property.F90, Line = 10, Column = 103 \n  IMPLICIT NONE is specified in the local scope, therefore an explicit type must be specified for data object \"ACC_PROPERTY_FREE_MEMORY\".\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0058 seconds\nCray Fortran : 58 source lines\nCray Fortran : 3 errors, 0 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11555873788893223
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_get_property.F90/acc_get_property.F901 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_get_property.F90",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.21555223129689693
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.00917140580713749,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_get_property_string.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_get_property_string.F90/acc_get_property_string.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_get_property_string.F90",
                    "config": 1,
                    "errors": "\n\nftn-113 ftn: ERROR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_get_property_string.F90, Line = 11, Column = 104 \n  IMPLICIT NONE is specified in the local scope, therefore an explicit type must be specified for data object \"ACC_PROPERTY_NAME\".\n\n\nftn-113 ftn: ERROR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_get_property_string.F90, Line = 12, Column = 104 \n  IMPLICIT NONE is specified in the local scope, therefore an explicit type must be specified for data object \"ACC_PROPERTY_VENDOR\".\n\n\nftn-113 ftn: ERROR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_get_property_string.F90, Line = 13, Column = 104 \n  IMPLICIT NONE is specified in the local scope, therefore an explicit type must be specified for data object \"ACC_PROPERTY_DRIVER\".\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0059 seconds\nCray Fortran : 60 source lines\nCray Fortran : 3 errors, 0 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11554025486111641
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_get_property_string.F90/acc_get_property_string.F901 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_get_property_string.F90",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.21546165086328983
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009197324514389038,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_init.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_init.F90/acc_init.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_init.F90",
                    "config": 1,
                    "errors": "/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_30066/acc_init_1.o: in function `test1_':\n/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_init.F90:7: undefined reference to `acc_get_device_type'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_init.F90:8: undefined reference to `acc_get_device_type'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_init.F90:8: undefined reference to `acc_init'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_30066/acc_init_1.o:(.data+0x0): undefined reference to `openacc_'\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.21570298448204994
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_init.F90/acc_init.F901 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_init.F90",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2155276071280241
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.00920460931956768,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_is_present.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_is_present.F90/acc_is_present.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_is_present.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_is_present.F90, Line = 14, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0056 seconds\nCray Fortran : 83 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_30102/acc_is_present_1.o: in function `test1_':\n/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_is_present.F90:20: undefined reference to `acc_is_present_1_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_30102/acc_is_present_1.o:(.data+0x0): undefined reference to `openacc_'\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.26572757586836815
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_is_present.F90/acc_is_present.F901 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_is_present.F90",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2155399899929762
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009203707799315453,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_is_present_with_len.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_is_present_with_len.F90/acc_is_present_with_len.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_is_present_with_len.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_is_present_with_len.F90, Line = 13, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0062 seconds\nCray Fortran : 80 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_30136/acc_is_present_with_len_1.o: in function `test1_':\n/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_is_present_with_len.F90:19: undefined reference to `acc_is_present_2_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_30136/acc_is_present_with_len_1.o:(.data+0x0): undefined reference to `openacc_'\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.2657193820923567
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_is_present_with_len.F90/acc_is_present_with_len.F901 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_is_present_with_len.F90",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.21562455967068672
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009195925667881966,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_on_device.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_on_device.F90/acc_on_device.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_on_device.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_on_device.F90, Line = 12, Column = 11 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\n\nftn-1698 ftn: ERROR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_on_device.F90, Line = 13, Column = 31 \n  Type INTEGER(kind=4) is not allowed for the \"DEVICE\" argument of intrinsic ACC_ON_DEVICE.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0058 seconds\nCray Fortran : 75 source lines\nCray Fortran : 1 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.1155919823795557
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_on_device.F90/acc_on_device.F901 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_on_device.F90",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.21548169292509556
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009217264130711555,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_set_default_async.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_set_default_async.F90/acc_set_default_async.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_set_default_async.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_set_default_async.F90, Line = 23, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0065 seconds\nCray Fortran : 103 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_30197/acc_set_default_async_1.o: in function `test1_':\n/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_set_default_async.F90:24: undefined reference to `acc_set_default_async_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_set_default_async.F90:31: undefined reference to `acc_set_default_async_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_30197/acc_set_default_async_1.o:(.data+0x0): undefined reference to `openacc_'\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.26567177288234234
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_set_default_async.F90/acc_set_default_async.F901 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_set_default_async.F90",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2157566137611866
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009203499183058739,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_set_device_num.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_set_device_num.F90/acc_set_device_num.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_set_device_num.F90",
                    "config": 1,
                    "errors": "\n\nftn-375 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_set_device_num.F90, Line = 20, Column = 15 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-324 ftn: ERROR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_set_device_num.F90, Line = 20, Column = 28 \n  Assignment of a rank 1 expression to a rank 0 variable is not allowed.\n\n\nftn-281 ftn: ERROR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_set_device_num.F90, Line = 22, Column = 13 \n  The left hand side of an assignment statement must be a variable or a function result.\n\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_set_device_num.F90, Line = 23, Column = 13 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\n\nftn-503 ftn: ERROR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_set_device_num.F90, Line = 26, Column = 41 \n  Argument mismatch:  Actual argument \"ACC_GET_DEVICE_TYPE\" is a \"PROGRAM UNIT\".  Dummy argument \"DEVICE\" is a \"DATA OBJECT\".\n\n\nftn-281 ftn: ERROR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_set_device_num.F90, Line = 27, Column = 13 \n  The left hand side of an assignment statement must be a variable or a function result.\n\n\nftn-281 ftn: ERROR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_set_device_num.F90, Line = 39, Column = 13 \n  The left hand side of an assignment statement must be a variable or a function result.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0062 seconds\nCray Fortran : 99 source lines\nCray Fortran : 5 errors, 2 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11562328785657883
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_set_device_num.F90/acc_set_device_num.F901 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_set_device_num.F90",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.21545511297881603
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.00958336517214775,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_set_device_type.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_set_device_type.F90/acc_set_device_type.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_set_device_type.F90",
                    "config": 1,
                    "errors": "\n\nftn-1307 ftn: ERROR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_set_device_type.F90, Line = 11, Column = 34 \n  The kind (4) of this actual argument does not match that of its associated dummy argument (8).\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0051 seconds\nCray Fortran : 66 source lines\nCray Fortran : 1 errors, 0 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11557932756841183
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_set_device_type.F90/acc_set_device_type.F901 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_set_device_type.F90",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.215458445250988
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009225107729434967,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_shutdown.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_shutdown.F90/acc_shutdown.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_shutdown.F90",
                    "config": 1,
                    "errors": "/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_30291/acc_shutdown_1.o: in function `test1_':\n/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_shutdown.F90:7: undefined reference to `acc_get_device_type'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_shutdown.F90:8: undefined reference to `acc_get_device_type'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_shutdown.F90:8: undefined reference to `acc_shutdown'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_30291/acc_shutdown_1.o:(.data+0x0): undefined reference to `openacc_'\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.21567410044372082
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_shutdown.F90/acc_shutdown.F901 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_shutdown.F90",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2155400589108467
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009143562987446785,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_update_device.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_update_device.F90/acc_update_device.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_device.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_device.F90, Line = 21, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0094 seconds\nCray Fortran : 168 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_30323/acc_update_device_1.o: in function `test1_':\n/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_device.F90:22: undefined reference to `acc_update_device_1_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_device.F90:23: undefined reference to `acc_update_device_1_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_30323/acc_update_device_1.o:(.data+0x0): undefined reference to `openacc_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_30323/acc_update_device_1.o:(.data+0x40): undefined reference to `openacc_'\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.26587112434208393
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_update_device.F90/acc_update_device.F901 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_device.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_device.F90, Line = 57, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0064 seconds\nCray Fortran : 159 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_30337/acc_update_device_1.o:(.data+0x0): undefined reference to `openacc_'\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.21573230810463428
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT2 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_update_device.F90/acc_update_device.F902 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_device.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_device.F90, Line = 21, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0063 seconds\nCray Fortran : 159 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_30351/acc_update_device_1.o: in function `test1_':\n/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_device.F90:22: undefined reference to `acc_update_device_1_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_device.F90:23: undefined reference to `acc_update_device_1_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_30351/acc_update_device_1.o:(.data+0x0): undefined reference to `openacc_'\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.2655849102884531
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_update_device.F90/acc_update_device.F903 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_device.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_device.F90, Line = 57, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0064 seconds\nCray Fortran : 159 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_30365/acc_update_device_1.o:(.data+0x0): undefined reference to `openacc_'\n",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.2155713103711605
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_update_device_async.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_update_device_async.F90/acc_update_device_async.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_device_async.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_device_async.F90, Line = 23, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0097 seconds\nCray Fortran : 182 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_30380/acc_update_device_async_1.o: in function `test1_':\n/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_device_async.F90:24: undefined reference to `acc_update_device_async_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_device_async.F90:31: undefined reference to `acc_update_device_async_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_30380/acc_update_device_async_1.o:(.data+0x0): undefined reference to `openacc_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_30380/acc_update_device_async_1.o:(.data+0x40): undefined reference to `openacc_'\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.2660787049680948
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_update_device_async.F90/acc_update_device_async.F901 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_device_async.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_device_async.F90, Line = 72, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0060 seconds\nCray Fortran : 173 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_30394/acc_update_device_async_1.o:(.data+0x0): undefined reference to `openacc_'\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.2155059650540352
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT2 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_update_device_async.F90/acc_update_device_async.F902 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_device_async.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_device_async.F90, Line = 23, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0065 seconds\nCray Fortran : 173 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_30409/acc_update_device_async_1.o: in function `test1_':\n/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_device_async.F90:24: undefined reference to `acc_update_device_async_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_device_async.F90:31: undefined reference to `acc_update_device_async_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_30409/acc_update_device_async_1.o:(.data+0x0): undefined reference to `openacc_'\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.26565120555460453
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_update_device_async.F90/acc_update_device_async.F903 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_device_async.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_device_async.F90, Line = 72, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0064 seconds\nCray Fortran : 173 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_30423/acc_update_device_async_1.o:(.data+0x0): undefined reference to `openacc_'\n",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.2656357157975435
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_update_device_async_with_len.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_update_device_async_with_len.F90/acc_update_device_async_with_len.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_device_async_with_len.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_device_async_with_len.F90, Line = 24, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0096 seconds\nCray Fortran : 185 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_30438/acc_update_device_async_with_len_1.o: in function `test1_':\n/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_device_async_with_len.F90:25: undefined reference to `acc_update_device_async_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_device_async_with_len.F90:32: undefined reference to `acc_update_device_async_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_30438/acc_update_device_async_with_len_1.o:(.data+0x0): undefined reference to `openacc_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_30438/acc_update_device_async_with_len_1.o:(.data+0x40): undefined reference to `openacc_'\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.2658880967646837
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_update_device_async_with_len.F90/acc_update_device_async_with_len.F901 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_device_async_with_len.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_device_async_with_len.F90, Line = 74, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0064 seconds\nCray Fortran : 176 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_30452/acc_update_device_async_with_len_1.o:(.data+0x0): undefined reference to `openacc_'\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.21549980342388153
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT2 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_update_device_async_with_len.F90/acc_update_device_async_with_len.F902 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_device_async_with_len.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_device_async_with_len.F90, Line = 24, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0060 seconds\nCray Fortran : 176 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_30466/acc_update_device_async_with_len_1.o: in function `test1_':\n/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_device_async_with_len.F90:25: undefined reference to `acc_update_device_async_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_device_async_with_len.F90:32: undefined reference to `acc_update_device_async_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_30466/acc_update_device_async_with_len_1.o:(.data+0x0): undefined reference to `openacc_'\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.26565658673644066
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_update_device_async_with_len.F90/acc_update_device_async_with_len.F903 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_device_async_with_len.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_device_async_with_len.F90, Line = 74, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0065 seconds\nCray Fortran : 176 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_30480/acc_update_device_async_with_len_1.o:(.data+0x0): undefined reference to `openacc_'\n",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.26564330980181694
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_update_device_with_len.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_update_device_with_len.F90/acc_update_device_with_len.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_device_with_len.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_device_with_len.F90, Line = 14, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0094 seconds\nCray Fortran : 181 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_30495/acc_update_device_with_len_1.o: in function `test1_':\n/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_device_with_len.F90:31: undefined reference to `acc_update_device_2_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_device_with_len.F90:32: undefined reference to `acc_update_device_2_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_30495/acc_update_device_with_len_1.o:(.data+0x0): undefined reference to `openacc_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_30495/acc_update_device_with_len_1.o:(.data+0x40): undefined reference to `openacc_'\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.2658920753747225
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_update_device_with_len.F90/acc_update_device_with_len.F901 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_device_with_len.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_device_with_len.F90, Line = 67, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0065 seconds\nCray Fortran : 172 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_30509/acc_update_device_with_len_1.o:(.data+0x0): undefined reference to `openacc_'\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.2656396832317114
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT2 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_update_device_with_len.F90/acc_update_device_with_len.F902 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_device_with_len.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_device_with_len.F90, Line = 14, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0064 seconds\nCray Fortran : 172 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_30524/acc_update_device_with_len_1.o: in function `test1_':\n/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_device_with_len.F90:31: undefined reference to `acc_update_device_2_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_device_with_len.F90:32: undefined reference to `acc_update_device_2_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_30524/acc_update_device_with_len_1.o:(.data+0x0): undefined reference to `openacc_'\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.2656216397881508
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_update_device_with_len.F90/acc_update_device_with_len.F903 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_device_with_len.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_device_with_len.F90, Line = 67, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0060 seconds\nCray Fortran : 172 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_30538/acc_update_device_with_len_1.o:(.data+0x0): undefined reference to `openacc_'\n",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.2155810259282589
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_update_self.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_update_self.F90/acc_update_self.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_self.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_self.F90, Line = 23, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0095 seconds\nCray Fortran : 164 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_30553/acc_update_self_1.o: in function `test1_':\n/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_self.F90:30: undefined reference to `acc_update_self_1_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_30553/acc_update_self_1.o: in function `test2_':\n/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_self.F90:75: undefined reference to `acc_update_self_1_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_self.F90:82: undefined reference to `acc_update_self_1_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_30553/acc_update_self_1.o:(.data+0x0): undefined reference to `openacc_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_30553/acc_update_self_1.o:(.data+0x40): undefined reference to `openacc_'\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.3161673340946436
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_update_self.F90/acc_update_self.F901 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_self.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_self.F90, Line = 68, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0064 seconds\nCray Fortran : 155 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_30567/acc_update_self_1.o: in function `test2_':\n/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_self.F90:75: undefined reference to `acc_update_self_1_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_self.F90:82: undefined reference to `acc_update_self_1_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_30567/acc_update_self_1.o:(.data+0x0): undefined reference to `openacc_'\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.2656020037829876
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT2 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_update_self.F90/acc_update_self.F902 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_self.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_self.F90, Line = 23, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0063 seconds\nCray Fortran : 155 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_30581/acc_update_self_1.o: in function `test1_':\n/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_self.F90:30: undefined reference to `acc_update_self_1_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_30581/acc_update_self_1.o:(.data+0x0): undefined reference to `openacc_'\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.26569717936217785
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_update_self.F90/acc_update_self.F903 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_self.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_self.F90, Line = 68, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0064 seconds\nCray Fortran : 155 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_30601/acc_update_self_1.o: in function `test2_':\n/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_self.F90:75: undefined reference to `acc_update_self_1_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_self.F90:82: undefined reference to `acc_update_self_1_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_30601/acc_update_self_1.o:(.data+0x0): undefined reference to `openacc_'\n",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.2659273184835911
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_update_self_async.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_update_self_async.F90/acc_update_self_async.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_self_async.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_self_async.F90, Line = 14, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0100 seconds\nCray Fortran : 204 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_30617/acc_update_self_async_1.o: in function `test1_':\n/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_self_async.F90:44: undefined reference to `acc_update_self_async_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_self_async.F90:45: undefined reference to `acc_update_self_async_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_30617/acc_update_self_async_1.o:(.data+0x0): undefined reference to `openacc_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_30617/acc_update_self_async_1.o:(.data+0x40): undefined reference to `openacc_'\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.26594245806336403
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_update_self_async.F90/acc_update_self_async.F901 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_self_async.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_self_async.F90, Line = 78, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0065 seconds\nCray Fortran : 195 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_30631/acc_update_self_async_1.o:(.data+0x0): undefined reference to `openacc_'\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.26568284444510937
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT2 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_update_self_async.F90/acc_update_self_async.F902 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_self_async.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_self_async.F90, Line = 14, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0064 seconds\nCray Fortran : 195 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_30646/acc_update_self_async_1.o: in function `test1_':\n/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_self_async.F90:44: undefined reference to `acc_update_self_async_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_self_async.F90:45: undefined reference to `acc_update_self_async_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_30646/acc_update_self_async_1.o:(.data+0x0): undefined reference to `openacc_'\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.2656982932239771
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_update_self_async.F90/acc_update_self_async.F903 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_self_async.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_self_async.F90, Line = 78, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0061 seconds\nCray Fortran : 195 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_30660/acc_update_self_async_1.o:(.data+0x0): undefined reference to `openacc_'\n",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.26567061245441437
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_update_self_async_with_len.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_update_self_async_with_len.F90/acc_update_self_async_with_len.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_self_async_with_len.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_self_async_with_len.F90, Line = 14, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0098 seconds\nCray Fortran : 204 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_30675/acc_update_self_async_with_len_1.o: in function `test1_':\n/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_self_async_with_len.F90:44: undefined reference to `acc_update_self_async_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_self_async_with_len.F90:45: undefined reference to `acc_update_self_async_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_30675/acc_update_self_async_with_len_1.o:(.data+0x0): undefined reference to `openacc_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_30675/acc_update_self_async_with_len_1.o:(.data+0x40): undefined reference to `openacc_'\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.2658790573477745
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_update_self_async_with_len.F90/acc_update_self_async_with_len.F901 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_self_async_with_len.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_self_async_with_len.F90, Line = 77, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0065 seconds\nCray Fortran : 195 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_30689/acc_update_self_async_with_len_1.o:(.data+0x0): undefined reference to `openacc_'\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.2656603045761585
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT2 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_update_self_async_with_len.F90/acc_update_self_async_with_len.F902 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_self_async_with_len.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_self_async_with_len.F90, Line = 14, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0065 seconds\nCray Fortran : 195 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_30703/acc_update_self_async_with_len_1.o: in function `test1_':\n/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_self_async_with_len.F90:44: undefined reference to `acc_update_self_async_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_self_async_with_len.F90:45: undefined reference to `acc_update_self_async_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_30703/acc_update_self_async_with_len_1.o:(.data+0x0): undefined reference to `openacc_'\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.2656325586140156
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_update_self_async_with_len.F90/acc_update_self_async_with_len.F903 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_self_async_with_len.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_self_async_with_len.F90, Line = 77, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0066 seconds\nCray Fortran : 195 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_30717/acc_update_self_async_with_len_1.o:(.data+0x0): undefined reference to `openacc_'\n",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.26574549078941345
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_update_self_with_len.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_update_self_with_len.F90/acc_update_self_with_len.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_self_with_len.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_self_with_len.F90, Line = 23, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0094 seconds\nCray Fortran : 164 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_30732/acc_update_self_with_len_1.o: in function `test1_':\n/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_self_with_len.F90:30: undefined reference to `acc_update_self_2_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_30732/acc_update_self_with_len_1.o: in function `test2_':\n/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_self_with_len.F90:75: undefined reference to `acc_update_self_2_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_self_with_len.F90:82: undefined reference to `acc_update_self_2_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_30732/acc_update_self_with_len_1.o:(.data+0x0): undefined reference to `openacc_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_30732/acc_update_self_with_len_1.o:(.data+0x40): undefined reference to `openacc_'\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.26588532142341137
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_update_self_with_len.F90/acc_update_self_with_len.F901 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_self_with_len.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_self_with_len.F90, Line = 68, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0059 seconds\nCray Fortran : 155 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_30746/acc_update_self_with_len_1.o: in function `test2_':\n/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_self_with_len.F90:75: undefined reference to `acc_update_self_2_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_self_with_len.F90:82: undefined reference to `acc_update_self_2_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_30746/acc_update_self_with_len_1.o:(.data+0x0): undefined reference to `openacc_'\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.2656329423189163
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT2 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_update_self_with_len.F90/acc_update_self_with_len.F902 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_self_with_len.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_self_with_len.F90, Line = 23, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0058 seconds\nCray Fortran : 155 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_30761/acc_update_self_with_len_1.o: in function `test1_':\n/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_self_with_len.F90:30: undefined reference to `acc_update_self_2_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_30761/acc_update_self_with_len_1.o:(.data+0x0): undefined reference to `openacc_'\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.26562842540442944
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_update_self_with_len.F90/acc_update_self_with_len.F903 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_self_with_len.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_self_with_len.F90, Line = 68, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0064 seconds\nCray Fortran : 155 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_30775/acc_update_self_with_len_1.o: in function `test2_':\n/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_self_with_len.F90:75: undefined reference to `acc_update_self_2_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_self_with_len.F90:82: undefined reference to `acc_update_self_2_'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_30775/acc_update_self_with_len_1.o:(.data+0x0): undefined reference to `openacc_'\n",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.2656366154551506
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_wait.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_wait.F90/acc_wait.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_wait.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_wait.F90, Line = 25, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0060 seconds\nCray Fortran : 97 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_30790/acc_wait_1.o: in function `test1_':\n/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_wait.F90:41: undefined reference to `acc_wait'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_30790/acc_wait_1.o:(.data+0x0): undefined reference to `openacc_'\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.2659077439457178
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_wait.F90/acc_wait.F901 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_wait.F90",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.215603681281209
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009211191907525063,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_wait_all.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_wait_all.F90/acc_wait_all.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_wait_all.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_wait_all.F90, Line = 27, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0066 seconds\nCray Fortran : 107 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_30824/acc_wait_all_1.o: in function `test1_':\n/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_wait_all.F90:46: undefined reference to `acc_wait_all'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_30824/acc_wait_all_1.o:(.data+0x0): undefined reference to `openacc_'\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.26586891151964664
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_wait_all.F90/acc_wait_all.F901 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_wait_all.F90",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.21552625484764576
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.00923250988125801,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_wait_all_async.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_wait_all_async.F90/acc_wait_all_async.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_wait_all_async.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_wait_all_async.F90, Line = 36, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0071 seconds\nCray Fortran : 144 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_30856/acc_wait_all_async_1.o: in function `test1_':\n/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_wait_all_async.F90:55: undefined reference to `acc_wait_all_async'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_wait_all_async.F90:80: undefined reference to `acc_wait_all_async'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_30856/acc_wait_all_async_1.o:(.data+0x0): undefined reference to `openacc_'\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.3158026058226824
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_wait_all_async.F90/acc_wait_all_async.F901 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_wait_all_async.F90",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.21553207375109196
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009174242615699768,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_wait_async.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_wait_async.F90/acc_wait_async.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_wait_async.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_wait_async.F90, Line = 29, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0065 seconds\nCray Fortran : 111 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_30889/acc_wait_async_1.o: in function `test1_':\n/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_wait_async.F90:36: undefined reference to `acc_wait_async'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_wait_async.F90:49: undefined reference to `acc_wait_async'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_30889/acc_wait_async_1.o:(.data+0x0): undefined reference to `openacc_'\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.2657397985458374
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_wait_async.F90/acc_wait_async.F901 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_wait_async.F90",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.21548406593501568
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009163374081254005,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_assign_expr_and_x.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_capture_assign_expr_and_x.F90/atomic_capture_assign_expr_and_x.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_and_x.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_and_x.F90, Line = 68, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.41604001075029373
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.00921434722840786,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_assign_expr_divided_x.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_capture_assign_expr_divided_x.F90/atomic_capture_assign_expr_divided_x.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_divided_x.F90",
                    "config": 1,
                    "errors": "\n\nftn-7212 ftn: WARNING IS_POSSIBLE_2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_divided_x.F90, Line = 22 \n  Variable \"precision\" is used before it is defined.\n\n\nftn-7212 ftn: WARNING IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_divided_x.F90, Line = 52 \n  Variable \"precision\" is used before it is defined.\n\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_divided_x.F90, Line = 102, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0063 seconds\nCray Fortran : 183 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4159635603427887
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "Failed to complete within timeout",
                    "export": false,
                    "output": "",
                    "result": -1,
                    "runtime": -1,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_capture_assign_expr_divided_x.F90/atomic_capture_assign_expr_divided_x.F901 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_divided_x.F90",
                    "config": 1,
                    "errors": "\n\nftn-7212 ftn: WARNING IS_POSSIBLE_2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_divided_x.F90, Line = 22 \n  Variable \"precision\" is used before it is defined.\n\n\nftn-7212 ftn: WARNING IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_divided_x.F90, Line = 52 \n  Variable \"precision\" is used before it is defined.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0048 seconds\nCray Fortran : 174 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3663844186812639
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009140167385339737,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_assign_expr_eqv_x.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_capture_assign_expr_eqv_x.F90/atomic_capture_assign_expr_eqv_x.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_eqv_x.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_eqv_x.F90, Line = 72, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36593759432435036
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009218424558639526,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_assign_expr_minus_x.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_capture_assign_expr_minus_x.F90/atomic_capture_assign_expr_minus_x.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_minus_x.F90",
                    "config": 1,
                    "errors": "\n\nftn-7212 ftn: WARNING IS_POSSIBLE_2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_minus_x.F90, Line = 19 \n  Variable \"precision\" is used before it is defined.\n\n\nftn-7212 ftn: WARNING IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_minus_x.F90, Line = 48 \n  Variable \"precision\" is used before it is defined.\n\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_minus_x.F90, Line = 95, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\n\nftn-1279 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_minus_x.F90, Line = 113, Column = 52 \n  Procedure \"IS_POSSIBLE\" is defined at line 37 (/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_minus_x.F90).  The type of this argument does not agree with dummy argument \"INIT\".\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0065 seconds\nCray Fortran : 175 source lines\nCray Fortran : 0 errors, 2 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4159106910228729
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "Failed to complete within timeout",
                    "export": false,
                    "output": "",
                    "result": -1,
                    "runtime": -1,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_capture_assign_expr_minus_x.F90/atomic_capture_assign_expr_minus_x.F901 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_minus_x.F90",
                    "config": 1,
                    "errors": "\n\nftn-7212 ftn: WARNING IS_POSSIBLE_2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_minus_x.F90, Line = 19 \n  Variable \"precision\" is used before it is defined.\n\n\nftn-7212 ftn: WARNING IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_minus_x.F90, Line = 48 \n  Variable \"precision\" is used before it is defined.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0046 seconds\nCray Fortran : 166 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31659954972565174
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009528711438179016,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_assign_expr_neqv_x.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_capture_assign_expr_neqv_x.F90/atomic_capture_assign_expr_neqv_x.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_neqv_x.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_neqv_x.F90, Line = 71, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3658741246908903
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009139526635408401,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_assign_expr_or_x.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_capture_assign_expr_or_x.F90/atomic_capture_assign_expr_or_x.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_or_x.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_or_x.F90, Line = 72, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3658891636878252
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009519847109913826,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_assign_expr_plus_x.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_capture_assign_expr_plus_x.F90/atomic_capture_assign_expr_plus_x.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_plus_x.F90",
                    "config": 1,
                    "errors": "\n\nftn-7212 ftn: WARNING IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_plus_x.F90, Line = 19 \n  Variable \"precision\" is used before it is defined.\n\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_plus_x.F90, Line = 62, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0054 seconds\nCray Fortran : 145 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3658625949174166
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009155245497822762,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_assign_expr_times_x.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_capture_assign_expr_times_x.F90/atomic_capture_assign_expr_times_x.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_times_x.F90",
                    "config": 1,
                    "errors": "\n\nftn-7212 ftn: WARNING IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_times_x.F90, Line = 19 \n  Variable \"precision\" is used before it is defined.\n\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_times_x.F90, Line = 62, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0055 seconds\nCray Fortran : 145 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36580133996903896
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.009168723598122597,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_assign_iand_expr_x.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_capture_assign_iand_expr_x.F90/atomic_capture_assign_iand_expr_x.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_iand_expr_x.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_iand_expr_x.F90, Line = 71, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.415965611115098
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009142354130744934,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_assign_iand_x_expr.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_capture_assign_iand_x_expr.F90/atomic_capture_assign_iand_x_expr.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_iand_x_expr.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_iand_x_expr.F90, Line = 78, Column = 3 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.41602265276014805
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009140700101852417,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_assign_ior_expr_x.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_capture_assign_ior_expr_x.F90/atomic_capture_assign_ior_expr_x.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_ior_expr_x.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_ior_expr_x.F90, Line = 72, Column = 3 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36578443832695484
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009379053488373756,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_assign_ior_x_expr.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_capture_assign_ior_x_expr.F90/atomic_capture_assign_ior_x_expr.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_ior_x_expr.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_ior_x_expr.F90, Line = 72, Column = 3 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3658534362912178
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.00913265347480774,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_assign_ixor_expr_x.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_capture_assign_ixor_expr_x.F90/atomic_capture_assign_ixor_expr_x.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_ixor_expr_x.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_ixor_expr_x.F90, Line = 72, Column = 3 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36593171395361423
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009153170511126518,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_assign_ixor_x_expr.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_capture_assign_ixor_x_expr.F90/atomic_capture_assign_ixor_x_expr.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_ixor_x_expr.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_ixor_x_expr.F90, Line = 72, Column = 3 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3658815287053585
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009133568033576012,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_assign_max_expr_list_x.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_capture_assign_max_expr_list_x.F90/atomic_capture_assign_max_expr_list_x.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_max_expr_list_x.F90",
                    "config": 1,
                    "errors": "\n\nftn-7212 ftn: WARNING IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_max_expr_list_x.F90, Line = 21 \n  Variable \"precision\" is used before it is defined.\n\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_max_expr_list_x.F90, Line = 64, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0057 seconds\nCray Fortran : 150 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36582693830132484
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009123455733060837,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_assign_max_expr_x.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_capture_assign_max_expr_x.F90/atomic_capture_assign_max_expr_x.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_max_expr_x.F90",
                    "config": 1,
                    "errors": "\n\nftn-7212 ftn: WARNING IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_max_expr_x.F90, Line = 19 \n  Variable \"precision\" is used before it is defined.\n\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_max_expr_x.F90, Line = 62, Column = 3 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0054 seconds\nCray Fortran : 144 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3661229517310858
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009137243032455444,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_assign_max_x_expr.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_capture_assign_max_x_expr.F90/atomic_capture_assign_max_x_expr.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_max_x_expr.F90",
                    "config": 1,
                    "errors": "\n\nftn-7212 ftn: WARNING IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_max_x_expr.F90, Line = 19 \n  Variable \"precision\" is used before it is defined.\n\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_max_x_expr.F90, Line = 62, Column = 3 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0053 seconds\nCray Fortran : 144 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36590786278247833
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.00916731171309948,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_assign_max_x_expr_list.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_capture_assign_max_x_expr_list.F90/atomic_capture_assign_max_x_expr_list.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_max_x_expr_list.F90",
                    "config": 1,
                    "errors": "\n\nftn-7212 ftn: WARNING IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_max_x_expr_list.F90, Line = 21 \n  Variable \"precision\" is used before it is defined.\n\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_max_x_expr_list.F90, Line = 65, Column = 1 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0056 seconds\nCray Fortran : 148 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3659605551511049
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.00911237858235836,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_assign_min_expr_list_x.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_capture_assign_min_expr_list_x.F90/atomic_capture_assign_min_expr_list_x.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_min_expr_list_x.F90",
                    "config": 1,
                    "errors": "\n\nftn-7212 ftn: WARNING IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_min_expr_list_x.F90, Line = 21 \n  Variable \"precision\" is used before it is defined.\n\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_min_expr_list_x.F90, Line = 65, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0055 seconds\nCray Fortran : 148 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3658308330923319
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009223544970154762,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_assign_min_expr_x.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_capture_assign_min_expr_x.F90/atomic_capture_assign_min_expr_x.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_min_expr_x.F90",
                    "config": 1,
                    "errors": "\n\nftn-7212 ftn: WARNING IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_min_expr_x.F90, Line = 19 \n  Variable \"precision\" is used before it is defined.\n\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_min_expr_x.F90, Line = 62, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0055 seconds\nCray Fortran : 144 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36591162346303463
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009090205654501915,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_assign_min_x_expr.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_capture_assign_min_x_expr.F90/atomic_capture_assign_min_x_expr.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_min_x_expr.F90",
                    "config": 1,
                    "errors": "\n\nftn-7212 ftn: WARNING IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_min_x_expr.F90, Line = 19 \n  Variable \"precision\" is used before it is defined.\n\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_min_x_expr.F90, Line = 62, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0054 seconds\nCray Fortran : 144 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3658652864396572
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009272025898098946,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_assign_min_x_expr_list.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_capture_assign_min_x_expr_list.F90/atomic_capture_assign_min_x_expr_list.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_min_x_expr_list.F90",
                    "config": 1,
                    "errors": "\n\nftn-7212 ftn: WARNING IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_min_x_expr_list.F90, Line = 21 \n  Variable \"precision\" is used before it is defined.\n\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_min_x_expr_list.F90, Line = 65, Column = 7 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0056 seconds\nCray Fortran : 148 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36580745689570904
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009091271087527275,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_assign_x_and_expr.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_capture_assign_x_and_expr.F90/atomic_capture_assign_x_and_expr.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_and_expr.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_and_expr.F90, Line = 69, Column = 3 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36583814583718777
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009120624512434006,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_assign_x_divided_expr.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_capture_assign_x_divided_expr.F90/atomic_capture_assign_x_divided_expr.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_divided_expr.F90",
                    "config": 1,
                    "errors": "\n\nftn-7212 ftn: WARNING IS_POSSIBLE_2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_divided_expr.F90, Line = 22 \n  Variable \"precision\" is used before it is defined.\n\n\nftn-7212 ftn: WARNING IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_divided_expr.F90, Line = 52 \n  Variable \"precision\" is used before it is defined.\n\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_divided_expr.F90, Line = 102, Column = 3 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0063 seconds\nCray Fortran : 183 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.41593082062900066
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "Failed to complete within timeout",
                    "export": false,
                    "output": "",
                    "result": -1,
                    "runtime": -1,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_capture_assign_x_divided_expr.F90/atomic_capture_assign_x_divided_expr.F901 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_divided_expr.F90",
                    "config": 1,
                    "errors": "\n\nftn-7212 ftn: WARNING IS_POSSIBLE_2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_divided_expr.F90, Line = 22 \n  Variable \"precision\" is used before it is defined.\n\n\nftn-7212 ftn: WARNING IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_divided_expr.F90, Line = 52 \n  Variable \"precision\" is used before it is defined.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0047 seconds\nCray Fortran : 174 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36629112251102924
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.00942893885076046,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_assign_x_eqv_expr.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_capture_assign_x_eqv_expr.F90/atomic_capture_assign_x_eqv_expr.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_eqv_expr.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_eqv_expr.F90, Line = 72, Column = 3 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3660894650965929
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.00917281024158001,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_assign_x_minus_expr.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_capture_assign_x_minus_expr.F90/atomic_capture_assign_x_minus_expr.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_minus_expr.F90",
                    "config": 1,
                    "errors": "\n\nftn-7212 ftn: WARNING IS_POSSIBLE_2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_minus_expr.F90, Line = 19 \n  Variable \"precision\" is used before it is defined.\n\n\nftn-7212 ftn: WARNING IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_minus_expr.F90, Line = 48 \n  Variable \"precision\" is used before it is defined.\n\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_minus_expr.F90, Line = 95, Column = 3 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\n\nftn-1279 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_minus_expr.F90, Line = 113, Column = 46 \n  Procedure \"IS_POSSIBLE\" is defined at line 37 (/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_minus_expr.F90).  The type of this argument does not agree with dummy argument \"INIT\".\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0064 seconds\nCray Fortran : 175 source lines\nCray Fortran : 0 errors, 2 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4159078672528267
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "Failed to complete within timeout",
                    "export": false,
                    "output": "",
                    "result": -1,
                    "runtime": -1,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_capture_assign_x_minus_expr.F90/atomic_capture_assign_x_minus_expr.F901 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_minus_expr.F90",
                    "config": 1,
                    "errors": "\n\nftn-7212 ftn: WARNING IS_POSSIBLE_2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_minus_expr.F90, Line = 19 \n  Variable \"precision\" is used before it is defined.\n\n\nftn-7212 ftn: WARNING IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_minus_expr.F90, Line = 48 \n  Variable \"precision\" is used before it is defined.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0047 seconds\nCray Fortran : 166 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3158769253641367
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009436659514904022,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_assign_x_neqv_expr.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_capture_assign_x_neqv_expr.F90/atomic_capture_assign_x_neqv_expr.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_neqv_expr.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_neqv_expr.F90, Line = 71, Column = 3 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3660543281584978
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009108100086450577,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_assign_x_or_expr.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_capture_assign_x_or_expr.F90/atomic_capture_assign_x_or_expr.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_or_expr.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_or_expr.F90, Line = 72, Column = 3 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.365936940535903
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009265242144465446,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_assign_x_plus_expr.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_capture_assign_x_plus_expr.F90/atomic_capture_assign_x_plus_expr.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_plus_expr.F90",
                    "config": 1,
                    "errors": "\n\nftn-7212 ftn: WARNING IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_plus_expr.F90, Line = 19 \n  Variable \"precision\" is used before it is defined.\n\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_plus_expr.F90, Line = 62, Column = 3 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0056 seconds\nCray Fortran : 145 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36582525074481964
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009158315137028694,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_assign_x_times_expr.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_capture_assign_x_times_expr.F90/atomic_capture_assign_x_times_expr.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_times_expr.F90",
                    "config": 1,
                    "errors": "\n\nftn-7212 ftn: WARNING IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_times_expr.F90, Line = 19 \n  Variable \"precision\" is used before it is defined.\n\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_times_expr.F90, Line = 62, Column = 3 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0055 seconds\nCray Fortran : 145 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3658843543380499
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.009552977979183197,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_expr_and_x_assign.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_capture_expr_and_x_assign.F90/atomic_capture_expr_and_x_assign.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_and_x_assign.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_and_x_assign.F90, Line = 67, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3661562707275152
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009261183440685272,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_expr_divided_x_assign.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_capture_expr_divided_x_assign.F90/atomic_capture_expr_divided_x_assign.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_divided_x_assign.F90",
                    "config": 1,
                    "errors": "\n\nftn-7212 ftn: WARNING IS_POSSIBLE_2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_divided_x_assign.F90, Line = 22 \n  Variable \"precision\" is used before it is defined.\n\n\nftn-7212 ftn: WARNING IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_divided_x_assign.F90, Line = 52 \n  Variable \"precision\" is used before it is defined.\n\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_divided_x_assign.F90, Line = 102, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0065 seconds\nCray Fortran : 183 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4159129559993744
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "Failed to complete within timeout",
                    "export": false,
                    "output": "",
                    "result": -1,
                    "runtime": -1,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_capture_expr_divided_x_assign.F90/atomic_capture_expr_divided_x_assign.F901 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_divided_x_assign.F90",
                    "config": 1,
                    "errors": "\n\nftn-7212 ftn: WARNING IS_POSSIBLE_2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_divided_x_assign.F90, Line = 22 \n  Variable \"precision\" is used before it is defined.\n\n\nftn-7212 ftn: WARNING IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_divided_x_assign.F90, Line = 52 \n  Variable \"precision\" is used before it is defined.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0048 seconds\nCray Fortran : 174 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36607699282467365
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009202105924487114,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_expr_eqv_x_assign.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_capture_expr_eqv_x_assign.F90/atomic_capture_expr_eqv_x_assign.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_eqv_x_assign.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_eqv_x_assign.F90, Line = 72, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3659174516797066
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009125974029302597,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_expr_minus_x_assign.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_capture_expr_minus_x_assign.F90/atomic_capture_expr_minus_x_assign.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_minus_x_assign.F90",
                    "config": 1,
                    "errors": "\n\nftn-7212 ftn: WARNING IS_POSSIBLE_2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_minus_x_assign.F90, Line = 19 \n  Variable \"precision\" is used before it is defined.\n\n\nftn-7212 ftn: WARNING IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_minus_x_assign.F90, Line = 48 \n  Variable \"precision\" is used before it is defined.\n\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_minus_x_assign.F90, Line = 95, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\n\nftn-1279 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_minus_x_assign.F90, Line = 113, Column = 52 \n  Procedure \"IS_POSSIBLE\" is defined at line 37 (/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_minus_x_assign.F90).  The type of this argument does not agree with dummy argument \"INIT\".\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0063 seconds\nCray Fortran : 175 source lines\nCray Fortran : 0 errors, 2 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4159581642597914
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "Failed to complete within timeout",
                    "export": false,
                    "output": "",
                    "result": -1,
                    "runtime": -1,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_capture_expr_minus_x_assign.F90/atomic_capture_expr_minus_x_assign.F901 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_minus_x_assign.F90",
                    "config": 1,
                    "errors": "\n\nftn-7212 ftn: WARNING IS_POSSIBLE_2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_minus_x_assign.F90, Line = 19 \n  Variable \"precision\" is used before it is defined.\n\n\nftn-7212 ftn: WARNING IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_minus_x_assign.F90, Line = 48 \n  Variable \"precision\" is used before it is defined.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0047 seconds\nCray Fortran : 166 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36646389216184616
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.00930768996477127,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_expr_neqv_x_assign.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_capture_expr_neqv_x_assign.F90/atomic_capture_expr_neqv_x_assign.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_neqv_x_assign.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_neqv_x_assign.F90, Line = 71, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3659795094281435
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.00912657380104065,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_expr_or_x_assign.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_capture_expr_or_x_assign.F90/atomic_capture_expr_or_x_assign.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_or_x_assign.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_or_x_assign.F90, Line = 72, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3658050652593374
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009112238883972168,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_expr_plus_x_assign.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_capture_expr_plus_x_assign.F90/atomic_capture_expr_plus_x_assign.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_plus_x_assign.F90",
                    "config": 1,
                    "errors": "\n\nftn-7212 ftn: WARNING IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_plus_x_assign.F90, Line = 19 \n  Variable \"precision\" is used before it is defined.\n\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_plus_x_assign.F90, Line = 62, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0056 seconds\nCray Fortran : 145 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3658619411289692
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.0091208815574646,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_expr_times_x_assign.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_capture_expr_times_x_assign.F90/atomic_capture_expr_times_x_assign.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_times_x_assign.F90",
                    "config": 1,
                    "errors": "\n\nftn-7212 ftn: WARNING IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_times_x_assign.F90, Line = 19 \n  Variable \"precision\" is used before it is defined.\n\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_times_x_assign.F90, Line = 62, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0055 seconds\nCray Fortran : 145 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36579892225563526
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.009227000176906586,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_iand_expr_x_assign.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_capture_iand_expr_x_assign.F90/atomic_capture_iand_expr_x_assign.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_iand_expr_x_assign.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_iand_expr_x_assign.F90, Line = 78, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4159608669579029
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009107038378715515,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_iand_x_expr_assign.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_capture_iand_x_expr_assign.F90/atomic_capture_iand_x_expr_assign.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_iand_x_expr_assign.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_iand_x_expr_assign.F90, Line = 78, Column = 3 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36583717353641987
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009114963933825493,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_ior_expr_x_assign.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_capture_ior_expr_x_assign.F90/atomic_capture_ior_expr_x_assign.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_ior_expr_x_assign.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_ior_expr_x_assign.F90, Line = 72, Column = 3 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3657847251743078
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009184423834085464,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_ior_x_expr_assign.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_capture_ior_x_expr_assign.F90/atomic_capture_ior_x_expr_assign.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_ior_x_expr_assign.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_ior_x_expr_assign.F90, Line = 72, Column = 3 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3658658564090729
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009111875668168068,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_ixor_expr_x_assign.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_capture_ixor_expr_x_assign.F90/atomic_capture_ixor_expr_x_assign.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_ixor_expr_x_assign.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_ixor_expr_x_assign.F90, Line = 72, Column = 3 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3658489864319563
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009189022704958916,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_ixor_x_expr_assign.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_capture_ixor_x_expr_assign.F90/atomic_capture_ixor_x_expr_assign.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_ixor_x_expr_assign.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_ixor_x_expr_assign.F90, Line = 72, Column = 3 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36593848280608654
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009113973006606102,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_max_expr_list_x_assign.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_capture_max_expr_list_x_assign.F90/atomic_capture_max_expr_list_x_assign.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_max_expr_list_x_assign.F90",
                    "config": 1,
                    "errors": "\n\nftn-7212 ftn: WARNING IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_max_expr_list_x_assign.F90, Line = 21 \n  Variable \"precision\" is used before it is defined.\n\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_max_expr_list_x_assign.F90, Line = 65, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0058 seconds\nCray Fortran : 148 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3658249229192734
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009189419448375702,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_max_expr_x_assign.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_capture_max_expr_x_assign.F90/atomic_capture_max_expr_x_assign.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_max_expr_x_assign.F90",
                    "config": 1,
                    "errors": "\n\nftn-7212 ftn: WARNING IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_max_expr_x_assign.F90, Line = 19 \n  Variable \"precision\" is used before it is defined.\n\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_max_expr_x_assign.F90, Line = 62, Column = 3 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0055 seconds\nCray Fortran : 144 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3658493161201477
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009160077199339867,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_max_x_expr_assign.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_capture_max_x_expr_assign.F90/atomic_capture_max_x_expr_assign.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_max_x_expr_assign.F90",
                    "config": 1,
                    "errors": "\n\nftn-7212 ftn: WARNING IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_max_x_expr_assign.F90, Line = 19 \n  Variable \"precision\" is used before it is defined.\n\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_max_x_expr_assign.F90, Line = 62, Column = 3 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0055 seconds\nCray Fortran : 144 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36585097201168537
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009405303746461868,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_max_x_expr_list_assign.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_capture_max_x_expr_list_assign.F90/atomic_capture_max_x_expr_list_assign.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_max_x_expr_list_assign.F90",
                    "config": 1,
                    "errors": "\n\nftn-7212 ftn: WARNING IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_max_x_expr_list_assign.F90, Line = 21 \n  Variable \"precision\" is used before it is defined.\n\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_max_x_expr_list_assign.F90, Line = 65, Column = 1 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0057 seconds\nCray Fortran : 148 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36591955833137035
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009240977466106415,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_min_expr_list_x_assign.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_capture_min_expr_list_x_assign.F90/atomic_capture_min_expr_list_x_assign.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_min_expr_list_x_assign.F90",
                    "config": 1,
                    "errors": "\n\nftn-7212 ftn: WARNING IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_min_expr_list_x_assign.F90, Line = 21 \n  Variable \"precision\" is used before it is defined.\n\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_min_expr_list_x_assign.F90, Line = 65, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0058 seconds\nCray Fortran : 148 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36580037511885166
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009153805673122406,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_min_expr_x_assign.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_capture_min_expr_x_assign.F90/atomic_capture_min_expr_x_assign.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_min_expr_x_assign.F90",
                    "config": 1,
                    "errors": "\n\nftn-7212 ftn: WARNING IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_min_expr_x_assign.F90, Line = 19 \n  Variable \"precision\" is used before it is defined.\n\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_min_expr_x_assign.F90, Line = 62, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0055 seconds\nCray Fortran : 144 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36590066365897655
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009161008521914482,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_min_x_expr_assign.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_capture_min_x_expr_assign.F90/atomic_capture_min_x_expr_assign.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_min_x_expr_assign.F90",
                    "config": 1,
                    "errors": "\n\nftn-7212 ftn: WARNING IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_min_x_expr_assign.F90, Line = 19 \n  Variable \"precision\" is used before it is defined.\n\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_min_x_expr_assign.F90, Line = 62, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0056 seconds\nCray Fortran : 144 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3658684529364109
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009179774671792984,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_min_x_expr_list_assign.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_capture_min_x_expr_list_assign.F90/atomic_capture_min_x_expr_list_assign.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_min_x_expr_list_assign.F90",
                    "config": 1,
                    "errors": "\n\nftn-7212 ftn: WARNING IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_min_x_expr_list_assign.F90, Line = 21 \n  Variable \"precision\" is used before it is defined.\n\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_min_x_expr_list_assign.F90, Line = 65, Column = 7 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0059 seconds\nCray Fortran : 148 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3658633828163147
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009208586066961288,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_x_and_expr_assign.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_capture_x_and_expr_assign.F90/atomic_capture_x_and_expr_assign.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_and_expr_assign.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_and_expr_assign.F90, Line = 69, Column = 3 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36586280912160873
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009097952395677567,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_x_divided_expr_assign.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_capture_x_divided_expr_assign.F90/atomic_capture_x_divided_expr_assign.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_divided_expr_assign.F90",
                    "config": 1,
                    "errors": "\n\nftn-7212 ftn: WARNING IS_POSSIBLE_2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_divided_expr_assign.F90, Line = 22 \n  Variable \"precision\" is used before it is defined.\n\n\nftn-7212 ftn: WARNING IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_divided_expr_assign.F90, Line = 52 \n  Variable \"precision\" is used before it is defined.\n\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_divided_expr_assign.F90, Line = 102, Column = 3 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0063 seconds\nCray Fortran : 183 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.41590464301407337
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "Failed to complete within timeout",
                    "export": false,
                    "output": "",
                    "result": -1,
                    "runtime": -1,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_capture_x_divided_expr_assign.F90/atomic_capture_x_divided_expr_assign.F901 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_divided_expr_assign.F90",
                    "config": 1,
                    "errors": "\n\nftn-7212 ftn: WARNING IS_POSSIBLE_2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_divided_expr_assign.F90, Line = 22 \n  Variable \"precision\" is used before it is defined.\n\n\nftn-7212 ftn: WARNING IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_divided_expr_assign.F90, Line = 52 \n  Variable \"precision\" is used before it is defined.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0047 seconds\nCray Fortran : 174 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31586298160254955
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009250890463590622,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_x_eqv_expr_assign.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_capture_x_eqv_expr_assign.F90/atomic_capture_x_eqv_expr_assign.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_eqv_expr_assign.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_eqv_expr_assign.F90, Line = 72, Column = 3 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3658856078982353
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009452840313315392,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_x_minus_expr_assign.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_capture_x_minus_expr_assign.F90/atomic_capture_x_minus_expr_assign.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_minus_expr_assign.F90",
                    "config": 1,
                    "errors": "\n\nftn-7212 ftn: WARNING IS_POSSIBLE_2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_minus_expr_assign.F90, Line = 19 \n  Variable \"precision\" is used before it is defined.\n\n\nftn-7212 ftn: WARNING IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_minus_expr_assign.F90, Line = 48 \n  Variable \"precision\" is used before it is defined.\n\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_minus_expr_assign.F90, Line = 95, Column = 3 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\n\nftn-1279 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_minus_expr_assign.F90, Line = 113, Column = 46 \n  Procedure \"IS_POSSIBLE\" is defined at line 37 (/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_minus_expr_assign.F90).  The type of this argument does not agree with dummy argument \"INIT\".\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0063 seconds\nCray Fortran : 175 source lines\nCray Fortran : 0 errors, 2 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.41601182147860527
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "Failed to complete within timeout",
                    "export": false,
                    "output": "",
                    "result": -1,
                    "runtime": -1,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_capture_x_minus_expr_assign.F90/atomic_capture_x_minus_expr_assign.F901 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_minus_expr_assign.F90",
                    "config": 1,
                    "errors": "\n\nftn-7212 ftn: WARNING IS_POSSIBLE_2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_minus_expr_assign.F90, Line = 19 \n  Variable \"precision\" is used before it is defined.\n\n\nftn-7212 ftn: WARNING IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_minus_expr_assign.F90, Line = 48 \n  Variable \"precision\" is used before it is defined.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0047 seconds\nCray Fortran : 166 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3661399558186531
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009250931441783905,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_x_neqv_expr_assign.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_capture_x_neqv_expr_assign.F90/atomic_capture_x_neqv_expr_assign.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_neqv_expr_assign.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_neqv_expr_assign.F90, Line = 71, Column = 3 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3658336643129587
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009198775514960289,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_x_or_expr_assign.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_capture_x_or_expr_assign.F90/atomic_capture_x_or_expr_assign.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_or_expr_assign.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_or_expr_assign.F90, Line = 72, Column = 3 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36579720489680767
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.00967579334974289,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_x_plus_expr_assign.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_capture_x_plus_expr_assign.F90/atomic_capture_x_plus_expr_assign.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_plus_expr_assign.F90",
                    "config": 1,
                    "errors": "\n\nftn-7212 ftn: WARNING IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_plus_expr_assign.F90, Line = 19 \n  Variable \"precision\" is used before it is defined.\n\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_plus_expr_assign.F90, Line = 62, Column = 3 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0054 seconds\nCray Fortran : 145 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3657900020480156
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009199244901537895,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_x_times_expr_assign.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_capture_x_times_expr_assign.F90/atomic_capture_x_times_expr_assign.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_times_expr_assign.F90",
                    "config": 1,
                    "errors": "\n\nftn-7212 ftn: WARNING IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_times_expr_assign.F90, Line = 19 \n  Variable \"precision\" is used before it is defined.\n\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_times_expr_assign.F90, Line = 62, Column = 3 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0055 seconds\nCray Fortran : 145 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3657974060624838
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.009110620245337486,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_expr_and_x.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_expr_and_x.F90/atomic_expr_and_x.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_and_x.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_and_x.F90, Line = 33, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0042 seconds\nCray Fortran : 104 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.26587257348001003
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009105401113629341,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_expr_and_x_end.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_expr_and_x_end.F90/atomic_expr_and_x_end.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_and_x_end.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_and_x_end.F90, Line = 33, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0041 seconds\nCray Fortran : 105 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2657690327614546
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009118493646383286,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_expr_divided_x.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_expr_divided_x.F90/atomic_expr_divided_x.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_divided_x.F90",
                    "config": 1,
                    "errors": "\n\nftn-7212 ftn: WARNING IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_divided_x.F90, Line = 12 \n  Variable \"precision\" is used before it is defined.\n\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_divided_x.F90, Line = 57, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\n\nftn-1279 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_divided_x.F90, Line = 74, Column = 50 \n  Procedure \"IS_POSSIBLE\" is defined at line 1 (/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_divided_x.F90).  The type of this argument does not agree with dummy argument \"INIT\".\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0051 seconds\nCray Fortran : 125 source lines\nCray Fortran : 0 errors, 2 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3157991748303175
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "Failed to complete within timeout",
                    "export": false,
                    "output": "",
                    "result": -1,
                    "runtime": -1,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_expr_divided_x.F90/atomic_expr_divided_x.F901 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_divided_x.F90",
                    "config": 1,
                    "errors": "\n\nftn-7212 ftn: WARNING IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_divided_x.F90, Line = 12 \n  Variable \"precision\" is used before it is defined.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Tue Jun 21, 2022  10:55:56\nCray Fortran : Compile time:  0.0610 seconds\nCray Fortran : 116 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2659960836172104
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009233934804797173,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_expr_divided_x_end.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_expr_divided_x_end.F90/atomic_expr_divided_x_end.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_divided_x_end.F90",
                    "config": 1,
                    "errors": "\n\nftn-7212 ftn: WARNING IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_divided_x_end.F90, Line = 12 \n  Variable \"precision\" is used before it is defined.\n\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_divided_x_end.F90, Line = 57, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\n\nftn-1279 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_divided_x_end.F90, Line = 75, Column = 50 \n  Procedure \"IS_POSSIBLE\" is defined at line 1 (/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_divided_x_end.F90).  The type of this argument does not agree with dummy argument \"INIT\".\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0051 seconds\nCray Fortran : 126 source lines\nCray Fortran : 0 errors, 2 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3157787788659334
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "Failed to complete within timeout",
                    "export": false,
                    "output": "",
                    "result": -1,
                    "runtime": -1,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_expr_divided_x_end.F90/atomic_expr_divided_x_end.F901 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_divided_x_end.F90",
                    "config": 1,
                    "errors": "\n\nftn-7212 ftn: WARNING IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_divided_x_end.F90, Line = 12 \n  Variable \"precision\" is used before it is defined.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Tue Jun 21, 2022  10:56:07\nCray Fortran : Compile time:  0.0612 seconds\nCray Fortran : 117 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.26594715006649494
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009277364239096642,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_expr_eqv_x.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_expr_eqv_x.F90/atomic_expr_eqv_x.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_eqv_x.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_eqv_x.F90, Line = 33, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0041 seconds\nCray Fortran : 104 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2658559437841177
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009722596034407616,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_expr_eqv_x_end.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_expr_eqv_x_end.F90/atomic_expr_eqv_x_end.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_eqv_x_end.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_eqv_x_end.F90, Line = 33, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0042 seconds\nCray Fortran : 105 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.26571766287088394
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009142324328422546,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_expr_minus_x.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_expr_minus_x.F90/atomic_expr_minus_x.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_minus_x.F90",
                    "config": 1,
                    "errors": "\n\nftn-7212 ftn: WARNING IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_minus_x.F90, Line = 12 \n  Variable \"precision\" is used before it is defined.\n\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_minus_x.F90, Line = 57, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\n\nftn-1279 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_minus_x.F90, Line = 73, Column = 50 \n  Procedure \"IS_POSSIBLE\" is defined at line 1 (/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_minus_x.F90).  The type of this argument does not agree with dummy argument \"INIT\".\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0050 seconds\nCray Fortran : 124 source lines\nCray Fortran : 0 errors, 2 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3159821443259716
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "Failed to complete within timeout",
                    "export": false,
                    "output": "",
                    "result": -1,
                    "runtime": -1,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_expr_minus_x.F90/atomic_expr_minus_x.F901 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_minus_x.F90",
                    "config": 1,
                    "errors": "\n\nftn-7212 ftn: WARNING IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_minus_x.F90, Line = 12 \n  Variable \"precision\" is used before it is defined.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Tue Jun 21, 2022  10:56:18\nCray Fortran : Compile time:  0.0620 seconds\nCray Fortran : 115 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2663388904184103
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.00921272300183773,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_expr_minus_x_end.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_expr_minus_x_end.F90/atomic_expr_minus_x_end.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_minus_x_end.F90",
                    "config": 1,
                    "errors": "\n\nftn-7212 ftn: WARNING IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_minus_x_end.F90, Line = 12 \n  Variable \"precision\" is used before it is defined.\n\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_minus_x_end.F90, Line = 57, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\n\nftn-1279 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_minus_x_end.F90, Line = 74, Column = 50 \n  Procedure \"IS_POSSIBLE\" is defined at line 1 (/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_minus_x_end.F90).  The type of this argument does not agree with dummy argument \"INIT\".\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0050 seconds\nCray Fortran : 125 source lines\nCray Fortran : 0 errors, 2 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31588910333812237
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "Failed to complete within timeout",
                    "export": false,
                    "output": "",
                    "result": -1,
                    "runtime": -1,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_expr_minus_x_end.F90/atomic_expr_minus_x_end.F901 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_minus_x_end.F90",
                    "config": 1,
                    "errors": "\n\nftn-7212 ftn: WARNING IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_minus_x_end.F90, Line = 12 \n  Variable \"precision\" is used before it is defined.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Tue Jun 21, 2022  10:56:28\nCray Fortran : Compile time:  0.0623 seconds\nCray Fortran : 116 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3162320014089346
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.00921214185655117,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_expr_neqv_x.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_expr_neqv_x.F90/atomic_expr_neqv_x.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_neqv_x.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_neqv_x.F90, Line = 33, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\n\nftn-303 ftn: ERROR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_neqv_x.F90, Line = 52, Column = 36 \n  Data type LOGICAL is not allowed with LOGICAL for the operation \"ne\".\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0040 seconds\nCray Fortran : 104 source lines\nCray Fortran : 1 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11560841649770737
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_expr_neqv_x.F90/atomic_expr_neqv_x.F901 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_neqv_x.F90",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.21575684659183025
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009484119713306427,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_expr_neqv_x_end.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_expr_neqv_x_end.F90/atomic_expr_neqv_x_end.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_neqv_x_end.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_neqv_x_end.F90, Line = 33, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\n\nftn-303 ftn: ERROR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_neqv_x_end.F90, Line = 53, Column = 36 \n  Data type LOGICAL is not allowed with LOGICAL for the operation \"ne\".\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0041 seconds\nCray Fortran : 105 source lines\nCray Fortran : 1 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11550273932516575
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_expr_neqv_x_end.F90/atomic_expr_neqv_x_end.F901 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_neqv_x_end.F90",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.21553253941237926
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009231898933649063,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_expr_or_x.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_expr_or_x.F90/atomic_expr_or_x.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_or_x.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_or_x.F90, Line = 33, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0041 seconds\nCray Fortran : 104 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.26574272848665714
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009137194603681564,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_expr_or_x_end.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_expr_or_x_end.F90/atomic_expr_or_x_end.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_or_x_end.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_or_x_end.F90, Line = 33, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0042 seconds\nCray Fortran : 105 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2657426968216896
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009170183911919594,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_expr_plus_x.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_expr_plus_x.F90/atomic_expr_plus_x.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_plus_x.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_plus_x.F90, Line = 23, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0042 seconds\nCray Fortran : 93 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.26572367176413536
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009147701784968376,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_expr_plus_x_end.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_expr_plus_x_end.F90/atomic_expr_plus_x_end.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_plus_x_end.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_plus_x_end.F90, Line = 23, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0042 seconds\nCray Fortran : 94 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.26587306149303913
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009231587871909142,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_expr_times_x.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_expr_times_x.F90/atomic_expr_times_x.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_times_x.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_times_x.F90, Line = 23, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0041 seconds\nCray Fortran : 93 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2657307479530573
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.00912964902818203,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_expr_times_x_end.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_expr_times_x_end.F90/atomic_expr_times_x_end.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_times_x_end.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_times_x_end.F90, Line = 23, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0040 seconds\nCray Fortran : 94 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2657991051673889
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009441383183002472,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_iand_expr_x.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_iand_expr_x.F90/atomic_iand_expr_x.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_iand_expr_x.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_iand_expr_x.F90, Line = 37, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0045 seconds\nCray Fortran : 102 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3157297056168318
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009432723745703697,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_iand_expr_x_end.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_iand_expr_x_end.F90/atomic_iand_expr_x_end.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_iand_expr_x_end.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_iand_expr_x_end.F90, Line = 37, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0046 seconds\nCray Fortran : 103 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31577129289507866
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009378565475344658,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_iand_x_expr.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_iand_x_expr.F90/atomic_iand_x_expr.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_iand_x_expr.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_iand_x_expr.F90, Line = 37, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0045 seconds\nCray Fortran : 102 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3158118277788162
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009126584976911545,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_iand_x_expr_end.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_iand_x_expr_end.F90/atomic_iand_x_expr_end.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_iand_x_expr_end.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_iand_x_expr_end.F90, Line = 37, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0046 seconds\nCray Fortran : 103 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31574973464012146
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009122667834162712,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_ior_expr_x.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_ior_expr_x.F90/atomic_ior_expr_x.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_ior_expr_x.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_ior_expr_x.F90, Line = 35, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0043 seconds\nCray Fortran : 100 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.26568222790956497
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009116794914007187,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_ior_expr_x_end.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_ior_expr_x_end.F90/atomic_ior_expr_x_end.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_ior_expr_x_end.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_ior_expr_x_end.F90, Line = 35, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0043 seconds\nCray Fortran : 101 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.26580767147243023
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009577596560120583,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_ior_x_expr.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_ior_x_expr.F90/atomic_ior_x_expr.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_ior_x_expr.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_ior_x_expr.F90, Line = 35, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0044 seconds\nCray Fortran : 100 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.26570869609713554
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009502885863184929,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_ior_x_expr_end.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_ior_x_expr_end.F90/atomic_ior_x_expr_end.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_ior_x_expr_end.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_ior_x_expr_end.F90, Line = 35, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0045 seconds\nCray Fortran : 101 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2656497061252594
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009652985259890556,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_ixor_expr_x.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_ixor_expr_x.F90/atomic_ixor_expr_x.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_ixor_expr_x.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_ixor_expr_x.F90, Line = 35, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0045 seconds\nCray Fortran : 100 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.26564365439116955
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009128155186772346,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_ixor_expr_x_end.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_ixor_expr_x_end.F90/atomic_ixor_expr_x_end.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_ixor_expr_x_end.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_ixor_expr_x_end.F90, Line = 35, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0045 seconds\nCray Fortran : 101 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2657431308180094
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009101616218686104,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_ixor_x_expr.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_ixor_x_expr.F90/atomic_ixor_x_expr.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_ixor_x_expr.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_ixor_x_expr.F90, Line = 35, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0043 seconds\nCray Fortran : 100 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2656710855662823
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009108440950512886,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_ixor_x_expr_end.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_ixor_x_expr_end.F90/atomic_ixor_x_expr_end.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_ixor_x_expr_end.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_ixor_x_expr_end.F90, Line = 35, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0043 seconds\nCray Fortran : 101 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.26570195332169533
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009196685627102852,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_max_expr_list_x.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_max_expr_list_x.F90/atomic_max_expr_list_x.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_max_expr_list_x.F90",
                    "config": 1,
                    "errors": "\n\nftn-63 ftn: ERROR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_max_expr_list_x.F90, Line = 5 \n  The compiler cannot open INCLUDE file \"acc_testsuite.f90\".\n\n\nftn-113 ftn: ERROR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_max_expr_list_x.F90, Line = 7, Column = 27 \n  IMPLICIT NONE is specified in the local scope, therefore an explicit type must be specified for data object \"LOOPCOUNT\".\n\n\nftn-1725 ftn: ERROR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_max_expr_list_x.F90, Line = 12, Column = 17 \n  Unexpected syntax while parsing the statement-function statement : \"dummy-arg-name\" was expected but found \"1\".\n\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_max_expr_list_x.F90, Line = 23, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0060 seconds\nCray Fortran : 79 source lines\nCray Fortran : 3 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11545749381184578
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_max_expr_list_x.F90/atomic_max_expr_list_x.F901 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_max_expr_list_x.F90",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.21576498076319695
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009188441559672356,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_max_expr_list_x_end.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_max_expr_list_x_end.F90/atomic_max_expr_list_x_end.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_max_expr_list_x_end.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_max_expr_list_x_end.F90, Line = 24, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\n\nftn-288 ftn: ERROR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_max_expr_list_x_end.F90, Line = 37, Column = 9 \n  A termination statement is missing for this DO statement.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0039 seconds\nCray Fortran : 89 source lines\nCray Fortran : 1 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.1157890111207962
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_max_expr_list_x_end.F90/atomic_max_expr_list_x_end.F901 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_max_expr_list_x_end.F90",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.21582740731537342
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009381329640746117,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_max_expr_x.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_max_expr_x.F90/atomic_max_expr_x.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_max_expr_x.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_max_expr_x.F90, Line = 23, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0042 seconds\nCray Fortran : 88 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.26600576005876064
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009480524808168411,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_max_expr_x_end.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_max_expr_x_end.F90/atomic_max_expr_x_end.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_max_expr_x_end.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_max_expr_x_end.F90, Line = 23, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0042 seconds\nCray Fortran : 89 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2659257911145687
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009352056309580803,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_max_x_expr.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_max_x_expr.F90/atomic_max_x_expr.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_max_x_expr.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_max_x_expr.F90, Line = 23, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0042 seconds\nCray Fortran : 88 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2657637894153595
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.017171446233987808,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_max_x_expr_end.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_max_x_expr_end.F90/atomic_max_x_expr_end.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_max_x_expr_end.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_max_x_expr_end.F90, Line = 23, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0042 seconds\nCray Fortran : 89 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2657424733042717
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009138960391283035,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_max_x_expr_list.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_max_x_expr_list.F90/atomic_max_x_expr_list.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_max_x_expr_list.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_max_x_expr_list.F90, Line = 24, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0042 seconds\nCray Fortran : 89 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2657202482223511
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009158726781606674,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_max_x_expr_list_end.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_max_x_expr_list_end.F90/atomic_max_x_expr_list_end.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_max_x_expr_list_end.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_max_x_expr_list_end.F90, Line = 24, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0042 seconds\nCray Fortran : 90 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2656907234340906
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009153127670288086,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_min_expr_list_x.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_min_expr_list_x.F90/atomic_min_expr_list_x.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_min_expr_list_x.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_min_expr_list_x.F90, Line = 24, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0041 seconds\nCray Fortran : 89 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.265975434333086
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.00925241969525814,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_min_expr_list_x_end.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_min_expr_list_x_end.F90/atomic_min_expr_list_x_end.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_min_expr_list_x_end.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_min_expr_list_x_end.F90, Line = 24, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0041 seconds\nCray Fortran : 90 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2659158855676651
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009373245760798454,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_min_expr_x.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_min_expr_x.F90/atomic_min_expr_x.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_min_expr_x.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_min_expr_x.F90, Line = 23, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0042 seconds\nCray Fortran : 88 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2658538594841957
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009241530671715736,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_min_expr_x_end.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_min_expr_x_end.F90/atomic_min_expr_x_end.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_min_expr_x_end.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_min_expr_x_end.F90, Line = 23, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0041 seconds\nCray Fortran : 89 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.26592785492539406
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009291423484683037,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_min_x_expr.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_min_x_expr.F90/atomic_min_x_expr.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_min_x_expr.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_min_x_expr.F90, Line = 23, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0042 seconds\nCray Fortran : 88 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.26579300314188004
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009114284068346024,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_min_x_expr_end.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_min_x_expr_end.F90/atomic_min_x_expr_end.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_min_x_expr_end.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_min_x_expr_end.F90, Line = 23, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0043 seconds\nCray Fortran : 89 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.265712833032012
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009109385311603546,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_min_x_expr_list.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_min_x_expr_list.F90/atomic_min_x_expr_list.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_min_x_expr_list.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_min_x_expr_list.F90, Line = 24, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0042 seconds\nCray Fortran : 89 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.265720970928669
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009084917604923248,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_min_x_expr_list_end.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_min_x_expr_list_end.F90/atomic_min_x_expr_list_end.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_min_x_expr_list_end.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_min_x_expr_list_end.F90, Line = 24, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0041 seconds\nCray Fortran : 90 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.26570400036871433
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009423920884728432,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_expr_and_x.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_update_expr_and_x.F90/atomic_update_expr_and_x.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_and_x.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_and_x.F90, Line = 33, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0042 seconds\nCray Fortran : 104 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.26604674756526947
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009175878018140793,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_expr_and_x_end.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_update_expr_and_x_end.F90/atomic_update_expr_and_x_end.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_and_x_end.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_and_x_end.F90, Line = 33, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0041 seconds\nCray Fortran : 105 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.26568557508289814
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009115424007177353,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_expr_divided_x.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_update_expr_divided_x.F90/atomic_update_expr_divided_x.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_divided_x.F90",
                    "config": 1,
                    "errors": "\n\nftn-7212 ftn: WARNING IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_divided_x.F90, Line = 12 \n  Variable \"precision\" is used before it is defined.\n\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_divided_x.F90, Line = 57, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\n\nftn-1279 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_divided_x.F90, Line = 74, Column = 50 \n  Procedure \"IS_POSSIBLE\" is defined at line 1 (/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_divided_x.F90).  The type of this argument does not agree with dummy argument \"INIT\".\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0050 seconds\nCray Fortran : 125 source lines\nCray Fortran : 0 errors, 2 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31572300568223
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "Failed to complete within timeout",
                    "export": false,
                    "output": "",
                    "result": -1,
                    "runtime": -1,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_update_expr_divided_x.F90/atomic_update_expr_divided_x.F901 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_divided_x.F90",
                    "config": 1,
                    "errors": "\n\nftn-7212 ftn: WARNING IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_divided_x.F90, Line = 12 \n  Variable \"precision\" is used before it is defined.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Tue Jun 21, 2022  10:56:50\nCray Fortran : Compile time:  0.0628 seconds\nCray Fortran : 116 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.265654006972909
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.00916934572160244,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_expr_divided_x_end.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_update_expr_divided_x_end.F90/atomic_update_expr_divided_x_end.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_divided_x_end.F90",
                    "config": 1,
                    "errors": "\n\nftn-7212 ftn: WARNING IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_divided_x_end.F90, Line = 12 \n  Variable \"precision\" is used before it is defined.\n\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_divided_x_end.F90, Line = 57, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\n\nftn-1279 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_divided_x_end.F90, Line = 75, Column = 50 \n  Procedure \"IS_POSSIBLE\" is defined at line 1 (/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_divided_x_end.F90).  The type of this argument does not agree with dummy argument \"INIT\".\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0050 seconds\nCray Fortran : 126 source lines\nCray Fortran : 0 errors, 2 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3158921916037798
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "Failed to complete within timeout",
                    "export": false,
                    "output": "",
                    "result": -1,
                    "runtime": -1,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_update_expr_divided_x_end.F90/atomic_update_expr_divided_x_end.F901 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_divided_x_end.F90",
                    "config": 1,
                    "errors": "\n\nftn-7212 ftn: WARNING IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_divided_x_end.F90, Line = 12 \n  Variable \"precision\" is used before it is defined.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Tue Jun 21, 2022  10:57:01\nCray Fortran : Compile time:  0.0616 seconds\nCray Fortran : 117 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.26572081446647644
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009166687726974487,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_expr_eqv_x.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_update_expr_eqv_x.F90/atomic_update_expr_eqv_x.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_eqv_x.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_eqv_x.F90, Line = 33, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0043 seconds\nCray Fortran : 104 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.26577807031571865
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009143706411123276,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_expr_eqv_x_end.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_update_expr_eqv_x_end.F90/atomic_update_expr_eqv_x_end.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_eqv_x_end.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_eqv_x_end.F90, Line = 33, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0042 seconds\nCray Fortran : 105 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2656803783029318
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009243924170732498,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_expr_minus_x.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_update_expr_minus_x.F90/atomic_update_expr_minus_x.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_minus_x.F90",
                    "config": 1,
                    "errors": "\n\nftn-7212 ftn: WARNING IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_minus_x.F90, Line = 12 \n  Variable \"precision\" is used before it is defined.\n\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_minus_x.F90, Line = 57, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\n\nftn-1279 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_minus_x.F90, Line = 73, Column = 50 \n  Procedure \"IS_POSSIBLE\" is defined at line 1 (/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_minus_x.F90).  The type of this argument does not agree with dummy argument \"INIT\".\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0051 seconds\nCray Fortran : 124 source lines\nCray Fortran : 0 errors, 2 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3158051799982786
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "Failed to complete within timeout",
                    "export": false,
                    "output": "",
                    "result": -1,
                    "runtime": -1,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_update_expr_minus_x.F90/atomic_update_expr_minus_x.F901 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_minus_x.F90",
                    "config": 1,
                    "errors": "\n\nftn-7212 ftn: WARNING IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_minus_x.F90, Line = 12 \n  Variable \"precision\" is used before it is defined.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Tue Jun 21, 2022  10:57:12\nCray Fortran : Compile time:  0.0604 seconds\nCray Fortran : 115 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2658165395259857
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009234704077243805,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_expr_minus_x_end.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_update_expr_minus_x_end.F90/atomic_update_expr_minus_x_end.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_minus_x_end.F90",
                    "config": 1,
                    "errors": "\n\nftn-7212 ftn: WARNING IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_minus_x_end.F90, Line = 12 \n  Variable \"precision\" is used before it is defined.\n\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_minus_x_end.F90, Line = 57, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\n\nftn-1279 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_minus_x_end.F90, Line = 74, Column = 50 \n  Procedure \"IS_POSSIBLE\" is defined at line 1 (/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_minus_x_end.F90).  The type of this argument does not agree with dummy argument \"INIT\".\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0049 seconds\nCray Fortran : 125 source lines\nCray Fortran : 0 errors, 2 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3158623278141022
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "Failed to complete within timeout",
                    "export": false,
                    "output": "",
                    "result": -1,
                    "runtime": -1,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_update_expr_minus_x_end.F90/atomic_update_expr_minus_x_end.F901 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_minus_x_end.F90",
                    "config": 1,
                    "errors": "\n\nftn-7212 ftn: WARNING IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_minus_x_end.F90, Line = 12 \n  Variable \"precision\" is used before it is defined.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Tue Jun 21, 2022  10:57:23\nCray Fortran : Compile time:  0.0622 seconds\nCray Fortran : 116 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2663784399628639
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009462419897317886,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_expr_neqv_x.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_update_expr_neqv_x.F90/atomic_update_expr_neqv_x.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_neqv_x.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_neqv_x.F90, Line = 33, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0042 seconds\nCray Fortran : 104 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2656980808824301
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009174244478344917,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_expr_neqv_x_end.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_update_expr_neqv_x_end.F90/atomic_update_expr_neqv_x_end.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_neqv_x_end.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_neqv_x_end.F90, Line = 33, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0042 seconds\nCray Fortran : 105 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2657169569283724
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.00913667306303978,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_expr_or_x.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_update_expr_or_x.F90/atomic_update_expr_or_x.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_or_x.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_or_x.F90, Line = 33, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0041 seconds\nCray Fortran : 104 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.26575266383588314
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009110713377594948,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_expr_or_x_end.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_update_expr_or_x_end.F90/atomic_update_expr_or_x_end.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_or_x_end.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_or_x_end.F90, Line = 33, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0043 seconds\nCray Fortran : 105 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2656923606991768
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009108999744057655,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_expr_plus_x.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_update_expr_plus_x.F90/atomic_update_expr_plus_x.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_plus_x.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_plus_x.F90, Line = 23, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0041 seconds\nCray Fortran : 93 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.26568410359323025
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009097198024392128,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_expr_plus_x_end.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_update_expr_plus_x_end.F90/atomic_update_expr_plus_x_end.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_plus_x_end.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_plus_x_end.F90, Line = 23, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0041 seconds\nCray Fortran : 94 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.26579890586435795
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.00911632739007473,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_expr_times_x.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_update_expr_times_x.F90/atomic_update_expr_times_x.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_times_x.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_times_x.F90, Line = 23, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0040 seconds\nCray Fortran : 93 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.26571157574653625
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009062692523002625,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_expr_times_x_end.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_update_expr_times_x_end.F90/atomic_update_expr_times_x_end.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_times_x_end.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_times_x_end.F90, Line = 23, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0040 seconds\nCray Fortran : 94 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2656553592532873
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009075740352272987,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_iand_expr_x.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_update_iand_expr_x.F90/atomic_update_iand_expr_x.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_iand_expr_x.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_iand_expr_x.F90, Line = 37, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0045 seconds\nCray Fortran : 102 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31574868597090244
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009093251079320908,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_iand_expr_x_end.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_update_iand_expr_x_end.F90/atomic_update_iand_expr_x_end.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_iand_expr_x_end.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_iand_expr_x_end.F90, Line = 37, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0044 seconds\nCray Fortran : 103 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2658030968159437
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009051704779267311,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_iand_x_expr.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_update_iand_x_expr.F90/atomic_update_iand_x_expr.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_iand_x_expr.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_iand_x_expr.F90, Line = 37, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0044 seconds\nCray Fortran : 102 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.26573275588452816
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.00907205231487751,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_iand_x_expr_end.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_update_iand_x_expr_end.F90/atomic_update_iand_x_expr_end.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_iand_x_expr_end.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_iand_x_expr_end.F90, Line = 37, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0044 seconds\nCray Fortran : 103 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31575001776218414
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009132303297519684,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_ior_expr_x.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_update_ior_expr_x.F90/atomic_update_ior_expr_x.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_ior_expr_x.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_ior_expr_x.F90, Line = 35, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0044 seconds\nCray Fortran : 100 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.26573044061660767
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009167792275547981,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_ior_expr_x_end.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_update_ior_expr_x_end.F90/atomic_update_ior_expr_x_end.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_ior_expr_x_end.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_ior_expr_x_end.F90, Line = 35, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0043 seconds\nCray Fortran : 101 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.265674514696002
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009119393303990364,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_ior_x_expr.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_update_ior_x_expr.F90/atomic_update_ior_x_expr.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_ior_x_expr.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_ior_x_expr.F90, Line = 35, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0044 seconds\nCray Fortran : 100 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2659494187682867
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009441163390874863,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_ior_x_expr_end.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_update_ior_x_expr_end.F90/atomic_update_ior_x_expr_end.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_ior_x_expr_end.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_ior_x_expr_end.F90, Line = 35, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0044 seconds\nCray Fortran : 101 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.265763932839036
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009060351178050041,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_ixor_expr_x.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_update_ixor_expr_x.F90/atomic_update_ixor_expr_x.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_ixor_expr_x.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_ixor_expr_x.F90, Line = 35, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0043 seconds\nCray Fortran : 100 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.26572043262422085
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009063396602869034,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_ixor_expr_x_end.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_update_ixor_expr_x_end.F90/atomic_update_ixor_expr_x_end.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_ixor_expr_x_end.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_ixor_expr_x_end.F90, Line = 35, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0043 seconds\nCray Fortran : 101 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3157320935279131
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009887730702757835,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_ixor_x_expr.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_update_ixor_x_expr.F90/atomic_update_ixor_x_expr.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_ixor_x_expr.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_ixor_x_expr.F90, Line = 35, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0044 seconds\nCray Fortran : 100 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2657008748501539
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009447921067476273,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_ixor_x_expr_end.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_update_ixor_x_expr_end.F90/atomic_update_ixor_x_expr_end.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_ixor_x_expr_end.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_ixor_x_expr_end.F90, Line = 35, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0044 seconds\nCray Fortran : 101 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2657037824392319
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009461300447583199,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_max_expr_list_x.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_update_max_expr_list_x.F90/atomic_update_max_expr_list_x.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_max_expr_list_x.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_max_expr_list_x.F90, Line = 24, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0041 seconds\nCray Fortran : 89 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.26570977084338665
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009131044149398804,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_max_expr_list_x_end.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_update_max_expr_list_x_end.F90/atomic_update_max_expr_list_x_end.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_max_expr_list_x_end.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_max_expr_list_x_end.F90, Line = 24, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0041 seconds\nCray Fortran : 90 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2658644914627075
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009278075769543648,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_max_expr_x.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_update_max_expr_x.F90/atomic_update_max_expr_x.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_max_expr_x.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_max_expr_x.F90, Line = 23, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0041 seconds\nCray Fortran : 88 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2658274807035923
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009096549823880196,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_max_expr_x_end.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_update_max_expr_x_end.F90/atomic_update_max_expr_x_end.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_max_expr_x_end.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_max_expr_x_end.F90, Line = 23, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0040 seconds\nCray Fortran : 89 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.26578873954713345
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009083043783903122,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_max_x_expr.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_update_max_x_expr.F90/atomic_update_max_x_expr.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_max_x_expr.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_max_x_expr.F90, Line = 23, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0042 seconds\nCray Fortran : 88 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2657069768756628
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009082403033971786,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_max_x_expr_end.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_update_max_x_expr_end.F90/atomic_update_max_x_expr_end.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_max_x_expr_end.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_max_x_expr_end.F90, Line = 23, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0041 seconds\nCray Fortran : 89 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.26570359990000725
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.00948658399283886,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_max_x_expr_list.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_update_max_x_expr_list.F90/atomic_update_max_x_expr_list.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_max_x_expr_list.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_max_x_expr_list.F90, Line = 24, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0041 seconds\nCray Fortran : 89 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.26574900560081005
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009104613214731216,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_max_x_expr_list_end.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_update_max_x_expr_list_end.F90/atomic_update_max_x_expr_list_end.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_max_x_expr_list_end.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_max_x_expr_list_end.F90, Line = 24, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0042 seconds\nCray Fortran : 90 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.26572486013174057
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009109551087021828,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_min_expr_list_x.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_update_min_expr_list_x.F90/atomic_update_min_expr_list_x.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_min_expr_list_x.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_min_expr_list_x.F90, Line = 24, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0042 seconds\nCray Fortran : 89 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.26570658572018147
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009135700762271881,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_min_expr_list_x_end.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_update_min_expr_list_x_end.F90/atomic_update_min_expr_list_x_end.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_min_expr_list_x_end.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_min_expr_list_x_end.F90, Line = 24, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0042 seconds\nCray Fortran : 90 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2656891942024231
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.00910123623907566,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_min_expr_x.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_update_min_expr_x.F90/atomic_update_min_expr_x.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_min_expr_x.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_min_expr_x.F90, Line = 23, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0040 seconds\nCray Fortran : 88 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.26569439098238945
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009090228006243706,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_min_expr_x_end.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_update_min_expr_x_end.F90/atomic_update_min_expr_x_end.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_min_expr_x_end.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_min_expr_x_end.F90, Line = 23, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0041 seconds\nCray Fortran : 89 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.26576725766062737
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009075768291950226,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_min_x_expr.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_update_min_x_expr.F90/atomic_update_min_x_expr.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_min_x_expr.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_min_x_expr.F90, Line = 23, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0041 seconds\nCray Fortran : 88 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2656964771449566
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009110605344176292,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_min_x_expr_end.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_update_min_x_expr_end.F90/atomic_update_min_x_expr_end.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_min_x_expr_end.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_min_x_expr_end.F90, Line = 23, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0042 seconds\nCray Fortran : 89 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2657002042979002
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009164948016405106,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_min_x_expr_list.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_update_min_x_expr_list.F90/atomic_update_min_x_expr_list.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_min_x_expr_list.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_min_x_expr_list.F90, Line = 24, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0042 seconds\nCray Fortran : 89 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.26569935120642185
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009110445156693459,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_min_x_expr_list_end.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_update_min_x_expr_list_end.F90/atomic_update_min_x_expr_list_end.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_min_x_expr_list_end.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_min_x_expr_list_end.F90, Line = 24, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0041 seconds\nCray Fortran : 90 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.26571378856897354
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009487997740507126,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_x_and_expr.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_update_x_and_expr.F90/atomic_update_x_and_expr.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_and_expr.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_and_expr.F90, Line = 33, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0042 seconds\nCray Fortran : 104 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2658110707998276
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009077752009034157,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_x_and_expr_end.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_update_x_and_expr_end.F90/atomic_update_x_and_expr_end.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_and_expr_end.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_and_expr_end.F90, Line = 33, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0041 seconds\nCray Fortran : 105 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2657207753509283
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009180024266242981,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_x_divided_expr.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_update_x_divided_expr.F90/atomic_update_x_divided_expr.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_divided_expr.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_divided_expr.F90, Line = 23, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0041 seconds\nCray Fortran : 93 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2657321821898222
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.00911632552742958,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_x_divided_expr_end.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_update_x_divided_expr_end.F90/atomic_update_x_divided_expr_end.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_divided_expr_end.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_divided_expr_end.F90, Line = 23, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0039 seconds\nCray Fortran : 94 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2657176349312067
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009105077013373375,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_x_eqv_expr.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_update_x_eqv_expr.F90/atomic_update_x_eqv_expr.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_eqv_expr.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_eqv_expr.F90, Line = 33, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0042 seconds\nCray Fortran : 104 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2656928710639477
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009670296683907509,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_x_eqv_expr_end.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_update_x_eqv_expr_end.F90/atomic_update_x_eqv_expr_end.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_eqv_expr_end.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_eqv_expr_end.F90, Line = 33, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0041 seconds\nCray Fortran : 105 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2657044120132923
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009171158075332642,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_x_minus_expr.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_update_x_minus_expr.F90/atomic_update_x_minus_expr.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_minus_expr.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_minus_expr.F90, Line = 23, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0040 seconds\nCray Fortran : 93 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.26579223573207855
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009148875251412392,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_x_minus_expr_end.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_update_x_minus_expr_end.F90/atomic_update_x_minus_expr_end.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_minus_expr_end.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_minus_expr_end.F90, Line = 23, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0040 seconds\nCray Fortran : 94 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.26575356163084507
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.017270255833864212,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_x_neqv_expr.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_update_x_neqv_expr.F90/atomic_update_x_neqv_expr.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_neqv_expr.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_neqv_expr.F90, Line = 33, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0042 seconds\nCray Fortran : 104 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.26601644419133663
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009118108078837395,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_x_neqv_expr_end.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_update_x_neqv_expr_end.F90/atomic_update_x_neqv_expr_end.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_neqv_expr_end.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_neqv_expr_end.F90, Line = 33, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0042 seconds\nCray Fortran : 105 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2658902481198311
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009077372029423714,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_x_or_expr.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_update_x_or_expr.F90/atomic_update_x_or_expr.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_or_expr.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_or_expr.F90, Line = 33, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0041 seconds\nCray Fortran : 104 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2657893691211939
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009075287729501724,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_x_or_expr_end.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_update_x_or_expr_end.F90/atomic_update_x_or_expr_end.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_or_expr_end.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_or_expr_end.F90, Line = 33, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0042 seconds\nCray Fortran : 105 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.265858206897974
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009077072143554688,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_x_plus_expr.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_update_x_plus_expr.F90/atomic_update_x_plus_expr.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_plus_expr.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_plus_expr.F90, Line = 23, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0040 seconds\nCray Fortran : 93 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2656837720423937
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009157752618193626,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_x_plus_expr_end.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_update_x_plus_expr_end.F90/atomic_update_x_plus_expr_end.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_plus_expr_end.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_plus_expr_end.F90, Line = 23, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0040 seconds\nCray Fortran : 94 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.26576269045472145
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009096488356590271,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_x_times_expr.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_update_x_times_expr.F90/atomic_update_x_times_expr.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_times_expr.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_times_expr.F90, Line = 23, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0040 seconds\nCray Fortran : 93 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.26572797633707523
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009128307923674583,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_x_times_expr_end.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_update_x_times_expr_end.F90/atomic_update_x_times_expr_end.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_times_expr_end.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_times_expr_end.F90, Line = 23, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0040 seconds\nCray Fortran : 94 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2657668385654688
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009084183722734451,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_x_and_expr.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_x_and_expr.F90/atomic_x_and_expr.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_and_expr.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_and_expr.F90, Line = 33, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0041 seconds\nCray Fortran : 104 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2656975295394659
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009076399728655815,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_x_and_expr_end.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_x_and_expr_end.F90/atomic_x_and_expr_end.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_and_expr_end.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_and_expr_end.F90, Line = 33, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0040 seconds\nCray Fortran : 105 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2657738011330366
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009102249518036842,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_x_divided_expr.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_x_divided_expr.F90/atomic_x_divided_expr.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_divided_expr.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_divided_expr.F90, Line = 23, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0040 seconds\nCray Fortran : 93 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.265708738937974
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009110594168305397,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_x_divided_expr_end.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_x_divided_expr_end.F90/atomic_x_divided_expr_end.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_divided_expr_end.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_divided_expr_end.F90, Line = 23, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0041 seconds\nCray Fortran : 94 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.265820637345314
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.00911702774465084,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_x_eqv_expr.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_x_eqv_expr.F90/atomic_x_eqv_expr.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_eqv_expr.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_eqv_expr.F90, Line = 33, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0041 seconds\nCray Fortran : 104 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2657657228410244
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.00912182405591011,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_x_eqv_expr_end.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_x_eqv_expr_end.F90/atomic_x_eqv_expr_end.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_eqv_expr_end.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_eqv_expr_end.F90, Line = 33, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0041 seconds\nCray Fortran : 105 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2656747456640005
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009166225790977478,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_x_minus_expr.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_x_minus_expr.F90/atomic_x_minus_expr.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_minus_expr.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_minus_expr.F90, Line = 23, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0040 seconds\nCray Fortran : 93 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2657493147999048
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.00908433273434639,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_x_minus_expr_end.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_x_minus_expr_end.F90/atomic_x_minus_expr_end.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_minus_expr_end.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_minus_expr_end.F90, Line = 23, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0040 seconds\nCray Fortran : 94 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2657812852412462
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009467508643865585,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_x_neqv_expr.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_x_neqv_expr.F90/atomic_x_neqv_expr.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_neqv_expr.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_neqv_expr.F90, Line = 33, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0041 seconds\nCray Fortran : 104 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.26574650779366493
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.00908614881336689,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_x_neqv_expr_end.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_x_neqv_expr_end.F90/atomic_x_neqv_expr_end.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_neqv_expr_end.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_neqv_expr_end.F90, Line = 33, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0042 seconds\nCray Fortran : 105 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2659171558916569
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.00905800610780716,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_x_or_expr.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_x_or_expr.F90/atomic_x_or_expr.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_or_expr.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_or_expr.F90, Line = 33, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0041 seconds\nCray Fortran : 104 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.26570452004671097
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009069107472896576,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_x_or_expr_end.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_x_or_expr_end.F90/atomic_x_or_expr_end.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_or_expr_end.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_or_expr_end.F90, Line = 33, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0041 seconds\nCray Fortran : 105 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.26571169681847095
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.00907200388610363,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_x_plus_expr.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_x_plus_expr.F90/atomic_x_plus_expr.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_plus_expr.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_plus_expr.F90, Line = 23, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0040 seconds\nCray Fortran : 93 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2658348958939314
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009146047756075859,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_x_plus_expr_end.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_x_plus_expr_end.F90/atomic_x_plus_expr_end.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_plus_expr_end.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_plus_expr_end.F90, Line = 23, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0039 seconds\nCray Fortran : 94 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.26595125161111355
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009175606071949005,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_x_times_expr.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_x_times_expr.F90/atomic_x_times_expr.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_times_expr.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_times_expr.F90, Line = 23, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0040 seconds\nCray Fortran : 93 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.26582580618560314
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009165195748209953,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_x_times_expr_end.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_x_times_expr_end.F90/atomic_x_times_expr_end.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_times_expr_end.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_times_expr_end.F90, Line = 23, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0040 seconds\nCray Fortran : 94 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2657809555530548
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009262407198548317,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "data_copy_no_lower_bound.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/data_copy_no_lower_bound.F90/data_copy_no_lower_bound.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copy_no_lower_bound.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copy_no_lower_bound.F90, Line = 21, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0038 seconds\nCray Fortran : 81 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.26573763228952885
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009086459875106812,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "data_copyin_no_lower_bound.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/data_copyin_no_lower_bound.F90/data_copyin_no_lower_bound.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copyin_no_lower_bound.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copyin_no_lower_bound.F90, Line = 21, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0038 seconds\nCray Fortran : 82 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2658267766237259
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.00911932997405529,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "data_copyout_no_lower_bound.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/data_copyout_no_lower_bound.F90/data_copyout_no_lower_bound.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copyout_no_lower_bound.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copyout_no_lower_bound.F90, Line = 21, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0039 seconds\nCray Fortran : 81 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.265767065808177
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.00929015688598156,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "data_copyout_reference_counts.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/data_copyout_reference_counts.F90/data_copyout_reference_counts.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copyout_reference_counts.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copyout_reference_counts.F90, Line = 12, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0067 seconds\nCray Fortran : 246 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2657056227326393
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009098121896386147,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "data_create.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/data_create.F90/data_create.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_create.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_create.F90, Line = 21, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0067 seconds\nCray Fortran : 241 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2657500132918358
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009159354493021965,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "data_create_no_lower_bound.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/data_create_no_lower_bound.F90/data_create_no_lower_bound.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_create_no_lower_bound.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_create_no_lower_bound.F90, Line = 23, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0039 seconds\nCray Fortran : 87 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2657339349389076
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009096287190914154,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "data_present_no_lower_bound.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/data_present_no_lower_bound.F90/data_present_no_lower_bound.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_present_no_lower_bound.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_present_no_lower_bound.F90, Line = 21, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0039 seconds\nCray Fortran : 83 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2660116422921419
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009099885821342468,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "data_with_changing_subscript.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/data_with_changing_subscript.F90/data_with_changing_subscript.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_with_changing_subscript.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_with_changing_subscript.F90, Line = 22, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0040 seconds\nCray Fortran : 83 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.26572769321501255
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009156627580523491,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "data_with_derived_type.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/data_with_derived_type.F90/data_with_derived_type.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_with_derived_type.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_with_derived_type.F90, Line = 28, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0040 seconds\nCray Fortran : 88 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2657171431928873
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009157268330454826,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "declare_copyin.F90": [
            {
                "compilation": {
                    "command": "ftn -DT1 -DT2 -DT3 -DT4 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/declare_copyin.F90/declare_copyin.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_copyin.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING MULTIPLYDATA, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_copyin.F90, Line = 1, Column = 1 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\n\nftn-287 ftn: WARNING MULTIPLYDATA, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_copyin.F90, Line = 2, Column = 10 \n  The result of function name \"MULTIPLYDATA\" in the function subprogram is not defined.\n\n\nftn-521 ftn: ERROR MULTIPLYDATA, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_copyin.F90, Line = 3, Column = 21 \n  Object \"LOOPCOUNT\", used in a bounds expression must be a constant, a dummy argument, a common block member or use or host associated.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0031 seconds\nCray Fortran : 246 source lines\nCray Fortran : 1 errors, 2 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11555657163262367
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT2 -DT3 -DT4 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/declare_copyin.F90/declare_copyin.F901 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_copyin.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING MULTIPLYDATA, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_copyin.F90, Line = 1, Column = 1 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\n\nftn-287 ftn: WARNING MULTIPLYDATA, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_copyin.F90, Line = 2, Column = 10 \n  The result of function name \"MULTIPLYDATA\" in the function subprogram is not defined.\n\n\nftn-521 ftn: ERROR MULTIPLYDATA, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_copyin.F90, Line = 3, Column = 21 \n  Object \"LOOPCOUNT\", used in a bounds expression must be a constant, a dummy argument, a common block member or use or host associated.\n\n\nftn-292 ftn: ERROR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_copyin.F90, Line = 15, Column = 7 \n  \"DECLARE_COPYIN_MOD\" is specified as the module name on a USE statement, but the compiler cannot find it.\n\n\nftn-232 ftn: ERROR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_copyin.F90, Line = 36, Column = 23 \n  IMPLICIT NONE is specified in the local scope, therefore an explicit type must be specified for function \"FIXED_SIZE_ARRAY\".\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0265 seconds\nCray Fortran : 255 source lines\nCray Fortran : 3 errors, 2 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.16587409563362598
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT1 -DT3 -DT4 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/declare_copyin.F90/declare_copyin.F902 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_copyin.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING MULTIPLYDATA, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_copyin.F90, Line = 1, Column = 1 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\n\nftn-287 ftn: WARNING MULTIPLYDATA, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_copyin.F90, Line = 2, Column = 10 \n  The result of function name \"MULTIPLYDATA\" in the function subprogram is not defined.\n\n\nftn-521 ftn: ERROR MULTIPLYDATA, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_copyin.F90, Line = 3, Column = 21 \n  Object \"LOOPCOUNT\", used in a bounds expression must be a constant, a dummy argument, a common block member or use or host associated.\n\n\nftn-292 ftn: ERROR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_copyin.F90, Line = 58, Column = 7 \n  \"DECLARE_COPYIN_MOD\" is specified as the module name on a USE statement, but the compiler cannot find it.\n\n\nftn-113 ftn: ERROR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_copyin.F90, Line = 77, Column = 10 \n  IMPLICIT NONE is specified in the local scope, therefore an explicit type must be specified for data object \"X\".\n\n\nftn-319 ftn: ERROR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_copyin.F90, Line = 78, Column = 11 \n  A subscript must be a scalar integer expression.\n\n\nftn-319 ftn: ERROR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_copyin.F90, Line = 78, Column = 18 \n  A subscript must be a scalar integer expression.\n\n\nftn-113 ftn: ERROR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_copyin.F90, Line = 78, Column = 23 \n  IMPLICIT NONE is specified in the local scope, therefore an explicit type must be specified for data object \"SCALAR\".\n\n\nftn-319 ftn: ERROR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_copyin.F90, Line = 84, Column = 15 \n  A subscript must be a scalar integer expression.\n\n\nftn-319 ftn: ERROR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_copyin.F90, Line = 84, Column = 23 \n  A subscript must be a scalar integer expression.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0094 seconds\nCray Fortran : 255 source lines\nCray Fortran : 8 errors, 2 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11547062173485756
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT1 -DT2 -DT4 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/declare_copyin.F90/declare_copyin.F903 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_copyin.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING MULTIPLYDATA, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_copyin.F90, Line = 1, Column = 1 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\n\nftn-287 ftn: WARNING MULTIPLYDATA, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_copyin.F90, Line = 2, Column = 10 \n  The result of function name \"MULTIPLYDATA\" in the function subprogram is not defined.\n\n\nftn-521 ftn: ERROR MULTIPLYDATA, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_copyin.F90, Line = 3, Column = 21 \n  Object \"LOOPCOUNT\", used in a bounds expression must be a constant, a dummy argument, a common block member or use or host associated.\n\n\nftn-292 ftn: ERROR TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_copyin.F90, Line = 100, Column = 7 \n  \"DECLARE_COPYIN_MOD\" is specified as the module name on a USE statement, but the compiler cannot find it.\n\n\nftn-113 ftn: ERROR TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_copyin.F90, Line = 119, Column = 10 \n  IMPLICIT NONE is specified in the local scope, therefore an explicit type must be specified for data object \"X\".\n\n\nftn-319 ftn: ERROR TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_copyin.F90, Line = 126, Column = 15 \n  A subscript must be a scalar integer expression.\n\n\nftn-319 ftn: ERROR TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_copyin.F90, Line = 126, Column = 23 \n  A subscript must be a scalar integer expression.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0082 seconds\nCray Fortran : 255 source lines\nCray Fortran : 5 errors, 2 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11568845808506012
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT1 -DT2 -DT3 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/declare_copyin.F90/declare_copyin.F904 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_copyin.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING MULTIPLYDATA, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_copyin.F90, Line = 1, Column = 1 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\n\nftn-287 ftn: WARNING MULTIPLYDATA, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_copyin.F90, Line = 2, Column = 10 \n  The result of function name \"MULTIPLYDATA\" in the function subprogram is not defined.\n\n\nftn-521 ftn: ERROR MULTIPLYDATA, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_copyin.F90, Line = 3, Column = 21 \n  Object \"LOOPCOUNT\", used in a bounds expression must be a constant, a dummy argument, a common block member or use or host associated.\n\n\nftn-292 ftn: ERROR TEST4, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_copyin.F90, Line = 142, Column = 7 \n  \"DECLARE_COPYIN_MOD\" is specified as the module name on a USE statement, but the compiler cannot find it.\n\n\nftn-113 ftn: ERROR TEST4, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_copyin.F90, Line = 161, Column = 10 \n  IMPLICIT NONE is specified in the local scope, therefore an explicit type must be specified for data object \"X\".\n\n\nftn-1293 ftn: ERROR TEST4, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_copyin.F90, Line = 162, Column = 9 \n  Program unit \"MULTIPLYDATA\" is defined as a FUNCTION at line 2 (/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_copyin.F90), but is defined or referenced as a SUBROUTINE here.\n\n\nftn-319 ftn: ERROR TEST4, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_copyin.F90, Line = 168, Column = 15 \n  A subscript must be a scalar integer expression.\n\n\nftn-319 ftn: ERROR TEST4, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_copyin.F90, Line = 168, Column = 23 \n  A subscript must be a scalar integer expression.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0081 seconds\nCray Fortran : 255 source lines\nCray Fortran : 6 errors, 2 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11538154445588589
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT4 -DT1 -DT2 -DT3 -DT4 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/declare_copyin.F90/declare_copyin.F905 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_copyin.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING MULTIPLYDATA, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_copyin.F90, Line = 1, Column = 1 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\n\nftn-287 ftn: WARNING MULTIPLYDATA, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_copyin.F90, Line = 2, Column = 10 \n  The result of function name \"MULTIPLYDATA\" in the function subprogram is not defined.\n\n\nftn-521 ftn: ERROR MULTIPLYDATA, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_copyin.F90, Line = 3, Column = 21 \n  Object \"LOOPCOUNT\", used in a bounds expression must be a constant, a dummy argument, a common block member or use or host associated.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0032 seconds\nCray Fortran : 246 source lines\nCray Fortran : 1 errors, 2 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11545775644481182
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "declare_copyin_mod.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/declare_copyin_mod.F90/declare_copyin_mod.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_copyin_mod.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING DECLARE_COPYIN_MOD, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_copyin_mod.F90, Line = 3, Column = 3 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Tue Jun 21, 2022  10:57:46\nCray Fortran : Compile time:  0.0084 seconds\nCray Fortran : 5 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /usr/lib64//crt1.o: in function `_start':\n/home/abuild/rpmbuild/BUILD/glibc-2.26/csu/../sysdeps/x86_64/start.S:110: undefined reference to `main'\n",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.21570000052452087
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "declare_create.F90": [
            {
                "compilation": {
                    "command": "ftn -DT1 -DT2 -DT3 -DT4 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/declare_create.F90/declare_create.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_create.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING MULTIPLYDATA, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 1, Column = 1 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\n\nftn-287 ftn: WARNING MULTIPLYDATA, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 6, Column = 10 \n  The result of function name \"MULTIPLYDATA\" in the function subprogram is not defined.\n\n\nftn-521 ftn: ERROR MULTIPLYDATA, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 7, Column = 21 \n  Object \"LOOPCOUNT\", used in a bounds expression must be a constant, a dummy argument, a common block member or use or host associated.\n\n\nftn-1569 ftn: WARNING MULTIPLYDATA, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 9, Column = 6 \n  A DO loop variable or expression of type default real or double precision real is a deleted feature of the Fortran standard.\n\n\nftn-319 ftn: ERROR MULTIPLYDATA, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 10, Column = 7 \n  A subscript must be a scalar integer expression.\n\n\nftn-319 ftn: ERROR MULTIPLYDATA, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 10, Column = 14 \n  A subscript must be a scalar integer expression.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0032 seconds\nCray Fortran : 251 source lines\nCray Fortran : 3 errors, 3 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11570477858185768
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT2 -DT3 -DT4 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/declare_create.F90/declare_create.F901 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_create.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING MULTIPLYDATA, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 1, Column = 1 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\n\nftn-287 ftn: WARNING MULTIPLYDATA, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 6, Column = 10 \n  The result of function name \"MULTIPLYDATA\" in the function subprogram is not defined.\n\n\nftn-521 ftn: ERROR MULTIPLYDATA, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 7, Column = 21 \n  Object \"LOOPCOUNT\", used in a bounds expression must be a constant, a dummy argument, a common block member or use or host associated.\n\n\nftn-1569 ftn: WARNING MULTIPLYDATA, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 9, Column = 6 \n  A DO loop variable or expression of type default real or double precision real is a deleted feature of the Fortran standard.\n\n\nftn-319 ftn: ERROR MULTIPLYDATA, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 10, Column = 7 \n  A subscript must be a scalar integer expression.\n\n\nftn-319 ftn: ERROR MULTIPLYDATA, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 10, Column = 14 \n  A subscript must be a scalar integer expression.\n\n\nftn-113 ftn: ERROR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 36, Column = 10 \n  IMPLICIT NONE is specified in the local scope, therefore an explicit type must be specified for data object \"X\".\n\n\nftn-232 ftn: ERROR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 37, Column = 9 \n  IMPLICIT NONE is specified in the local scope, therefore an explicit type must be specified for function \"FIXED_SIZE_ARRAY\".\n\n\nftn-724 ftn: ERROR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 37, Column = 25 \n  Unknown statement.  Expected assignment statement but found \"(\" instead of \"=\" or \"=>\".\n\n\nftn-319 ftn: ERROR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 43, Column = 11 \n  A subscript must be a scalar integer expression.\n\n\nftn-319 ftn: ERROR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 43, Column = 18 \n  A subscript must be a scalar integer expression.\n\n\nftn-319 ftn: ERROR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 49, Column = 15 \n  A subscript must be a scalar integer expression.\n\n\nftn-319 ftn: ERROR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 49, Column = 23 \n  A subscript must be a scalar integer expression.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0066 seconds\nCray Fortran : 260 source lines\nCray Fortran : 10 errors, 3 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11547332629561424
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT1 -DT3 -DT4 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/declare_create.F90/declare_create.F902 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_create.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING MULTIPLYDATA, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 1, Column = 1 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\n\nftn-287 ftn: WARNING MULTIPLYDATA, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 6, Column = 10 \n  The result of function name \"MULTIPLYDATA\" in the function subprogram is not defined.\n\n\nftn-521 ftn: ERROR MULTIPLYDATA, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 7, Column = 21 \n  Object \"LOOPCOUNT\", used in a bounds expression must be a constant, a dummy argument, a common block member or use or host associated.\n\n\nftn-1569 ftn: WARNING MULTIPLYDATA, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 9, Column = 6 \n  A DO loop variable or expression of type default real or double precision real is a deleted feature of the Fortran standard.\n\n\nftn-319 ftn: ERROR MULTIPLYDATA, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 10, Column = 7 \n  A subscript must be a scalar integer expression.\n\n\nftn-319 ftn: ERROR MULTIPLYDATA, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 10, Column = 14 \n  A subscript must be a scalar integer expression.\n\n\nftn-113 ftn: ERROR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 79, Column = 3 \n  IMPLICIT NONE is specified in the local scope, therefore an explicit type must be specified for data object \"SCALAR\".\n\n\nftn-113 ftn: ERROR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 84, Column = 10 \n  IMPLICIT NONE is specified in the local scope, therefore an explicit type must be specified for data object \"X\".\n\n\nftn-319 ftn: ERROR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 85, Column = 11 \n  A subscript must be a scalar integer expression.\n\n\nftn-319 ftn: ERROR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 85, Column = 18 \n  A subscript must be a scalar integer expression.\n\n\nftn-319 ftn: ERROR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 91, Column = 15 \n  A subscript must be a scalar integer expression.\n\n\nftn-319 ftn: ERROR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 91, Column = 23 \n  A subscript must be a scalar integer expression.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0057 seconds\nCray Fortran : 260 source lines\nCray Fortran : 9 errors, 3 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11546392738819122
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT1 -DT2 -DT4 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/declare_create.F90/declare_create.F903 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_create.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING MULTIPLYDATA, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 1, Column = 1 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\n\nftn-287 ftn: WARNING MULTIPLYDATA, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 6, Column = 10 \n  The result of function name \"MULTIPLYDATA\" in the function subprogram is not defined.\n\n\nftn-521 ftn: ERROR MULTIPLYDATA, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 7, Column = 21 \n  Object \"LOOPCOUNT\", used in a bounds expression must be a constant, a dummy argument, a common block member or use or host associated.\n\n\nftn-1569 ftn: WARNING MULTIPLYDATA, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 9, Column = 6 \n  A DO loop variable or expression of type default real or double precision real is a deleted feature of the Fortran standard.\n\n\nftn-319 ftn: ERROR MULTIPLYDATA, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 10, Column = 7 \n  A subscript must be a scalar integer expression.\n\n\nftn-319 ftn: ERROR MULTIPLYDATA, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 10, Column = 14 \n  A subscript must be a scalar integer expression.\n\n\nftn-113 ftn: ERROR TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 125, Column = 10 \n  IMPLICIT NONE is specified in the local scope, therefore an explicit type must be specified for data object \"X\".\n\n\nftn-319 ftn: ERROR TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 132, Column = 15 \n  A subscript must be a scalar integer expression.\n\n\nftn-319 ftn: ERROR TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 132, Column = 23 \n  A subscript must be a scalar integer expression.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0065 seconds\nCray Fortran : 260 source lines\nCray Fortran : 6 errors, 3 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11549199186265469
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT1 -DT2 -DT3 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/declare_create.F90/declare_create.F904 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_create.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING MULTIPLYDATA, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 1, Column = 1 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\n\nftn-287 ftn: WARNING MULTIPLYDATA, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 6, Column = 10 \n  The result of function name \"MULTIPLYDATA\" in the function subprogram is not defined.\n\n\nftn-521 ftn: ERROR MULTIPLYDATA, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 7, Column = 21 \n  Object \"LOOPCOUNT\", used in a bounds expression must be a constant, a dummy argument, a common block member or use or host associated.\n\n\nftn-1569 ftn: WARNING MULTIPLYDATA, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 9, Column = 6 \n  A DO loop variable or expression of type default real or double precision real is a deleted feature of the Fortran standard.\n\n\nftn-319 ftn: ERROR MULTIPLYDATA, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 10, Column = 7 \n  A subscript must be a scalar integer expression.\n\n\nftn-319 ftn: ERROR MULTIPLYDATA, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 10, Column = 14 \n  A subscript must be a scalar integer expression.\n\n\nftn-113 ftn: ERROR TEST4, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 166, Column = 10 \n  IMPLICIT NONE is specified in the local scope, therefore an explicit type must be specified for data object \"X\".\n\n\nftn-1293 ftn: ERROR TEST4, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 167, Column = 9 \n  Program unit \"MULTIPLYDATA\" is defined as a FUNCTION at line 6 (/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_create.F90), but is defined or referenced as a SUBROUTINE here.\n\n\nftn-319 ftn: ERROR TEST4, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 173, Column = 15 \n  A subscript must be a scalar integer expression.\n\n\nftn-319 ftn: ERROR TEST4, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 173, Column = 23 \n  A subscript must be a scalar integer expression.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0056 seconds\nCray Fortran : 260 source lines\nCray Fortran : 7 errors, 3 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11546811833977699
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT4 -DT1 -DT2 -DT3 -DT4 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/declare_create.F90/declare_create.F905 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_create.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING MULTIPLYDATA, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 1, Column = 1 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\n\nftn-287 ftn: WARNING MULTIPLYDATA, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 6, Column = 10 \n  The result of function name \"MULTIPLYDATA\" in the function subprogram is not defined.\n\n\nftn-521 ftn: ERROR MULTIPLYDATA, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 7, Column = 21 \n  Object \"LOOPCOUNT\", used in a bounds expression must be a constant, a dummy argument, a common block member or use or host associated.\n\n\nftn-1569 ftn: WARNING MULTIPLYDATA, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 9, Column = 6 \n  A DO loop variable or expression of type default real or double precision real is a deleted feature of the Fortran standard.\n\n\nftn-319 ftn: ERROR MULTIPLYDATA, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 10, Column = 7 \n  A subscript must be a scalar integer expression.\n\n\nftn-319 ftn: ERROR MULTIPLYDATA, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 10, Column = 14 \n  A subscript must be a scalar integer expression.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0031 seconds\nCray Fortran : 251 source lines\nCray Fortran : 3 errors, 3 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11577249504625797
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "declare_function_scope_copy.F90": [
            {
                "compilation": {
                    "command": "ftn -DT1 -DT2 -DT3 -DT4 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/declare_function_scope_copy.F90/declare_function_scope_copy.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copy.F90",
                    "config": 1,
                    "errors": "\n\nftn-287 ftn: WARNING COPYIN_COPYOUT_TEST, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copy.F90, Line = 1, Column = 10 \n  The result of function name \"COPYIN_COPYOUT_TEST\" in the function subprogram is not defined.\n\n\nftn-296 ftn: WARNING COPYIN_COPYOUT_TEST, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copy.F90, Line = 6, Column = 3 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\n\nftn-7212 ftn: WARNING COPYIN_COPYOUT_TEST, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copy.F90, Line = 13 \n  Variable \"copyin_copyout_test\" is used before it is defined.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Tue Jun 21, 2022  10:57:47\nCray Fortran : Compile time:  0.0245 seconds\nCray Fortran : 289 source lines\nCray Fortran : 0 errors, 3 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2658154759556055
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.00917796976864338,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT2 -DT3 -DT4 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/declare_function_scope_copy.F90/declare_function_scope_copy.F901 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copy.F90",
                    "config": 1,
                    "errors": "\n\nftn-287 ftn: WARNING COPYIN_COPYOUT_TEST, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copy.F90, Line = 1, Column = 10 \n  The result of function name \"COPYIN_COPYOUT_TEST\" in the function subprogram is not defined.\n\n\nftn-296 ftn: WARNING COPYIN_COPYOUT_TEST, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copy.F90, Line = 6, Column = 3 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\n\nftn-1293 ftn: ERROR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copy.F90, Line = 44, Column = 7 \n  Program unit \"COPYIN_COPYOUT_TEST\" is defined as a FUNCTION at line 1 (/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copy.F90), but is defined or referenced as a SUBROUTINE here.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0068 seconds\nCray Fortran : 298 source lines\nCray Fortran : 1 errors, 2 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11568777821958065
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT1 -DT3 -DT4 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/declare_function_scope_copy.F90/declare_function_scope_copy.F902 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copy.F90",
                    "config": 1,
                    "errors": "\n\nftn-287 ftn: WARNING COPYIN_COPYOUT_TEST, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copy.F90, Line = 1, Column = 10 \n  The result of function name \"COPYIN_COPYOUT_TEST\" in the function subprogram is not defined.\n\n\nftn-296 ftn: WARNING COPYIN_COPYOUT_TEST, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copy.F90, Line = 6, Column = 3 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\n\nftn-1293 ftn: ERROR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copy.F90, Line = 93, Column = 9 \n  Program unit \"COPYIN_COPYOUT_TEST\" is defined as a FUNCTION at line 1 (/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copy.F90), but is defined or referenced as a SUBROUTINE here.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0069 seconds\nCray Fortran : 298 source lines\nCray Fortran : 1 errors, 2 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11536359414458275
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT1 -DT2 -DT4 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/declare_function_scope_copy.F90/declare_function_scope_copy.F903 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copy.F90",
                    "config": 1,
                    "errors": "\n\nftn-287 ftn: WARNING COPYIN_COPYOUT_TEST, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copy.F90, Line = 1, Column = 10 \n  The result of function name \"COPYIN_COPYOUT_TEST\" in the function subprogram is not defined.\n\n\nftn-296 ftn: WARNING COPYIN_COPYOUT_TEST, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copy.F90, Line = 6, Column = 3 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\n\nftn-1293 ftn: ERROR TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copy.F90, Line = 145, Column = 11 \n  Program unit \"COPYIN_COPYOUT_TEST\" is defined as a FUNCTION at line 1 (/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copy.F90), but is defined or referenced as a SUBROUTINE here.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0061 seconds\nCray Fortran : 298 source lines\nCray Fortran : 1 errors, 2 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11537135764956474
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT1 -DT2 -DT3 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/declare_function_scope_copy.F90/declare_function_scope_copy.F904 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copy.F90",
                    "config": 1,
                    "errors": "\n\nftn-287 ftn: WARNING COPYIN_COPYOUT_TEST, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copy.F90, Line = 1, Column = 10 \n  The result of function name \"COPYIN_COPYOUT_TEST\" in the function subprogram is not defined.\n\n\nftn-296 ftn: WARNING COPYIN_COPYOUT_TEST, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copy.F90, Line = 6, Column = 3 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\n\nftn-1293 ftn: ERROR TEST4, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copy.F90, Line = 200, Column = 11 \n  Program unit \"COPYIN_COPYOUT_TEST\" is defined as a FUNCTION at line 1 (/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copy.F90), but is defined or referenced as a SUBROUTINE here.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0061 seconds\nCray Fortran : 298 source lines\nCray Fortran : 1 errors, 2 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11543117463588715
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT1 -DT2 -DT3 -DT4 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/declare_function_scope_copy.F90/declare_function_scope_copy.F905 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copy.F90",
                    "config": 1,
                    "errors": "\n\nftn-287 ftn: WARNING COPYIN_COPYOUT_TEST, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copy.F90, Line = 1, Column = 10 \n  The result of function name \"COPYIN_COPYOUT_TEST\" in the function subprogram is not defined.\n\n\nftn-296 ftn: WARNING COPYIN_COPYOUT_TEST, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copy.F90, Line = 6, Column = 3 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\n\nftn-7212 ftn: WARNING COPYIN_COPYOUT_TEST, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copy.F90, Line = 13 \n  Variable \"copyin_copyout_test\" is used before it is defined.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Tue Jun 21, 2022  10:57:48\nCray Fortran : Compile time:  0.0243 seconds\nCray Fortran : 289 source lines\nCray Fortran : 0 errors, 3 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.26602018997073174
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.00915713980793953,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "declare_function_scope_copyin.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/declare_function_scope_copyin.F90/declare_function_scope_copyin.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90",
                    "config": 1,
                    "errors": "\n\nftn-287 ftn: WARNING FUNCTION_TEST, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 1, Column = 10 \n  The result of function name \"FUNCTION_TEST\" in the function subprogram is not defined.\n\n\nftn-296 ftn: WARNING FUNCTION_TEST, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 7, Column = 3 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\n\nftn-287 ftn: WARNING FUNCTION_TEST_DEV_ONLY, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 16, Column = 10 \n  The result of function name \"FUNCTION_TEST_DEV_ONLY\" in the function subprogram is not defined.\n\n\nftn-1293 ftn: ERROR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 63, Column = 7 \n  Program unit \"FUNCTION_TEST\" is defined as a FUNCTION at line 1 (/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90), but is defined or referenced as a SUBROUTINE here.\n\n\nftn-1293 ftn: ERROR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 116, Column = 9 \n  Program unit \"FUNCTION_TEST_DEV_ONLY\" is defined as a FUNCTION at line 16 (/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90), but is defined or referenced as a SUBROUTINE here.\n\n\nftn-1293 ftn: ERROR TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 178, Column = 9 \n  Program unit \"FUNCTION_TEST_DEV_ONLY\" is defined as a FUNCTION at line 16 (/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90), but is defined or referenced as a SUBROUTINE here.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0126 seconds\nCray Fortran : 288 source lines\nCray Fortran : 3 errors, 3 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11559905111789703
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/declare_function_scope_copyin.F90/declare_function_scope_copyin.F901 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90",
                    "config": 1,
                    "errors": "\n\nftn-287 ftn: WARNING FUNCTION_TEST, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 1, Column = 10 \n  The result of function name \"FUNCTION_TEST\" in the function subprogram is not defined.\n\n\nftn-296 ftn: WARNING FUNCTION_TEST, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 7, Column = 3 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\n\nftn-287 ftn: WARNING FUNCTION_TEST_DEV_ONLY, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 16, Column = 10 \n  The result of function name \"FUNCTION_TEST_DEV_ONLY\" in the function subprogram is not defined.\n\n\nftn-1293 ftn: ERROR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 116, Column = 9 \n  Program unit \"FUNCTION_TEST_DEV_ONLY\" is defined as a FUNCTION at line 16 (/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90), but is defined or referenced as a SUBROUTINE here.\n\n\nftn-1293 ftn: ERROR TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 178, Column = 9 \n  Program unit \"FUNCTION_TEST_DEV_ONLY\" is defined as a FUNCTION at line 16 (/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90), but is defined or referenced as a SUBROUTINE here.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0102 seconds\nCray Fortran : 279 source lines\nCray Fortran : 2 errors, 3 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11557550728321075
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT2 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/declare_function_scope_copyin.F90/declare_function_scope_copyin.F902 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90",
                    "config": 1,
                    "errors": "\n\nftn-287 ftn: WARNING FUNCTION_TEST, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 1, Column = 10 \n  The result of function name \"FUNCTION_TEST\" in the function subprogram is not defined.\n\n\nftn-296 ftn: WARNING FUNCTION_TEST, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 7, Column = 3 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\n\nftn-287 ftn: WARNING FUNCTION_TEST_DEV_ONLY, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 16, Column = 10 \n  The result of function name \"FUNCTION_TEST_DEV_ONLY\" in the function subprogram is not defined.\n\n\nftn-1293 ftn: ERROR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 63, Column = 7 \n  Program unit \"FUNCTION_TEST\" is defined as a FUNCTION at line 1 (/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90), but is defined or referenced as a SUBROUTINE here.\n\n\nftn-1293 ftn: ERROR TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 178, Column = 9 \n  Program unit \"FUNCTION_TEST_DEV_ONLY\" is defined as a FUNCTION at line 16 (/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90), but is defined or referenced as a SUBROUTINE here.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0097 seconds\nCray Fortran : 279 source lines\nCray Fortran : 2 errors, 3 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11541040055453777
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/declare_function_scope_copyin.F90/declare_function_scope_copyin.F903 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90",
                    "config": 1,
                    "errors": "\n\nftn-287 ftn: WARNING FUNCTION_TEST, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 1, Column = 10 \n  The result of function name \"FUNCTION_TEST\" in the function subprogram is not defined.\n\n\nftn-296 ftn: WARNING FUNCTION_TEST, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 7, Column = 3 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\n\nftn-287 ftn: WARNING FUNCTION_TEST_DEV_ONLY, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 16, Column = 10 \n  The result of function name \"FUNCTION_TEST_DEV_ONLY\" in the function subprogram is not defined.\n\n\nftn-1293 ftn: ERROR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 116, Column = 9 \n  Program unit \"FUNCTION_TEST_DEV_ONLY\" is defined as a FUNCTION at line 16 (/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90), but is defined or referenced as a SUBROUTINE here.\n\n\nftn-1293 ftn: ERROR TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 178, Column = 9 \n  Program unit \"FUNCTION_TEST_DEV_ONLY\" is defined as a FUNCTION at line 16 (/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90), but is defined or referenced as a SUBROUTINE here.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0105 seconds\nCray Fortran : 279 source lines\nCray Fortran : 2 errors, 3 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11539561115205288
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT3 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/declare_function_scope_copyin.F90/declare_function_scope_copyin.F904 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90",
                    "config": 1,
                    "errors": "\n\nftn-287 ftn: WARNING FUNCTION_TEST, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 1, Column = 10 \n  The result of function name \"FUNCTION_TEST\" in the function subprogram is not defined.\n\n\nftn-296 ftn: WARNING FUNCTION_TEST, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 7, Column = 3 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\n\nftn-287 ftn: WARNING FUNCTION_TEST_DEV_ONLY, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 16, Column = 10 \n  The result of function name \"FUNCTION_TEST_DEV_ONLY\" in the function subprogram is not defined.\n\n\nftn-1293 ftn: ERROR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 63, Column = 7 \n  Program unit \"FUNCTION_TEST\" is defined as a FUNCTION at line 1 (/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90), but is defined or referenced as a SUBROUTINE here.\n\n\nftn-1293 ftn: ERROR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 116, Column = 9 \n  Program unit \"FUNCTION_TEST_DEV_ONLY\" is defined as a FUNCTION at line 16 (/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90), but is defined or referenced as a SUBROUTINE here.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0103 seconds\nCray Fortran : 279 source lines\nCray Fortran : 2 errors, 3 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11540713161230087
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/declare_function_scope_copyin.F90/declare_function_scope_copyin.F905 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90",
                    "config": 1,
                    "errors": "\n\nftn-287 ftn: WARNING FUNCTION_TEST, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 1, Column = 10 \n  The result of function name \"FUNCTION_TEST\" in the function subprogram is not defined.\n\n\nftn-296 ftn: WARNING FUNCTION_TEST, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 7, Column = 3 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\n\nftn-287 ftn: WARNING FUNCTION_TEST_DEV_ONLY, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 16, Column = 10 \n  The result of function name \"FUNCTION_TEST_DEV_ONLY\" in the function subprogram is not defined.\n\n\nftn-1293 ftn: ERROR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 116, Column = 9 \n  Program unit \"FUNCTION_TEST_DEV_ONLY\" is defined as a FUNCTION at line 16 (/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90), but is defined or referenced as a SUBROUTINE here.\n\n\nftn-1293 ftn: ERROR TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 178, Column = 9 \n  Program unit \"FUNCTION_TEST_DEV_ONLY\" is defined as a FUNCTION at line 16 (/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90), but is defined or referenced as a SUBROUTINE here.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0105 seconds\nCray Fortran : 279 source lines\nCray Fortran : 2 errors, 3 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11549829505383968
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT2 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/declare_function_scope_copyin.F90/declare_function_scope_copyin.F906 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90",
                    "config": 1,
                    "errors": "\n\nftn-287 ftn: WARNING FUNCTION_TEST, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 1, Column = 10 \n  The result of function name \"FUNCTION_TEST\" in the function subprogram is not defined.\n\n\nftn-296 ftn: WARNING FUNCTION_TEST, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 7, Column = 3 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\n\nftn-287 ftn: WARNING FUNCTION_TEST_DEV_ONLY, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 16, Column = 10 \n  The result of function name \"FUNCTION_TEST_DEV_ONLY\" in the function subprogram is not defined.\n\n\nftn-1293 ftn: ERROR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 63, Column = 7 \n  Program unit \"FUNCTION_TEST\" is defined as a FUNCTION at line 1 (/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90), but is defined or referenced as a SUBROUTINE here.\n\n\nftn-1293 ftn: ERROR TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 178, Column = 9 \n  Program unit \"FUNCTION_TEST_DEV_ONLY\" is defined as a FUNCTION at line 16 (/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90), but is defined or referenced as a SUBROUTINE here.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0102 seconds\nCray Fortran : 279 source lines\nCray Fortran : 2 errors, 3 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11557730101048946
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/declare_function_scope_copyin.F90/declare_function_scope_copyin.F907 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90",
                    "config": 1,
                    "errors": "\n\nftn-287 ftn: WARNING FUNCTION_TEST, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 1, Column = 10 \n  The result of function name \"FUNCTION_TEST\" in the function subprogram is not defined.\n\n\nftn-296 ftn: WARNING FUNCTION_TEST, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 7, Column = 3 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\n\nftn-287 ftn: WARNING FUNCTION_TEST_DEV_ONLY, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 16, Column = 10 \n  The result of function name \"FUNCTION_TEST_DEV_ONLY\" in the function subprogram is not defined.\n\n\nftn-1293 ftn: ERROR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 116, Column = 9 \n  Program unit \"FUNCTION_TEST_DEV_ONLY\" is defined as a FUNCTION at line 16 (/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90), but is defined or referenced as a SUBROUTINE here.\n\n\nftn-1293 ftn: ERROR TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 178, Column = 9 \n  Program unit \"FUNCTION_TEST_DEV_ONLY\" is defined as a FUNCTION at line 16 (/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90), but is defined or referenced as a SUBROUTINE here.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0100 seconds\nCray Fortran : 279 source lines\nCray Fortran : 2 errors, 3 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11541064083576202
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "declare_function_scope_copyout.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/declare_function_scope_copyout.F90/declare_function_scope_copyout.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90",
                    "config": 1,
                    "errors": "\n\nftn-287 ftn: WARNING COPYOUT_TEST, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90, Line = 1, Column = 10 \n  The result of function name \"COPYOUT_TEST\" in the function subprogram is not defined.\n\n\nftn-296 ftn: WARNING COPYOUT_TEST, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90, Line = 7, Column = 3 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\n\nftn-1293 ftn: ERROR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90, Line = 46, Column = 7 \n  Program unit \"COPYOUT_TEST\" is defined as a FUNCTION at line 1 (/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90), but is defined or referenced as a SUBROUTINE here.\n\n\nftn-1293 ftn: ERROR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90, Line = 96, Column = 9 \n  Program unit \"COPYOUT_TEST\" is defined as a FUNCTION at line 1 (/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90), but is defined or referenced as a SUBROUTINE here.\n\n\nftn-1293 ftn: ERROR TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90, Line = 148, Column = 11 \n  Program unit \"COPYOUT_TEST\" is defined as a FUNCTION at line 1 (/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90), but is defined or referenced as a SUBROUTINE here.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0116 seconds\nCray Fortran : 247 source lines\nCray Fortran : 3 errors, 2 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11562077328562737
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/declare_function_scope_copyout.F90/declare_function_scope_copyout.F901 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90",
                    "config": 1,
                    "errors": "\n\nftn-287 ftn: WARNING COPYOUT_TEST, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90, Line = 1, Column = 10 \n  The result of function name \"COPYOUT_TEST\" in the function subprogram is not defined.\n\n\nftn-296 ftn: WARNING COPYOUT_TEST, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90, Line = 7, Column = 3 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\n\nftn-1293 ftn: ERROR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90, Line = 96, Column = 9 \n  Program unit \"COPYOUT_TEST\" is defined as a FUNCTION at line 1 (/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90), but is defined or referenced as a SUBROUTINE here.\n\n\nftn-1293 ftn: ERROR TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90, Line = 148, Column = 11 \n  Program unit \"COPYOUT_TEST\" is defined as a FUNCTION at line 1 (/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90), but is defined or referenced as a SUBROUTINE here.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0094 seconds\nCray Fortran : 238 source lines\nCray Fortran : 2 errors, 2 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11542326398193836
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT2 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/declare_function_scope_copyout.F90/declare_function_scope_copyout.F902 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90",
                    "config": 1,
                    "errors": "\n\nftn-287 ftn: WARNING COPYOUT_TEST, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90, Line = 1, Column = 10 \n  The result of function name \"COPYOUT_TEST\" in the function subprogram is not defined.\n\n\nftn-296 ftn: WARNING COPYOUT_TEST, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90, Line = 7, Column = 3 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\n\nftn-1293 ftn: ERROR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90, Line = 46, Column = 7 \n  Program unit \"COPYOUT_TEST\" is defined as a FUNCTION at line 1 (/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90), but is defined or referenced as a SUBROUTINE here.\n\n\nftn-1293 ftn: ERROR TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90, Line = 148, Column = 11 \n  Program unit \"COPYOUT_TEST\" is defined as a FUNCTION at line 1 (/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90), but is defined or referenced as a SUBROUTINE here.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0092 seconds\nCray Fortran : 238 source lines\nCray Fortran : 2 errors, 2 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11546432785689831
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/declare_function_scope_copyout.F90/declare_function_scope_copyout.F903 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90",
                    "config": 1,
                    "errors": "\n\nftn-287 ftn: WARNING COPYOUT_TEST, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90, Line = 1, Column = 10 \n  The result of function name \"COPYOUT_TEST\" in the function subprogram is not defined.\n\n\nftn-296 ftn: WARNING COPYOUT_TEST, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90, Line = 7, Column = 3 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\n\nftn-1293 ftn: ERROR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90, Line = 96, Column = 9 \n  Program unit \"COPYOUT_TEST\" is defined as a FUNCTION at line 1 (/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90), but is defined or referenced as a SUBROUTINE here.\n\n\nftn-1293 ftn: ERROR TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90, Line = 148, Column = 11 \n  Program unit \"COPYOUT_TEST\" is defined as a FUNCTION at line 1 (/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90), but is defined or referenced as a SUBROUTINE here.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0093 seconds\nCray Fortran : 238 source lines\nCray Fortran : 2 errors, 2 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11541089043021202
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT3 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/declare_function_scope_copyout.F90/declare_function_scope_copyout.F904 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90",
                    "config": 1,
                    "errors": "\n\nftn-287 ftn: WARNING COPYOUT_TEST, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90, Line = 1, Column = 10 \n  The result of function name \"COPYOUT_TEST\" in the function subprogram is not defined.\n\n\nftn-296 ftn: WARNING COPYOUT_TEST, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90, Line = 7, Column = 3 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\n\nftn-1293 ftn: ERROR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90, Line = 46, Column = 7 \n  Program unit \"COPYOUT_TEST\" is defined as a FUNCTION at line 1 (/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90), but is defined or referenced as a SUBROUTINE here.\n\n\nftn-1293 ftn: ERROR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90, Line = 96, Column = 9 \n  Program unit \"COPYOUT_TEST\" is defined as a FUNCTION at line 1 (/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90), but is defined or referenced as a SUBROUTINE here.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0095 seconds\nCray Fortran : 238 source lines\nCray Fortran : 2 errors, 2 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.1154380515217781
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/declare_function_scope_copyout.F90/declare_function_scope_copyout.F905 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90",
                    "config": 1,
                    "errors": "\n\nftn-287 ftn: WARNING COPYOUT_TEST, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90, Line = 1, Column = 10 \n  The result of function name \"COPYOUT_TEST\" in the function subprogram is not defined.\n\n\nftn-296 ftn: WARNING COPYOUT_TEST, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90, Line = 7, Column = 3 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\n\nftn-1293 ftn: ERROR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90, Line = 96, Column = 9 \n  Program unit \"COPYOUT_TEST\" is defined as a FUNCTION at line 1 (/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90), but is defined or referenced as a SUBROUTINE here.\n\n\nftn-1293 ftn: ERROR TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90, Line = 148, Column = 11 \n  Program unit \"COPYOUT_TEST\" is defined as a FUNCTION at line 1 (/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90), but is defined or referenced as a SUBROUTINE here.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0092 seconds\nCray Fortran : 238 source lines\nCray Fortran : 2 errors, 2 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11540758237242699
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT2 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/declare_function_scope_copyout.F90/declare_function_scope_copyout.F906 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90",
                    "config": 1,
                    "errors": "\n\nftn-287 ftn: WARNING COPYOUT_TEST, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90, Line = 1, Column = 10 \n  The result of function name \"COPYOUT_TEST\" in the function subprogram is not defined.\n\n\nftn-296 ftn: WARNING COPYOUT_TEST, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90, Line = 7, Column = 3 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\n\nftn-1293 ftn: ERROR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90, Line = 46, Column = 7 \n  Program unit \"COPYOUT_TEST\" is defined as a FUNCTION at line 1 (/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90), but is defined or referenced as a SUBROUTINE here.\n\n\nftn-1293 ftn: ERROR TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90, Line = 148, Column = 11 \n  Program unit \"COPYOUT_TEST\" is defined as a FUNCTION at line 1 (/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90), but is defined or referenced as a SUBROUTINE here.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0088 seconds\nCray Fortran : 238 source lines\nCray Fortran : 2 errors, 2 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11543110758066177
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/declare_function_scope_copyout.F90/declare_function_scope_copyout.F907 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90",
                    "config": 1,
                    "errors": "\n\nftn-287 ftn: WARNING COPYOUT_TEST, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90, Line = 1, Column = 10 \n  The result of function name \"COPYOUT_TEST\" in the function subprogram is not defined.\n\n\nftn-296 ftn: WARNING COPYOUT_TEST, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90, Line = 7, Column = 3 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\n\nftn-1293 ftn: ERROR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90, Line = 96, Column = 9 \n  Program unit \"COPYOUT_TEST\" is defined as a FUNCTION at line 1 (/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90), but is defined or referenced as a SUBROUTINE here.\n\n\nftn-1293 ftn: ERROR TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90, Line = 148, Column = 11 \n  Program unit \"COPYOUT_TEST\" is defined as a FUNCTION at line 1 (/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90), but is defined or referenced as a SUBROUTINE here.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0092 seconds\nCray Fortran : 238 source lines\nCray Fortran : 2 errors, 2 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11540847644209862
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "declare_function_scope_create.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/declare_function_scope_create.F90/declare_function_scope_create.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING CREATE_TEST, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 7, Column = 3 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\n\nftn-283 ftn: ERROR CREATE_TEST, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 18, Column = 14 \n  The name specified on the END FUNCTION statement must match the FUNCTION name \"CREATE_TEST\".\n\n\nftn-283 ftn: ERROR CREATE_AS_PRESENT, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 37, Column = 14 \n  The name specified on the END FUNCTION statement must match the FUNCTION name \"CREATE_AS_PRESENT\".\n\n\nftn-375 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 70, Column = 24 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 70, Column = 30 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 70, Column = 36 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 70, Column = 42 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 120, Column = 30 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 120, Column = 36 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 120, Column = 42 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 120, Column = 48 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 174, Column = 34 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 174, Column = 40 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 174, Column = 46 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 174, Column = 52 \n  The number of subscripts is smaller than the number of declared dimensions.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0127 seconds\nCray Fortran : 276 source lines\nCray Fortran : 2 errors, 13 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11569452099502087
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/declare_function_scope_create.F90/declare_function_scope_create.F901 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING CREATE_TEST, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 7, Column = 3 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\n\nftn-283 ftn: ERROR CREATE_TEST, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 18, Column = 14 \n  The name specified on the END FUNCTION statement must match the FUNCTION name \"CREATE_TEST\".\n\n\nftn-283 ftn: ERROR CREATE_AS_PRESENT, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 37, Column = 14 \n  The name specified on the END FUNCTION statement must match the FUNCTION name \"CREATE_AS_PRESENT\".\n\n\nftn-375 ftn: WARNING TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 120, Column = 30 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 120, Column = 36 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 120, Column = 42 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 120, Column = 48 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 174, Column = 34 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 174, Column = 40 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 174, Column = 46 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 174, Column = 52 \n  The number of subscripts is smaller than the number of declared dimensions.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0108 seconds\nCray Fortran : 267 source lines\nCray Fortran : 2 errors, 9 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11538171581923962
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT2 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/declare_function_scope_create.F90/declare_function_scope_create.F902 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING CREATE_TEST, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 7, Column = 3 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\n\nftn-283 ftn: ERROR CREATE_TEST, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 18, Column = 14 \n  The name specified on the END FUNCTION statement must match the FUNCTION name \"CREATE_TEST\".\n\n\nftn-283 ftn: ERROR CREATE_AS_PRESENT, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 37, Column = 14 \n  The name specified on the END FUNCTION statement must match the FUNCTION name \"CREATE_AS_PRESENT\".\n\n\nftn-375 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 70, Column = 24 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 70, Column = 30 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 70, Column = 36 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 70, Column = 42 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 174, Column = 34 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 174, Column = 40 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 174, Column = 46 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 174, Column = 52 \n  The number of subscripts is smaller than the number of declared dimensions.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0105 seconds\nCray Fortran : 267 source lines\nCray Fortran : 2 errors, 9 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11543528363108635
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/declare_function_scope_create.F90/declare_function_scope_create.F903 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING CREATE_TEST, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 7, Column = 3 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\n\nftn-283 ftn: ERROR CREATE_TEST, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 18, Column = 14 \n  The name specified on the END FUNCTION statement must match the FUNCTION name \"CREATE_TEST\".\n\n\nftn-283 ftn: ERROR CREATE_AS_PRESENT, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 37, Column = 14 \n  The name specified on the END FUNCTION statement must match the FUNCTION name \"CREATE_AS_PRESENT\".\n\n\nftn-375 ftn: WARNING TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 120, Column = 30 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 120, Column = 36 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 120, Column = 42 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 120, Column = 48 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 174, Column = 34 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 174, Column = 40 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 174, Column = 46 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 174, Column = 52 \n  The number of subscripts is smaller than the number of declared dimensions.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0106 seconds\nCray Fortran : 267 source lines\nCray Fortran : 2 errors, 9 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11540041863918304
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT3 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/declare_function_scope_create.F90/declare_function_scope_create.F904 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING CREATE_TEST, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 7, Column = 3 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\n\nftn-283 ftn: ERROR CREATE_TEST, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 18, Column = 14 \n  The name specified on the END FUNCTION statement must match the FUNCTION name \"CREATE_TEST\".\n\n\nftn-283 ftn: ERROR CREATE_AS_PRESENT, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 37, Column = 14 \n  The name specified on the END FUNCTION statement must match the FUNCTION name \"CREATE_AS_PRESENT\".\n\n\nftn-375 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 70, Column = 24 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 70, Column = 30 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 70, Column = 36 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 70, Column = 42 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 120, Column = 30 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 120, Column = 36 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 120, Column = 42 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 120, Column = 48 \n  The number of subscripts is smaller than the number of declared dimensions.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0104 seconds\nCray Fortran : 267 source lines\nCray Fortran : 2 errors, 9 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11542925424873829
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/declare_function_scope_create.F90/declare_function_scope_create.F905 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING CREATE_TEST, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 7, Column = 3 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\n\nftn-283 ftn: ERROR CREATE_TEST, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 18, Column = 14 \n  The name specified on the END FUNCTION statement must match the FUNCTION name \"CREATE_TEST\".\n\n\nftn-283 ftn: ERROR CREATE_AS_PRESENT, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 37, Column = 14 \n  The name specified on the END FUNCTION statement must match the FUNCTION name \"CREATE_AS_PRESENT\".\n\n\nftn-375 ftn: WARNING TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 120, Column = 30 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 120, Column = 36 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 120, Column = 42 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 120, Column = 48 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 174, Column = 34 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 174, Column = 40 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 174, Column = 46 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 174, Column = 52 \n  The number of subscripts is smaller than the number of declared dimensions.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0108 seconds\nCray Fortran : 267 source lines\nCray Fortran : 2 errors, 9 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11549532786011696
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT2 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/declare_function_scope_create.F90/declare_function_scope_create.F906 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING CREATE_TEST, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 7, Column = 3 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\n\nftn-283 ftn: ERROR CREATE_TEST, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 18, Column = 14 \n  The name specified on the END FUNCTION statement must match the FUNCTION name \"CREATE_TEST\".\n\n\nftn-283 ftn: ERROR CREATE_AS_PRESENT, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 37, Column = 14 \n  The name specified on the END FUNCTION statement must match the FUNCTION name \"CREATE_AS_PRESENT\".\n\n\nftn-375 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 70, Column = 24 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 70, Column = 30 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 70, Column = 36 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 70, Column = 42 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 174, Column = 34 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 174, Column = 40 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 174, Column = 46 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 174, Column = 52 \n  The number of subscripts is smaller than the number of declared dimensions.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0105 seconds\nCray Fortran : 267 source lines\nCray Fortran : 2 errors, 9 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11548839695751667
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/declare_function_scope_create.F90/declare_function_scope_create.F907 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING CREATE_TEST, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 7, Column = 3 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\n\nftn-283 ftn: ERROR CREATE_TEST, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 18, Column = 14 \n  The name specified on the END FUNCTION statement must match the FUNCTION name \"CREATE_TEST\".\n\n\nftn-283 ftn: ERROR CREATE_AS_PRESENT, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 37, Column = 14 \n  The name specified on the END FUNCTION statement must match the FUNCTION name \"CREATE_AS_PRESENT\".\n\n\nftn-375 ftn: WARNING TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 120, Column = 30 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 120, Column = 36 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 120, Column = 42 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 120, Column = 48 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 174, Column = 34 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 174, Column = 40 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 174, Column = 46 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 174, Column = 52 \n  The number of subscripts is smaller than the number of declared dimensions.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0106 seconds\nCray Fortran : 267 source lines\nCray Fortran : 2 errors, 9 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11544308066368103
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "declare_function_scope_present.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/declare_function_scope_present.F90/declare_function_scope_present.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_present.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING PRESENT, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_present.F90, Line = 7, Column = 3 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\n\nftn-283 ftn: ERROR PRESENT, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_present.F90, Line = 18, Column = 14 \n  The name specified on the END FUNCTION statement must match the FUNCTION name \"PRESENT\".\n\n\nftn-375 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_present.F90, Line = 52, Column = 22 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_present.F90, Line = 52, Column = 28 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_present.F90, Line = 52, Column = 34 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_present.F90, Line = 52, Column = 40 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_present.F90, Line = 107, Column = 24 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_present.F90, Line = 107, Column = 30 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_present.F90, Line = 107, Column = 36 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_present.F90, Line = 107, Column = 42 \n  The number of subscripts is smaller than the number of declared dimensions.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0103 seconds\nCray Fortran : 188 source lines\nCray Fortran : 1 errors, 9 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11571140959858894
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/declare_function_scope_present.F90/declare_function_scope_present.F901 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_present.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING PRESENT, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_present.F90, Line = 7, Column = 3 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\n\nftn-283 ftn: ERROR PRESENT, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_present.F90, Line = 18, Column = 14 \n  The name specified on the END FUNCTION statement must match the FUNCTION name \"PRESENT\".\n\n\nftn-375 ftn: WARNING TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_present.F90, Line = 107, Column = 24 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_present.F90, Line = 107, Column = 30 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_present.F90, Line = 107, Column = 36 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_present.F90, Line = 107, Column = 42 \n  The number of subscripts is smaller than the number of declared dimensions.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0070 seconds\nCray Fortran : 179 source lines\nCray Fortran : 1 errors, 5 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11543213203549385
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT2 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/declare_function_scope_present.F90/declare_function_scope_present.F902 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_present.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING PRESENT, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_present.F90, Line = 7, Column = 3 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\n\nftn-283 ftn: ERROR PRESENT, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_present.F90, Line = 18, Column = 14 \n  The name specified on the END FUNCTION statement must match the FUNCTION name \"PRESENT\".\n\n\nftn-375 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_present.F90, Line = 52, Column = 22 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_present.F90, Line = 52, Column = 28 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_present.F90, Line = 52, Column = 34 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_present.F90, Line = 52, Column = 40 \n  The number of subscripts is smaller than the number of declared dimensions.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0062 seconds\nCray Fortran : 179 source lines\nCray Fortran : 1 errors, 5 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11567658558487892
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/declare_function_scope_present.F90/declare_function_scope_present.F903 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_present.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING PRESENT, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_present.F90, Line = 7, Column = 3 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\n\nftn-283 ftn: ERROR PRESENT, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_present.F90, Line = 18, Column = 14 \n  The name specified on the END FUNCTION statement must match the FUNCTION name \"PRESENT\".\n\n\nftn-375 ftn: WARNING TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_present.F90, Line = 107, Column = 24 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_present.F90, Line = 107, Column = 30 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_present.F90, Line = 107, Column = 36 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_present.F90, Line = 107, Column = 42 \n  The number of subscripts is smaller than the number of declared dimensions.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0062 seconds\nCray Fortran : 179 source lines\nCray Fortran : 1 errors, 5 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11545928940176964
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "enter_data_copyin_no_lower_bound.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/enter_data_copyin_no_lower_bound.F90/enter_data_copyin_no_lower_bound.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_copyin_no_lower_bound.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_copyin_no_lower_bound.F90, Line = 21, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0040 seconds\nCray Fortran : 84 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.26578834652900696
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009122967720031738,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "enter_data_create.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/enter_data_create.F90/enter_data_create.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_create.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_create.F90, Line = 21, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0067 seconds\nCray Fortran : 240 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2658222708851099
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009599998593330383,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "enter_data_create_no_lower_bound.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/enter_data_create_no_lower_bound.F90/enter_data_create_no_lower_bound.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_create_no_lower_bound.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_create_no_lower_bound.F90, Line = 23, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0040 seconds\nCray Fortran : 88 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2657501846551895
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009148737415671349,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "enter_data_if.F90": [
            {
                "compilation": {
                    "command": "ftn -DT1 -DT2 -DT3 -DT4 -DT5 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/enter_data_if.F90/enter_data_if.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_if.F90",
                    "config": 1,
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.215674864128232
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009146850556135178,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT2 -DT3 -DT4 -DT5 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/enter_data_if.F90/enter_data_if.F901 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_if.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_if.F90, Line = 14, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0043 seconds\nCray Fortran : 368 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2655787877738476
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009500280022621155,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT1 -DT3 -DT4 -DT5 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/enter_data_if.F90/enter_data_if.F902 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_if.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_if.F90, Line = 66, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0041 seconds\nCray Fortran : 368 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.265636695548892
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009201794862747192,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT1 -DT2 -DT4 -DT5 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/enter_data_if.F90/enter_data_if.F903 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_if.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_if.F90, Line = 119, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0042 seconds\nCray Fortran : 368 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.21556406468153
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009106075391173363,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT1 -DT2 -DT3 -DT5 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/enter_data_if.F90/enter_data_if.F904 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_if.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST4, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_if.F90, Line = 180, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0042 seconds\nCray Fortran : 368 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.21579241380095482
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009091218933463097,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT1 -DT2 -DT3 -DT4 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/enter_data_if.F90/enter_data_if.F905 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_if.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST5, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_if.F90, Line = 240, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0042 seconds\nCray Fortran : 368 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.21551689878106117
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009076148271560669,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/enter_data_if.F90/enter_data_if.F906 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_if.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_if.F90, Line = 14, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0097 seconds\nCray Fortran : 404 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3156357854604721
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009418375790119171,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "exit_data.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/exit_data.F90/exit_data.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data.F90, Line = 11, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0052 seconds\nCray Fortran : 156 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.26578002236783504
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009719226509332657,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "exit_data_copyout_no_lower_bound.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/exit_data_copyout_no_lower_bound.F90/exit_data_copyout_no_lower_bound.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_copyout_no_lower_bound.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_copyout_no_lower_bound.F90, Line = 20, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0039 seconds\nCray Fortran : 82 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.26598483324050903
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009163923561573029,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "exit_data_copyout_reference_counts.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/exit_data_copyout_reference_counts.F90/exit_data_copyout_reference_counts.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90, Line = 12, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0067 seconds\nCray Fortran : 239 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.265922948718071
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.00921056792140007,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "exit_data_delete_no_lower_bound.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/exit_data_delete_no_lower_bound.F90/exit_data_delete_no_lower_bound.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_delete_no_lower_bound.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_delete_no_lower_bound.F90, Line = 12, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0052 seconds\nCray Fortran : 164 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.26586198434233665
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009149115532636642,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "exit_data_finalize.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/exit_data_finalize.F90/exit_data_finalize.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_finalize.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_finalize.F90, Line = 12, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0055 seconds\nCray Fortran : 166 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2658843733370304
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009125510230660439,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "init.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/init.F90/init.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/init.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/init.F90, Line = 9, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0057 seconds\nCray Fortran : 57 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_35759/init_1.o:(.data+0x0): undefined reference to `openacc_'\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.21575392223894596
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/init.F90/init.F901 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/init.F90",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.21548009291291237
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009254451841115952,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "init_device_num.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/init_device_num.F90/init_device_num.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/init_device_num.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/init_device_num.F90, Line = 12, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0060 seconds\nCray Fortran : 60 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_35791/init_device_num_1.o: in function `test1_':\n/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/init_device_num.F90:11: undefined reference to `acc_get_device_type'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/init_device_num.F90:11: undefined reference to `acc_get_device_num'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_35791/init_device_num_1.o:(.data+0x0): undefined reference to `openacc_'\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.21575662679970264
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/init_device_num.F90/init_device_num.F901 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/init_device_num.F90",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2155277617275715
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009194519370794296,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "init_device_type.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/init_device_type.F90/init_device_type.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/init_device_type.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/init_device_type.F90, Line = 11, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0058 seconds\nCray Fortran : 59 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_35824/init_device_type_1.o: in function `test1_':\n/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/init_device_type.F90:10: undefined reference to `acc_get_device_type'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_35824/init_device_type_1.o:(.data+0x0): undefined reference to `openacc_'\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.215686222538352
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/init_device_type.F90/init_device_type.F901 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/init_device_type.F90",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.21557874605059624
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009244181215763092,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "init_device_type_num.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/init_device_type_num.F90/init_device_type_num.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/init_device_type_num.F90",
                    "config": 1,
                    "errors": "\n\nftn-1307 ftn: ERROR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/init_device_type_num.F90, Line = 12, Column = 41 \n  The kind (4) of this actual argument does not match that of its associated dummy argument (8).\n\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/init_device_type_num.F90, Line = 13, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0055 seconds\nCray Fortran : 61 source lines\nCray Fortran : 1 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11555902659893036
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/init_device_type_num.F90/init_device_type_num.F901 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/init_device_type_num.F90",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.21561872027814388
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009147804230451584,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_async.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/kernels_async.F90/kernels_async.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_async.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_async.F90, Line = 24, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0045 seconds\nCray Fortran : 113 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2657723184674978
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009147310629487038,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_copy.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/kernels_copy.F90/kernels_copy.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_copy.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_copy.F90, Line = 12, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0068 seconds\nCray Fortran : 243 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2659632917493582
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009498907253146172,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_copyin.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/kernels_copyin.F90/kernels_copyin.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_copyin.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_copyin.F90, Line = 12, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0065 seconds\nCray Fortran : 234 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.26576317101716995
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.0090962965041399,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_copyout.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/kernels_copyout.F90/kernels_copyout.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_copyout.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_copyout.F90, Line = 12, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0052 seconds\nCray Fortran : 159 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.26590608805418015
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009116413071751595,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_create.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/kernels_create.F90/kernels_create.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_create.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_create.F90, Line = 12, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0064 seconds\nCray Fortran : 229 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2658581454306841
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009161500260233879,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_default_copy.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/kernels_default_copy.F90/kernels_default_copy.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_default_copy.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_default_copy.F90, Line = 12, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0054 seconds\nCray Fortran : 167 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2658503446727991
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009174134582281113,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_default_present.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/kernels_default_present.F90/kernels_default_present.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_default_present.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_default_present.F90, Line = 20, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0037 seconds\nCray Fortran : 80 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2658001780509949
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009477155283093452,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_if.F90": [
            {
                "compilation": {
                    "command": "ftn -DT1 -DT2 -DT3 -DT4 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/kernels_if.F90/kernels_if.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_if.F90",
                    "config": 1,
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.215701874345541
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009333288297057152,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT2 -DT3 -DT4 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/kernels_if.F90/kernels_if.F901 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_if.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_if.F90, Line = 13, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0040 seconds\nCray Fortran : 299 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.26559656858444214
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009136954322457314,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT1 -DT3 -DT4 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/kernels_if.F90/kernels_if.F902 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_if.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_if.F90, Line = 60, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0040 seconds\nCray Fortran : 299 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2656093407422304
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009097091853618622,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT1 -DT2 -DT4 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/kernels_if.F90/kernels_if.F903 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_if.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_if.F90, Line = 110, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0043 seconds\nCray Fortran : 299 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.26614384911954403
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.00926399976015091,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT1 -DT2 -DT3 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/kernels_if.F90/kernels_if.F904 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_if.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST4, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_if.F90, Line = 176, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\n\nftn-303 ftn: ERROR TEST4, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_if.F90, Line = 188, Column = 24 \n  Data type LOGICAL is not allowed with INTEGER for the operation \"eq\".\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0039 seconds\nCray Fortran : 299 source lines\nCray Fortran : 1 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11546652391552925
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT4 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/kernels_if.F90/kernels_if.F905 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_if.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_if.F90, Line = 13, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0070 seconds\nCray Fortran : 317 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2655555848032236
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009237740188837051,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/kernels_loop.F90/kernels_loop.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop.F90",
                    "config": 1,
                    "errors": "\n\nftn-1725 ftn: ERROR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop.F90, Line = 6, Column = 23 \n  Unexpected syntax while parsing the type-declaration statement : \"object-name\" was expected but found \"_\".\n\n\nftn-1725 ftn: ERROR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop.F90, Line = 6, Column = 27 \n  Unexpected syntax while parsing the type-declaration statement : \"object-name\" was expected but found \"_\".\n\n\nftn-1725 ftn: ERROR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop.F90, Line = 6, Column = 31 \n  Unexpected syntax while parsing the type-declaration statement : \"object-name\" was expected but found \"_\".\n\n\nftn-1725 ftn: ERROR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop.F90, Line = 6, Column = 35 \n  Unexpected syntax while parsing the type-declaration statement : \"object-name\" was expected but found \"_\".\n\n\nftn-1725 ftn: ERROR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop.F90, Line = 6, Column = 39 \n  Unexpected syntax while parsing the type-declaration statement : \"object-name\" was expected but found \"_\".\n\n\nftn-1725 ftn: ERROR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop.F90, Line = 6, Column = 43 \n  Unexpected syntax while parsing the type-declaration statement : \"object-name\" was expected but found \"_\".\n\n\nftn-1725 ftn: ERROR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop.F90, Line = 6, Column = 47 \n  Unexpected syntax while parsing the type-declaration statement : \"object-name\" was expected but found \"_\".\n\n\nftn-1725 ftn: ERROR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop.F90, Line = 6, Column = 51 \n  Unexpected syntax while parsing the type-declaration statement : \"object-name\" was expected but found \"_\".\n\n\nftn-1725 ftn: ERROR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop.F90, Line = 6, Column = 55 \n  Unexpected syntax while parsing the type-declaration statement : \"object-name\" was expected but found \"_\".\n\n\nftn-1725 ftn: ERROR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop.F90, Line = 6, Column = 59 \n  Unexpected syntax while parsing the type-declaration statement : \"object-name\" was expected but found \"_\".\n\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop.F90, Line = 20, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\n\nftn-515 ftn: ERROR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop.F90, Line = 23, Column = 16 \n  Unexpected syntax:  A label, comma, identifier, WHILE or EOS was expected but found \"_\".\n\n\nftn-515 ftn: ERROR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop.F90, Line = 25, Column = 18 \n  Unexpected syntax:  A label, comma, identifier, WHILE or EOS was expected but found \"_\".\n\n\nftn-515 ftn: ERROR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop.F90, Line = 27, Column = 20 \n  Unexpected syntax:  A label, comma, identifier, WHILE or EOS was expected but found \"_\".\n\n\nftn-515 ftn: ERROR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop.F90, Line = 29, Column = 22 \n  Unexpected syntax:  A label, comma, identifier, WHILE or EOS was expected but found \"_\".\n\n\nftn-515 ftn: ERROR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop.F90, Line = 31, Column = 24 \n  Unexpected syntax:  A label, comma, identifier, WHILE or EOS was expected but found \"_\".\n\n\nftn-515 ftn: ERROR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop.F90, Line = 33, Column = 26 \n  Unexpected syntax:  A label, comma, identifier, WHILE or EOS was expected but found \"_\".\n\n\nftn-515 ftn: ERROR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop.F90, Line = 35, Column = 28 \n  Unexpected syntax:  A label, comma, identifier, WHILE or EOS was expected but found \"_\".\n\n\nftn-515 ftn: ERROR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop.F90, Line = 37, Column = 30 \n  Unexpected syntax:  A label, comma, identifier, WHILE or EOS was expected but found \"_\".\n\n\nftn-515 ftn: ERROR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop.F90, Line = 39, Column = 32 \n  Unexpected syntax:  A label, comma, identifier, WHILE or EOS was expected but found \"_\".\n\n\nftn-515 ftn: ERROR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop.F90, Line = 41, Column = 34 \n  Unexpected syntax:  A label, comma, identifier, WHILE or EOS was expected but found \"_\".\n\n\nftn-1725 ftn: ERROR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop.F90, Line = 42, Column = 35 \n  Unexpected syntax while parsing the assignment statement : \"operand\" was expected but found \"_\".\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0038 seconds\nCray Fortran : 108 source lines\nCray Fortran : 21 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11564885638654232
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/kernels_loop.F90/kernels_loop.F901 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop.F90",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.21550025045871735
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009237319231033325,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_independent.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/kernels_loop_independent.F90/kernels_loop_independent.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_independent.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_independent.F90, Line = 20, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0039 seconds\nCray Fortran : 79 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.26574259251356125
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009706936776638031,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_reduction_add_general.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/kernels_loop_reduction_add_general.F90/kernels_loop_reduction_add_general.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_add_general.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_add_general.F90, Line = 21, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0039 seconds\nCray Fortran : 81 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.26577334851026535
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009576123207807541,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_reduction_add_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/kernels_loop_reduction_add_loop.F90/kernels_loop_reduction_add_loop.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_add_loop.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_add_loop.F90, Line = 21, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0044 seconds\nCray Fortran : 96 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.26571445912122726
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009111035615205765,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_reduction_add_vector_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/kernels_loop_reduction_add_vector_loop.F90/kernels_loop_reduction_add_vector_loop.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_add_vector_loop.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_add_vector_loop.F90, Line = 22, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0041 seconds\nCray Fortran : 90 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.26582064665853977
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.00911317765712738,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_reduction_and_general.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/kernels_loop_reduction_and_general.F90/kernels_loop_reduction_and_general.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_and_general.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_and_general.F90, Line = 30, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0042 seconds\nCray Fortran : 90 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.26583285816013813
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009155578911304474,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_reduction_and_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/kernels_loop_reduction_and_loop.F90/kernels_loop_reduction_and_loop.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_and_loop.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_and_loop.F90, Line = 37, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0046 seconds\nCray Fortran : 125 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2658555004745722
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009216159582138062,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_reduction_and_vector_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/kernels_loop_reduction_and_vector_loop.F90/kernels_loop_reduction_and_vector_loop.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_and_vector_loop.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_and_vector_loop.F90, Line = 40, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0045 seconds\nCray Fortran : 110 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.26579788513481617
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009143004193902016,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_reduction_bitand_general.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/kernels_loop_reduction_bitand_general.F90/kernels_loop_reduction_bitand_general.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitand_general.F90",
                    "config": 1,
                    "errors": "\n\nftn-7212 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitand_general.F90, Line = 30 \n  Variable \"a\" is used before it is defined.\n\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitand_general.F90, Line = 37, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0045 seconds\nCray Fortran : 100 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.26583012379705906
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009450556710362434,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_reduction_bitand_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/kernels_loop_reduction_bitand_loop.F90/kernels_loop_reduction_bitand_loop.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitand_loop.F90",
                    "config": 1,
                    "errors": "\n\nftn-7212 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitand_loop.F90, Line = 34 \n  Variable \"a\" is used before it is defined.\n\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitand_loop.F90, Line = 43, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0049 seconds\nCray Fortran : 120 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3160473685711622
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009154785424470901,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_reduction_bitand_vector_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/kernels_loop_reduction_bitand_vector_loop.F90/kernels_loop_reduction_bitand_vector_loop.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitand_vector_loop.F90",
                    "config": 1,
                    "errors": "\n\nftn-7212 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitand_vector_loop.F90, Line = 32 \n  Variable \"a\" is used before it is defined.\n\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitand_vector_loop.F90, Line = 38, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0044 seconds\nCray Fortran : 106 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.26579940877854824
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009173139929771423,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_reduction_bitor_general.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/kernels_loop_reduction_bitor_general.F90/kernels_loop_reduction_bitor_general.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitor_general.F90",
                    "config": 1,
                    "errors": "\n\nftn-7212 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitor_general.F90, Line = 30 \n  Variable \"a\" is used before it is defined.\n\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitor_general.F90, Line = 35, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0043 seconds\nCray Fortran : 95 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2657695822417736
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009129999205470085,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_reduction_bitor_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/kernels_loop_reduction_bitor_loop.F90/kernels_loop_reduction_bitor_loop.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitor_loop.F90",
                    "config": 1,
                    "errors": "\n\nftn-7212 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitor_loop.F90, Line = 35 \n  Variable \"a\" is used before it is defined.\n\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitor_loop.F90, Line = 41, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0048 seconds\nCray Fortran : 118 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3157892283052206
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.00913017988204956,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_reduction_bitor_vector_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/kernels_loop_reduction_bitor_vector_loop.F90/kernels_loop_reduction_bitor_vector_loop.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitor_vector_loop.F90",
                    "config": 1,
                    "errors": "\n\nftn-7212 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitor_vector_loop.F90, Line = 30 \n  Variable \"a\" is used before it is defined.\n\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitor_vector_loop.F90, Line = 35, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0045 seconds\nCray Fortran : 103 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2660727482289076
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009239152073860168,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_reduction_bitxor_general.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/kernels_loop_reduction_bitxor_general.F90/kernels_loop_reduction_bitxor_general.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitxor_general.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitxor_general.F90, Line = 23, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0040 seconds\nCray Fortran : 83 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.26593977212905884
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009485062211751938,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_reduction_bitxor_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/kernels_loop_reduction_bitxor_loop.F90/kernels_loop_reduction_bitxor_loop.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitxor_loop.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitxor_loop.F90, Line = 28, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0044 seconds\nCray Fortran : 105 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.26577824726700783
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009225277230143547,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_reduction_bitxor_vector_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/kernels_loop_reduction_bitxor_vector_loop.F90/kernels_loop_reduction_bitxor_vector_loop.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitxor_vector_loop.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitxor_vector_loop.F90, Line = 23, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0040 seconds\nCray Fortran : 91 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2658795155584812
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009246520698070526,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_reduction_max_general.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/kernels_loop_reduction_max_general.F90/kernels_loop_reduction_max_general.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_max_general.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_max_general.F90, Line = 23, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0040 seconds\nCray Fortran : 83 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.26579198241233826
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.00916869193315506,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_reduction_max_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/kernels_loop_reduction_max_loop.F90/kernels_loop_reduction_max_loop.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_max_loop.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_max_loop.F90, Line = 23, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0043 seconds\nCray Fortran : 95 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.26575036346912384
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.00951322354376316,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_reduction_max_vector_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/kernels_loop_reduction_max_vector_loop.F90/kernels_loop_reduction_max_vector_loop.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_max_vector_loop.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_max_vector_loop.F90, Line = 23, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0041 seconds\nCray Fortran : 91 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.26584000512957573
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009586352854967117,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_reduction_min_general.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/kernels_loop_reduction_min_general.F90/kernels_loop_reduction_min_general.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_min_general.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_min_general.F90, Line = 22, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0040 seconds\nCray Fortran : 82 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2657533623278141
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009160354733467102,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_reduction_min_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/kernels_loop_reduction_min_loop.F90/kernels_loop_reduction_min_loop.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_min_loop.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_min_loop.F90, Line = 25, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0045 seconds\nCray Fortran : 103 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3158833235502243
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009164351969957352,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_reduction_min_vector_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/kernels_loop_reduction_min_vector_loop.F90/kernels_loop_reduction_min_vector_loop.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_min_vector_loop.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_min_vector_loop.F90, Line = 22, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0042 seconds\nCray Fortran : 90 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.26579330675303936
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.00915580801665783,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_reduction_multiply_general.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/kernels_loop_reduction_multiply_general.F90/kernels_loop_reduction_multiply_general.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_multiply_general.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_multiply_general.F90, Line = 24, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0040 seconds\nCray Fortran : 86 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.26579635962843895
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009159374982118607,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_reduction_multiply_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/kernels_loop_reduction_multiply_loop.F90/kernels_loop_reduction_multiply_loop.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_multiply_loop.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_multiply_loop.F90, Line = 25, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0045 seconds\nCray Fortran : 108 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31584574468433857
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009202506393194199,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_reduction_multiply_vector_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/kernels_loop_reduction_multiply_vector_loop.F90/kernels_loop_reduction_multiply_vector_loop.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_multiply_vector_loop.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_multiply_vector_loop.F90, Line = 24, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0041 seconds\nCray Fortran : 92 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2658591903746128
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.00925321877002716,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_reduction_or_general.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/kernels_loop_reduction_or_general.F90/kernels_loop_reduction_or_general.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_or_general.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_or_general.F90, Line = 30, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0041 seconds\nCray Fortran : 90 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2658235654234886
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009214065968990326,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_reduction_or_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/kernels_loop_reduction_or_loop.F90/kernels_loop_reduction_or_loop.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_or_loop.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_or_loop.F90, Line = 36, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0046 seconds\nCray Fortran : 125 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2658690772950649
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009435459971427917,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_reduction_or_vector_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/kernels_loop_reduction_or_vector_loop.F90/kernels_loop_reduction_or_vector_loop.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_or_vector_loop.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_or_vector_loop.F90, Line = 31, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0042 seconds\nCray Fortran : 99 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.26578446105122566
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009186042472720146,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_seq.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/kernels_loop_seq.F90/kernels_loop_seq.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_seq.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_seq.F90, Line = 20, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0039 seconds\nCray Fortran : 79 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2658949363976717
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009370107203722,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_tile.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/kernels_loop_tile.F90/kernels_loop_tile.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_tile.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_tile.F90, Line = 23, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0041 seconds\nCray Fortran : 94 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.26579810306429863
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009174652397632599,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_vector_blocking.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/kernels_loop_vector_blocking.F90/kernels_loop_vector_blocking.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_vector_blocking.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_vector_blocking.F90, Line = 22, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0040 seconds\nCray Fortran : 88 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2658205274492502
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.00920390896499157,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_worker_blocking.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/kernels_loop_worker_blocking.F90/kernels_loop_worker_blocking.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_worker_blocking.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_worker_blocking.F90, Line = 24, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0041 seconds\nCray Fortran : 90 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2657312601804733
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009599415585398674,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_num_gangs.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/kernels_num_gangs.F90/kernels_num_gangs.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_num_gangs.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_num_gangs.F90, Line = 12, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0036 seconds\nCray Fortran : 69 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2157429587095976
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.00916515477001667,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_num_workers.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/kernels_num_workers.F90/kernels_num_workers.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_num_workers.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_num_workers.F90, Line = 20, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0038 seconds\nCray Fortran : 80 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.26589304953813553
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009240275248885155,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_present.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/kernels_present.F90/kernels_present.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_present.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_present.F90, Line = 20, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0039 seconds\nCray Fortran : 81 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2657906301319599
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009202476590871811,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_scalar_default_copy.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/kernels_scalar_default_copy.F90/kernels_scalar_default_copy.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_scalar_default_copy.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_scalar_default_copy.F90, Line = 23, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0041 seconds\nCray Fortran : 85 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2658238224685192
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009482055902481079,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_vector_length.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/kernels_vector_length.F90/kernels_vector_length.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_vector_length.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_vector_length.F90, Line = 20, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0038 seconds\nCray Fortran : 81 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.26583417132496834
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.00969746895134449,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_wait.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/kernels_wait.F90/kernels_wait.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_wait.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_wait.F90, Line = 21, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0039 seconds\nCray Fortran : 82 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.26584427058696747
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.00918244756758213,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "loop_collapse.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/loop_collapse.F90/loop_collapse.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/loop_collapse.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/loop_collapse.F90, Line = 26, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0056 seconds\nCray Fortran : 160 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3158956244587898
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009231600910425186,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "loop_no_collapse.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/loop_no_collapse.F90/loop_no_collapse.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/loop_no_collapse.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/loop_no_collapse.F90, Line = 26, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0057 seconds\nCray Fortran : 167 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3158253636211157
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009717334061861038,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/parallel.F90/parallel.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel.F90, Line = 23, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0044 seconds\nCray Fortran : 112 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2658442500978708
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009251680225133896,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_async.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/parallel_async.F90/parallel_async.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_async.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_async.F90, Line = 25, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0042 seconds\nCray Fortran : 105 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2659364119172096
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009723266586661339,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_copy.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/parallel_copy.F90/parallel_copy.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_copy.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_copy.F90, Line = 20, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0040 seconds\nCray Fortran : 80 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.26583576388657093
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009164083749055862,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_copyin.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/parallel_copyin.F90/parallel_copyin.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_copyin.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_copyin.F90, Line = 23, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0039 seconds\nCray Fortran : 89 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.26589771173894405
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009395623579621315,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_copyout.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/parallel_copyout.F90/parallel_copyout.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_copyout.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_copyout.F90, Line = 11, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0064 seconds\nCray Fortran : 228 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2657543532550335
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009549412876367569,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_create.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/parallel_create.F90/parallel_create.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_create.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_create.F90, Line = 21, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0039 seconds\nCray Fortran : 85 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.26583511382341385
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009214457124471664,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_default_copy.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/parallel_default_copy.F90/parallel_default_copy.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_default_copy.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_default_copy.F90, Line = 12, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0054 seconds\nCray Fortran : 167 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.26579313538968563
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009792795404791832,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_default_present.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/parallel_default_present.F90/parallel_default_present.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_default_present.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_default_present.F90, Line = 12, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0038 seconds\nCray Fortran : 73 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.21572383306920528
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009134668856859207,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_firstprivate.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/parallel_firstprivate.F90/parallel_firstprivate.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_firstprivate.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_firstprivate.F90, Line = 25, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0059 seconds\nCray Fortran : 164 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3157613556832075
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009141940623521805,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_if.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/parallel_if.F90/parallel_if.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_if.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_if.F90, Line = 14, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0068 seconds\nCray Fortran : 234 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.26583967357873917
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009205369278788567,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/parallel_loop.F90/parallel_loop.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop.F90, Line = 18, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0052 seconds\nCray Fortran : 144 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.26604459062218666
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009309332817792892,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_async.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/parallel_loop_async.F90/parallel_loop_async.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_async.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_async.F90, Line = 24, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\n\nftn-7212 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_async.F90, Line = 33 \n  Variable \"errors_array\" is used before it is defined.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0041 seconds\nCray Fortran : 90 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2657762710005045
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.009198019281029701,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_auto.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/parallel_loop_auto.F90/parallel_loop_auto.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_auto.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_auto.F90, Line = 22, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0041 seconds\nCray Fortran : 96 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2660996075719595
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009229404851794243,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_gang.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/parallel_loop_gang.F90/parallel_loop_gang.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_gang.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_gang.F90, Line = 21, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0039 seconds\nCray Fortran : 80 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2658144347369671
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009140610694885254,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_reduction_add_general.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/parallel_loop_reduction_add_general.F90/parallel_loop_reduction_add_general.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_add_general.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_add_general.F90, Line = 21, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0039 seconds\nCray Fortran : 81 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.26587546803057194
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009158322587609291,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_reduction_add_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/parallel_loop_reduction_add_loop.F90/parallel_loop_reduction_add_loop.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_add_loop.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_add_loop.F90, Line = 21, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0042 seconds\nCray Fortran : 96 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.26578553207218647
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009208925068378448,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_reduction_add_vector_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/parallel_loop_reduction_add_vector_loop.F90/parallel_loop_reduction_add_vector_loop.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_add_vector_loop.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_add_vector_loop.F90, Line = 22, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0042 seconds\nCray Fortran : 90 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.26590279676020145
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009186036884784698,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_reduction_and_general.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/parallel_loop_reduction_and_general.F90/parallel_loop_reduction_and_general.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_and_general.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_and_general.F90, Line = 30, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0041 seconds\nCray Fortran : 90 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.26601546071469784
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009177127853035927,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_reduction_and_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/parallel_loop_reduction_and_loop.F90/parallel_loop_reduction_and_loop.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_and_loop.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_and_loop.F90, Line = 37, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0047 seconds\nCray Fortran : 125 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3159391600638628
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009207112714648247,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_reduction_and_vector_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/parallel_loop_reduction_and_vector_loop.F90/parallel_loop_reduction_and_vector_loop.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_and_vector_loop.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_and_vector_loop.F90, Line = 40, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0044 seconds\nCray Fortran : 110 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.26579272747039795
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.00959894247353077,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_reduction_bitand_general.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/parallel_loop_reduction_bitand_general.F90/parallel_loop_reduction_bitand_general.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitand_general.F90",
                    "config": 1,
                    "errors": "\n\nftn-7212 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitand_general.F90, Line = 30 \n  Variable \"a\" is used before it is defined.\n\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitand_general.F90, Line = 37, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0044 seconds\nCray Fortran : 100 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.26579749397933483
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009192617610096931,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_reduction_bitand_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/parallel_loop_reduction_bitand_loop.F90/parallel_loop_reduction_bitand_loop.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitand_loop.F90",
                    "config": 1,
                    "errors": "\n\nftn-7212 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitand_loop.F90, Line = 34 \n  Variable \"a\" is used before it is defined.\n\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitand_loop.F90, Line = 45, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0047 seconds\nCray Fortran : 122 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31606511399149895
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009172439575195312,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_reduction_bitand_vector_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/parallel_loop_reduction_bitand_vector_loop.F90/parallel_loop_reduction_bitand_vector_loop.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitand_vector_loop.F90",
                    "config": 1,
                    "errors": "\n\nftn-7212 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitand_vector_loop.F90, Line = 32 \n  Variable \"a\" is used before it is defined.\n\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitand_vector_loop.F90, Line = 38, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0044 seconds\nCray Fortran : 106 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2657523173838854
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009203605353832245,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_reduction_bitor_general.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/parallel_loop_reduction_bitor_general.F90/parallel_loop_reduction_bitor_general.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitor_general.F90",
                    "config": 1,
                    "errors": "\n\nftn-7212 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitor_general.F90, Line = 30 \n  Variable \"a\" is used before it is defined.\n\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitor_general.F90, Line = 35, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0042 seconds\nCray Fortran : 95 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.265825716778636
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009190531447529793,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_reduction_bitor_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/parallel_loop_reduction_bitor_loop.F90/parallel_loop_reduction_bitor_loop.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitor_loop.F90",
                    "config": 1,
                    "errors": "\n\nftn-7212 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitor_loop.F90, Line = 35 \n  Variable \"a\" is used before it is defined.\n\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitor_loop.F90, Line = 41, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0048 seconds\nCray Fortran : 118 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3158723320811987
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009173421189188957,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_reduction_bitor_vector_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/parallel_loop_reduction_bitor_vector_loop.F90/parallel_loop_reduction_bitor_vector_loop.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitor_vector_loop.F90",
                    "config": 1,
                    "errors": "\n\nftn-7212 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitor_vector_loop.F90, Line = 30 \n  Variable \"a\" is used before it is defined.\n\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitor_vector_loop.F90, Line = 35, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0044 seconds\nCray Fortran : 103 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.26595091074705124
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009156951680779457,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_reduction_bitxor_general.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/parallel_loop_reduction_bitxor_general.F90/parallel_loop_reduction_bitxor_general.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitxor_general.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitxor_general.F90, Line = 23, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0041 seconds\nCray Fortran : 83 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.26584673300385475
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009147211909294128,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_reduction_bitxor_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/parallel_loop_reduction_bitxor_loop.F90/parallel_loop_reduction_bitxor_loop.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitxor_loop.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitxor_loop.F90, Line = 28, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0044 seconds\nCray Fortran : 105 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2657544035464525
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009174453094601631,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_reduction_bitxor_vector_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/parallel_loop_reduction_bitxor_vector_loop.F90/parallel_loop_reduction_bitxor_vector_loop.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitxor_vector_loop.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitxor_vector_loop.F90, Line = 23, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0042 seconds\nCray Fortran : 91 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2657210994511843
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009192988276481628,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_reduction_max_general.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/parallel_loop_reduction_max_general.F90/parallel_loop_reduction_max_general.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_max_general.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_max_general.F90, Line = 23, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0040 seconds\nCray Fortran : 83 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2657814025878906
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009232399985194206,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_reduction_max_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/parallel_loop_reduction_max_loop.F90/parallel_loop_reduction_max_loop.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_max_loop.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_max_loop.F90, Line = 23, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0041 seconds\nCray Fortran : 95 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.265849931165576
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009184079244732857,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_reduction_max_vector_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/parallel_loop_reduction_max_vector_loop.F90/parallel_loop_reduction_max_vector_loop.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_max_vector_loop.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_max_vector_loop.F90, Line = 23, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0041 seconds\nCray Fortran : 91 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2658219374716282
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009156068786978722,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_reduction_min_general.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/parallel_loop_reduction_min_general.F90/parallel_loop_reduction_min_general.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_min_general.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_min_general.F90, Line = 22, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0042 seconds\nCray Fortran : 82 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2659505810588598
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.00922350399196148,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_reduction_min_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/parallel_loop_reduction_min_loop.F90/parallel_loop_reduction_min_loop.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_min_loop.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_min_loop.F90, Line = 25, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0043 seconds\nCray Fortran : 102 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.26583828032016754
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009181937202811241,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_reduction_min_vector_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/parallel_loop_reduction_min_vector_loop.F90/parallel_loop_reduction_min_vector_loop.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_min_vector_loop.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_min_vector_loop.F90, Line = 22, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0041 seconds\nCray Fortran : 90 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2659197710454464
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009166799485683441,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_reduction_multiply_general.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/parallel_loop_reduction_multiply_general.F90/parallel_loop_reduction_multiply_general.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_multiply_general.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_multiply_general.F90, Line = 24, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0040 seconds\nCray Fortran : 86 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2659009378403425
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009196924045681953,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_reduction_multiply_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/parallel_loop_reduction_multiply_loop.F90/parallel_loop_reduction_multiply_loop.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_multiply_loop.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_multiply_loop.F90, Line = 25, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0045 seconds\nCray Fortran : 108 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3160986565053463
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009294787421822548,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_reduction_multiply_vector_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/parallel_loop_reduction_multiply_vector_loop.F90/parallel_loop_reduction_multiply_vector_loop.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_multiply_vector_loop.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_multiply_vector_loop.F90, Line = 24, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0041 seconds\nCray Fortran : 92 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2658094558864832
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.00924898125231266,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_reduction_or_general.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/parallel_loop_reduction_or_general.F90/parallel_loop_reduction_or_general.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_or_general.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_or_general.F90, Line = 30, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0041 seconds\nCray Fortran : 90 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.26576152816414833
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009864438325166702,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_reduction_or_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/parallel_loop_reduction_or_loop.F90/parallel_loop_reduction_or_loop.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_or_loop.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_or_loop.F90, Line = 36, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0046 seconds\nCray Fortran : 125 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.26607929915189743
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009608792141079903,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_reduction_or_vector_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/parallel_loop_reduction_or_vector_loop.F90/parallel_loop_reduction_or_vector_loop.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_or_vector_loop.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_or_vector_loop.F90, Line = 31, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0042 seconds\nCray Fortran : 99 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2660279367119074
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.0091922078281641,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_seq.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/parallel_loop_seq.F90/parallel_loop_seq.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_seq.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_seq.F90, Line = 20, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0039 seconds\nCray Fortran : 79 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2659981083124876
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.00924786925315857,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_tile.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/parallel_loop_tile.F90/parallel_loop_tile.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_tile.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_tile.F90, Line = 23, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0041 seconds\nCray Fortran : 94 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2657951693981886
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009174317121505737,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_vector.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/parallel_loop_vector.F90/parallel_loop_vector.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_vector.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_vector.F90, Line = 21, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0039 seconds\nCray Fortran : 80 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.26584043353796005
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009177228435873985,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_vector_blocking.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/parallel_loop_vector_blocking.F90/parallel_loop_vector_blocking.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_vector_blocking.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_vector_blocking.F90, Line = 22, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0040 seconds\nCray Fortran : 88 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.265829062089324
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009177589789032936,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_worker.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/parallel_loop_worker.F90/parallel_loop_worker.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_worker.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_worker.F90, Line = 21, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0040 seconds\nCray Fortran : 80 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2658223081380129
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.00915842317044735,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_worker_blocking.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/parallel_loop_worker_blocking.F90/parallel_loop_worker_blocking.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_worker_blocking.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_worker_blocking.F90, Line = 21, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0041 seconds\nCray Fortran : 87 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.26586211659014225
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.00954640656709671,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_present.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/parallel_present.F90/parallel_present.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_present.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_present.F90, Line = 21, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0039 seconds\nCray Fortran : 82 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.26614864729344845
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009222321212291718,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_private.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/parallel_private.F90/parallel_private.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_private.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_private.F90, Line = 25, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0042 seconds\nCray Fortran : 97 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.26599344052374363
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009153934195637703,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_reduction.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/parallel_reduction.F90/parallel_reduction.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_reduction.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_reduction.F90, Line = 20, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0038 seconds\nCray Fortran : 81 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2657844200730324
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009180955588817596,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_scalar_default_firstprivate.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/parallel_scalar_default_firstprivate.F90/parallel_scalar_default_firstprivate.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_scalar_default_firstprivate.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_scalar_default_firstprivate.F90, Line = 26, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0041 seconds\nCray Fortran : 89 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.26594133116304874
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009746719151735306,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_switch.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/parallel_switch.F90/parallel_switch.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_switch.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_switch.F90, Line = 23, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0041 seconds\nCray Fortran : 102 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.26579928770661354
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009238019585609436,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_wait.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/parallel_wait.F90/parallel_wait.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_wait.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_wait.F90, Line = 20, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0039 seconds\nCray Fortran : 82 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.26581012830138206
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009235227480530739,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_while_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/parallel_while_loop.F90/parallel_while_loop.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_while_loop.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_while_loop.F90, Line = 20, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0040 seconds\nCray Fortran : 96 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.26576586440205574
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009172920137643814,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/serial.F90/serial.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial.F90, Line = 23, Column = 3 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0044 seconds\nCray Fortran : 113 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.26593838445842266
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.00915953703224659,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_async.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/serial_async.F90/serial_async.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial_async.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial_async.F90, Line = 26, Column = 3 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0043 seconds\nCray Fortran : 118 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2657824456691742
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009335944429039955,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_copy.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/serial_copy.F90/serial_copy.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial_copy.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial_copy.F90, Line = 20, Column = 3 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0038 seconds\nCray Fortran : 79 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2657206002622843
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009180715307593346,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_copyin.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/serial_copyin.F90/serial_copyin.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial_copyin.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial_copyin.F90, Line = 23, Column = 3 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0053 seconds\nCray Fortran : 155 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.26586269587278366
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009623629972338676,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_copyout.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/serial_copyout.F90/serial_copyout.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial_copyout.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial_copyout.F90, Line = 13, Column = 3 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\n\nftn-7212 ftn: WARNING TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial_copyout.F90, Line = 78 \n  Variable \"a\" is used before it is defined.\n\n\nftn-7212 ftn: WARNING TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial_copyout.F90, Line = 78 \n  Variable \"b\" is used before it is defined.\n\n\nftn-7212 ftn: WARNING TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial_copyout.F90, Line = 124 \n  Variable \"a\" is used before it is defined.\n\n\nftn-7212 ftn: WARNING TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial_copyout.F90, Line = 124 \n  Variable \"b\" is used before it is defined.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0065 seconds\nCray Fortran : 224 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.26584070548415184
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 4,
                    "runtime": 0.009430842474102974,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_create.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/serial_create.F90/serial_create.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial_create.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial_create.F90, Line = 21, Column = 3 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0040 seconds\nCray Fortran : 86 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.26603672839701176
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009156860411167145,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_default_copy.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/serial_default_copy.F90/serial_default_copy.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial_default_copy.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial_default_copy.F90, Line = 13, Column = 3 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0056 seconds\nCray Fortran : 174 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.26606568321585655
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009176919236779213,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_default_present.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/serial_default_present.F90/serial_default_present.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial_default_present.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial_default_present.F90, Line = 13, Column = 3 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0038 seconds\nCray Fortran : 74 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.26596351340413094
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.00946345180273056,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_firstprivate.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/serial_firstprivate.F90/serial_firstprivate.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial_firstprivate.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial_firstprivate.F90, Line = 24, Column = 3 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0056 seconds\nCray Fortran : 165 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31590093672275543
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009211091324687004,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_if.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/serial_if.F90/serial_if.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial_if.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial_if.F90, Line = 16, Column = 3 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0070 seconds\nCray Fortran : 238 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2658614218235016
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.00915251299738884,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/serial_loop.F90/serial_loop.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial_loop.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial_loop.F90, Line = 22, Column = 3 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0041 seconds\nCray Fortran : 100 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2657952383160591
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009210020303726196,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_loop_async.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/serial_loop_async.F90/serial_loop_async.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial_loop_async.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial_loop_async.F90, Line = 30, Column = 3 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0043 seconds\nCray Fortran : 95 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2658561412245035
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009281372651457787,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_loop_auto.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/serial_loop_auto.F90/serial_loop_auto.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial_loop_auto.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial_loop_auto.F90, Line = 22, Column = 3 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0042 seconds\nCray Fortran : 96 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.26581658981740475
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009182799607515335,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_loop_gang.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/serial_loop_gang.F90/serial_loop_gang.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial_loop_gang.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial_loop_gang.F90, Line = 22, Column = 3 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0039 seconds\nCray Fortran : 81 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.26578819565474987
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.0091847013682127,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_loop_reduction_add_general.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/serial_loop_reduction_add_general.F90/serial_loop_reduction_add_general.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial_loop_reduction_add_general.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial_loop_reduction_add_general.F90, Line = 22, Column = 3 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0039 seconds\nCray Fortran : 83 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2658009622246027
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009424770250916481,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_loop_reduction_add_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/serial_loop_reduction_add_loop.F90/serial_loop_reduction_add_loop.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial_loop_reduction_add_loop.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial_loop_reduction_add_loop.F90, Line = 22, Column = 3 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0042 seconds\nCray Fortran : 98 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2658614609390497
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009297139942646027,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_loop_reduction_add_vector_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/serial_loop_reduction_add_vector_loop.F90/serial_loop_reduction_add_vector_loop.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial_loop_reduction_add_vector_loop.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial_loop_reduction_add_vector_loop.F90, Line = 23, Column = 3 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0040 seconds\nCray Fortran : 90 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2659001965075731
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009249603375792503,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_loop_reduction_and_general.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/serial_loop_reduction_and_general.F90/serial_loop_reduction_and_general.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial_loop_reduction_and_general.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial_loop_reduction_and_general.F90, Line = 31, Column = 3 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0041 seconds\nCray Fortran : 93 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2658779341727495
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009254811331629753,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_loop_reduction_and_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/serial_loop_reduction_and_loop.F90/serial_loop_reduction_and_loop.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial_loop_reduction_and_loop.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial_loop_reduction_and_loop.F90, Line = 36, Column = 3 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\n\nftn-303 ftn: ERROR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial_loop_reduction_and_loop.F90, Line = 47, Column = 23 \n  Data type LOGICAL is not allowed with INTEGER for the operation \"eq\".\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0042 seconds\nCray Fortran : 113 source lines\nCray Fortran : 1 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11570232547819614
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/serial_loop_reduction_and_loop.F90/serial_loop_reduction_and_loop.F901 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial_loop_reduction_and_loop.F90",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.21550213173031807
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009584266692399979,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_loop_reduction_and_vector_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/serial_loop_reduction_and_vector_loop.F90/serial_loop_reduction_and_vector_loop.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial_loop_reduction_and_vector_loop.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial_loop_reduction_and_vector_loop.F90, Line = 36, Column = 3 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0043 seconds\nCray Fortran : 100 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2659025602042675
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009194573387503624,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_loop_reduction_bitand_general.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/serial_loop_reduction_bitand_general.F90/serial_loop_reduction_bitand_general.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial_loop_reduction_bitand_general.F90",
                    "config": 1,
                    "errors": "\n\nftn-7212 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial_loop_reduction_bitand_general.F90, Line = 27 \n  Variable \"a\" is used before it is defined.\n\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial_loop_reduction_bitand_general.F90, Line = 38, Column = 3 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0042 seconds\nCray Fortran : 95 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2657879050821066
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": -11,
                    "runtime": 0.03339936397969723,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_loop_reduction_bitand_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/serial_loop_reduction_bitand_loop.F90/serial_loop_reduction_bitand_loop.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial_loop_reduction_bitand_loop.F90",
                    "config": 1,
                    "errors": "\n\nftn-375 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial_loop_reduction_bitand_loop.F90, Line = 25, Column = 7 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-7212 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial_loop_reduction_bitand_loop.F90, Line = 28 \n  Variable \"a\" is used before it is defined.\n\n\nftn-375 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial_loop_reduction_bitand_loop.F90, Line = 28, Column = 11 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial_loop_reduction_bitand_loop.F90, Line = 28, Column = 18 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial_loop_reduction_bitand_loop.F90, Line = 44, Column = 3 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0047 seconds\nCray Fortran : 117 source lines\nCray Fortran : 0 errors, 4 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31609988771378994
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009232580661773682,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_loop_reduction_bitand_vector_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/serial_loop_reduction_bitand_vector_loop.F90/serial_loop_reduction_bitand_vector_loop.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial_loop_reduction_bitand_vector_loop.F90",
                    "config": 1,
                    "errors": "\n\nftn-113 ftn: ERROR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial_loop_reduction_bitand_vector_loop.F90, Line = 25, Column = 10 \n  IMPLICIT NONE is specified in the local scope, therefore an explicit type must be specified for data object \"Z\".\n\n\nftn-319 ftn: ERROR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial_loop_reduction_bitand_vector_loop.F90, Line = 26, Column = 27 \n  A subscript must be a scalar integer expression.\n\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial_loop_reduction_bitand_vector_loop.F90, Line = 40, Column = 3 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0040 seconds\nCray Fortran : 104 source lines\nCray Fortran : 2 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11563611216843128
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/serial_loop_reduction_bitand_vector_loop.F90/serial_loop_reduction_bitand_vector_loop.F901 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial_loop_reduction_bitand_vector_loop.F90",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.21555111184716225
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009224046021699905,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_loop_reduction_bitor_general.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/serial_loop_reduction_bitor_general.F90/serial_loop_reduction_bitor_general.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial_loop_reduction_bitor_general.F90",
                    "config": 1,
                    "errors": "\n\nftn-7212 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial_loop_reduction_bitor_general.F90, Line = 24 \n  Variable \"a\" is used before it is defined.\n\n\nftn-7212 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial_loop_reduction_bitor_general.F90, Line = 30 \n  Variable \"host_b\" is used before it is defined.\n\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial_loop_reduction_bitor_general.F90, Line = 33, Column = 3 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\n\nftn-7212 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial_loop_reduction_bitor_general.F90, Line = 36 \n  Variable \"b\" is used before it is defined.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0042 seconds\nCray Fortran : 90 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.26577554270625114
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.00924736075103283,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_loop_reduction_bitor_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/serial_loop_reduction_bitor_loop.F90/serial_loop_reduction_bitor_loop.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial_loop_reduction_bitor_loop.F90",
                    "config": 1,
                    "errors": "\n\nftn-7212 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial_loop_reduction_bitor_loop.F90, Line = 28 \n  Variable \"a\" is used before it is defined.\n\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial_loop_reduction_bitor_loop.F90, Line = 36, Column = 3 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0047 seconds\nCray Fortran : 113 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31595972552895546
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.01788078434765339,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_loop_reduction_bitor_vector_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/serial_loop_reduction_bitor_vector_loop.F90/serial_loop_reduction_bitor_vector_loop.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial_loop_reduction_bitor_vector_loop.F90",
                    "config": 1,
                    "errors": "\n\nftn-7212 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial_loop_reduction_bitor_vector_loop.F90, Line = 26 \n  Variable \"a\" is used before it is defined.\n\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial_loop_reduction_bitor_vector_loop.F90, Line = 32, Column = 3 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0043 seconds\nCray Fortran : 100 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_38353/serial_loop_reduction_bitor_vector_loop_1.o: in function `test1_':\n/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial_loop_reduction_bitor_vector_loop.F90:20: undefined reference to `random_numbers_'\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.2658718451857567
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/serial_loop_reduction_bitor_vector_loop.F90/serial_loop_reduction_bitor_vector_loop.F901 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial_loop_reduction_bitor_vector_loop.F90",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.215729009360075
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009213045239448547,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_loop_reduction_bitxor_general.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/serial_loop_reduction_bitxor_general.F90/serial_loop_reduction_bitxor_general.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial_loop_reduction_bitxor_general.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial_loop_reduction_bitxor_general.F90, Line = 30, Column = 3 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0040 seconds\nCray Fortran : 87 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.26578610204160213
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009158173575997353,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_loop_reduction_bitxor_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/serial_loop_reduction_bitxor_loop.F90/serial_loop_reduction_bitxor_loop.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial_loop_reduction_bitxor_loop.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial_loop_reduction_bitxor_loop.F90, Line = 39, Column = 3 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0045 seconds\nCray Fortran : 111 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.26592120341956615
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009710803627967834,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_loop_reduction_bitxor_vector_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/serial_loop_reduction_bitxor_vector_loop.F90/serial_loop_reduction_bitxor_vector_loop.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial_loop_reduction_bitxor_vector_loop.F90",
                    "config": 1,
                    "errors": "\n\nftn-7212 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial_loop_reduction_bitxor_vector_loop.F90, Line = 28 \n  Variable \"host_b\" is used before it is defined.\n\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial_loop_reduction_bitxor_vector_loop.F90, Line = 32, Column = 3 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0041 seconds\nCray Fortran : 96 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2657683286815882
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009695343673229218,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_loop_reduction_max_general.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/serial_loop_reduction_max_general.F90/serial_loop_reduction_max_general.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial_loop_reduction_max_general.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial_loop_reduction_max_general.F90, Line = 25, Column = 3 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\n\nftn-860 ftn: ERROR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial_loop_reduction_max_general.F90, Line = 32, Column = 22 \n  The intrinsic \"MAX\" cannot be passed as an actual argument.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0037 seconds\nCray Fortran : 82 source lines\nCray Fortran : 1 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11562465131282806
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/serial_loop_reduction_max_general.F90/serial_loop_reduction_max_general.F901 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial_loop_reduction_max_general.F90",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.21552927419543266
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009675778448581696,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_loop_reduction_max_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/serial_loop_reduction_max_loop.F90/serial_loop_reduction_max_loop.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial_loop_reduction_max_loop.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial_loop_reduction_max_loop.F90, Line = 30, Column = 3 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0044 seconds\nCray Fortran : 103 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2658254560083151
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009528320282697678,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_loop_reduction_max_vector_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/serial_loop_reduction_max_vector_loop.F90/serial_loop_reduction_max_vector_loop.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial_loop_reduction_max_vector_loop.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial_loop_reduction_max_vector_loop.F90, Line = 29, Column = 3 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0042 seconds\nCray Fortran : 93 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.265748031437397
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009218122810125351,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_loop_reduction_min_general.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/serial_loop_reduction_min_general.F90/serial_loop_reduction_min_general.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial_loop_reduction_min_general.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial_loop_reduction_min_general.F90, Line = 28, Column = 3 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0040 seconds\nCray Fortran : 85 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2658215966075659
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.00917496345937252,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_loop_reduction_min_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/serial_loop_reduction_min_loop.F90/serial_loop_reduction_min_loop.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial_loop_reduction_min_loop.F90",
                    "config": 1,
                    "errors": "\n\nftn-113 ftn: ERROR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial_loop_reduction_min_loop.F90, Line = 22, Column = 3 \n  IMPLICIT NONE is specified in the local scope, therefore an explicit type must be specified for data object \"MIMIMUMS\".\n\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial_loop_reduction_min_loop.F90, Line = 31, Column = 3 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0040 seconds\nCray Fortran : 104 source lines\nCray Fortran : 1 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11555078253149986
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/serial_loop_reduction_min_loop.F90/serial_loop_reduction_min_loop.F901 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial_loop_reduction_min_loop.F90",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2154835183173418
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009226402267813683,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_loop_reduction_min_vector_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/serial_loop_reduction_min_vector_loop.F90/serial_loop_reduction_min_vector_loop.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial_loop_reduction_min_vector_loop.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial_loop_reduction_min_vector_loop.F90, Line = 30, Column = 3 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0042 seconds\nCray Fortran : 94 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.26579984836280346
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009183822199702263,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_loop_reduction_multiply_general.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/serial_loop_reduction_multiply_general.F90/serial_loop_reduction_multiply_general.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial_loop_reduction_multiply_general.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial_loop_reduction_multiply_general.F90, Line = 27, Column = 5 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0040 seconds\nCray Fortran : 85 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.26578634418547153
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.0092087984085083,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_loop_reduction_multiply_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/serial_loop_reduction_multiply_loop.F90/serial_loop_reduction_multiply_loop.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial_loop_reduction_multiply_loop.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial_loop_reduction_multiply_loop.F90, Line = 31, Column = 3 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0043 seconds\nCray Fortran : 104 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3158887457102537
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009162891656160355,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_loop_reduction_multiply_vector_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/serial_loop_reduction_multiply_vector_loop.F90/serial_loop_reduction_multiply_vector_loop.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial_loop_reduction_multiply_vector_loop.F90",
                    "config": 1,
                    "errors": "\n\nftn-113 ftn: ERROR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial_loop_reduction_multiply_vector_loop.F90, Line = 23, Column = 6 \n  IMPLICIT NONE is specified in the local scope, therefore an explicit type must be specified for data object \"Y\".\n\n\nftn-113 ftn: ERROR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial_loop_reduction_multiply_vector_loop.F90, Line = 24, Column = 8 \n  IMPLICIT NONE is specified in the local scope, therefore an explicit type must be specified for data object \"X\".\n\n\nftn-319 ftn: ERROR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial_loop_reduction_multiply_vector_loop.F90, Line = 25, Column = 19 \n  A subscript must be a scalar integer expression.\n\n\nftn-319 ftn: ERROR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial_loop_reduction_multiply_vector_loop.F90, Line = 25, Column = 36 \n  A subscript must be a scalar integer expression.\n\n\nftn-319 ftn: ERROR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial_loop_reduction_multiply_vector_loop.F90, Line = 25, Column = 44 \n  A subscript must be a scalar integer expression.\n\n\nftn-319 ftn: ERROR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial_loop_reduction_multiply_vector_loop.F90, Line = 25, Column = 47 \n  A subscript must be a scalar integer expression.\n\n\nftn-319 ftn: ERROR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial_loop_reduction_multiply_vector_loop.F90, Line = 25, Column = 54 \n  A subscript must be a scalar integer expression.\n\n\nftn-319 ftn: ERROR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial_loop_reduction_multiply_vector_loop.F90, Line = 25, Column = 57 \n  A subscript must be a scalar integer expression.\n\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial_loop_reduction_multiply_vector_loop.F90, Line = 29, Column = 3 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\n\nftn-319 ftn: ERROR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial_loop_reduction_multiply_vector_loop.F90, Line = 35, Column = 26 \n  A subscript must be a scalar integer expression.\n\n\nftn-319 ftn: ERROR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial_loop_reduction_multiply_vector_loop.F90, Line = 35, Column = 29 \n  A subscript must be a scalar integer expression.\n\n\nftn-319 ftn: ERROR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial_loop_reduction_multiply_vector_loop.F90, Line = 35, Column = 36 \n  A subscript must be a scalar integer expression.\n\n\nftn-319 ftn: ERROR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial_loop_reduction_multiply_vector_loop.F90, Line = 35, Column = 39 \n  A subscript must be a scalar integer expression.\n\n\nftn-319 ftn: ERROR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial_loop_reduction_multiply_vector_loop.F90, Line = 37, Column = 14 \n  A subscript must be a scalar integer expression.\n\n\nftn-319 ftn: ERROR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial_loop_reduction_multiply_vector_loop.F90, Line = 42, Column = 25 \n  A subscript must be a scalar integer expression.\n\n\nftn-319 ftn: ERROR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial_loop_reduction_multiply_vector_loop.F90, Line = 42, Column = 37 \n  A subscript must be a scalar integer expression.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0038 seconds\nCray Fortran : 93 source lines\nCray Fortran : 15 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11559588462114334
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/serial_loop_reduction_multiply_vector_loop.F90/serial_loop_reduction_multiply_vector_loop.F901 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial_loop_reduction_multiply_vector_loop.F90",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.21552449092268944
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.00925634615123272,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_loop_reduction_or_general.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/serial_loop_reduction_or_general.F90/serial_loop_reduction_or_general.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial_loop_reduction_or_general.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial_loop_reduction_or_general.F90, Line = 38, Column = 3 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0042 seconds\nCray Fortran : 95 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2657970041036606
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.00915970653295517,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_loop_reduction_or_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/serial_loop_reduction_or_loop.F90/serial_loop_reduction_or_loop.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial_loop_reduction_or_loop.F90",
                    "config": 1,
                    "errors": "\n\nftn-7212 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial_loop_reduction_or_loop.F90, Line = 25 \n  Variable \"false_margin\" is used before it is defined.\n\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial_loop_reduction_or_loop.F90, Line = 35, Column = 3 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0043 seconds\nCray Fortran : 124 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2657311987131834
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009142313152551651,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_loop_reduction_or_vector_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/serial_loop_reduction_or_vector_loop.F90/serial_loop_reduction_or_vector_loop.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial_loop_reduction_or_vector_loop.F90",
                    "config": 1,
                    "errors": "\n\nftn-7212 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial_loop_reduction_or_vector_loop.F90, Line = 25 \n  Variable \"false_margin\" is used before it is defined.\n\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial_loop_reduction_or_vector_loop.F90, Line = 33, Column = 3 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0041 seconds\nCray Fortran : 101 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.26569562405347824
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009148083627223969,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_loop_seq.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/serial_loop_seq.F90/serial_loop_seq.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial_loop_seq.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial_loop_seq.F90, Line = 20, Column = 3 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0039 seconds\nCray Fortran : 81 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.26571652106940746
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.00922827236354351,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_loop_tile.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/serial_loop_tile.F90/serial_loop_tile.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial_loop_tile.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial_loop_tile.F90, Line = 25, Column = 3 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0044 seconds\nCray Fortran : 114 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.315766304731369
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.01727428287267685,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_loop_vector.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/serial_loop_vector.F90/serial_loop_vector.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial_loop_vector.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial_loop_vector.F90, Line = 22, Column = 3 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0039 seconds\nCray Fortran : 81 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2656325288116932
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009170908480882645,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_loop_vector_blocking.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/serial_loop_vector_blocking.F90/serial_loop_vector_blocking.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial_loop_vector_blocking.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial_loop_vector_blocking.F90, Line = 21, Column = 3 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\n\nftn-7212 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial_loop_vector_blocking.F90, Line = 25 \n  Variable \"multiplier\" is used before it is defined.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0040 seconds\nCray Fortran : 87 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.26591914892196655
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.009142804890871048,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_loop_worker.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/serial_loop_worker.F90/serial_loop_worker.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial_loop_worker.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial_loop_worker.F90, Line = 22, Column = 3 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0040 seconds\nCray Fortran : 81 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2658566739410162
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009236859157681465,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_loop_worker_blocking.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/serial_loop_worker_blocking.F90/serial_loop_worker_blocking.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial_loop_worker_blocking.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial_loop_worker_blocking.F90, Line = 23, Column = 3 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\n\nftn-7212 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial_loop_worker_blocking.F90, Line = 27 \n  Variable \"multiplier\" is used before it is defined.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0040 seconds\nCray Fortran : 89 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.26592205464839935
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.009635914117097855,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_present.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/serial_present.F90/serial_present.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial_present.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial_present.F90, Line = 22, Column = 3 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0039 seconds\nCray Fortran : 83 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2659116890281439
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009672410786151886,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_private.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/serial_private.F90/serial_private.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial_private.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial_private.F90, Line = 26, Column = 3 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0040 seconds\nCray Fortran : 98 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2658190168440342
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.009185424074530602,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_reduction.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/serial_reduction.F90/serial_reduction.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial_reduction.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial_reduction.F90, Line = 20, Column = 3 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\n\nftn-7212 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial_reduction.F90, Line = 23 \n  Variable \"reduction\" is used before it is defined.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0039 seconds\nCray Fortran : 81 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.26598628610372543
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009662061929702759,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_scalar_default_firstprivate.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/serial_scalar_default_firstprivate.F90/serial_scalar_default_firstprivate.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial_scalar_default_firstprivate.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial_scalar_default_firstprivate.F90, Line = 24, Column = 3 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0041 seconds\nCray Fortran : 89 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2657234948128462
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009152693673968315,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_switch.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/serial_switch.F90/serial_switch.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial_switch.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial_switch.F90, Line = 27, Column = 3 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0044 seconds\nCray Fortran : 115 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2657718863338232
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009225195273756981,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_wait.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/serial_wait.F90/serial_wait.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial_wait.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial_wait.F90, Line = 20, Column = 3 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0038 seconds\nCray Fortran : 82 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.26570814847946167
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009128866717219353,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_while_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/serial_while_loop.F90/serial_while_loop.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial_while_loop.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial_while_loop.F90, Line = 20, Column = 3 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0039 seconds\nCray Fortran : 93 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.26582787930965424
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009175736457109451,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "set_default_async.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/set_default_async.F90/set_default_async.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/set_default_async.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/set_default_async.F90, Line = 25, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0063 seconds\nCray Fortran : 101 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_38926/set_default_async_1.o:(.data+0x0): undefined reference to `openacc_'\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.26586166210472584
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/set_default_async.F90/set_default_async.F901 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/set_default_async.F90",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.21553460136055946
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009371420368552208,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "set_device_num.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/set_device_num.F90/set_device_num.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/set_device_num.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/set_device_num.F90, Line = 27, Column = 13 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0060 seconds\nCray Fortran : 106 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_38961/set_device_num_1.o: in function `test1_':\n/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/set_device_num.F90:20: undefined reference to `acc_get_device_type'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/set_device_num.F90:20: undefined reference to `acc_get_num_devices'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/set_device_num.F90:22: undefined reference to `acc_get_device_type'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/set_device_num.F90:24: undefined reference to `acc_get_device_type'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/set_device_num.F90:24: undefined reference to `acc_get_num_devices'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/set_device_num.F90:31: undefined reference to `acc_get_device_type'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/set_device_num.F90:31: undefined reference to `acc_get_num_devices'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/set_device_num.F90:43: undefined reference to `acc_get_device_type'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/set_device_num.F90:43: undefined reference to `acc_get_num_devices'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_38961/set_device_num_1.o:(.data+0x0): undefined reference to `openacc_'\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.265870900824666
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/set_device_num.F90/set_device_num.F901 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/set_device_num.F90",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2155581247061491
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.00963602401316166,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "set_device_type.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/set_device_type.F90/set_device_type.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/set_device_type.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/set_device_type.F90, Line = 11, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0060 seconds\nCray Fortran : 62 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_38993/set_device_type_1.o: in function `test1_':\n/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/set_device_type.F90:10: undefined reference to `acc_get_device_type'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/set_device_type.F90:12: undefined reference to `acc_get_device_type'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_38993/set_device_type_1.o:(.data+0x0): undefined reference to `openacc_'\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.2158083114773035
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/set_device_type.F90/set_device_type.F901 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/set_device_type.F90",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.21554077416658401
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009320875629782677,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "shutdown.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/shutdown.F90/shutdown.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/shutdown.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/shutdown.F90, Line = 9, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0056 seconds\nCray Fortran : 57 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_39025/shutdown_1.o:(.data+0x0): undefined reference to `openacc_'\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.21564209088683128
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/shutdown.F90/shutdown.F901 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/shutdown.F90",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.21556374803185463
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009182069450616837,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "shutdown_device_num.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/shutdown_device_num.F90/shutdown_device_num.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/shutdown_device_num.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/shutdown_device_num.F90, Line = 12, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0060 seconds\nCray Fortran : 60 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_39057/shutdown_device_num_1.o: in function `test1_':\n/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/shutdown_device_num.F90:11: undefined reference to `acc_get_device_type'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/shutdown_device_num.F90:11: undefined reference to `acc_get_device_num'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_39057/shutdown_device_num_1.o:(.data+0x0): undefined reference to `openacc_'\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.2158825919032097
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/shutdown_device_num.F90/shutdown_device_num.F901 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/shutdown_device_num.F90",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2155280690640211
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009515859186649323,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "shutdown_device_type.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/shutdown_device_type.F90/shutdown_device_type.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/shutdown_device_type.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/shutdown_device_type.F90, Line = 11, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0059 seconds\nCray Fortran : 59 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_39090/shutdown_device_type_1.o: in function `test1_':\n/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/shutdown_device_type.F90:10: undefined reference to `acc_get_device_type'\n/opt/cray/pe/cce/13.0.0/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_39090/shutdown_device_type_1.o:(.data+0x0): undefined reference to `openacc_'\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.2157488837838173
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/shutdown_device_type.F90/shutdown_device_type.F901 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/shutdown_device_type.F90",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.21561136469244957
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009721152484416962,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "shutdown_device_type_num.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/shutdown_device_type_num.F90/shutdown_device_type_num.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/shutdown_device_type_num.F90",
                    "config": 1,
                    "errors": "\n\nftn-1307 ftn: ERROR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/shutdown_device_type_num.F90, Line = 12, Column = 41 \n  The kind (4) of this actual argument does not match that of its associated dummy argument (8).\n\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/shutdown_device_type_num.F90, Line = 13, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0057 seconds\nCray Fortran : 61 source lines\nCray Fortran : 1 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11578329652547836
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/shutdown_device_type_num.F90/shutdown_device_type_num.F901 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/shutdown_device_type_num.F90",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2156536728143692
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009209008887410164,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "template.F90": [
            {
                "compilation": {
                    "command": "ftn -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/template.F90/template.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/template.F90",
                    "config": 1,
                    "errors": "\n\nftn-296 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/template.F90, Line = 22, Column = 9 \n  OpenACC directives are ignored because an accelerator target has not been specified.\n\nCray Fortran : Version 13.0.0 (20211012221143_8988d3ca66b7108628fec6cc8ace3a51d9046db6)\nCray Fortran : Compile time:  0.0039 seconds\nCray Fortran : 79 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.2657814919948578
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.009171407669782639,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ]
    },
    "summary": {
        "1": {
            "1": {
                "1": {
                    "acc_async_test.F90": {
                        "1": {
                            "result": "Unknown Section Result",
                            "run_index": -1
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        },
                        "3": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        }
                    },
                    "acc_async_test_all.F90": {
                        "1": {
                            "result": "Unknown Section Result",
                            "run_index": -1
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        },
                        "3": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        }
                    },
                    "acc_copyin.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 1
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "3": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        },
                        "4": {
                            "result": "Compilation Failure",
                            "run_index": 4
                        },
                        "5": {
                            "result": "Compilation Failure",
                            "run_index": 5
                        },
                        "6": {
                            "result": "Compilation Failure",
                            "run_index": 6
                        },
                        "7": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        }
                    },
                    "acc_copyin_async.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 1
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "3": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        },
                        "4": {
                            "result": "Compilation Failure",
                            "run_index": 4
                        },
                        "5": {
                            "result": "Compilation Failure",
                            "run_index": 5
                        }
                    },
                    "acc_copyin_async_with_len.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 1
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "3": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        },
                        "4": {
                            "result": "Compilation Failure",
                            "run_index": 4
                        },
                        "5": {
                            "result": "Compilation Failure",
                            "run_index": 5
                        }
                    },
                    "acc_copyin_with_len.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 1
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "3": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        },
                        "4": {
                            "result": "Compilation Failure",
                            "run_index": 4
                        },
                        "5": {
                            "result": "Compilation Failure",
                            "run_index": 5
                        },
                        "6": {
                            "result": "Compilation Failure",
                            "run_index": 6
                        },
                        "7": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        }
                    },
                    "acc_copyout.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 1
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "3": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        },
                        "4": {
                            "result": "Compilation Failure",
                            "run_index": 4
                        },
                        "5": {
                            "result": "Compilation Failure",
                            "run_index": 5
                        }
                    },
                    "acc_copyout_async.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "acc_copyout_async_with_len.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "acc_copyout_finalize.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "acc_copyout_finalize_async.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "acc_copyout_finalize_async_with_len.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "acc_copyout_finalize_with_len.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "acc_copyout_with_len.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        }
                    },
                    "acc_create.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 1
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "3": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        },
                        "4": {
                            "result": "Compilation Failure",
                            "run_index": 4
                        }
                    },
                    "acc_create_async.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "acc_create_async_with_len.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "acc_create_with_len.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 1
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "3": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        },
                        "4": {
                            "result": "Compilation Failure",
                            "run_index": 4
                        }
                    },
                    "acc_delete.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        }
                    },
                    "acc_delete_async.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        }
                    },
                    "acc_delete_async_with_len.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        }
                    },
                    "acc_delete_finalize.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        }
                    },
                    "acc_delete_finalize_async.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        }
                    },
                    "acc_delete_finalize_async_with_len.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        }
                    },
                    "acc_delete_finalize_with_len.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        }
                    },
                    "acc_delete_with_len.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        }
                    },
                    "acc_get_default_async.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "acc_get_device_num.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "acc_get_num_devices.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "acc_get_property.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "acc_get_property_string.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "acc_init.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "acc_is_present.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "acc_is_present_with_len.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "acc_on_device.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "acc_set_default_async.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "acc_set_device_num.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "acc_set_device_type.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "acc_shutdown.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "acc_update_device.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        }
                    },
                    "acc_update_device_async.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        }
                    },
                    "acc_update_device_async_with_len.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        }
                    },
                    "acc_update_device_with_len.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        }
                    },
                    "acc_update_self.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        }
                    },
                    "acc_update_self_async.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        }
                    },
                    "acc_update_self_async_with_len.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        }
                    },
                    "acc_update_self_with_len.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        }
                    },
                    "acc_wait.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "acc_wait_all.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "acc_wait_all_async.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "acc_wait_async.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_assign_expr_and_x.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_assign_expr_divided_x.F90": {
                        "1": {
                            "result": "Runtime Error",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_assign_expr_eqv_x.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_assign_expr_minus_x.F90": {
                        "1": {
                            "result": "Runtime Error",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_assign_expr_neqv_x.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_assign_expr_or_x.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_assign_expr_plus_x.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_assign_expr_times_x.F90": {
                        "1": {
                            "result": "Runtime Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_assign_iand_expr_x.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_assign_iand_x_expr.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_assign_ior_expr_x.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_assign_ior_x_expr.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_assign_ixor_expr_x.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_assign_ixor_x_expr.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_assign_max_expr_list_x.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_assign_max_expr_x.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_assign_max_x_expr.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_assign_max_x_expr_list.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_assign_min_expr_list_x.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_assign_min_expr_x.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_assign_min_x_expr.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_assign_min_x_expr_list.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_assign_x_and_expr.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_assign_x_divided_expr.F90": {
                        "1": {
                            "result": "Runtime Error",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_assign_x_eqv_expr.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_assign_x_minus_expr.F90": {
                        "1": {
                            "result": "Runtime Error",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_assign_x_neqv_expr.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_assign_x_or_expr.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_assign_x_plus_expr.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_assign_x_times_expr.F90": {
                        "1": {
                            "result": "Runtime Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_expr_and_x_assign.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_expr_divided_x_assign.F90": {
                        "1": {
                            "result": "Runtime Error",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_expr_eqv_x_assign.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_expr_minus_x_assign.F90": {
                        "1": {
                            "result": "Runtime Error",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_expr_neqv_x_assign.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_expr_or_x_assign.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_expr_plus_x_assign.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_expr_times_x_assign.F90": {
                        "1": {
                            "result": "Runtime Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_iand_expr_x_assign.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_iand_x_expr_assign.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_ior_expr_x_assign.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_ior_x_expr_assign.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_ixor_expr_x_assign.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_ixor_x_expr_assign.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_max_expr_list_x_assign.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_max_expr_x_assign.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_max_x_expr_assign.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_max_x_expr_list_assign.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_min_expr_list_x_assign.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_min_expr_x_assign.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_min_x_expr_assign.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_min_x_expr_list_assign.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_x_and_expr_assign.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_x_divided_expr_assign.F90": {
                        "1": {
                            "result": "Runtime Error",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_x_eqv_expr_assign.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_x_minus_expr_assign.F90": {
                        "1": {
                            "result": "Runtime Error",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_x_neqv_expr_assign.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_x_or_expr_assign.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_x_plus_expr_assign.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_x_times_expr_assign.F90": {
                        "1": {
                            "result": "Runtime Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_expr_and_x.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_expr_and_x_end.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_expr_divided_x.F90": {
                        "1": {
                            "result": "Runtime Error",
                            "run_index": 0
                        }
                    },
                    "atomic_expr_divided_x_end.F90": {
                        "1": {
                            "result": "Runtime Error",
                            "run_index": 0
                        }
                    },
                    "atomic_expr_eqv_x.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_expr_eqv_x_end.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_expr_minus_x.F90": {
                        "1": {
                            "result": "Runtime Error",
                            "run_index": 0
                        }
                    },
                    "atomic_expr_minus_x_end.F90": {
                        "1": {
                            "result": "Runtime Error",
                            "run_index": 0
                        }
                    },
                    "atomic_expr_neqv_x.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_expr_neqv_x_end.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_expr_or_x.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_expr_or_x_end.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_expr_plus_x.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_expr_plus_x_end.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_expr_times_x.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_expr_times_x_end.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_iand_expr_x.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_iand_expr_x_end.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_iand_x_expr.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_iand_x_expr_end.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_ior_expr_x.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_ior_expr_x_end.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_ior_x_expr.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_ior_x_expr_end.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_ixor_expr_x.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_ixor_expr_x_end.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_ixor_x_expr.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_ixor_x_expr_end.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_max_expr_list_x.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_max_expr_list_x_end.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_max_expr_x.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_max_expr_x_end.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_max_x_expr.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_max_x_expr_end.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_max_x_expr_list.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_max_x_expr_list_end.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_min_expr_list_x.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_min_expr_list_x_end.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_min_expr_x.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_min_expr_x_end.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_min_x_expr.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_min_x_expr_end.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_min_x_expr_list.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_min_x_expr_list_end.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_expr_and_x.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_expr_and_x_end.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_expr_divided_x.F90": {
                        "1": {
                            "result": "Runtime Error",
                            "run_index": 0
                        }
                    },
                    "atomic_update_expr_divided_x_end.F90": {
                        "1": {
                            "result": "Runtime Error",
                            "run_index": 0
                        }
                    },
                    "atomic_update_expr_eqv_x.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_expr_eqv_x_end.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_expr_minus_x.F90": {
                        "1": {
                            "result": "Runtime Error",
                            "run_index": 0
                        }
                    },
                    "atomic_update_expr_minus_x_end.F90": {
                        "1": {
                            "result": "Runtime Error",
                            "run_index": 0
                        }
                    },
                    "atomic_update_expr_neqv_x.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_expr_neqv_x_end.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_expr_or_x.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_expr_or_x_end.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_expr_plus_x.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_expr_plus_x_end.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_expr_times_x.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_expr_times_x_end.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_iand_expr_x.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_iand_expr_x_end.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_iand_x_expr.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_iand_x_expr_end.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_ior_expr_x.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_ior_expr_x_end.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_ior_x_expr.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_ior_x_expr_end.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_ixor_expr_x.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_ixor_expr_x_end.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_ixor_x_expr.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_ixor_x_expr_end.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_max_expr_list_x.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_max_expr_list_x_end.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_max_expr_x.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_max_expr_x_end.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_max_x_expr.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_max_x_expr_end.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_max_x_expr_list.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_max_x_expr_list_end.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_min_expr_list_x.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_min_expr_list_x_end.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_min_expr_x.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_min_expr_x_end.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_min_x_expr.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_min_x_expr_end.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_min_x_expr_list.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_min_x_expr_list_end.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_x_and_expr.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_x_and_expr_end.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_x_divided_expr.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_x_divided_expr_end.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_x_eqv_expr.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_x_eqv_expr_end.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_x_minus_expr.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_x_minus_expr_end.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_x_neqv_expr.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_x_neqv_expr_end.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_x_or_expr.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_x_or_expr_end.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_x_plus_expr.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_x_plus_expr_end.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_x_times_expr.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_x_times_expr_end.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_x_and_expr.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_x_and_expr_end.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_x_divided_expr.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_x_divided_expr_end.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_x_eqv_expr.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_x_eqv_expr_end.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_x_minus_expr.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_x_minus_expr_end.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_x_neqv_expr.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_x_neqv_expr_end.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_x_or_expr.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_x_or_expr_end.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_x_plus_expr.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_x_plus_expr_end.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_x_times_expr.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_x_times_expr_end.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "data_copy_no_lower_bound.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "data_copyin_no_lower_bound.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "data_copyout_no_lower_bound.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "data_copyout_reference_counts.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        },
                        "2": {
                            "result": "Pass",
                            "run_index": 0
                        },
                        "3": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "data_create.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        },
                        "2": {
                            "result": "Pass",
                            "run_index": 0
                        },
                        "3": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "data_create_no_lower_bound.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "data_present_no_lower_bound.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "data_with_changing_subscript.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "data_with_derived_type.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "declare_copyin.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 1
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "3": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        },
                        "4": {
                            "result": "Compilation Failure",
                            "run_index": 4
                        }
                    },
                    "declare_create.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 1
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "3": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        },
                        "4": {
                            "result": "Compilation Failure",
                            "run_index": 4
                        }
                    },
                    "declare_function_scope_copy.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 1
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "3": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        },
                        "4": {
                            "result": "Compilation Failure",
                            "run_index": 4
                        }
                    },
                    "declare_function_scope_copyin.F90": {
                        "1": {
                            "result": "Unknown Section Result",
                            "run_index": -1
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        },
                        "3": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        }
                    },
                    "declare_function_scope_copyout.F90": {
                        "1": {
                            "result": "Unknown Section Result",
                            "run_index": -1
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        },
                        "3": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        }
                    },
                    "declare_function_scope_create.F90": {
                        "1": {
                            "result": "Unknown Section Result",
                            "run_index": -1
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        },
                        "3": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        }
                    },
                    "declare_function_scope_present.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        }
                    },
                    "enter_data_copyin_no_lower_bound.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "enter_data_create.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        },
                        "2": {
                            "result": "Pass",
                            "run_index": 0
                        },
                        "3": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "enter_data_create_no_lower_bound.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "enter_data_if.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 6
                        },
                        "2": {
                            "result": "Pass",
                            "run_index": 6
                        },
                        "3": {
                            "result": "Pass",
                            "run_index": 6
                        },
                        "4": {
                            "result": "Pass",
                            "run_index": 6
                        },
                        "5": {
                            "result": "Pass",
                            "run_index": 6
                        }
                    },
                    "exit_data.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        },
                        "2": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "exit_data_copyout_no_lower_bound.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "exit_data_copyout_reference_counts.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        },
                        "2": {
                            "result": "Pass",
                            "run_index": 0
                        },
                        "3": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "exit_data_delete_no_lower_bound.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        },
                        "2": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "exit_data_finalize.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        },
                        "2": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "init.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "init_device_num.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "init_device_type.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "init_device_type_num.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "kernels_async.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "kernels_copy.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        },
                        "2": {
                            "result": "Pass",
                            "run_index": 0
                        },
                        "3": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "kernels_copyin.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        },
                        "2": {
                            "result": "Pass",
                            "run_index": 0
                        },
                        "3": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "kernels_copyout.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        },
                        "2": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "kernels_create.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        },
                        "2": {
                            "result": "Pass",
                            "run_index": 0
                        },
                        "3": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "kernels_default_copy.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        },
                        "2": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "kernels_default_present.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "kernels_if.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 5
                        },
                        "2": {
                            "result": "Pass",
                            "run_index": 5
                        },
                        "3": {
                            "result": "Pass",
                            "run_index": 5
                        },
                        "4": {
                            "result": "Compilation Failure",
                            "run_index": 4
                        }
                    },
                    "kernels_loop.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_independent.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_add_general.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_add_loop.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_add_vector_loop.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_and_general.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_and_loop.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_and_vector_loop.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_bitand_general.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_bitand_loop.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_bitand_vector_loop.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_bitor_general.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_bitor_loop.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_bitor_vector_loop.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_bitxor_general.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_bitxor_loop.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_bitxor_vector_loop.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_max_general.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_max_loop.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_max_vector_loop.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_min_general.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_min_loop.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_min_vector_loop.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_multiply_general.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_multiply_loop.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_multiply_vector_loop.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_or_general.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_or_loop.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_or_vector_loop.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_seq.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_tile.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_vector_blocking.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_worker_blocking.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "kernels_num_gangs.F90": {
                        "1": {
                            "result": "Runtime Failure",
                            "run_index": 0
                        }
                    },
                    "kernels_num_workers.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "kernels_present.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "kernels_scalar_default_copy.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "kernels_vector_length.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "kernels_wait.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "loop_collapse.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        },
                        "2": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "loop_no_collapse.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        },
                        "2": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "parallel.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "parallel_async.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "parallel_copy.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "parallel_copyin.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "parallel_copyout.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        },
                        "2": {
                            "result": "Pass",
                            "run_index": 0
                        },
                        "3": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "parallel_create.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "parallel_default_copy.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        },
                        "2": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "parallel_default_present.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "parallel_firstprivate.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        },
                        "2": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "parallel_if.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        },
                        "2": {
                            "result": "Pass",
                            "run_index": 0
                        },
                        "3": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "parallel_loop.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        },
                        "2": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_async.F90": {
                        "1": {
                            "result": "Runtime Failure",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_auto.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_gang.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_reduction_add_general.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_reduction_add_loop.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_reduction_add_vector_loop.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_reduction_and_general.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_reduction_and_loop.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_reduction_and_vector_loop.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_reduction_bitand_general.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_reduction_bitand_loop.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_reduction_bitand_vector_loop.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_reduction_bitor_general.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_reduction_bitor_loop.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_reduction_bitor_vector_loop.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_reduction_bitxor_general.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_reduction_bitxor_loop.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_reduction_bitxor_vector_loop.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_reduction_max_general.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_reduction_max_loop.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_reduction_max_vector_loop.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_reduction_min_general.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_reduction_min_loop.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_reduction_min_vector_loop.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_reduction_multiply_general.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_reduction_multiply_loop.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_reduction_multiply_vector_loop.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_reduction_or_general.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_reduction_or_loop.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_reduction_or_vector_loop.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_seq.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_tile.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_vector.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_vector_blocking.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_worker.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_worker_blocking.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "parallel_present.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "parallel_private.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "parallel_reduction.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "parallel_scalar_default_firstprivate.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "parallel_switch.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "parallel_wait.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "parallel_while_loop.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "serial.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "serial_async.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "serial_copy.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "serial_copyin.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        },
                        "2": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "serial_copyout.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        },
                        "2": {
                            "result": "Pass",
                            "run_index": 0
                        },
                        "3": {
                            "result": "Runtime Failure",
                            "run_index": 0
                        }
                    },
                    "serial_create.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "serial_default_copy.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        },
                        "2": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "serial_default_present.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "serial_firstprivate.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        },
                        "2": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "serial_if.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        },
                        "2": {
                            "result": "Pass",
                            "run_index": 0
                        },
                        "3": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "serial_loop.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "serial_loop_async.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "serial_loop_auto.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "serial_loop_gang.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "serial_loop_reduction_add_general.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "serial_loop_reduction_add_loop.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "serial_loop_reduction_add_vector_loop.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "serial_loop_reduction_and_general.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "serial_loop_reduction_and_loop.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "serial_loop_reduction_and_vector_loop.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "serial_loop_reduction_bitand_general.F90": {
                        "1": {
                            "result": "Runtime Failure",
                            "run_index": 0
                        }
                    },
                    "serial_loop_reduction_bitand_loop.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "serial_loop_reduction_bitand_vector_loop.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "serial_loop_reduction_bitor_general.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "serial_loop_reduction_bitor_loop.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "serial_loop_reduction_bitor_vector_loop.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "serial_loop_reduction_bitxor_general.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "serial_loop_reduction_bitxor_loop.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "serial_loop_reduction_bitxor_vector_loop.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "serial_loop_reduction_max_general.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "serial_loop_reduction_max_loop.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "serial_loop_reduction_max_vector_loop.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "serial_loop_reduction_min_general.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "serial_loop_reduction_min_loop.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "serial_loop_reduction_min_vector_loop.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "serial_loop_reduction_multiply_general.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "serial_loop_reduction_multiply_loop.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "serial_loop_reduction_multiply_vector_loop.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "serial_loop_reduction_or_general.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "serial_loop_reduction_or_loop.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "serial_loop_reduction_or_vector_loop.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "serial_loop_seq.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "serial_loop_tile.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "serial_loop_vector.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "serial_loop_vector_blocking.F90": {
                        "1": {
                            "result": "Runtime Failure",
                            "run_index": 0
                        }
                    },
                    "serial_loop_worker.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "serial_loop_worker_blocking.F90": {
                        "1": {
                            "result": "Runtime Failure",
                            "run_index": 0
                        }
                    },
                    "serial_present.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "serial_private.F90": {
                        "1": {
                            "result": "Runtime Failure",
                            "run_index": 0
                        }
                    },
                    "serial_reduction.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "serial_scalar_default_firstprivate.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "serial_switch.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "serial_wait.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "serial_while_loop.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "set_default_async.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "set_device_num.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "set_device_type.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "shutdown.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "shutdown_device_num.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "shutdown_device_type.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "shutdown_device_type_num.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "template.F90": {
                        "1": {
                            "result": "Runtime Failure",
                            "run_index": 0
                        }
                    }
                }
            }
        }
    },
    "systems": [
        {
            "id": 1,
            "machine": "x86_64",
            "name": null,
            "node": "spock14",
            "processor": "x86_64",
            "release": "5.3.18-24.75_10.0.184-cray_shasta_c",
            "version": "#1 SMP Mon Jul 26 15:33:02 UTC 2021 (01de6ae)"
        }
    ],
    "testsuites": [
        {
            "acc_async_test.F90": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,async,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, d, e !Data\n        INTEGER :: errors\n        errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        CALL RANDOM_NUMBER(d)\n        c = 0\n        e = 0\n        \n        !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) create(c(1:LOOPCOUNT)) async(1)\n        !$acc enter data copyin(d(1:LOOPCOUNT)) create(e(1:LOOPCOUNT)) async(2)\n        !$acc parallel present(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT)) async(1)\n          !$acc loop\n          DO x = 1, LOOPCOUNT\n            c(x) = a(x) + b(x)\n          END DO\n        !$acc end parallel\n        !$acc parallel present(c(1:LOOPCOUNT), d(1:LOOPCOUNT), e(1:LOOPCOUNT)) async(1) wait(2)\n          !$acc loop\n          DO x = 1, LOOPCOUNT\n            e(x) = c(x) + d(x)\n          END DO\n        !$acc end parallel\n        !$acc exit data copyout(e(1:LOOPCOUNT)) async(1)\n\n\n        DO WHILE (acc_async_test(1) .eqv. .FALSE.)\n          CONTINUE\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(e(x) - (a(x) + b(x) + d(x))) .GT. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n      LOGICAL :: test1\n#endif\n#ifndef T1\n      DO testrun = 1, NUM_TEST_CALLS\n        failed = failed .or. test1()\n      END DO\n      IF (failed) THEN\n        failcode = failcode + 2 ** 0\n        failed = .FALSE.\n      END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "async",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:async,runtime,construct-independent,V:1.0-2.7\n      LOGICAL FUNCTION test2()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, d, e\n        INTEGER :: errors\n        errors = 0\n        \n        !Initialization\n        CALL RANDOM_SEED()\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        CALL RANDOM_NUMBER(d)\n        c = 0\n        e = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), d(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT), e(1:LOOPCOUNT))\n          !$acc parallel present(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT)) async(1)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n          !$acc parallel present(c(1:LOOPCOUNT), d(1:LOOPCOUNT), e(1:LOOPCOUNT)) async(1)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              e(x) = c(x) + d(x)\n            END DO\n          !$acc end parallel\n          DO WHILE (acc_async_test(1) .eqv. .FALSE.)\n            CONTINUE\n          END DO\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(e(x) - (a(x) + b(x) + d(x))) .GT. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n      LOGICAL :: test2\n#endif\n#ifndef T2\n      DO testrun = 1, NUM_TEST_CALLS\n        failed = failed .or. test2()\n      END DO\n      IF (failed) THEN\n        failcode = failcode + 2 ** 1\n        failed = .FALSE.\n      END IF\n#endif\n",
                        "tags": [
                            "async",
                            "runtime",
                            "construct-independent"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n!T3:runtime,async,construct-independent,V:2.5-2.7\n      LOGICAL FUNCTION test3()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, d, e\n        INTEGER :: errors, async_val\n        INTEGER :: acc_get_default_async\n        async_val = acc_get_default_async()\n        errors = 0\n\n        !Initialization\n        CALL RANDOM_SEED()\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        CALL RANDOM_NUMBER(d)\n        c = 0\n        e = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), d(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT), e(1:LOOPCOUNT))\n          !$acc parallel present(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT)) async\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n          !$acc parallel present(c(1:LOOPCOUNT), d(1:LOOPCOUNT), e(1:LOOPCOUNT)) async\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              e(x) = c(x) + d(x)\n            END DO\n          !$acc end parallel\n          DO WHILE (acc_async_test(async_val) .eqv. .FALSE.)\n            CONTINUE\n          END DO\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(e(x) - (a(x) + b(x) + d(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test3 = .FALSE.\n        ELSE\n          test3 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T3\n      LOGICAL :: test3\n#endif\n#ifndef T3\n      DO testrun = 1, NUM_TEST_CALLS\n        failed = failed .or. test3()\n      END DO\n      IF (failed) THEN\n        failcode = failcode + 2 ** 2\n        failed = .FALSE.\n      END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "async",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_async_test_all.F90": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,async,construct-independent,update,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b, c, d, e !Data\n        INTEGER :: errors\n        errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        CALL RANDOM_NUMBER(d)\n        c = 0\n        e = 0\n\n        !$acc enter data create(a(1:LOOPCOUNT,1:10), b(1:LOOPCOUNT,1:10), c(1:LOOPCOUNT,1:10), d(1:LOOPCOUNT,1:10), e(1:LOOPCOUNT,1:10))\n        DO y = 1, 10\n          !$acc update device(a(1:LOOPCOUNT,y:y), b(1:LOOPCOUNT,y:y), d(1:LOOPCOUNT,y:y)) async(y)\n          !$acc parallel present(a(1:LOOPCOUNT,y:y), b(1:LOOPCOUNT,y:y), c(1:LOOPCOUNT,y:y)) async(y)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x, y) = a(x, y) + b(x, y)\n            END DO\n          !$acc end parallel\n          !$acc parallel present(c(1:LOOPCOUNT,y:y), d(1:LOOPCOUNT,y:y),e(1:LOOPCOUNT,y:y)) async(y)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              e(x, y) = c(x, y) + d(x, y)\n            END DO\n          !$acc end parallel\n          !$acc update host(e(1:LOOPCOUNT,y:y)) async(y)\n        END DO\n\n        DO WHILE (acc_async_test_all() .eqv. .FALSE.)\n          CONTINUE\n        END DO\n\n        DO y = 1, 10\n          DO x = 1, LOOPCOUNT\n            IF (abs(e(x, y) - (a(x, y) + b(x, y) + d(x, y))) .GT. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n      LOGICAL :: test1\n#endif\n#ifndef T1\n      DO testrun = 1, NUM_TEST_CALLS\n        failed = failed .or. test1()\n      END DO\n      IF (failed) THEN\n        failcode = failcode + 2 ** 0\n        failed = .FALSE.\n      END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "async",
                            "construct-independent",
                            "update"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:async,runtime,construct-independent,V:1.0-2.7\n      LOGICAL FUNCTION test2()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b, c, d, e !Data\n        INTEGER :: errors\n        errors = 0\n\n        !Initialization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        CALL RANDOM_NUMBER(d)\n        c = 0\n        e = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10), b(1:LOOPCOUNT,1:10), d(1:LOOPCOUNT, 1:10)) copyout(c(1:LOOPCOUNT, 1:10), e(1:LOOPCOUNT, 1:10))\n          DO x = 1, 10\n            !$acc parallel present(a(1:LOOPCOUNT, 1:10), b(1:LOOPCOUNT, 1:10), c(1:LOOPCOUNT, 1:10)) async(x)\n              !$acc loop\n              DO y = 1, LOOPCOUNT\n                c(y, x) = a(y, x) + b(y, x)\n              END DO\n            !$acc end parallel\n            !$acc parallel present(c(1:LOOPCOUNT, 1:10), d(1:LOOPCOUNT, 1:10), e(1:LOOPCOUNT, 1:10)) async(x)\n              !$acc loop\n              DO y = 1, LOOPCOUNT\n                e(y, x) = c(y, x) + d(y, x)\n              END DO\n            !$acc end parallel\n          END DO\n          DO WHILE (acc_async_test_all() .eqv. .FALSE.)\n            CONTINUE\n          END DO\n        !$acc end data\n\n        DO x = 1, 10\n          DO y = 1, LOOPCOUNT\n            IF (abs(e(y, x) - (a(y, x) + b(y, x) + d(y, x))) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n      LOGICAL :: test2\n#endif\n#ifndef T2\n      DO testrun = 1, NUM_TEST_CALLS\n        failed = failed .or. test2()\n      END DO\n      IF (failed) THEN\n        failcode = failcode + 2 ** 1\n        failed = .FALSE.\n      END IF\n#endif\n",
                        "tags": [
                            "async",
                            "runtime",
                            "construct-independent"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n!T3:async,runtime,construct-independent,V:2.5-2.7\n      LOGICAL FUNCTION test3()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b, c, d, e !Data\n        INTEGER :: errors\n        errors = 0\n\n        !Initialization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        CALL RANDOM_NUMBER(d)\n        c = 0\n        e = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10), b(1:LOOPCOUNT, 1:10), d(1:LOOPCOUNT, 1:10)) copyout(c(1:LOOPCOUNT, 1:10), e(1:LOOPCOUNT, 1:10))\n          DO x = 1, 10\n            CALL acc_set_default_async(x)\n            !$acc parallel present(a(1:LOOPCOUNT, 1:10), b(1:LOOPCOUNT, 1:10), c(1:LOOPCOUNT, 1:10)) async\n              !$acc loop\n              DO y = 1, LOOPCOUNT\n                c(y, x) = a(y, x) + b(y, x)\n              END DO\n            !$acc end parallel\n            !$acc parallel present(c(1:LOOPCOUNT, 1:10), d(1:LOOPCOUNT, 1:10), e(1:LOOPCOUNT, 1:10)) async\n              !$acc loop\n              DO y = 1, LOOPCOUNT\n                e(y, x) = c(y, x) + d(y, x)\n              END DO\n            !$acc end parallel\n          END DO\n          DO WHILE (acc_async_test_all() .eqv. .FALSE.)\n            CONTINUE\n          END DO\n        !$acc end data\n\n        DO x = 1, 10\n          DO y = 1, LOOPCOUNT\n            IF (abs(e(y, x) - (a(y, x) + b(y, x) + d(y, x))) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test3 = .FALSE.\n        ELSE\n          test3 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T3\n      LOGICAL :: test3\n#endif\n#ifndef T3\n      DO testrun = 1, NUM_TEST_CALLS\n        failed = failed .or. test3()\n      END DO\n      IF (failed) THEN\n        failcode = failcode + 2 ** 2\n        failed = .FALSE.\n      END IF\n#endif\n",
                        "tags": [
                            "async",
                            "runtime",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_copyin.F90": {
                "num tests": 7,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        CALL acc_copyin(a(1:LOOPCOUNT))\n        CALL acc_copyin(b(1:LOOPCOUNT))\n\n        !$acc data copy(c(1:LOOPCOUNT))\n          !$acc parallel present(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        !$acc exit data copyout(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END FUNCTION\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:runtime,data,executable-data,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test2()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 1\n\n        CALL acc_copyin(a(1:LOOPCOUNT))\n        CALL acc_copyin(b(1:LOOPCOUNT))\n\n        !$acc data copyout(c(1:LOOPCOUNT))\n          !$acc parallel present(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        CALL acc_copyout(a(1:LOOPCOUNT))\n        CALL acc_copyout(b(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END FUNCTION\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n!T3:runtime,data,executable-data,devonly,construct-independent,V:2.5-2.7\n      LOGICAL FUNCTION test3()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, a_copy, b_copy !Data\n        INTEGER :: errors = 0\n        LOGICAL,DIMENSION(1):: devtest\n\n        devtest(1) = .TRUE.\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel present(devtest(1:1))\n          devtest(1) = .FALSE.\n        !$acc end parallel\n\n        IF (devtest(1) .eqv. .TRUE.) THEN\n          SEEDDIM(1) = 1\n#         ifdef SEED\n          SEEDDIM(1) = SEED\n#         endif\n          CALL RANDOM_SEED(PUT=SEEDDIM)\n          CALL RANDOM_NUMBER(a)\n          a_copy(:) = a(:)\n          CALL RANDOM_NUMBER(b)\n          b_copy(:) = b(:)\n          c = 0\n\n          CALL acc_copyin(a(1:LOOPCOUNT))\n          CALL acc_copyin(b(1:LOOPCOUNT))\n\n          a = 0\n          b = 0\n\n          !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n            !$acc parallel\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                c(x) = a(x) + b(x)\n              END DO\n            !$acc end parallel\n          !$acc end data\n\n          !$acc exit data copyout(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n\n          DO x = 1, LOOPCOUNT\n            IF (abs(a(x) - a_copy(x)) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n            IF (abs(b(x) - b_copy(x)) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n            IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test3 = .FALSE.\n        ELSE\n          test3 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T3\n        LOGICAL :: test3\n#endif\n#ifndef T3\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test3()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 2\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "devonly",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "4": {
                        "content": "#ifndef T4\n!T4:runtime,executable-data,construct-independent,compatibility-features,V:2.0-2.7\n      LOGICAL FUNCTION test4()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n\n        !Initialization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        CALL acc_pcopyin(a(1:LOOPCOUNT))\n        CALL acc_pcopyin(b(1:LOOPCOUNT))\n\n        !$acc data copyout(c(1:LOOPCOUNT))\n          !$acc parallel present(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test4 = .FALSE.\n        ELSE\n          test4 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T4\n        LOGICAL :: test4\n#endif\n#ifndef T4\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test4()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 3\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "executable-data",
                            "construct-independent",
                            "compatibility-features"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "5": {
                        "content": "#ifndef T5\n!T5:runtime,executable-data,construct-independent,compatibility-features,V:2.0-2.7\n      LOGICAL FUNCTION test5()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n\n        !Initialization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        \n        CALL acc_present_or_copyin(a(1:LOOPCOUNT))\n        CALL acc_present_or_copyin(b(1:LOOPCOUNT))\n\n        !$acc data copyout(c(1:LOOPCOUNT))\n          !$acc parallel present(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test5 = .FALSE.\n        ELSE\n          test5 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T5\n        LOGICAL :: test5\n#endif\n#ifndef T5\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test5()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 4\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "executable-data",
                            "construct-independent",
                            "compatibility-features"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "6": {
                        "content": "#ifndef T6\n!T6:runtime,data,executable-data,construct-independent,reference-counting,V:2.5-2.7\n      LOGICAL FUNCTION test6()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n\n        !Initialization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        CALL acc_copyin(a(1:LOOPCOUNT))\n        CALL acc_copyin(a(1:LOOPCOUNT))\n        CALL acc_copyin(b(1:LOOPCOUNT))\n        CALL acc_copyin(b(1:LOOPCOUNT))\n\n        !$acc data copyout(c(1:LOOPCOUNT))\n          !$acc parallel present(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n        !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test6 = .FALSE.\n        ELSE\n          test6 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T6\n        LOGICAL :: test6\n#endif\n#ifndef T6\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test6()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 5\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent",
                            "reference-counting"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "7": {
                        "content": "#ifndef T7\n!T7:runtime,data,executable-data,construct-independent,reference-counting,devonly,V:2.5-2.7\n      LOGICAL FUNCTION test7()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, a_copy, b_copy !Data\n        INTEGER :: errors = 0\n        LOGICAL,DIMENSION(1):: devtest\n\n        devtest(1) = .TRUE.\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel present(devtest(1:1))\n          devtest(1) = .FALSE.\n        !$acc end parallel\n\n        IF (devtest(1) .eqv. .TRUE.) THEN\n          !Initialization\n          SEEDDIM(1) = 1\n#         ifdef SEED\n          SEEDDIM(1) = SEED\n#         endif\n          CALL RANDOM_SEED(PUT=SEEDDIM)\n          CALL RANDOM_NUMBER(a)\n          CALL RANDOM_NUMBER(b)\n          c = 0\n          a_copy = a\n          b_copy = b\n\n          CALL acc_copyin(a(1:LOOPCOUNT))\n          CALL acc_copyin(b(1:LOOPCOUNT))\n\n          a = 0\n          b = 0\n\n          CALL acc_copyin(a(1:LOOPCOUNT))\n          CALL acc_copyin(b(1:LOOPCOUNT))\n\n          !$acc data copyout(c(1:LOOPCOUNT))\n            !$acc parallel present(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                c(x) = a(x) + b(x)\n              END DO\n            !$acc end parallel\n          !$acc end data\n\n          !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n          !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n\n          DO x = 1, LOOPCOUNT\n            IF (abs(c(x) - (a_copy(x) + b_copy(x))) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test7 = .FALSE.\n        ELSE\n          test7 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T7\n        LOGICAL :: test7\n#endif\n#ifndef T7\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test7()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 6\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent",
                            "reference-counting",
                            "devonly"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_copyin_async.F90": {
                "num tests": 5,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,data,executable-data,async,construct-independent,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, a_host, b_host !Data\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        a_host = a\n        b_host = b\n\n        CALL acc_copyin_async(a(1:LOOPCOUNT), 1)\n        CALL acc_copyin_async(b(1:LOOPCOUNT), 2)\n\n        !$acc data copyout(c(1:LOOPCOUNT))\n          !$acc parallel async(1) present(a(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              a(x) = a(x) * a(x)\n            END DO\n          !$acc end parallel\n          !$acc parallel async(2) present(b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              b(x) = b(x) * b(x)\n            END DO\n          !$acc end parallel\n          !$acc parallel async(2) wait(1) present(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a_host(x)*a_host(x) + b_host(x)*b_host(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n      LOGICAL :: test1\n#endif\n#ifndef T1\n      DO testrun = 1, NUM_TEST_CALLS\n        failed = failed .or. test1()\n      END DO\n      IF (failed) THEN\n        failcode = failcode + 2 ** 0\n        failed = .FALSE.\n      END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "async",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:runtime,data,executable-data,async,construct-independent,V:2.5-2.7\n      LOGICAL FUNCTION test2()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, a_host, b_host !Data\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n\n        !Initialization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        CALL acc_copyin_async(a(1:LOOPCOUNT), 1)\n        CALL acc_copyin_async(b(1:LOOPCOUNT), 2)\n\n        !$acc data copyout(c(1:LOOPCOUNT))\n          DO WHILE (acc_async_test_all() .eqv. .FALSE.)\n            CONTINUE\n          END DO\n          !$acc parallel present(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n      LOGICAL :: test2\n#endif\n#ifndef T2\n      DO testrun = 1, NUM_TEST_CALLS\n        failed = failed .or. test2()\n      END DO\n      IF (failed) THEN\n        failcode = failcode + 2 ** 1\n        failed = .FALSE.\n      END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "async",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n!T3:runtime,data,executable-data,async,construct-independent,V:2.5-2.7\n      LOGICAL FUNCTION test3()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n\n        !Initialization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        CALL acc_copyin_async(a(1:LOOPCOUNT), 1)\n        CALL acc_copyin_async(b(1:LOOPCOUNT), 2)\n\n        !$acc data copyout(c(1:LOOPCOUNT))\n          !$acc wait\n          !$acc parallel present(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test3 = .FALSE.\n        ELSE\n          test3 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T3\n      LOGICAL :: test3\n#endif\n#ifndef T3\n      DO testrun = 1, NUM_TEST_CALLS\n        failed = failed .or. test3()\n      END DO\n      IF (failed) THEN\n        failcode = failcode + 2 ** 2\n        failed = .FALSE.\n      END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "async",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "4": {
                        "content": "#ifndef T4\n!T4:runtime,data,executable-data,async,construct-independent,reference-counting,V:2.5-2.7\n      LOGICAL FUNCTION test4()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, d, e !Data\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n\n        !Initialization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        CALL RANDOM_NUMBER(d)\n        e = 0\n\n        !$acc enter data create(c(1:LOOPCOUNT))\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), d(1:LOOPCOUNT)) copyout(e(1:LOOPCOUNT))\n          !$acc parallel present(c(1:LOOPCOUNT)) async(1)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n          CALL acc_copyin_async(c(1:LOOPCOUNT), 1)\n          !$acc exit data delete(c(1:LOOPCOUNT))\n          !$acc parallel present(c(1:LOOPCOUNT)) async(1)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              e(x) = c(x) + d(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n        !$acc exit data copyout(c(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n          IF (abs(e(x) - (a(x) + b(x) + d(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test4 = .FALSE.\n        ELSE\n          test4 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T4\n      LOGICAL :: test4\n#endif\n#ifndef T4\n      DO testrun = 1, NUM_TEST_CALLS\n        failed = failed .or. test4()\n      END DO\n      IF (failed) THEN\n        failcode = failcode + 2 ** 3\n        failed = .FALSE.\n      END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "async",
                            "construct-independent",
                            "reference-counting"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "5": {
                        "content": "#ifndef T5\n!T5:runtime,data,executable-data,async,construct-independent,reference-counting,V:2.5-2.7\n      LOGICAL FUNCTION test5()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, a_copy, b_copy !Data\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n\n        !Initialization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        a_copy = a\n        CALL RANDOM_NUMBER(b)\n        b_copy = b\n        c = 0\n\n        CALL acc_copyin_async(a(1:LOOPCOUNT), 1)\n        CALL acc_copyin_async(b(1:LOOPCOUNT), 2)\n\n        a = 0\n        b = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n          !$acc wait\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a_copy(x) + b_copy(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test5 = .FALSE.\n        ELSE\n          test5 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T5\n      LOGICAL :: test5\n#endif\n#ifndef T5\n      DO testrun = 1, NUM_TEST_CALLS\n        failed = failed .or. test5()\n      END DO\n      IF (failed) THEN\n        failcode = failcode + 2 ** 4\n        failed = .FALSE.\n      END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "async",
                            "construct-independent",
                            "reference-counting"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_copyin_async_with_len.F90": {
                "num tests": 5,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,data,executable-data,async,construct-independent,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, a_host, b_host !Data\n        INTEGER :: errors\n        errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        a_host = a\n        b_host = b\n\n        CALL acc_copyin_async(a(1), LOOPCOUNT*8, 1)\n        CALL acc_copyin_async(b(1), LOOPCOUNT*8, 2)\n\n        !$acc data copyout(c(1:LOOPCOUNT)) present(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n          !$acc parallel async(1)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              a(x) = a(x) * a(x)\n            END DO\n          !$acc end parallel\n          !$acc parallel async(2)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              b(x) = b(x) * b(x)\n            END DO\n          !$acc end parallel\n          !$acc parallel wait(1, 2)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a_host(x)*a_host(x) + b_host(x)*b_host(x))) .gt. 4*PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "async",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:runtime,data,executable-data,async,construct-independent,V:2.5-2.7\n      LOGICAL FUNCTION test2()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors\n        errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        CALL acc_copyin_async(a(1), LOOPCOUNT*8, 1)\n        CALL acc_copyin_async(b(1), LOOPCOUNT*8, 2)\n\n        !$acc data copyout(c(1:LOOPCOUNT))\n          DO WHILE (acc_async_test_all() .eqv. .FALSE.)\n            CONTINUE\n          END DO\n          !$acc parallel present(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "async",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n!T3:runtime,data,executable-data,async,construct-independent,V:2.5-2.7\n      LOGICAL FUNCTION test3()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors\n        errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        CALL acc_copyin_async(a(1), LOOPCOUNT*8, 1)\n        CALL acc_copyin_async(b(1), LOOPCOUNT*8, 2)\n\n        !$acc data copyout(c(1:LOOPCOUNT))\n          !$acc wait\n          !$acc parallel present(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEn\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test3 = .FALSE.\n        ELSE\n          test3 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T3\n        LOGICAL :: test3\n#endif\n#ifndef T3\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test3()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 2\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "async",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "4": {
                        "content": "#ifndef T4\n!T4:runtime,data,executable-data,async,construct-independent,reference-counting,V:2.5-2.7\n      LOGICAL FUNCTION test4()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, d, e !Data\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n\n        !Initialization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        CALL RANDOM_NUMBER(d)\n        e = 0\n\n        !$acc enter data create(c(1:LOOPCOUNT))\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), d(1:LOOPCOUNT)) copyout(e(1:LOOPCOUNT))\n          !$acc parallel present(c(1:LOOPCOUNT)) async(1)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n          CALL acc_copyin_async(c(1), LOOPCOUNT*8, 1)\n          !$acc exit data delete(c(1:LOOPCOUNT))\n          !$acc parallel present(c(1:LOOPCOUNT)) async(1)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              e(x) = c(x) + d(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n        !$acc exit data copyout(c(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n          IF (abs(e(x) - (a(x) + b(x) + d(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test4 = .FALSE.\n        ELSE\n          test4 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T4\n        LOGICAL :: test4\n#endif\n#ifndef T4\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test4()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 3\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "async",
                            "construct-independent",
                            "reference-counting"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "5": {
                        "content": "#ifndef T5\n!T5:runtime,data,executable-data,async,construct-independent,reference-counting,V:2.5-2.7\n      LOGICAL FUNCTION test5()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n\n        !Initialization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        CALL acc_copyin_async(a(1), LOOPCOUNT*8, 1)\n        CALL acc_copyin_async(b(1), LOOPCOUNT*8, 2)\n\n        !$acc data create(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n          !$acc wait\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test5 = .FALSE.\n        ELSE\n          test5 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T5\n        LOGICAL :: test5\n#endif\n#ifndef T5\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test5()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 4\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "async",
                            "construct-independent",
                            "reference-counting"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_copyin_with_len.F90": {
                "num tests": 7,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        CALL acc_copyin(a(1), LOOPCOUNT*8)\n        CALL acc_copyin(b(1), LOOPCOUNT*8)\n        !$acc data copy(c(1:LOOPCOUNT))\n          !$acc parallel present(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            !$acc Loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        CALL acc_copyout(a(1:LOOPCOUNT))\n        CALL acc_copyout(b(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END FUNCTION\n#endif\n#ifndef T1\n      LOGICAL :: test1\n#endif\n#ifndef T1\n      DO testrun = 1, NUM_TEST_CALLS\n        failed = failed .or. test1()\n      END DO\n      IF (failed) THEN\n        failcode = failcode + 2 ** 0\n        failed = .FALSE.\n      END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:runtime,data,executable-data,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test2()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        CALL acc_copyin(a(1), LOOPCOUNT*8)\n        CALL acc_copyin(b(1), LOOPCOUNT*8)\n        !$acc data copy(c(1:LOOPCOUNT))\n          !$acc parallel present(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        !$acc exit data copyout(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END FUNCTION\n#endif\n#ifndef T2\n      LOGICAL :: test2\n#endif\n#ifndef T2\n      DO testrun = 1, NUM_TEST_CALLS\n        failed = failed .or. test2()\n      END DO\n      IF (failed) THEN\n        failcode = failcode + 2 ** 1\n        failed = .FALSE.\n      END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n!T3:runtime,data,executable-data,devonly,construct-independent,V:2.5-2.7\n      LOGICAL FUNCTION test3()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, a_copy, b_copy !Data\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n        INTEGER,DIMENSION(1) :: devtest\n\n        devtest(1) = 1\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel present(devtest(1:1))\n          devtest(1) = 0\n        !$acc end parallel\n\n        IF (devtest(1) .eq. 1) THEN\n          SEEDDIM(1) = 1\n#         ifdef SEED\n          SEEDDIM(1) = SEED\n#         endif\n          CALL RANDOM_SEED(PUT=SEEDDIM)\n          CALL RANDOM_NUMBER(a)\n          CALL RANDOM_NUMBER(b)\n          a_copy = a\n          b_copy = b\n          c = 0\n\n          CALL acc_copyin(a(1), LOOPCOUNT*8)\n          CALL acc_copyin(b(1), LOOPCOUNT*8)\n\n          a = 0\n          b = 0\n\n          !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copy(c(1:LOOPCOUNT))\n            !$acc parallel\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                c(x) = a(x) + b(x)\n              END DO\n            !$acc end parallel\n          !$acc end data\n\n          CALL acc_copyout(a(1:LOOPCOUNT))\n          CALL acc_copyout(b(1:LOOPCOUNT))\n\n          DO x = 1, LOOPCOUNT\n            IF (abs(a(x) - a_copy(x)) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n            IF (abs(b(x) - b_copy(x)) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n            IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test3 = .FALSE.\n        ELSE\n          test3 = .TRUE.\n        END IF\n      END FUNCTION\n#endif\n#ifndef T3\n      LOGICAL :: test3\n#endif\n#ifndef T3\n      DO testrun = 1, NUM_TEST_CALLS\n        failed = failed .or. test3()\n      END DO\n      IF (failed) THEN\n        failcode = failcode + 2 ** 2\n        failed = .FALSE.\n      END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "devonly",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "4": {
                        "content": "#ifndef T4\n!T4:runtime,compatibility-features,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test4()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        CALL acc_pcopyin(a(1), LOOPCOUNT*8)\n        CALL acc_pcopyin(b(1), LOOPCOUNT*8)\n\n        !$acc data copyout(c(1:LOOPCOUNT)) present(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test4 = .FALSE.\n        ELSE\n          test4 = .TRUE.\n        END IF\n      END FUNCTION\n#endif\n#ifndef T4\n      LOGICAL :: test4\n#endif\n#ifndef T4\n      DO testrun = 1, NUM_TEST_CALLS\n        failed = failed .or. test4()\n      END DO\n      IF (failed) THEN\n        failcode = failcode + 2 ** 3\n        failed = .FALSE.\n      END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "compatibility-features",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "5": {
                        "content": "#ifndef T5\n!T5:runtime,compatibility-features,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test5()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        CALL acc_present_or_copyin(a(1), LOOPCOUNT*8)\n        CALL acc_present_or_copyin(b(1), LOOPCOUNT*8)\n\n        !$acc data copyout(c(1:LOOPCOUNT)) present(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test5 = .FALSE.\n        ELSE\n          test5 = .TRUE.\n        END IF\n      END FUNCTION\n#endif\n#ifndef T5\n      LOGICAL :: test5\n#endif\n#ifndef T5\n      DO testrun = 1, NUM_TEST_CALLS\n        failed = failed .or. test5()\n      END DO\n      IF (failed) THEN\n        failcode = failcode + 2 ** 4\n        failed = .FALSE.\n      END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "compatibility-features",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "6": {
                        "content": "#ifndef T6\n!T6:runtime,data,executable-data,construct-independent,reference-counting,V:2.5-2.7\n      LOGICAL FUNCTION test6()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        CALL acc_copyin(a(1), LOOPCOUNT*8)\n        CALL acc_copyin(a(1), LOOPCOUNT*8)\n        CALL acc_copyin(b(1), LOOPCOUNT*8)\n        CALL acc_copyin(b(1), LOOPCOUNT*8)\n\n        !$acc data copyout(c(1:LOOPCOUNT))\n          !$acc parallel present(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n        !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) + (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test6 = .FALSE.\n        ELSE\n          test6 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T6\n      LOGICAL :: test6\n#endif\n#ifndef T6\n      DO testrun = 1, NUM_TEST_CALLS\n        failed = failed .or. test6()\n      END DO\n      IF (failed) THEN\n        failcode = failcode + 2 ** 5\n        failed = .FALSE.\n      END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent",
                            "reference-counting"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "7": {
                        "content": "#ifndef T7\n!T7:runtime,data,executable-data,construct-independent,reference-counting,devonly,V:2.5-2.7\n      LOGICAL FUNCTION test7()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, a_copy, b_copy !Data\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n        LOGICAL,DIMENSION(1):: devtest\n\n        devtest(1) = .TRUE.\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel present(devtest(1:1))\n          devtest(1) = .FALSE.\n        !$acc end parallel\n\n        IF (devtest(1) .eqv. .TRUE.) THEN\n          SEEDDIM(1) = 1\n#         ifdef SEED\n          SEEDDIM(1) = SEED\n#         endif\n          CALL RANDOM_SEED(PUT=SEEDDIM)\n          CALL RANDOM_NUMBER(a)\n          CALL RANDOM_NUMBER(b)\n          c = 0\n          a_copy = a\n          b_copy = b\n\n          CALL acc_copyin(a(1), LOOPCOUNT*8)\n          CALL acc_copyin(b(1), LOOPCOUNT*8)\n\n          a = 0\n          b = 0\n\n          CALL acc_copyin(a(1), LOOPCOUNT*8)\n          CALL acc_copyin(b(1), LOOPCOUNT*8)\n\n          !$acc data copyout(c(1:LOOPCOUNT))\n            !$acc parallel present(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                c(x) = a(x) + b(x)\n              END DO\n            !$acc end parallel\n          !$acc end data\n\n          !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n          !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n\n          DO x = 1, LOOPCOUNT\n            IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END IF\n        IF (errors .eq. 0) THEN\n          test7 = .FALSE.\n        ELSE\n          test7 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T7\n      LOGICAL :: test7\n#endif\n#ifndef T7\n      DO testrun = 1, NUM_TEST_CALLS\n        failed = failed .or. test7()\n      END DO\n      IF (failed) THEN\n        failcode = failcode + 2 ** 6\n        failed = .FALSE.\n      END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent",
                            "reference-counting",
                            "devonly"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_copyout.F90": {
                "num tests": 5,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        CALL acc_create(c(1:LOOPCOUNT))\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) present(c(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        CALL acc_copyout(c(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END FUNCTION\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:runtime,data,executable-data,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test2()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c\n        INTEGER :: errors = 0\n\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc enter data create(c(1:LOOPCOUNT))\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) present(c(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        CALL acc_copyout(c(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n!T3:runtime,data,executable-data,construct-independent,devonly,reference-counting,V:2.5-2.7\n      LOGICAL FUNCTION test3()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c\n        INTEGER :: errors = 0\n        LOGICAL,DIMENSION(1):: devtest\n\n        devtest(1) = .TRUE.\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel present(devtest(1:1))\n          devtest(1) = .FALSE.\n        !$acc end parallel\n\n        IF (devtest(1) .eqv. .TRUE.) THEN\n          SEEDDIM(1) = 1\n#         ifdef SEED\n          SEEDDIM(1) = SEED\n#         endif\n          CALL RANDOM_SEED(PUT=SEEDDIM)\n          CALL RANDOM_NUMBER(a)\n          CALL RANDOM_NUMBER(b)\n          c = 0\n\n          !$acc enter data copyin(c(1:LOOPCOUNT))\n          !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n            !$acc parallel\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                c(x) = a(x) + b(x)\n              END DO\n            !$acc end parallel\n            CALL acc_copyout(c(1:LOOPCOUNT))\n          !$acc end data\n\n          DO x = 1, LOOPCOUNT\n            IF (abs(c(x)) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test3 = .FALSE.\n        ELSE\n          test3 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T3\n        LOGICAL :: test3\n#endif\n#ifndef T3\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test3()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 2\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent",
                            "devonly",
                            "reference-counting"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "4": {
                        "content": "#ifndef T4\n!T4:runtime,data,executable-data,construct-independent,reference-counting,V:2.5-2.7\n      LOGICAL FUNCTION test4()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c\n        INTEGER :: errors = 0\n\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc enter data create(c(1:LOOPCOUNT))\n        !$acc enter data create(c(1:LOOPCOUNT))\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) present(c(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n        !$acc exit data delete(c(1:LOOPCOUNT))\n        CALL acc_copyout(c(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test4 = .FALSE.\n        ELSE\n          test4 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T4\n        LOGICAL :: test4\n#endif\n#ifndef T4\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test4()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 3\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent",
                            "reference-counting"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "5": {
                        "content": "#ifndef T5\n!T5:runtime,data,executable-data,construct-independent,reference-counting,devonly,V:2.5-2.7\n      LOGICAL FUNCTION test5()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c\n        INTEGER :: errors = 0\n        LOGICAL,DIMENSION(1):: devtest\n        devtest(1) = .TRUE.\n\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel present(devtest(1:1))\n          devtest(1) = .FALSE.\n        !$acc end parallel\n\n        IF (devtest(1) .eqv. .TRUE.) THEN\n          SEEDDIM(1) = 1\n#         ifdef SEED\n          SEEDDIM(1) = SEED\n#         endif\n          CALL RANDOM_SEED(PUT=SEEDDIM)\n          CALL RANDOM_NUMBER(a)\n          CALL RANDOM_NUMBER(b)\n          c = 0\n\n          !$acc enter data create(c(1:LOOPCOUNT))\n          !$acc enter data create(c(1:LOOPCOUNT))\n          !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) present(c(1:LOOPCOUNT))\n            !$acc parallel\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                c(x) = a(x) + b(x)\n              END DO\n            !$acc end parallel\n          !$acc end data\n          CALL acc_copyout(c(1:LOOPCOUNT))\n          !$acc exit data delete(c(1:LOOPCOUNT))\n\n          DO x = 1, LOOPCOUNT\n            IF (abs(c(x)) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test5 = .FALSE.\n        ELSE\n          test5 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T5\n        LOGICAL :: test5\n#endif\n#ifndef T5\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test5()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 4\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent",
                            "reference-counting",
                            "devonly"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_copyout_async.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,data,executable-data,async,construct-independent,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, d, e, f !Data\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        CALL RANDOM_NUMBER(d)\n        CALL RANDOM_NUMBER(e)\n        f = 0\n\n        !$acc enter data create(c(1:LOOPCOUNT), f(1:LOOPCOUNT))\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), d(1:LOOPCOUNT), e(1:LOOPCOUNT)) present(c(1:LOOPCOUNT), f(1:LOOPCOUNT))\n          !$acc parallel async(1)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n          !$acc parallel async(2)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              f(x) = d(x) + e(x)\n            END DO\n          !$acc end parallel\n          CALL acc_copyout_async(c(1:LOOPCOUNT), 1)\n          CALL acc_copyout_async(f(1:LOOPCOUNT), 2)\n        !$acc end data\n        !$acc wait\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n          IF (abs(f(x) - (d(x) + e(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n      LOGICAL :: test1\n#endif\n#ifndef T1\n      DO testrun = 1, NUM_TEST_CALLS\n        failed = failed .or. test1()\n      END DO\n      IF (failed) THEN\n        failcode = failcode + 2 ** 0\n        failed = .FALSE.\n      END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "async",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_copyout_async_with_len.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,data,executable-data,async,construct-independent,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, d, e, f !Data\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        CALL RANDOM_NUMBER(d)\n        CALL RANDOM_NUMBER(e)\n        f = 0\n\n        !$acc enter data create(c(1:LOOPCOUNT), f(1:LOOPCOUNT))\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), d(1:LOOPCOUNT), e(1:LOOPCOUNT)) present(c(1:LOOPCOUNT), f(1:LOOPCOUNT))\n          !$acc parallel async(1)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n          !$acc parallel async(2)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              f(x) = d(x) + e(x)\n            END DO\n          !$acc end parallel\n          CALL acc_copyout_async(c(1), LOOPCOUNT*8, 1)\n          CALL acc_copyout_async(f(1), LOOPCOUNT*8, 2)\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n          IF (abs(f(x) - (d(x) + e(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "async",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_copyout_finalize.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,data,executable-data,construct-independent,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc enter data create(c(1:LOOPCOUNT))\n        !$acc enter data create(c(1:LOOPCOUNT))\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) present(c(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        CALL acc_copyout_finalize(c(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_copyout_finalize_async.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,data,executable-data,async,construct-independent,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, d, e, f !Data\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        CALL RANDOM_NUMBER(d)\n        CALL RANDOM_NUMBER(e)\n        f = 0\n\n        !$acc enter data create(c(1:LOOPCOUNT), f(1:LOOPCOUNT))\n        !$acc enter data create(c(1:LOOPCOUNT), f(1:LOOPCOUNT))\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), d(1:LOOPCOUNT), e(1:LOOPCOUNT)) present(c(1:LOOPCOUNT), f(1:LOOPCOUNT))\n          !$acc parallel async(1)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n          !$acc parallel async(2)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              f(x) = d(x) + e(x)\n            END DO\n          !$acc end parallel\n          CALL acc_copyout_finalize_async(c(1:LOOPCOUNT), 1)\n          CALL acc_copyout_finalize_async(f(1:LOOPCOUNT), 2)\n          !$acc wait\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n          IF (abs(f(x) - (d(x) + e(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n      LOGICAL :: test1\n#endif\n#ifndef T1\n      DO testrun = 1, NUM_TEST_CALLS\n        failed = failed .or. test1()\n      END DO\n      IF (failed) THEN\n        failcode = failcode + 2 ** 0\n        failed = .FALSE.\n      END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "async",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_copyout_finalize_async_with_len.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,data,executable-data,async,construct-independent,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, d, e, f !Data\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        CALL RANDOM_NUMBER(d)\n        CALL RANDOM_NUMBER(e)\n        f = 0\n\n        !$acc enter data create(c(1:LOOPCOUNT), f(1:LOOPCOUNT))\n        !$acc enter data create(c(1:LOOPCOUNT), f(1:LOOPCOUNT))\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), d(1:LOOPCOUNT), e(1:LOOPCOUNT)) present(c(1:LOOPCOUNT), f(1:LOOPCOUNT))\n          !$acc parallel async(1)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n          !$acc parallel async(2)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              f(x) = d(x) + e(x)\n            END DO\n          !$acc end parallel\n          CALL acc_copyout_finalize_async(c(1), LOOPCOUNT*8, 1)\n          CALL acc_copyout_finalize_async(f(1), LOOPCOUNT*8, 2)\n          !$acc wait\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n          IF (abs(f(x) - (d(x) + e(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n      LOGICAL :: test1\n#endif\n#ifndef T1\n      DO testrun = 1, NUM_TEST_CALLS\n        failed = failed .or. test1()\n      END DO\n      IF (failed) THEN\n        failcode = failcode + 2 ** 0\n        failed = .FALSE.\n      END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "async",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_copyout_finalize_with_len.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,data,executable-data,construct-independent,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc enter data create(c(1:LOOPCOUNT))\n        !$acc enter data create(c(1:LOOPCOUNT))\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) present(c(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        CALL acc_copyout_finalize(c(1), LOOPCOUNT*8)\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_copyout_with_len.F90": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        CALL acc_create(c(1:LOOPCOUNT))\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) present(c(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        CALL acc_copyout(c(1), LOOPCOUNT*8)\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:runtime,data,executable-data,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test2()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c\n        INTEGER :: errors = 0\n\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc enter data create(c(1:LOOPCOUNT))\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) present(c(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        CALL acc_copyout(c(1), LOOPCOUNT*8)\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2**1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_create.F90": {
                "num tests": 4,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors\n        errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        CALL acc_create(c(1:LOOPCOUNT))\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n          !$acc parallel present(c(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        CALL acc_copyout(c(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:runtime,data,executable-data,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test2()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c\n        INTEGER:: errors\n        errors = 0\n\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c= 0\n\n        CALL acc_create(c(1:LOOPCOUNT))\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n          !$acc parallel present(c(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        !$acc exit data copyout(c(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n!T3:runtime,compatibility-features,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test3()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER:: x\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c\n        INTEGER:: errors\n        errors = 0\n\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        CALL acc_pcreate(c(1:LOOPCOUNT))\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) present(c(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        !$acc exit data copyout(c(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test3 = .FALSE.\n        ELSE\n          test3 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T3\n        LOGICAL :: test3\n#endif\n#ifndef T3\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test3()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 2\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "compatibility-features",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "4": {
                        "content": "#ifndef T4\n!T4:runtime,compatibility-features,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test4()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER:: x\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c\n        INTEGER:: errors\n        errors = 0\n\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        CALL acc_present_or_create(c(1:LOOPCOUNT))\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) present(c(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        !$acc exit data copyout(c(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test4 = .FALSE.\n        ELSE\n          test4 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T4\n        LOGICAL :: test4\n#endif\n#ifndef T4\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test4()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 3\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "compatibility-features",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_create_async.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,data,executable-data,async,construct-independent,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, d, e, f !Data\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        CALL RANDOM_NUMBER(d)\n        CALL RANDOM_NUMBER(e)\n        f = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), d(1:LOOPCOUNT), e(1:LOOPCOUNT))\n          CALL acc_create_async(c(1:LOOPCOUNT), 1)\n          CALL acc_create_async(f(1:LOOPCOUNT), 2)\n          !$acc data present(c(1:LOOPCOUNT), f(1:LOOPCOUNT))\n            !$acc parallel async(1)\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                c(x) = a(x) + b(x)\n              END DO\n            !$acc end parallel\n            !$acc parallel async(2)\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                f(x) = d(x) + e(x)\n              END DO\n            !$acc end parallel\n            !$acc wait\n          !$acc end data\n        !$acc end data\n\n        !$acc exit data copyout(c(1:LOOPCOUNT), f(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n          IF (abs(f(x) - (d(x) + e(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "async",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_create_async_with_len.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,data,executable-data,async,construct-independent,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, d, e, f !Data\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        CALL RANDOM_NUMBER(d)\n        CALL RANDOM_NUMBER(e)\n        f = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), d(1:LOOPCOUNT), e(1:LOOPCOUNT))\n          CALL acc_create_async(c(1), LOOPCOUNT*8, 1)\n          CALL acc_create_async(f(1), LOOPCOUNT*8, 2)\n          !$acc data present(c(1:LOOPCOUNT), f(1:LOOPCOUNT))\n            !$acc parallel async(1)\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                c(x) = a(x) + b(x)\n              END DO\n            !$acc end parallel\n            !$acc parallel async(2)\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                f(x) = d(x) + e(x)\n              END DO\n            !$acc end parallel\n            !$acc wait\n          !$acc end data\n        !$acc end data\n\n        !$acc exit data copyout(c(1:LOOPCOUNT), f(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n          IF (abs(f(x) - (d(x) + e(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "async",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_create_with_len.F90": {
                "num tests": 4,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors\n        errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        CALL acc_create(c(1), LOOPCOUNT*8)\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n          !$acc parallel present(c(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        CALL acc_copyout(c(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:runtime,data,executable-data,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test2()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER:: x\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c\n        INTEGER :: errors\n        errors = 0\n\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c= 0\n\n        CALL acc_create(c(1), LOOPCOUNT*8)\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n          !$acc parallel present(c(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        !$acc exit data copyout(c(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n!T3:runtime,compatibility-features,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test3()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER:: x\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c\n        INTEGER:: errors\n        errors = 0\n\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        CALL acc_pcreate(c(1), LOOPCOUNT*8)\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) present(c(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        !$acc exit data copyout(c(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test3 = .FALSE.\n        ELSE\n          test4 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T3\n        LOGICAL :: test3\n#endif\n#ifndef T3\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test3()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 2\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "compatibility-features",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "4": {
                        "content": "#ifndef T4\n!T4:runtime,compatibility-features,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test4()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER:: x\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c\n        INTEGER:: errors\n        errors = 0\n\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        CALL acc_present_or_create(c(1), LOOPCOUNT*8)\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) present(c(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test4 = .FALSE.\n        ELSE\n          test4 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T4\n        LOGICAL :: test4\n#endif\n#ifndef T4\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test4()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 3\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "compatibility-features",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_delete.F90": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors\n        errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n\n        !$acc data copyout(c(1:LOOPCOUNT))\n          !$acc parallel present(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        CALL acc_delete(a(1:LOOPCOUNT))\n        CALL acc_delete(b(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:runtime,data,executable-data,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test2()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER:: x\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c\n        INTEGER:: errors\n        errors = 0\n\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        CALL acc_copyin(a(1:LOOPCOUNT))\n        CALL acc_copyin(b(1:LOOPCOUNT))\n\n        !$acc data copyout(c(1:LOOPCOUNT))\n          !$acc parallel present(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        CALL acc_delete(a(1:LOOPCOUNT))\n        CALL acc_delete(b(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2**1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_delete_async.F90": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,data,executable-data,async,construct-independent,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, d, e, f !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        CALL RANDOM_NUMBER(d)\n        CALL RANDOM_NUMBER(e)\n        f = 0\n\n        !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), d(1:LOOPCOUNT), e(1:LOOPCOUNT))\n\n        !$acc data present(a(1:LOOPCOUNT), b(1:LOOPCOUNT), d(1:LOOPCOUNT), e(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT), f(1:LOOPCOUNT))\n          !$acc parallel async(1)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n          !$acc parallel async(2)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              f(x) = d(x) + e(x)\n            END DO\n          !$acc end parallel\n          CALL acc_delete_async(a(1:LOOPCOUNT), 1)\n          CALL acc_delete_async(b(1:LOOPCOUNT), 1)\n          CALL acc_delete_async(d(1:LOOPCOUNT), 2)\n          CALL acc_delete_async(e(1:LOOPCOUNT), 2)\n          !$acc wait\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n          IF (abs(f(x) - (d(x) + e(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "async",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:runtime,data,executable-data,devonly,async,construct-independent,V:2.5-2.7\n      LOGICAL FUNCTION test2()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c!Data\n        INTEGER,DIMENSION(1) :: devtest\n        INTEGER :: errors = 0\n\n        devtest(1) = 1\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel present(devtest(1:1))\n          devtest(1) = 0\n        !$acc end parallel\n\n        IF (devtest(1) == 1) THEN\n          CALL RANDOM_NUMBER(a)\n          CALL RANDOM_NUMBER(b)\n          c = 0\n\n          !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n          !$acc data present(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n            !$acc parallel async(1)\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                c(x) = a(x) + b(x)\n              END DO\n            !$acc end parallel\n          !$acc end data\n          CALL acc_delete_async(c(1:LOOPCOUNT), 1)\n          !$acc enter data copyin(c(1:LOOPCOUNT)) async(1)\n          !$acc data present(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n            !$acc parallel async(1)\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                c(x) = c(x) + a(x) + b(x)\n              END DO\n            !$acc end parallel\n          !$acc end data\n          !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n\n          DO x = 1, LOOPCOUNT\n            IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2**1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "devonly",
                            "async",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_delete_async_with_len.F90": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,data,executable-data,async,construct-independent,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, d, e, f !Data\n        INTEGER :: errors = 0\n\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        CALL RANDOM_NUMBER(d)\n        CALL RANDOM_NUMBER(e)\n        f = 0\n\n        !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), d(1:LOOPCOUNT), e(1:LOOPCOUNT))\n\n        !$acc data present(a(1:LOOPCOUNT), b(1:LOOPCOUNT), d(1:LOOPCOUNT), e(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT), f(1:LOOPCOUNT))\n          !$acc parallel async(1)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n          !$acc parallel async(2)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              f(x) = d(x) + e(x)\n            END DO\n          !$acc end parallel\n          CALL acc_delete_async(a(1), LOOPCOUNT*8, 1)\n          CALL acc_delete_async(b(1), LOOPCOUNT*8, 1)\n          CALL acc_delete_async(d(1), LOOPCOUNT*8, 2)\n          CALL acc_delete_async(e(1), LOOPCOUNT*8, 2)\n          !$acc wait\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n          IF (abs(f(x) - (d(x) + e(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "async",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:runtime,data,executable-data,devonly,async,construct-independent,V:2.5-2.7\n      LOGICAL FUNCTION test2()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER,DIMENSION(1):: devtest\n        INTEGER :: errors = 0\n\n        devtest(1) = 1\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel present(devtest(1:1))\n          devtest(1) = 0\n        !$acc end parallel\n        IF (devtest(1) == 1) THEN\n          CALL RANDOM_NUMBER(a)\n          CALL RANDOM_NUMBER(b)\n          c = 0\n\n          !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n          !$acc data present(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n            !$acc parallel async(1)\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                c(x) = a(x) + b(x)\n              END DO\n            !$acc end parallel\n          !$acc end data\n          CALL acc_delete_async(c(1), LOOPCOUNT*8, 1)\n          !$acc enter data copyin(c(1:LOOPCOUNT)) async(1)\n          !$acc data present(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n            !$acc parallel async(1)\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                c(x) = c(x) + a(x) + b(x)\n              END DO\n            !$acc end parallel\n          !$acc end data\n          !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n\n          DO x = 1, LOOPCOUNT\n            IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2**1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "devonly",
                            "async",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_delete_finalize.F90": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,data,executable-data,construct-independent,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n        !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n\n        !$acc data copyout(c(1:LOOPCOUNT))\n          !$acc parallel present(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        CALL acc_delete_finalize(a(1:LOOPCOUNT))\n        CALL acc_delete_finalize(b(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:runtime,data,executable-data,construct-independent,V:2.5-2.7\n      LOGICAL FUNCTION test2()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        CALL acc_copyin(a(1:LOOPCOUNT))\n        CALL acc_copyin(a(1:LOOPCOUNT))\n        CALL acc_copyin(b(1:LOOPCOUNT))\n        CALL acc_copyin(b(1:LOOPCOUNT))\n\n        !$acc data copyout(c(1:LOOPCOUNT))\n          !$acc parallel present(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        CALL acc_delete_finalize(a(1:LOOPCOUNT))\n        CALL acc_delete_finalize(b(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2**1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_delete_finalize_async.F90": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,data,executable-data,async,construct-independent,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, d, e, f !Data\n        INTEGER :: errors\n        errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        CALL RANDOM_NUMBER(d)\n        CALL RANDOM_NUMBER(e)\n        f = 0\n\n        !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), d(1:LOOPCOUNT), e(1:LOOPCOUNT))\n        !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), d(1:LOOPCOUNT), e(1:LOOPCOUNT))\n\n        !$acc data present(a(1:LOOPCOUNT), b(1:LOOPCOUNT), d(1:LOOPCOUNT), e(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT), f(1:LOOPCOUNT))\n          !$acc parallel async(1)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n          !$acc parallel async(2)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              f(x) = d(x) + e(x)\n            END DO\n          !$acc end parallel\n          CALL acc_delete_finalize_async(a(1:LOOPCOUNT), 1)\n          CALL acc_delete_finalize_async(b(1:LOOPCOUNT), 1)\n          CALL acc_delete_finalize_async(d(1:LOOPCOUNT), 2)\n          CALL acc_delete_finalize_async(e(1:LOOPCOUNT), 2)\n          !$acc wait\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n          IF (abs(f(x) - (d(x) + e(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "async",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:runtime,data,executable-data,async,construct-independent,V:2.5-2.7\n      LOGICAL FUNCTION test2()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors\n        errors = 0\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n        !$acc enter data copyin(c(1:LOOPCOUNT))\n        !$acc data present(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n          !$acc parallel async(1)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        CALL acc_delete_finalize_async(c(1:LOOPCOUNT), 1)\n\n        !$acc enter data copyin(c(1:LOOPCOUNT)) async(1)\n        !$acc data present(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n          !$acc parallel async(1)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = c(x) + a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2**1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "async",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_delete_finalize_async_with_len.F90": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,data,executable-data,async,construct-independent,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, d, e, f !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        CALL RANDOM_NUMBER(d)\n        CALL RANDOM_NUMBER(e)\n        f = 0\n\n        !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), d(1:LOOPCOUNT), e(1:LOOPCOUNT))\n        !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), d(1:LOOPCOUNT), e(1:LOOPCOUNT))\n\n        !$acc data present(a(1:LOOPCOUNT), b(1:LOOPCOUNT), d(1:LOOPCOUNT), e(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT), f(1:LOOPCOUNT))\n          !$acc parallel async(1)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n          !$acc parallel async(2)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              f(x) = d(x) + e(x)\n            END DO\n          !$acc end parallel\n          CALL acc_delete_finalize_async(a(1), LOOPCOUNT*8, 1)\n          CALL acc_delete_finalize_async(b(1), LOOPCOUNT*8, 1)\n          CALL acc_delete_finalize_async(d(1), LOOPCOUNT*8, 2)\n          CALL acc_delete_finalize_async(e(1), LOOPCOUNT*8, 2)\n          !$acc wait\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n          IF (abs(f(x) - (d(x) + e(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "async",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:runtime,data,executable-data,async,construct-independent,V:2.5-2.7\n      LOGICAL FUNCTION test2()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n        !$acc enter data copyin(c(1:LOOPCOUNT))\n        !$acc data present(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n          !$acc parallel async(1)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        CALL acc_delete_finalize_async(c(1), LOOPCOUNT*8, 1)\n\n        !$acc enter data copyin(c(1:LOOPCOUNT)) async(1)\n        !$acc data present(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n          !$acc parallel async(1)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = c(x) + a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2**1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "async",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_delete_finalize_with_len.F90": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,data,executable-data,construct-independent,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors\n        errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n        !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n\n        !$acc data copyout(c(1:LOOPCOUNT))\n          !$acc parallel present(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        CALL acc_delete_finalize(a(1), LOOPCOUNT*8)\n        CALL acc_delete_finalize(b(1), LOOPCOUNT*8)\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:runtime,data,executable-data,construct-independent,V:2.5-2.7\n      LOGICAL FUNCTION test2()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors\n        errors = 0\n\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        CALL acc_copyin(a(1:LOOPCOUNT))\n        CALL acc_copyin(a(1:LOOPCOUNT))\n        CALL acc_copyin(b(1:LOOPCOUNT))\n        CALL acc_copyin(b(1:LOOPCOUNT))\n\n        !$acc data copyout(c(1:LOOPCOUNT))\n          !$acc parallel present(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        CALL acc_delete_finalize(a(1), LOOPCOUNT*8)\n        CALL acc_delete_finalize(b(1), LOOPCOUNT*8)\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2**1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_delete_with_len.F90": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors\n        errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n\n        !$acc data copyout(c(1:LOOPCOUNT))\n          !$acc parallel present(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        CALL acc_delete(a(1), LOOPCOUNT*8)\n        CALL acc_delete(b(1), LOOPCOUNT*8)\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:runtime,data,executable-data,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test2()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors\n        errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        CALL acc_copyin(a(1:LOOPCOUNT))\n        CALL acc_copyin(b(1:LOOPCOUNT))\n\n        !$acc data copyout(c(1:LOOPCOUNT))\n          !$acc parallel present(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        CALL acc_delete(a(1), LOOPCOUNT*8)\n        CALL acc_delete(b(1), LOOPCOUNT*8)\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2**1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_get_default_async.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,async,construct-independent,internal-control-values,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, holder !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors\n        INTEGER :: acc_get_default_async\n        errors = 0\n        holder = acc_get_default_async()\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n          !$acc parallel async\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n          !$acc wait(holder)\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (acc_get_default_async() .lt. 0) THEN\n          errors = errors + 1\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "async",
                            "construct-independent",
                            "internal-control-values"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_get_device_num.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,construct-independent,internal-control-values,set,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        INTEGER :: errors\n        errors = 0\n\n        IF (acc_get_device_type() .ne. acc_device_none) THEN\n          DO x = 1, acc_get_num_devices(acc_get_device_type())\n            CALL acc_set_device_num(x, acc_get_device_type())\n            IF (acc_get_device_num(acc_get_device_type()) .ne. x) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "construct-independent",
                            "internal-control-values",
                            "set"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_get_num_devices.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,construct-independent,internal-control-values,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: errors\n        errors = 0\n\n        IF (acc_get_device_type() .ne. acc_device_none) THEN\n          IF (acc_get_num_devices(acc_get_device_type()) .eq. 0) THEN\n            errors = errors + 1\n          END IF\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "construct-independent",
                            "internal-control-values"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_get_property.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,construct-independent,internal-control-values,nonvalidating,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: output\n        IF (acc_get_device_type() .ne. acc_device_none) THEN\n          output = acc_get_property(acc_get_device_num(acc_get_device_type()), acc_get_device_type(), acc_property_memory)\n          output = acc_get_property(acc_get_device_num(acc_get_device_type()), acc_get_device_type(), acc_property_free_memory)\n        END IF\n        test1 = .FALSE.\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "construct-independent",
                            "internal-control-values",
                            "nonvalidating"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_get_property_string.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,construct-independent,internal-control-values,nonvalidating,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        CHARACTER(len=:),ALLOCATABLE :: output1\n        CHARACTER(len=:),ALLOCATABLE :: output2\n        CHARACTER(len=:),ALLOCATABLE :: output3\n        IF (acc_get_device_type() .ne. acc_device_none) THEN\n          CALL acc_get_property_string(acc_get_device_num(acc_get_device_type()), acc_get_device_type, acc_property_name, output1)\n          CALL acc_get_property_string(acc_get_device_num(acc_get_device_type()), acc_get_device_type, acc_property_vendor, output2)\n          CALL acc_get_property_string(acc_get_device_num(acc_get_device_type()), acc_get_device_type, acc_property_driver, output3)\n        END IF\n        test1 = .FALSE.\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "construct-independent",
                            "internal-control-values",
                            "nonvalidating"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_init.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,construct-independent,internal-control-values,init,nonvalidating,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        IF (acc_get_device_type() .ne. acc_device_none) THEN\n          CALL acc_init(acc_get_device_type())\n        END IF\n\n        test1 = .FALSE.\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "construct-independent",
                            "internal-control-values",
                            "init",
                            "nonvalidating"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_is_present.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,devonly,construct-independent,present,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a !Data\n        INTEGER,DIMENSION(1):: devtest\n        INTEGER :: errors\n        errors = 0\n\n        devtest(1) = 1\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel present(devtest(1:1))\n          devtest(1) = 0\n        !$acc end parallel\n\n        !$acc enter data create(a(1:LOOPCOUNT))\n        IF (acc_is_present(a(1:LOOPCOUNT)) .eqv. .FALSE.) THEN\n          errors = errors + 1\n          PRINT*, 1\n        END IF\n        !$acc exit data delete(a(1:LOOPCOUNT))\n\n        IF (devtest(1) .eq. 1) THEN\n          IF (acc_is_present(a(1:LOOPCOUNT)) .eqv. .TRUE.) THEN\n            errors = errors + 1\n            PRINT*, 2\n          END IF\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "devonly",
                            "construct-independent",
                            "present"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_is_present_with_len.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,devonly,construct-independent,present,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a !Data\n        INTEGER,DIMENSION(1):: devtest\n        INTEGER :: errors = 0\n\n        devtest(1) = 1\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel present(devtest(1:1))\n          devtest(1) = 0\n        !$acc end parallel\n\n        !$acc enter data create(a(1:LOOPCOUNT))\n        IF (acc_is_present(a(1), LOOPCOUNT*8) .eqv. .FALSE.) THEN\n          errors = errors + 1\n        END IF\n        !$acc exit data delete(a(1:LOOPCOUNT))\n\n        IF (devtest(1) .eq. 1) THEN\n          IF (acc_is_present(a(1), LOOPCOUNT*8) .eqv. .TRUE.) THEN\n            errors = errors + 1\n          END IF\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "devonly",
                            "construct-independent",
                            "present"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_on_device.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,construct-independent,internal-control-values,present,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: errors\n        INTEGER :: device_type\n        errors = 0\n        device_type = acc_get_device_type()\n        IF (device_type .ne. acc_device_none) THEN\n          !$acc parallel\n            IF (acc_on_device(device_type) .eqv. .FALSE.) THEN\n              errors = errors + 1\n            END IF\n          !$acc end parallel\n        ELSE\n          !$acc parallel\n            IF (acc_on_device(acc_device_host) .eqv. .FALSE.) THEN\n              errors = errors + 1\n            END IF\n          !$acc end parallel\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "construct-independent",
                            "internal-control-values",
                            "present"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_set_default_async.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,async,construct-independent,internal-control-values,set,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, a_host, b_host !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        a_host = a\n        b_host = b\n        c = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n          CALL acc_set_default_async(1)\n          !$acc parallel async\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              a(x) = a(x) * a(x)\n            END DO\n          !$acc end parallel\n          CALL acc_set_default_async(2)\n          !$acc parallel async\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              b(x) = b(x) * b(x)\n            END DO\n          !$acc end parallel\n          !$acc parallel async(1) wait(2)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n          !$acc wait(1)\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a_host(x) * a_host(x) + b_host(x) * b_host(x))) .gt. 4 * PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "async",
                            "construct-independent",
                            "internal-control-values",
                            "set"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_set_device_num.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,construct-independent,internal-control-values,set,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(:, :),ALLOCATABLE :: host_copy\n        INTEGER :: errors = 0\n\n        CALL RANDOM_SEED\n        ALLOCATE(host_copy(acc_get_num_devices(acc_get_device_type()), LOOPCOUNT))\n\n        IF (acc_get_device_type() .ne. acc_device_none) THEN\n          !host_copy(acc_get_num_devices(acc_get_device_type()), LOOPCOUNT)\n          DO x = 1, acc_get_num_devices(acc_get_device_type())\n            DO y = 1, LOOPCOUNT\n              CALL RANDOM_NUMBER(a)\n              host_copy(x) = a\n            END DO\n            acc_set_device_num(x, acc_get_device_type())\n            !$acc enter data copyin(a(1:LOOPCOUNT))\n          END DO\n\n          DO x = 1, acc_get_num_devices(acc_get_device_type)\n            acc_set_device_num(x, acc_get_device_type())\n            !$acc data present(a(1:LOOPCOUNT))\n              !$acc parallel\n                !$acc loop\n                DO y = 1, LOOPCOUNT\n                  a(y) = a(y) + 1\n                END DO\n              !$acc end parallel\n            !$acc end data\n          END DO\n\n          DO x = 1, acc_get_num_devices(acc_get_device_type())\n            acc_set_device_num(x, acc_get_device_type())\n            !$acc exit data copyout(a(1:LOOPCOUNT))\n            DO y = 1, LOOPCOUNT\n              IF (abs(a(y) - (host_copy(x, y) + 1)) .gt. PRECISION) THEN\n                errors = errors + 1\n              END IF\n            END DO\n          END DO\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "construct-independent",
                            "internal-control-values",
                            "set"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_set_device_type.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,construct-independent,internal-control-values,set,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.fh\"\n        INTEGER :: errors = 0\n        INTEGER :: device_type\n\n        device_type = acc_get_device_type()\n        CALL acc_set_device_type(device_type)\n        IF (acc_get_device_type() .ne. device_type) THEN\n          errors = errors + 1\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "construct-independent",
                            "internal-control-values",
                            "set"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_shutdown.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,construct-independent,internal-control-values,shutdown,nonvalidating,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        IF (acc_get_device_type() .ne. acc_device_none) THEN\n          CALL acc_shutdown(acc_get_device_type())\n        END IF\n\n        test1 = .FALSE.\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "construct-independent",
                            "internal-control-values",
                            "shutdown",
                            "nonvalidating"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_update_device.F90": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,data,executable-data,construct-independent,update,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc data copyout(c(1:LOOPCOUNT)) create(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n          CALL acc_update_device(a(1:LOOPCOUNT))\n          CALL acc_update_device(b(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent",
                            "update"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:runtime,data,executable-data,devonly,construct-independent,update,V:2.0-2.7\n      LOGICAL FUNCTION test2()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER,DIMENSION(1):: devtest\n        INTEGER :: errors = 0\n\n        devtest(1) = 1\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel present(devtest(1:1))\n          devtest(1) = 0\n        !$acc end parallel\n\n        IF (devtest(1) .eq. 1) THEN\n          CALL RANDOM_NUMBER(a)\n          CALL RANDOM_NUMBER(b)\n          c = 0\n\n          !$acc data copyout(c(1:LOOPCOUNT)) copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            !$acc parallel\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                a(x) = a(x) * a(x)\n              END DO\n            !$acc end parallel\n            CALL acc_update_device(a(1:LOOPCOUNT))\n            !$acc parallel\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                b(x) = b(x) * b(x)\n              END DO\n            !$acc end parallel\n            CALL acc_update_device(b(1:LOOPCOUNT))\n            !$acc parallel\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                c(x) = a(x) + b(x)\n              END DO\n            !$acc end parallel\n          !$acc end data\n\n          DO x = 1, LOOPCOUNT\n            IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "devonly",
                            "construct-independent",
                            "update"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_update_device_async.F90": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,data,executable-data,async,construct-independent,update,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, a_host, b_host !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        a_host = a\n        b_host = b\n\n        !$acc data create(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n          CALL acc_update_device_async(a(1:LOOPCOUNT), 1)\n          !$acc parallel async(1)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              a(x) = a(x) * a(x)\n            END DO\n          !$acc end parallel\n          CALL acc_update_device_async(b(1:LOOPCOUNT), 2)\n          !$acc parallel async(2)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              b(x) = b(x) * b(x)\n            END DO\n          !$acc end parallel\n          !$acc parallel async(1) wait(2)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n          !$acc wait(1)\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - ((a_host(x) * a_host(x)) + (b_host(x) * b_host(x)))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "async",
                            "construct-independent",
                            "update"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:runtime,data,executable-data,devonly,async,construct-independent,update,V:2.5-2.7\n      LOGICAL FUNCTION test2()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER,DIMENSION(1):: devtest\n        INTEGER :: errors = 0\n\n        devtest(1) = 1\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel present(devtest(1:1))\n          devtest(1) = 0\n        !$acc end parallel\n        IF (devtest(1) .eq. 1) THEN\n          CALL RANDOM_NUMBER(a)\n          CALL RANDOM_NUMBER(b)\n          c = 0\n\n          !$acc data copyout(c(1:LOOPCOUNT)) copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            !$acc parallel async(1)\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                a(x) = a(x) * a(x)\n              END DO\n            !$acc end parallel\n            CALL acc_update_device_async(a(1:LOOPCOUNT), 1)\n            !$acc parallel async(2)\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                b(x) = b(x) * b(x)\n              END DO\n            !$acc end parallel\n            CALL acc_update_device_async(b(1:LOOPCOUNT), 2)\n            !$acc parallel async(1) wait(2)\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                c(x) = a(x) + b(x)\n              END DO\n            !$acc end parallel\n            !$acc wait(1)\n          !$acc end data\n\n          DO x = 1, LOOPCOUNT\n            IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "devonly",
                            "async",
                            "construct-independent",
                            "update"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_update_device_async_with_len.F90": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,data,executable-data,async,construct-independent,update,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, a_host, b_host !Data\n        INTEGER :: errors\n        errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        a_host = a\n        b_host = b\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n          CALL acc_update_device_async(a(1), LOOPCOUNT*8, 1)\n          !$acc parallel async(1)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              a(x) = a(x) * a(x)\n            END DO\n          !$acc end parallel\n          CALL acc_update_device_async(b(1), LOOPCOUNT*8, 2)\n          !$acc parallel async(2)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              b(x) = b(x) * b(x)\n            END DO\n          !$acc end parallel\n          !$acc parallel async(1) wait(2)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n          !$acc wait(1)\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - ((a_host(x) * a_host(x)) + (b_host(x) * b_host(x)))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "async",
                            "construct-independent",
                            "update"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:runtime,data,executable-data,devonly,async,construct-independent,update,V:2.5-2.7\n      LOGICAL FUNCTION test2()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER,DIMENSION(1):: devtest\n        INTEGER :: errors\n        errors = 0\n\n        devtest(1) = 1\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel present(devtest(1:1))\n          devtest(1) = 0\n        !$acc end parallel\n        IF (devtest(1) .eq. 1) THEN\n          CALL RANDOM_NUMBER(a)\n          CALL RANDOM_NUMBER(b)\n          c = 0\n\n          !$acc data copyout(c(1:LOOPCOUNT)) copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            !$acc parallel async(1)\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                a(x) = a(x) * a(x)\n              END DO\n            !$acc end parallel\n            CALL acc_update_device_async(a(1), LOOPCOUNT*8, 1)\n            !$acc parallel async(2)\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                b(x) = b(x) * b(x)\n              END DO\n            !$acc end parallel\n            CALL acc_update_device_async(b(1), LOOPCOUNT*8, 2)\n            !$acc parallel async(1), wait(2)\n              !$acc loop\n               DO x = 1, LOOPCOUNT\n                 c(x) = a(x) + b(x)\n               END DO\n            !$acc end parallel\n            !$acc wait(1)\n          !$acc end data\n\n          DO x = 1, LOOPCOUNT\n            IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "devonly",
                            "async",
                            "construct-independent",
                            "update"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_update_device_with_len.F90": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,data,executable-data,devonly,construct-independent,update,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER,DIMENSION(1):: devtest\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n\n        devtest(1) = 1\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel\n          devtest(1) = 0\n        !$acc end parallel\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc data copyout(c(1:LOOPCOUNT)) create(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n          CALL acc_update_device(a(1), LOOPCOUNT*8)\n          CALL acc_update_device(b(1), LOOPCOUNT*8)\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "devonly",
                            "construct-independent",
                            "update"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:runtime,data,executable-data,devonly,construct-independent,update,V:2.0-2.7\n      LOGICAL FUNCTION test2()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER,DIMENSION(1):: devtest\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n\n        devtest(1) = 1\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel\n          devtest(1) = 0\n        !$acc end parallel\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        IF (devtest(1) .eq. 1) THEN\n          CALL RANDOM_NUMBER(a)\n          CALL RANDOM_NUMBER(b)\n          c = 0\n\n          !$acc data copyout(c(1:LOOPCOUNT)) copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            !$acc parallel\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                a(x) = a(x) * a(x)\n              END DO\n            !$acc end parallel\n            CALL acc_update_device(a(1), LOOPCOUNT*8)\n            !$acc parallel\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                b(x) = b(x) * b(x)\n              END DO\n            !$acc end parallel\n            CALL acc_update_device(b(1), LOOPCOUNT*8)\n            !$acc parallel\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                c(x) = a(x) + b(x)\n              END DO\n            !$acc end parallel\n          !$acc end data\n\n          DO x = 1, LOOPCOUNT\n            IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "devonly",
                            "construct-independent",
                            "update"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_update_self.F90": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,data,executable-data,construct-independent,update,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) create(c(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n          CALL acc_update_self(c(1:LOOPCOUNT))\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent",
                            "update"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:runtime,data,executable-data,construct-independent,update,V:2.0-2.7\n      LOGICAL FUNCTION test2()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc data copyout(c(1:LOOPCOUNT)) copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              a(x) = a(x) * a(x)\n            END DO\n          !$acc end parallel\n          CALL acc_update_self(a(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              b(x) = b(x) * b(x)\n            END DO\n          !$acc end parallel\n          CALL acc_update_self(b(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent",
                            "update"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_update_self_async.F90": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,data,executable-data,devonly,async,construct-independent,update,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, d !Data\n        INTEGER,DIMENSION(1):: devtest\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n\n        devtest(1) = 1\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel\n          devtest(1) = 0\n        !$acc end parallel\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        d = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) create(c(1:LOOPCOUNT), d(1:LOOPCOUNT))\n          !$acc parallel async(1)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n          !$acc parallel async(2)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              d(x) = a(x) * b(x)\n            END DO\n          !$acc end parallel\n          CALL acc_update_self_async(c(1:LOOPCOUNT), 1)\n          CALL acc_update_self_async(d(1:LOOPCOUNT), 2)\n          !$acc wait\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n          IF (abs(d(x) - (a(x) * b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "devonly",
                            "async",
                            "construct-independent",
                            "update"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:runtime,data,executable-data,devonly,async,construct-independent,update,V:2.5-2.7\n      LOGICAL FUNCTION test2()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, d !Data\n        INTEGER,DIMENSION(1):: devtest\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n\n        devtest(1) = 1\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel\n          devtest(1) = 0\n        !$acc end parallel\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        IF (devtest(1) .eq. 1) THEN\n          CALL RANDOM_NUMBER(a)\n          CALL RANDOM_NUMBER(b)\n          c = 0\n\n          !$acc data copyout(c(1:LOOPCOUNT)) copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            !$acc parallel async(1)\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                a(x) = a(x) * a(x)\n              END DO\n            !$acc end parallel\n            CALL acc_update_self_async(a(1:LOOPCOUNT), 1)\n            !$acc parallel async(2)\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                b(x) = b(x) * b(x)\n              END DO\n            !$acc end parallel\n            CALL acc_update_self_async(b(1:LOOPCOUNT), 2)\n            !$acc parallel async(1)\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                a(x) = a(x) + 1\n              END DO\n            !$acc end parallel\n            !$acc parallel async(2)\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                b(x) = b(x) + 1\n              END DO\n            !$acc end parallel\n            !$acc parallel async(1) wait(2)\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                c(x) = a(x) * b(x)\n              END DO\n            !$acc end parallel\n          !$acc end data\n\n          DO x = 1, LOOPCOUNT\n            IF (abs(c(x) - ((a(x) + 1) * (b(x) + 1))) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "devonly",
                            "async",
                            "construct-independent",
                            "update"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_update_self_async_with_len.F90": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,data,executable-data,devonly,async,construct-independent,update,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, d !Data\n        INTEGER,DIMENSION(1):: devtest\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n\n        devtest(1) = 1\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel present(devtest(1:1))\n          devtest(1) = 0\n        !$acc end parallel\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        d = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) create(c(1:LOOPCOUNT), d(1:LOOPCOUNT))\n          !$acc parallel async(1)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n          !$acc parallel async(2)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              d(x) = a(x) * b(x)\n            END DO\n          !$acc end parallel\n          CALL acc_update_self_async(c(1), LOOPCOUNT*8, 1)\n          CALL acc_update_self_async(d(1), LOOPCOUNT*8, 2)\n          !$acc wait\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n          IF (abs(d(x) - (a(x) * b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "devonly",
                            "async",
                            "construct-independent",
                            "update"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:runtime,data,executable-data,devonly,async,construct-independent,update,V:2.5-2.7\n      LOGICAL FUNCTION test2()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, d !Data\n        INTEGER,DIMENSION(1):: devtest\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n\n        devtest(1) = 1\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel present(devtest(1:1))\n          devtest(1) = 0\n        !$acc end parallel\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        IF (devtest(1) .eq. 1) THEN\n          CALL RANDOM_NUMBER(a)\n          CALL RANDOM_NUMBER(b)\n          c = 0\n\n          !$acc data copyout(c(1:LOOPCOUNT)) copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            !$acc parallel async(1)\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                a(x) = a(x) * a(x)\n              END DO\n            !$acc end parallel\n            CALL acc_update_self_async(a(1), LOOPCOUNT*8, 1)\n            !$acc parallel async(2)\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                b(x) = b(x) * b(x)\n              END DO\n            !$acc end parallel\n            CALL acc_update_self_async(b(1), LOOPCOUNT*8, 2)\n            !$acc parallel async(1)\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                a(x) = a(x) + 1\n              END DO\n            !$acc end parallel\n            !$acc parallel async(2)\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                b(x) = b(x) + 1\n              END DO\n            !$acc end parallel\n            !$acc parallel async(1) wait(2)\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                c(x) = a(x) * b(x)\n              END DO\n            !$acc end parallel\n            !$acc wait(1)\n          !$acc end data\n\n          DO x = 1, LOOPCOUNT\n            IF (abs(c(x) - ((a(x) + 1) * (b(x) + 1))) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "devonly",
                            "async",
                            "construct-independent",
                            "update"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_update_self_with_len.F90": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,data,executable-data,construct-independent,update,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) create(c(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n          CALL acc_update_self(c(1), LOOPCOUNT*8)\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent",
                            "update"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:runtime,data,executable-data,construct-independent,update,V:2.0-2.7\n      LOGICAL FUNCTION test2()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc data copyout(c(1:LOOPCOUNT)) copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              a(x) = a(x) * a(x)\n            END DO\n          !$acc end parallel\n          CALL acc_update_self(a(1), LOOPCOUNT*8)\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              b(x) = b(x) * b(x)\n            END DO\n          !$acc end parallel\n          CALL acc_update_self(b(1), LOOPCOUNT*8)\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent",
                            "update"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_wait.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,async,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, d, e !Data\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        CALL RANDOM_NUMBER(d)\n        e = 0\n\n        !$acc enter data  copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) create(c(1:LOOPCOUNT)) async(1)\n        !$acc enter data copyin(d(1:LOOPCOUNT)) create(e(1:LOOPCOUNT)) async(2)\n        !$acc parallel present(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT)) async(1)\n          !$acc loop\n          DO x = 1, LOOPCOUNT\n            c(x) = a(x) + b(x)\n          END DO\n        !$acc end parallel\n        !$acc parallel present(c(1:LOOPCOUNT), d(1:LOOPCOUNT), e(1:LOOPCOUNT)) async(1) wait(2)\n          !$acc loop\n          DO x = 1, LOOPCOUNT\n            e(x) = c(x) + d(x)\n          END DO\n        !$acc end parallel\n        !$acc exit data copyout(e(1:LOOPCOUNT)) async(1)\n\n        CALL acc_wait(1)\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(e(x) - (a(x) + b(x) + d(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT), d(1:LOOPCOUNT))\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "async",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_wait_all.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,async,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, d, a_host, b_host, c_host !Data\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        CALL RANDOM_NUMBER(c)\n        d = 0\n        a_host = a\n        b_host = b\n        c_host = c\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT)) copyout(d(1:LOOPCOUNT))\n          !$acc parallel async(1)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              a(x) = a(x) * a(x)\n            END DO\n          !$acc end parallel\n          !$acc parallel async(2)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              b(x) = b(x) * b(x)\n            END DO\n          !$acc end parallel\n          !$acc parallel async(3)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = c(x) * c(x)\n            END DO\n          !$acc end parallel\n          CALL acc_wait_all()\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              d(x) = a(x) + b(x) + c(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(d(x) - ((a_host(x) * a_host(x)) + (b_host(x) * b_host(x)) + (c_host(x) * c_host(x)))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "async",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_wait_all_async.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,async,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, d, e, f, g, h, i, j, k !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: a_host, d_host, g_host\n        REAL(8) :: RAND\n        REAL(8) :: temp\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        CALL RANDOM_NUMBER(d)\n        CALL RANDOM_NUMBER(e)\n        f = 0\n        CALL RANDOM_NUMBER(g)\n        CALL RANDOM_NUMBER(h)\n        i = 0\n        j = 0\n        k = 0\n        a_host = a\n        d_host = d\n        g_host = g\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), d(1:LOOPCOUNT), e(1:LOOPCOUNT), g(1:LOOPCOUNT), h(1:LOOPCOUNT)) create(c(1:LOOPCOUNT), f(1:LOOPCOUNT), i(1:LOOPCOUNT), j(1:LOOPCOUNT)) copyout(k(1:LOOPCOUNT))\n          !$acc parallel async(1)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n          !$acc parallel async(2)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              f(x) = d(x) + e(x)\n            END DO\n          !$acc end parallel\n          !$acc parallel async(3)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              i(x) = g(x) + h(x)\n            END DO\n          !$acc end parallel\n          CALL acc_wait_all_async(4)\n          !$acc parallel async(4)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              j(x) = c(x) + f(x) + i(x)\n            END DO\n          !$acc end parallel\n          !$acc parallel async(1)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              a(x) = b(x) * c(x)\n            END DO\n          !$acc end parallel\n          !$acc parallel async(2)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              d(x) = e(x) * f(x)\n            END DO\n          !$acc end parallel\n          !$acc parallel async(3)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              g(x) = h(x) * i(x)\n            END DO\n          !$acc end parallel\n          CALL acc_wait_all_async(4)\n          !$acc parallel async(4)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              k(x) = j(x) + a(x) + d(x) + g(x)\n            END DO\n          !$acc end parallel\n          !$acc wait(4)\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          temp = a_host(x) + b(x) + d_host(x) + e(x) + g_host(x) + h(x)\n          temp = temp + (b(x) * (a_host(x) + b(x))) + (e(x) * (d_host(x) + e(x))) + (h(x) * (g_host(x) + h(x)))\n          IF (abs(k(x) - temp) .gt. PRECISION * 10) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "async",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_wait_async.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,async,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, d, e, f, g, h, i !Data\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        CALL RANDOM_NUMBER(d)\n        CALL RANDOM_NUMBER(e)\n        f = 0\n        CALL RANDOM_NUMBER(g)\n        h = 0\n        i = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), d(1:LOOPCOUNT), e(1:LOOPCOUNT), g(1:LOOPCOUNT)) create(c(1:LOOPCOUNT), f(1:LOOPCOUNT), h(1:LOOPCOUNT)) copyout(i(1:LOOPCOUNT))\n          !$acc parallel async(1)\n            !$acc loop\n              DO x = 1, LOOPCOUNT\n                c(x) = a(x) + b(x)\n              END DO\n          !$acc end parallel\n          CALL acc_wait_async(1, 2)\n          !$acc parallel async(2)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              h(x) = c(x) + g(x)\n            END DO\n          !$acc end parallel\n          !$acc parallel async(1)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              f(x) = d(x) + e(x)\n            END DO\n          !$acc end parallel\n          CALL acc_wait_async(1, 2)\n          !$acc parallel async(2)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              i(x) = h(x) + f(x)\n            END DO\n          !$acc end parallel\n          !$acc wait(2)\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(i(x) - (a(x) + b(x) + g(x) + d(x) + e(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "async",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_assign_expr_and_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a, b !Data\n        LOGICAL,DIMENSION(10):: passed_a, passed_b\n        LOGICAL IS_POSSIBLE\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n        LOGICAL :: init\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) < .933) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT,1:10))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic capture\n                  b(x, y) = totals(x)\n                  totals(x) = a(x, y) .AND. totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .AND. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed_a(y) = a(x, y)\n            passed_b(y) = b(x, y)\n          END DO\n          init = .FALSE.\n          IF (.FALSE. .eqv. IS_POSSIBLE(a(x, 1:10), b(x, 1:10), 10, .FALSE.)) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_assign_expr_divided_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: b\n        REAL(8),DIMENSION(LOOPCOUNT):: totals\n        REAL(8),DIMENSION(10):: passed\n        REAL(8),DIMENSION(10):: passed_b\n        REAL(8) :: holder\n        INTEGER :: errors = 0\n        LOGICAL IS_POSSIBLE\n        LOGICAL IS_POSSIBLE_2\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 1\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT,1:10))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic capture\n                  b(x, y) = totals(x)\n                  totals(x) = a(x, y) / totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed(y) = a(x, y)\n          END DO\n          holder = 1\n          IF (IS_POSSIBLE(passed, totals(x), 10, holder) .eqv. .FALSE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed(y) = a(x, y)\n            passed_b(y) = b(x, y)\n          END DO\n          holder = 1\n          IF (IS_POSSIBLE_2(passed, passed_b, 10, holder) .eqv. .FALSE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_assign_expr_eqv_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a, b !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        LOGICAL,DIMENSION(10):: passed_a, passed_b\n        LOGICAL:: init\n        INTEGER :: errors = 0\n        LOGICAL IS_POSSIBLE\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) > .5) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT,1:10))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic capture\n                  b(x, y) = totals(x)\n                  totals(x) = a(x, y) .EQV. totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .EQV. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed_a(y) = a(x, y)\n            passed_b(y) = b(x, y)\n          END DO\n          init = .FALSE.\n          IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .EQV. .FALSE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_assign_expr_minus_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        LOGICAL IS_POSSIBLE\n        LOGICAL IS_POSSIBLE_2\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals\n        REAL(8),DIMENSION(10):: passed_a, passed_b\n        REAL(8):: init\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT, 1:10))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic capture\n                  b(x, y) = totals(x)\n                  totals(x) = a(x, y) - totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed_a(y) = a(x, y)\n          END DO\n          IF (IS_POSSIBLE(passed_a, totals(x), 10, 0) .eqv. .FALSE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed_a(y) = a(x, y)\n            passed_b(y) = b(x, y)\n          END DO\n          init = 0\n          IF (IS_POSSIBLE_2(passed_a, passed_b, 10, init) .EQV. .FALSE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_assign_expr_neqv_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a, b !Data\n        LOGICAL,DIMENSION(10):: passed_a, passed_b\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        LOGICAL IS_POSSIBLE\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) > .5) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT,1:10))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic capture\n                  b(x, y) = totals(x)\n                  totals(x) = a(x, y) .NEQV. totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .NEQV. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed_a(y) = a(x, y)\n            passed_b(y) = b(x, y)\n          END DO\n          IF (IS_POSSIBLE(passed_a, passed_b, 10, .FALSE.) .eqv. .FALSE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_assign_expr_or_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a, b !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        LOGICAL,DIMENSION(10):: passed_a, passed_b\n        LOGICAL IS_POSSIBLE\n        LOGICAL:: init\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) > .933) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT,1:10))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic capture\n                  b(x, y) = totals(x)\n                  totals(x) = a(x, y) .OR. totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .OR. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed_a(y) = a(x, y)\n            passed_b(y) = b(x, y)\n          END DO\n          init = .FALSE.\n          IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .eqv. .FALSE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_assign_expr_plus_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        REAL(8),DIMENSION(10):: passed_a, passed_b\n        REAL(8):: init\n        LOGICAL IS_POSSIBLE\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT,1:10))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic capture\n                  b(x, y) = totals(x)\n                  totals(x) = a(x, y) + totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) + a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed_a(y) = a(x, y)\n            passed_b(y) = b(x, y)\n          END DO\n          init = 0\n          IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .eqv. .FALSE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_assign_expr_times_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        REAL(8),DIMENSION(10):: passed_a, passed_b\n        REAL(8):: init\n        LOGICAL IS_POSSIBLE\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 1\n        totals_comparison = 1\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT,1:10))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic capture\n                  b(x, y) = totals(x)\n                  totals(x) = a(x, y) * totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) * a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed_a(y) = a(x, y)\n            passed_b(y) = b(x, y)\n          END DO\n          init = 1\n          IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .eqv. .TRUE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_assign_iand_expr_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y, z !Iterators\n        INTEGER,DIMENSION(LOOPCOUNT, 10):: a, b !Data\n        REAL(8),DIMENSION(LOOPCOUNT, 10, 8):: randoms\n        INTEGER,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER,DIMENSION(10):: passed_a, passed_b\n        INTEGER:: init\n        LOGICAL IS_POSSIBLE\n        INTEGER :: errors = 0\n\n        CALL RANDOM_NUMBER(randoms)\n        a = 0\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            DO z = 1, 8\n              IF (randoms(x, y, z) .lt. .933) THEN\n                a(x, y) = a(x, y) + ISHFT(1, z - 1)\n              END IF\n            END DO\n          END DO\n        END DO\n        totals = 0\n        totals_comparison = 0\n        DO x = 1, LOOPCOUNT\n          DO y = 0, 7\n            totals(x) = totals(x) + ISHFT(1, y)\n            totals_comparison(x) = totals_comparison(x) + ISHFT(1, y)\n          END DO\n        END DO\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT, 1:10))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic capture\n                  b(x, y) = totals(x)\n                  totals(x) = iand(a(x, y), totals(x))\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = iand(totals_comparison(x), a(x, y))\n          END DO\n        END DO\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed_a(y) = a(x, y)\n            passed_b(y) = b(x, y)\n          END DO\n          init = 0\n          DO y = 0, 7\n            init = init + ISHFT(1, y)\n          END DO\n          IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .eqv. .FALSE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_assign_iand_x_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: x, y, z !Iterators\n  INTEGER,DIMENSION(LOOPCOUNT, 10):: a, b !Data\n  REAL(8),DIMENSION(LOOPCOUNT, 10, 8):: randoms\n  INTEGER,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n  INTEGER,DIMENSION(10):: passed_a, passed_b\n  INTEGER:: init\n  LOGICAL IS_POSSIBLE\n  INTEGER :: errors = 0\n\n  !Initilization\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(randoms)\n  a = 0\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      DO z = 1, 8\n        IF (randoms(x, y, z) .lt. .933) THEN\n          a(x, y) = a(x, y) + ISHFT(1, z - 1)\n        END IF\n      END DO\n    END DO\n  END DO\n  totals = 0\n  totals_comparison = 0\n  DO x = 1, LOOPCOUNT\n    DO y = 0, 7\n      totals(x) = totals(x) + ISHFT(1, y)\n      totals_comparison(x) = totals_comparison(x) + ISHFT(1, y)\n    END DO\n  END DO\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT, 1:10))\n    !$acc parallel\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        DO y = 1, 10\n          !$acc atomic capture\n            b(x, y) = totals(x)\n            totals(x) = iand(totals(x), a(x, y))\n          !$acc end atomic\n        END DO\n      END DO\n    !$acc end parallel\n  !$acc end data\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      totals_comparison(x) = iand(totals_comparison(x), a(x, y))\n    END DO\n  END DO\n  DO x = 1, LOOPCOUNT\n    IF (totals_comparison(x) .NE. totals(x)) THEN\n      errors = errors + 1\n      WRITE(*, *) totals_comparison(x)\n    END IF\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      passed_a(y) = a(x, y)\n      passed_b(y) = b(x, y)\n    END DO\n    init = 0\n    DO y = 0, 7\n      init = init + ISHFT(1, y)\n    END DO\n    IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .eqv. .FALSE.) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_assign_ior_expr_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: x, y, z !Iterators\n  INTEGER,DIMENSION(LOOPCOUNT, 10):: a, b !Data\n  REAL(8),DIMENSION(LOOPCOUNT, 10, 8):: randoms\n  INTEGER,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n  INTEGER,DIMENSION(10):: passed_a, passed_b\n  INTEGER:: init\n  LOGICAL IS_POSSIBLE\n  INTEGER :: errors = 0\n\n  !Initilization\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(randoms)\n  a = 0\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      DO z = 1, 8\n        IF (randoms(x, y, z) .gt. .933) THEN\n          a(x, y) = a(x, y) + ISHFT(1, z - 1)\n        END IF\n      END DO\n    END DO\n  END DO\n  totals = 0\n  totals_comparison = 0\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT, 1:10))\n    !$acc parallel\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        DO y = 1, 10\n          !$acc atomic capture\n            b(x, y) = totals(x)\n            totals(x) = ior(a(x, y), totals(x))\n          !$acc end atomic\n        END DO\n      END DO\n    !$acc end parallel\n  !$acc end data\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      totals_comparison(x) = ior(totals_comparison(x), a(x, y))\n    END DO\n  END DO\n  DO x = 1, LOOPCOUNT\n    IF (totals_comparison(x) .NE. totals(x)) THEN\n      errors = errors + 1\n      WRITE(*, *) totals_comparison(x)\n    END IF\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      passed_a(y) = a(x, y)\n      passed_b(y) = b(x, y)\n    END DO\n    init = 0\n    IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .eqv. .FALSE.) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_assign_ior_x_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: x, y, z !Iterators\n  INTEGER,DIMENSION(LOOPCOUNT, 10):: a, b !Data\n  REAL(8),DIMENSION(LOOPCOUNT, 10, 8):: randoms\n  INTEGER,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n  INTEGER,DIMENSION(10):: passed_a, passed_b\n  INTEGER:: init\n  LOGICAL IS_POSSIBLE\n  INTEGER :: errors = 0\n\n  !Initilization\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(randoms)\n  a = 0\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      DO z = 1, 8\n        IF (randoms(x, y, z) .gt. .933) THEN\n          a(x, y) = a(x, y) + ISHFT(1, z - 1)\n        END IF\n      END DO\n    END DO\n  END DO\n  totals = 0\n  totals_comparison = 0\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT, 1:10))\n    !$acc parallel\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        DO y = 1, 10\n          !$acc atomic capture\n            b(x, y) = totals(x)\n            totals(x) = ior(totals(x), a(x, y))\n          !$acc end atomic\n        END DO\n      END DO\n    !$acc end parallel\n  !$acc end data\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      totals_comparison(x) = ior(totals_comparison(x), a(x, y))\n    END DO\n  END DO\n  DO x = 1, LOOPCOUNT\n    IF (totals_comparison(x) .NE. totals(x)) THEN\n      errors = errors + 1\n      WRITE(*, *) totals_comparison(x)\n    END IF\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      passed_a(y) = a(x, y)\n      passed_b(y) = b(x, y)\n    END DO\n    init = 0\n    IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .eqv. .FALSE.) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_assign_ixor_expr_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: x, y, z !Iterators\n  INTEGER,DIMENSION(LOOPCOUNT, 10):: a, b !Data\n  REAL(8),DIMENSION(LOOPCOUNT, 10, 8):: randoms\n  INTEGER,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n  INTEGER,DIMENSION(10):: passed_a, passed_b\n  INTEGER:: init\n  LOGICAL IS_POSSIBLE\n  INTEGER :: errors = 0\n\n  !Initilization\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(randoms)\n  a = 0\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      DO z = 1, 8\n        IF (randoms(x, y, z) .gt. .5) THEN\n          a(x, y) = a(x, y) + ISHFT(1, z - 1)\n        END IF\n      END DO\n    END DO\n  END DO\n  totals = 0\n  totals_comparison = 0\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT, 1:10))\n    !$acc parallel\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        DO y = 1, 10\n          !$acc atomic capture\n            b(x, y) = totals(x)\n            totals(x) = ieor(a(x, y), totals(x))\n          !$acc end atomic\n        END DO\n      END DO\n    !$acc end parallel\n  !$acc end data\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      totals_comparison(x) = ieor(totals_comparison(x), a(x, y))\n    END DO\n  END DO\n  DO x = 1, LOOPCOUNT\n    IF (totals_comparison(x) .NE. totals(x)) THEN\n      errors = errors + 1\n      WRITE(*, *) totals_comparison(x)\n    END IF\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      passed_a(y) = a(x, y)\n      passed_b(y) = b(x, y)\n    END DO\n    init = 0\n    IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .eqv. .FALSE.) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_assign_ixor_x_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\nLOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: x, y, z !Iterators\n  INTEGER,DIMENSION(LOOPCOUNT, 10):: a, b !Data\n  REAL(8),DIMENSION(LOOPCOUNT, 10, 8):: randoms\n  INTEGER,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n  INTEGER,DIMENSION(10):: passed_a, passed_b\n  INTEGER:: init\n  LOGICAL IS_POSSIBLE\n  INTEGER :: errors = 0\n\n  !Initilization\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(randoms)\n  a = 0\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      DO z = 1, 8\n        IF (randoms(x, y, z) .gt. .5) THEN\n          a(x, y) = a(x, y) + ISHFT(1, z - 1)\n        END IF\n      END DO\n    END DO\n  END DO\n  totals = 0\n  totals_comparison = 0\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT, 1:10))\n    !$acc parallel\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        DO y = 1, 10\n          !$acc atomic capture\n            b(x, y) = totals(x)\n            totals(x) = ieor(totals(x), a(x, y))\n          !$acc end atomic\n        END DO\n      END DO\n    !$acc end parallel\n  !$acc end data\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      totals_comparison(x) = ieor(totals_comparison(x), a(x, y))\n    END DO\n  END DO\n  DO x = 1, LOOPCOUNT\n    IF (totals_comparison(x) .NE. totals(x)) THEN\n      errors = errors + 1\n      WRITE(*, *) totals_comparison(x)\n    END IF\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      passed_a(y) = a(x, y)\n      passed_b(y) = b(x, y)\n    END DO\n    init = 0\n    IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .eqv. .FALSE.) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_assign_max_expr_list_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b, c !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        REAL(8),DIMENSION(10):: passed_a, passed_b, passed_c\n        REAL(8):: init\n        LOGICAL IS_POSSIBLE\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10), b(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT, 1:10))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic capture\n                  c(x, y) = totals(x)\n                  totals(x) = max(a(x, y), b(x, y), totals(x))\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = max(totals_comparison(x), a(x, y), b(x, y))\n          END DO\n        END DO\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed_a(y) = a(x, y)\n            passed_b(y) = b(x, y)\n            passed_c(y) = c(x, y)\n          END DO\n          init = 0\n          IF (IS_POSSIBLE(passed_a, passed_b, passed_c, 10, init) .eqv. .FALSE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n      LOGICAL :: test1\n#endif\n#ifndef T1\n      DO testrun = 1, NUM_TEST_CALLS\n        failed = failed .or. test1()\n      END DO\n      IF (failed) THEN\n        failcode = failcode + 2 ** 0\n        failed = .FALSE.\n      END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_assign_max_expr_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: x, y !Iterators\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b !Data\n  REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n  REAL(8),DIMENSION(10):: passed_a, passed_b\n  REAL(8):: init\n  LOGICAL IS_POSSIBLE\n  INTEGER :: errors = 0\n\n  !Initilization\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n\n  totals = 0\n  totals_comparison = 0\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT, 1:10))\n    !$acc parallel\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        DO y = 1, 10\n          !$acc atomic capture\n            b(x, y) = totals(x)\n            totals(x) = max(a(x, y), totals(x))\n          !$acc end atomic\n        END DO\n      END DO\n    !$acc end parallel\n  !$acc end data\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      totals_comparison(x) = max(totals_comparison(x), a(x, y))\n    END DO\n  END DO\n  DO x = 1, LOOPCOUNT\n    IF (totals_comparison(x) .NE. totals(x)) THEN\n      errors = errors + 1\n      WRITE(*, *) totals_comparison(x)\n    END IF\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      passed_a(y) = a(x, y)\n      passed_b(y) = b(x, y)\n    END DO\n    init = 0\n    IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .eqv. .FALSE.) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_assign_max_x_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: x, y !Iterators\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b !Data\n  REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n  REAL(8),DIMENSION(10):: passed_a, passed_b\n  REAL(8):: init\n  LOGICAL IS_POSSIBLE\n  INTEGER :: errors = 0\n\n  !Initilization\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n\n  totals = 0\n  totals_comparison = 0\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT, 1:10))\n    !$acc parallel\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        DO y = 1, 10\n          !$acc atomic capture\n            b(x, y) = totals(x)\n            totals(x) = max(totals(x), a(x, y))\n          !$acc end atomic\n        END DO\n      END DO\n    !$acc end parallel\n  !$acc end data\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      totals_comparison(x) = max(totals_comparison(x), a(x, y))\n    END DO\n  END DO\n  DO x = 1, LOOPCOUNT\n    IF (totals_comparison(x) .NE. totals(x)) THEN\n      errors = errors + 1\n      WRITE(*, *) totals_comparison(x)\n    END IF\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      passed_a(y) = a(x, y)\n      passed_b(y) = b(x, y)\n    END DO\n    init = 0\n    IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .eqv. .FALSE.) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_assign_max_x_expr_list.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\nIMPLICIT NONE\nINCLUDE \"acc_testsuite.Fh\"\nINTEGER :: x, y !Iterators\nREAL(8),DIMENSION(LOOPCOUNT, 10):: a, b, c !Data\nREAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\nREAL(8),DIMENSION(10):: passed_a, passed_b, passed_c\nREAL(8):: init\nLOGICAL IS_POSSIBLE\nINTEGER :: errors = 0\n\n!Initilization\nSEEDDIM(1) = 1\n#ifdef SEED\nSEEDDIM(1) = SEED\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_assign_min_expr_list_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b, c !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        REAL(8),DIMENSION(10):: passed_a, passed_b, passed_c\n        REAL(8):: init\n        LOGICAL IS_POSSIBLE\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10), b(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT, 1:10))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic capture\n                  c(x, y) = totals(x)\n                  totals(x) = min(a(x, y), b(x, y), totals(x))\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = min(totals_comparison(x), a(x, y), b(x, y))\n          END DO\n        END DO\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed_a(y) = a(x, y)\n            passed_b(y) = b(x, y)\n            passed_c(y) = c(x, y)\n          END DO\n          init = 0\n          IF (IS_POSSIBLE(passed_a, passed_b, passed_c, 10, init) .eqv. .FALSE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_assign_min_expr_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        REAL(8),DIMENSION(10):: passed_a, passed_b\n        REAL(8):: init\n        LOGICAL IS_POSSIBLE\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT, 1:10))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic capture\n                  b(x, y) = totals(x)\n                  totals(x) = min(a(x, y), totals(x))\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = min(totals_comparison(x), a(x, y))\n          END DO\n        END DO\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed_a(y) = a(x, y)\n            passed_b(y) = b(x, y)\n          END DO\n          init = 0\n          IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .eqv. .FALSE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_assign_min_x_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        REAL(8),DIMENSION(10):: passed_a, passed_b\n        REAL(8):: init\n        LOGICAL IS_POSSIBLE\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT, 1:10))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic capture\n                  b(x, y) = totals(x)\n                  totals(x) = min(totals(x), a(x, y))\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = min(totals_comparison(x), a(x, y))\n          END DO\n        END DO\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed_a(y) = a(x, y)\n            passed_b(y) = b(x, y)\n          END DO\n          init = 0\n          IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .eqv. .FALSE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_assign_min_x_expr_list.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n      IMPLICIT NONE\n      INCLUDE \"acc_testsuite.Fh\"\n      INTEGER :: x, y !Iterators\n      REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b, c !Data\n      REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n      REAL(8),DIMENSION(10):: passed_a, passed_b, passed_c\n      REAL(8):: init\n      LOGICAL IS_POSSIBLE\n      INTEGER :: errors = 0\n\n      !Initilization\n      SEEDDIM(1) = 1\n#     ifdef SEED\n      SEEDDIM(1) = SEED\n#     endif\n      CALL RANDOM_SEED(PUT=SEEDDIM)\n\n      CALL RANDOM_NUMBER(a)\n      CALL RANDOM_NUMBER(b)\n\n      totals = 1\n      totals_comparison = 1\n\n      !$acc data copyin(a(1:LOOPCOUNT, 1:10), b(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT, 1:10))\n        !$acc parallel\n          !$acc loop\n          DO x = 1, LOOPCOUNT\n            DO y = 1, 10\n              !$acc atomic capture\n                c(x, y) = totals(x)\n                totals(x) = min(totals(x), a(x, y), b(x, y))\n              !$acc end atomic\n            END DO\n          END DO\n        !$acc end parallel\n      !$acc end data\n      DO x = 1, LOOPCOUNT\n        DO y = 1, 10\n          totals_comparison(x) = min(totals_comparison(x), a(x, y), b(x, y))\n        END DO\n      END DO\n      DO x = 1, LOOPCOUNT\n        IF (totals_comparison(x) .NE. totals(x)) THEN\n          errors = errors + 1\n          WRITE(*, *) totals_comparison(x)\n        END IF\n      END DO\n\n      DO x = 1, LOOPCOUNT\n        DO y = 1, 10\n          passed_a(y) = a(x, y)\n          passed_b(y) = b(x, y)\n          passed_c(y) = c(x, y)\n        END DO\n        init = 1\n        IF (IS_POSSIBLE(passed_a, passed_b, passed_c, 10, init) .eqv. .FALSE.) THEN\n          errors = errors + 1\n        END IF\n      END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_assign_x_and_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\nLOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: x, y !Iterators\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n  LOGICAL,DIMENSION(LOOPCOUNT, 10):: a, b !Data\n  LOGICAL,DIMENSION(10):: passed_a, passed_b\n  LOGICAL IS_POSSIBLE\n  LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n  INTEGER :: errors = 0\n  LOGICAL :: init\n\n  !Initilization\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(randoms)\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      IF (randoms(x, y) < .933) THEN\n        a(x, y) = .TRUE.\n      ELSE\n        a(x, y) = .FALSE.\n      END IF\n    END DO\n  END DO\n\n  totals = .FALSE.\n  totals_comparison = .FALSE.\n\n  !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT,1:10))\n    !$acc parallel\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        DO y = 1, 10\n          !$acc atomic capture\n            b(x, y) = totals(x)\n            totals(x) = totals(x) .AND. a(x, y)\n          !$acc end atomic\n        END DO\n      END DO\n    !$acc end parallel\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      totals_comparison(x) = totals_comparison(x) .AND. a(x, y)\n    END DO\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    IF (totals_comparison(x) .NEQV. totals(x)) THEN\n      errors = errors + 1\n      WRITE(*, *) totals_comparison(x)\n    END IF\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      passed_a(y) = a(x, y)\n      passed_b(y) = b(x, y)\n    END DO\n    init = .FALSE.\n    IF (.FALSE. .eqv. IS_POSSIBLE(a(x, 1:10), b(x, 1:10), 10, .FALSE.)) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_assign_x_divided_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: x, y !Iterators\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: b\n  REAL(8),DIMENSION(LOOPCOUNT):: totals\n  REAL(8),DIMENSION(10):: passed\n  REAL(8),DIMENSION(10):: passed_b\n  REAL(8) :: holder\n  INTEGER :: errors = 0\n  LOGICAL IS_POSSIBLE\n  LOGICAL IS_POSSIBLE_2\n\n  !Initilization\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n\n  totals = 1\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT,1:10))\n    !$acc parallel\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        DO y = 1, 10\n          !$acc atomic capture\n            b(x, y) = totals(x)\n            totals(x) = totals(x) / a(x, y)\n          !$acc end atomic\n        END DO\n      END DO\n    !$acc end parallel\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      passed(y) = a(x, y)\n    END DO\n    holder = 1\n    IF (IS_POSSIBLE(passed, totals(x), 10, holder) .eqv. .FALSE.) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      passed(y) = a(x, y)\n      passed_b(y) = b(x, y)\n    END DO\n    holder = 1\n    IF (IS_POSSIBLE_2(passed, passed_b, 10, holder) .eqv. .FALSE.) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_assign_x_eqv_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: x, y !Iterators\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n  LOGICAL,DIMENSION(LOOPCOUNT, 10):: a, b !Data\n  LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n  LOGICAL,DIMENSION(10):: passed_a, passed_b\n  LOGICAL:: init\n  INTEGER :: errors = 0\n  LOGICAL IS_POSSIBLE\n\n  !Initilization\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(randoms)\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      IF (randoms(x, y) > .5) THEN\n        a(x, y) = .TRUE.\n      ELSE\n        a(x, y) = .FALSE.\n      END IF\n    END DO\n  END DO\n\n  totals = .FALSE.\n  totals_comparison = .FALSE.\n\n  !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT,1:10))\n    !$acc parallel\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        DO y = 1, 10\n          !$acc atomic capture\n            b(x, y) = totals(x)\n            totals(x) = totals(x) .EQV. a(x, y)\n          !$acc end atomic\n        END DO\n      END DO\n    !$acc end parallel\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      totals_comparison(x) = totals_comparison(x) .EQV. a(x, y)\n    END DO\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      passed_a(y) = a(x, y)\n      passed_b(y) = b(x, y)\n    END DO\n    init = .FALSE.\n    IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .EQV. .FALSE.) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    IF (totals_comparison(x) .NEQV. totals(x)) THEN\n      errors = errors + 1\n      WRITE(*, *) totals_comparison(x)\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_assign_x_minus_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: x, y !Iterators\n  LOGICAL IS_POSSIBLE\n  LOGICAL IS_POSSIBLE_2\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b !Data\n  REAL(8),DIMENSION(LOOPCOUNT):: totals\n  REAL(8),DIMENSION(10):: passed_a, passed_b\n  REAL(8):: init\n  INTEGER :: errors = 0\n\n  !Initilization\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n\n  totals = 0\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT, 1:10))\n    !$acc parallel\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        DO y = 1, 10\n          !$acc atomic capture\n            b(x, y) = totals(x)\n            totals(x) = totals(x) - a(x, y)\n          !$acc end atomic\n        END DO\n      END DO\n    !$acc end parallel\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      passed_a(y) = a(x, y)\n    END DO\n    IF (IS_POSSIBLE(passed_a, totals(x), 10, 0) .eqv. .FALSE.) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      passed_a(y) = a(x, y)\n      passed_b(y) = b(x, y)\n    END DO\n    init = 0\n    IF (IS_POSSIBLE_2(passed_a, passed_b, 10, init) .EQV. .FALSE.) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_assign_x_neqv_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: x, y !Iterators\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n  LOGICAL,DIMENSION(LOOPCOUNT, 10):: a, b !Data\n  LOGICAL,DIMENSION(10):: passed_a, passed_b\n  LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n  LOGICAL IS_POSSIBLE\n  INTEGER :: errors = 0\n\n  !Initilization\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(randoms)\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      IF (randoms(x, y) > .5) THEN\n        a(x, y) = .TRUE.\n      ELSE\n        a(x, y) = .FALSE.\n      END IF\n    END DO\n  END DO\n\n  totals = .FALSE.\n  totals_comparison = .FALSE.\n\n  !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT,1:10))\n    !$acc parallel\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        DO y = 1, 10\n          !$acc atomic capture\n            b(x, y) = totals(x)\n            totals(x) = totals(x) .NEQV. a(x, y)\n          !$acc end atomic\n        END DO\n      END DO\n    !$acc end parallel\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      totals_comparison(x) = totals_comparison(x) .NEQV. a(x, y)\n    END DO\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    IF (totals_comparison(x) .NEQV. totals(x)) THEN\n      errors = errors + 1\n      WRITE(*, *) totals_comparison(x)\n    END IF\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      passed_a(y) = a(x, y)\n      passed_b(y) = b(x, y)\n    END DO\n    IF (IS_POSSIBLE(passed_a, passed_b, 10, .FALSE.) .eqv. .FALSE.) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_assign_x_or_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: x, y !Iterators\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n  LOGICAL,DIMENSION(LOOPCOUNT, 10):: a, b !Data\n  LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n  LOGICAL,DIMENSION(10):: passed_a, passed_b\n  LOGICAL IS_POSSIBLE\n  LOGICAL:: init\n  INTEGER :: errors = 0\n\n  !Initilization\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(randoms)\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      IF (randoms(x, y) > .933) THEN\n        a(x, y) = .TRUE.\n      ELSE\n        a(x, y) = .FALSE.\n      END IF\n    END DO\n  END DO\n\n  totals = .FALSE.\n  totals_comparison = .FALSE.\n\n  !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT,1:10))\n    !$acc parallel\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        DO y = 1, 10\n          !$acc atomic capture\n            b(x, y) = totals(x)\n            totals(x) = totals(x) .OR. a(x, y)\n          !$acc end atomic\n        END DO\n      END DO\n    !$acc end parallel\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      totals_comparison(x) = totals_comparison(x) .OR. a(x, y)\n    END DO\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    IF (totals_comparison(x) .NEQV. totals(x)) THEN\n      errors = errors + 1\n      WRITE(*, *) totals_comparison(x)\n    END IF\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      passed_a(y) = a(x, y)\n      passed_b(y) = b(x, y)\n    END DO\n    init = .FALSE.\n    IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .eqv. .FALSE.) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_assign_x_plus_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: x, y !Iterators\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b !Data\n  REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n  REAL(8),DIMENSION(10):: passed_a, passed_b\n  REAL(8):: init\n  LOGICAL IS_POSSIBLE\n  INTEGER :: errors = 0\n\n  !Initilization\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n\n  totals = 0\n  totals_comparison = 0\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT,1:10))\n    !$acc parallel\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        DO y = 1, 10\n          !$acc atomic capture\n            b(x, y) = totals(x)\n            totals(x) = totals(x) + a(x, y)\n          !$acc end atomic\n        END DO\n      END DO\n    !$acc end parallel\n  !$acc end data\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      totals_comparison(x) = totals_comparison(x) + a(x, y)\n    END DO\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    IF (totals_comparison(x) .NE. totals(x)) THEN\n      errors = errors + 1\n      WRITE(*, *) totals_comparison(x)\n    END IF\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      passed_a(y) = a(x, y)\n      passed_b(y) = b(x, y)\n    END DO\n    init = 0\n    IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .eqv. .FALSE.) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_assign_x_times_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: x, y !Iterators\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b !Data\n  REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n  REAL(8),DIMENSION(10):: passed_a, passed_b\n  REAL(8):: init\n  LOGICAL IS_POSSIBLE\n  INTEGER :: errors = 0\n\n  !Initilization\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n\n  totals = 1\n  totals_comparison = 1\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT,1:10))\n    !$acc parallel\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        DO y = 1, 10\n          !$acc atomic capture\n            b(x, y) = totals(x)\n            totals(x) = totals(x) * a(x, y)\n          !$acc end atomic\n        END DO\n      END DO\n    !$acc end parallel\n  !$acc end data\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      totals_comparison(x) = totals_comparison(x) * a(x, y)\n    END DO\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    IF (totals_comparison(x) .NE. totals(x)) THEN\n      errors = errors + 1\n      WRITE(*, *) totals_comparison(x)\n    END IF\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      passed_a(y) = a(x, y)\n      passed_b(y) = b(x, y)\n    END DO\n    init = 1\n    IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .eqv. .TRUE.) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_expr_and_x_assign.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a !Data\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: b\n        LOGICAL IS_POSSIBLE\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) < .933) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT,1:10))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic capture\n                  totals(x) = a(x, y) .AND. totals(x)\n                  b(x, y) = totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .AND. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (.FALSE. .eqv. IS_POSSIBLE(a(x, 1:10), b(x, 1:10), 10, .FALSE.)) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_expr_divided_x_assign.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: b\n        REAL(8),DIMENSION(LOOPCOUNT):: totals\n        REAL(8),DIMENSION(10):: passed\n        REAL(8),DIMENSION(10):: passed_b\n        REAL(8) :: holder\n        INTEGER :: errors = 0\n        LOGICAL IS_POSSIBLE\n        LOGICAL IS_POSSIBLE_2\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 1\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT,1:10))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic capture\n                  totals(x) = a(x, y) / totals(x)\n                  b(x, y) = totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed(y) = a(x, y)\n          END DO\n          holder = 1\n          IF (IS_POSSIBLE(passed, totals(x), 10, holder) .eqv. .FALSE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed(y) = a(x, y)\n            passed_b(y) = b(x, y)\n          END DO\n          holder = 1\n          IF (IS_POSSIBLE_2(passed, passed_b, 10, holder) .eqv. .FALSE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_expr_eqv_x_assign.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a, b !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        LOGICAL,DIMENSION(10):: passed_a, passed_b\n        LOGICAL:: init\n        INTEGER :: errors = 0\n        LOGICAL IS_POSSIBLE\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) > .5) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT,1:10))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic capture\n                  totals(x) = a(x, y) .EQV. totals(x)\n                  b(x, y) = totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .EQV. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed_a(y) = a(x, y)\n            passed_b(y) = b(x, y)\n          END DO\n          init = .FALSE.\n          IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .EQV. .FALSE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_expr_minus_x_assign.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        LOGICAL IS_POSSIBLE\n        LOGICAL IS_POSSIBLE_2\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals\n        REAL(8),DIMENSION(10):: passed_a, passed_b\n        REAL(8):: init\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT, 1:10))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic capture\n                  totals(x) = a(x, y) - totals(x)\n                  b(x, y) = totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed_a(y) = a(x, y)\n          END DO\n          IF (IS_POSSIBLE(passed_a, totals(x), 10, 0) .eqv. .FALSE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed_a(y) = a(x, y)\n            passed_b(y) = b(x, y)\n          END DO\n          init = 0\n          IF (IS_POSSIBLE_2(passed_a, passed_b, 10, init) .EQV. .FALSE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_expr_neqv_x_assign.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a, b !Data\n        LOGICAL,DIMENSION(10):: passed_a, passed_b\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        LOGICAL IS_POSSIBLE\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) > .5) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT,1:10))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic capture\n                  totals(x) = a(x, y) .NEQV. totals(x)\n                  b(x, y) = totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .NEQV. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed_a(y) = a(x, y)\n            passed_b(y) = b(x, y)\n          END DO\n          IF (IS_POSSIBLE(passed_a, passed_b, 10, .FALSE.) .eqv. .FALSE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_expr_or_x_assign.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a, b !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        LOGICAL,DIMENSION(10):: passed_a, passed_b\n        LOGICAL IS_POSSIBLE\n        LOGICAL:: init\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) > .933) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT,1:10))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic capture\n                  totals(x) = a(x, y) .OR. totals(x)\n                  b(x, y) = totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .OR. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed_a(y) = a(x, y)\n            passed_b(y) = b(x, y)\n          END DO\n          init = .FALSE.\n          IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .eqv. .FALSE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_expr_plus_x_assign.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        REAL(8),DIMENSION(10):: passed_a, passed_b\n        REAL(8):: init\n        LOGICAL IS_POSSIBLE\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT,1:10))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic capture\n                  totals(x) = a(x, y) + totals(x)\n                  b(x, y) = totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) + a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed_a(y) = a(x, y)\n            passed_b(y) = b(x, y)\n          END DO\n          init = 0\n          IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .eqv. .FALSE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_expr_times_x_assign.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        REAL(8),DIMENSION(10):: passed_a, passed_b\n        REAL(8):: init\n        LOGICAL IS_POSSIBLE\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 1\n        totals_comparison = 1\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT,1:10))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic capture\n                  totals(x) = a(x, y) * totals(x)\n                  b(x, y) = totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) * a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed_a(y) = a(x, y)\n            passed_b(y) = b(x, y)\n          END DO\n          init = 1\n          IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .eqv. .TRUE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_iand_expr_x_assign.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y, z !Iterators\n        INTEGER,DIMENSION(LOOPCOUNT, 10):: a, b !Data\n        REAL(8),DIMENSION(LOOPCOUNT, 10, 8):: randoms\n        INTEGER,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER,DIMENSION(10):: passed_a, passed_b\n        INTEGER:: init\n        LOGICAL IS_POSSIBLE\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        a = 0\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            DO z = 1, 8\n              IF (randoms(x, y, z) .lt. .933) THEN\n                a(x, y) = a(x, y) + ISHFT(1, z - 1)\n              END IF\n            END DO\n          END DO\n        END DO\n        totals = 0\n        totals_comparison = 0\n        DO x = 1, LOOPCOUNT\n          DO y = 0, 7\n            totals(x) = totals(x) + ISHFT(1, y)\n            totals_comparison(x) = totals_comparison(x) + ISHFT(1, y)\n          END DO\n        END DO\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT, 1:10))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic capture\n                  totals(x) = iand(a(x, y), totals(x))\n                  b(x, y) = totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = iand(totals_comparison(x), a(x, y))\n          END DO\n        END DO\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed_a(y) = a(x, y)\n            passed_b(y) = b(x, y)\n          END DO\n          init = 0\n          DO y = 0, 7\n            init = init + ISHFT(1, y)\n          END DO\n          IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .eqv. .FALSE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_iand_x_expr_assign.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: x, y, z !Iterators\n  INTEGER,DIMENSION(LOOPCOUNT, 10):: a, b !Data\n  REAL(8),DIMENSION(LOOPCOUNT, 10, 8):: randoms\n  INTEGER,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n  INTEGER,DIMENSION(10):: passed_a, passed_b\n  INTEGER:: init\n  LOGICAL IS_POSSIBLE\n  INTEGER :: errors = 0\n\n  !Initilization\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(randoms)\n  a = 0\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      DO z = 1, 8\n        IF (randoms(x, y, z) .lt. .933) THEN\n          a(x, y) = a(x, y) + ISHFT(1, z - 1)\n        END IF\n      END DO\n    END DO\n  END DO\n  totals = 0\n  totals_comparison = 0\n  DO x = 1, LOOPCOUNT\n    DO y = 0, 7\n      totals(x) = totals(x) + ISHFT(1, y)\n      totals_comparison(x) = totals_comparison(x) + ISHFT(1, y)\n    END DO\n  END DO\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT, 1:10))\n    !$acc parallel\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        DO y = 1, 10\n          !$acc atomic capture\n            totals(x) = iand(totals(x), a(x, y))\n            b(x, y) = totals(x)\n          !$acc end atomic\n        END DO\n      END DO\n    !$acc end parallel\n  !$acc end data\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      totals_comparison(x) = iand(totals_comparison(x), a(x, y))\n    END DO\n  END DO\n  DO x = 1, LOOPCOUNT\n    IF (totals_comparison(x) .NE. totals(x)) THEN\n      errors = errors + 1\n      WRITE(*, *) totals_comparison(x)\n    END IF\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      passed_a(y) = a(x, y)\n      passed_b(y) = b(x, y)\n    END DO\n    init = 0\n    DO y = 0, 7\n      init = init + ISHFT(1, y)\n    END DO\n    IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .eqv. .FALSE.) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_ior_expr_x_assign.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: x, y, z !Iterators\n  INTEGER,DIMENSION(LOOPCOUNT, 10):: a, b !Data\n  REAL(8),DIMENSION(LOOPCOUNT, 10, 8):: randoms\n  INTEGER,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n  INTEGER,DIMENSION(10):: passed_a, passed_b\n  INTEGER:: init\n  LOGICAL IS_POSSIBLE\n  INTEGER :: errors = 0\n\n  !Initilization\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(randoms)\n  a = 0\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      DO z = 1, 8\n        IF (randoms(x, y, z) .gt. .933) THEN\n          a(x, y) = a(x, y) + ISHFT(1, z - 1)\n        END IF\n      END DO\n    END DO\n  END DO\n  totals = 0\n  totals_comparison = 0\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT, 1:10))\n    !$acc parallel\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        DO y = 1, 10\n          !$acc atomic capture\n            totals(x) = ior(a(x, y), totals(x))\n            b(x, y) = totals(x)\n          !$acc end atomic\n        END DO\n      END DO\n    !$acc end parallel\n  !$acc end data\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      totals_comparison(x) = ior(totals_comparison(x), a(x, y))\n    END DO\n  END DO\n  DO x = 1, LOOPCOUNT\n    IF (totals_comparison(x) .NE. totals(x)) THEN\n      errors = errors + 1\n      WRITE(*, *) totals_comparison(x)\n    END IF\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      passed_a(y) = a(x, y)\n      passed_b(y) = b(x, y)\n    END DO\n    init = 0\n    IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .eqv. .FALSE.) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_ior_x_expr_assign.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: x, y, z !Iterators\n  INTEGER,DIMENSION(LOOPCOUNT, 10):: a, b !Data\n  REAL(8),DIMENSION(LOOPCOUNT, 10, 8):: randoms\n  INTEGER,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n  INTEGER,DIMENSION(10):: passed_a, passed_b\n  INTEGER:: init\n  LOGICAL IS_POSSIBLE\n  INTEGER :: errors = 0\n\n  !Initilization\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(randoms)\n  a = 0\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      DO z = 1, 8\n        IF (randoms(x, y, z) .gt. .933) THEN\n          a(x, y) = a(x, y) + ISHFT(1, z - 1)\n        END IF\n      END DO\n    END DO\n  END DO\n  totals = 0\n  totals_comparison = 0\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT, 1:10))\n    !$acc parallel\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        DO y = 1, 10\n          !$acc atomic capture\n            totals(x) = ior(totals(x), a(x, y))\n            b(x, y) = totals(x)\n          !$acc end atomic\n        END DO\n      END DO\n    !$acc end parallel\n  !$acc end data\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      totals_comparison(x) = ior(totals_comparison(x), a(x, y))\n    END DO\n  END DO\n  DO x = 1, LOOPCOUNT\n    IF (totals_comparison(x) .NE. totals(x)) THEN\n      errors = errors + 1\n      WRITE(*, *) totals_comparison(x)\n    END IF\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      passed_a(y) = a(x, y)\n      passed_b(y) = b(x, y)\n    END DO\n    init = 0\n    IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .eqv. .FALSE.) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_ixor_expr_x_assign.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: x, y, z !Iterators\n  INTEGER,DIMENSION(LOOPCOUNT, 10):: a, b !Data\n  REAL(8),DIMENSION(LOOPCOUNT, 10, 8):: randoms\n  INTEGER,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n  INTEGER,DIMENSION(10):: passed_a, passed_b\n  INTEGER:: init\n  LOGICAL IS_POSSIBLE\n  INTEGER :: errors = 0\n\n  !Initilization\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(randoms)\n  a = 0\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      DO z = 1, 8\n        IF (randoms(x, y, z) .gt. .5) THEN\n          a(x, y) = a(x, y) + ISHFT(1, z - 1)\n        END IF\n      END DO\n    END DO\n  END DO\n  totals = 0\n  totals_comparison = 0\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT, 1:10))\n    !$acc parallel\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        DO y = 1, 10\n          !$acc atomic capture\n            totals(x) = ieor(a(x, y), totals(x))\n            b(x, y) = totals(x)\n          !$acc end atomic\n        END DO\n      END DO\n    !$acc end parallel\n  !$acc end data\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      totals_comparison(x) = ieor(totals_comparison(x), a(x, y))\n    END DO\n  END DO\n  DO x = 1, LOOPCOUNT\n    IF (totals_comparison(x) .NE. totals(x)) THEN\n      errors = errors + 1\n      WRITE(*, *) totals_comparison(x)\n    END IF\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      passed_a(y) = a(x, y)\n      passed_b(y) = b(x, y)\n    END DO\n    init = 0\n    IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .eqv. .FALSE.) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_ixor_x_expr_assign.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: x, y, z !Iterators\n  INTEGER,DIMENSION(LOOPCOUNT, 10):: a, b !Data\n  REAL(8),DIMENSION(LOOPCOUNT, 10, 8):: randoms\n  INTEGER,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n  INTEGER,DIMENSION(10):: passed_a, passed_b\n  INTEGER:: init\n  LOGICAL IS_POSSIBLE\n  INTEGER :: errors = 0\n\n  !Initilization\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(randoms)\n  a = 0\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      DO z = 1, 8\n        IF (randoms(x, y, z) .gt. .5) THEN\n          a(x, y) = a(x, y) + ISHFT(1, z - 1)\n        END IF\n      END DO\n    END DO\n  END DO\n  totals = 0\n  totals_comparison = 0\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT, 1:10))\n    !$acc parallel\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        DO y = 1, 10\n          !$acc atomic capture\n            totals(x) = ieor(totals(x), a(x, y))\n            b(x, y) = totals(x)\n          !$acc end atomic\n        END DO\n      END DO\n    !$acc end parallel\n  !$acc end data\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      totals_comparison(x) = ieor(totals_comparison(x), a(x, y))\n    END DO\n  END DO\n  DO x = 1, LOOPCOUNT\n    IF (totals_comparison(x) .NE. totals(x)) THEN\n      errors = errors + 1\n      WRITE(*, *) totals_comparison(x)\n    END IF\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      passed_a(y) = a(x, y)\n      passed_b(y) = b(x, y)\n    END DO\n    init = 0\n    IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .eqv. .FALSE.) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_max_expr_list_x_assign.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b, c !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        REAL(8),DIMENSION(10):: passed_a, passed_b, passed_c\n        REAL(8):: init\n        LOGICAL IS_POSSIBLE\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10), b(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT, 1:10))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic capture\n                  totals(x) = max(a(x, y), b(x, y), totals(x))\n                  c(x, y) = totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = max(totals_comparison(x), a(x, y), b(x, y))\n          END DO\n        END DO\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed_a(y) = a(x, y)\n            passed_b(y) = b(x, y)\n            passed_c(y) = c(x, y)\n          END DO\n          init = 0\n          IF (IS_POSSIBLE(passed_a, passed_b, passed_c, 10, init) .eqv. .FALSE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_max_expr_x_assign.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: x, y !Iterators\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b !Data\n  REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n  REAL(8),DIMENSION(10):: passed_a, passed_b\n  REAL(8):: init\n  LOGICAL IS_POSSIBLE\n  INTEGER :: errors = 0\n\n  !Initilization\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n\n  totals = 0\n  totals_comparison = 0\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT, 1:10))\n    !$acc parallel\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        DO y = 1, 10\n          !$acc atomic capture\n            totals(x) = max(a(x, y), totals(x))\n            b(x, y) = totals(x)\n          !$acc end atomic\n        END DO\n      END DO\n    !$acc end parallel\n  !$acc end data\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      totals_comparison(x) = max(totals_comparison(x), a(x, y))\n    END DO\n  END DO\n  DO x = 1, LOOPCOUNT\n    IF (totals_comparison(x) .NE. totals(x)) THEN\n      errors = errors + 1\n      WRITE(*, *) totals_comparison(x)\n    END IF\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      passed_a(y) = a(x, y)\n      passed_b(y) = b(x, y)\n    END DO\n    init = 0\n    IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .eqv. .FALSE.) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_max_x_expr_assign.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: x, y !Iterators\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b !Data\n  REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n  REAL(8),DIMENSION(10):: passed_a, passed_b\n  REAL(8):: init\n  LOGICAL IS_POSSIBLE\n  INTEGER :: errors = 0\n\n  !Initilization\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n\n  totals = 0\n  totals_comparison = 0\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT, 1:10))\n    !$acc parallel\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        DO y = 1, 10\n          !$acc atomic capture\n            totals(x) = max(totals(x), a(x, y))\n            b(x, y) = totals(x)\n          !$acc end atomic\n        END DO\n      END DO\n    !$acc end parallel\n  !$acc end data\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      totals_comparison(x) = max(totals_comparison(x), a(x, y))\n    END DO\n  END DO\n  DO x = 1, LOOPCOUNT\n    IF (totals_comparison(x) .NE. totals(x)) THEN\n      errors = errors + 1\n      WRITE(*, *) totals_comparison(x)\n    END IF\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      passed_a(y) = a(x, y)\n      passed_b(y) = b(x, y)\n    END DO\n    init = 0\n    IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .eqv. .FALSE.) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_max_x_expr_list_assign.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\nIMPLICIT NONE\nINCLUDE \"acc_testsuite.Fh\"\nINTEGER :: x, y !Iterators\nREAL(8),DIMENSION(LOOPCOUNT, 10):: a, b, c !Data\nREAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\nREAL(8),DIMENSION(10):: passed_a, passed_b, passed_c\nREAL(8):: init\nLOGICAL IS_POSSIBLE\nINTEGER :: errors = 0\n\n!Initilization\nSEEDDIM(1) = 1\n#ifdef SEED\nSEEDDIM(1) = SEED\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_min_expr_list_x_assign.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b, c !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        REAL(8),DIMENSION(10):: passed_a, passed_b, passed_c\n        REAL(8):: init\n        LOGICAL IS_POSSIBLE\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10), b(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT, 1:10))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic capture\n                  totals(x) = min(a(x, y), b(x, y), totals(x))\n                  c(x, y) = totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = min(totals_comparison(x), a(x, y), b(x, y))\n          END DO\n        END DO\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed_a(y) = a(x, y)\n            passed_b(y) = b(x, y)\n            passed_c(y) = c(x, y)\n          END DO\n          init = 0\n          IF (IS_POSSIBLE(passed_a, passed_b, passed_c, 10, init) .eqv. .FALSE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_min_expr_x_assign.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        REAL(8),DIMENSION(10):: passed_a, passed_b\n        REAL(8):: init\n        LOGICAL IS_POSSIBLE\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT, 1:10))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic capture\n                  totals(x) = min(a(x, y), totals(x))\n                  b(x, y) = totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = min(totals_comparison(x), a(x, y))\n          END DO\n        END DO\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed_a(y) = a(x, y)\n            passed_b(y) = b(x, y)\n          END DO\n          init = 0\n          IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .eqv. .FALSE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_min_x_expr_assign.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        REAL(8),DIMENSION(10):: passed_a, passed_b\n        REAL(8):: init\n        LOGICAL IS_POSSIBLE\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT, 1:10))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic capture\n                  totals(x) = min(totals(x), a(x, y))\n                  b(x, y) = totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = min(totals_comparison(x), a(x, y))\n          END DO\n        END DO\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed_a(y) = a(x, y)\n            passed_b(y) = b(x, y)\n          END DO\n          init = 0\n          IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .eqv. .FALSE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_min_x_expr_list_assign.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n      IMPLICIT NONE\n      INCLUDE \"acc_testsuite.Fh\"\n      INTEGER :: x, y !Iterators\n      REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b, c !Data\n      REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n      REAL(8),DIMENSION(10):: passed_a, passed_b, passed_c\n      REAL(8):: init\n      LOGICAL IS_POSSIBLE\n      INTEGER :: errors = 0\n\n      !Initilization\n      SEEDDIM(1) = 1\n#     ifdef SEED\n      SEEDDIM(1) = SEED\n#     endif\n      CALL RANDOM_SEED(PUT=SEEDDIM)\n\n      CALL RANDOM_NUMBER(a)\n      CALL RANDOM_NUMBER(b)\n\n      totals = 1\n      totals_comparison = 1\n\n      !$acc data copyin(a(1:LOOPCOUNT, 1:10), b(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT, 1:10))\n        !$acc parallel\n          !$acc loop\n          DO x = 1, LOOPCOUNT\n            DO y = 1, 10\n              !$acc atomic capture\n                totals(x) = min(totals(x), a(x, y), b(x, y))\n                c(x, y) = totals(x)\n              !$acc end atomic\n            END DO\n          END DO\n        !$acc end parallel\n      !$acc end data\n      DO x = 1, LOOPCOUNT\n        DO y = 1, 10\n          totals_comparison(x) = min(totals_comparison(x), a(x, y), b(x, y))\n        END DO\n      END DO\n      DO x = 1, LOOPCOUNT\n        IF (totals_comparison(x) .NE. totals(x)) THEN\n          errors = errors + 1\n          WRITE(*, *) totals_comparison(x)\n        END IF\n      END DO\n\n      DO x = 1, LOOPCOUNT\n        DO y = 1, 10\n          passed_a(y) = a(x, y)\n          passed_b(y) = b(x, y)\n          passed_c(y) = c(x, y)\n        END DO\n        init = 1\n        IF (IS_POSSIBLE(passed_a, passed_b, passed_c, 10, init) .eqv. .FALSE.) THEN\n          errors = errors + 1\n        END IF\n      END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_x_and_expr_assign.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: x, y !Iterators\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n  LOGICAL,DIMENSION(LOOPCOUNT, 10):: a, b !Data\n  LOGICAL,DIMENSION(10):: passed_a, passed_b\n  LOGICAL IS_POSSIBLE\n  LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n  INTEGER :: errors = 0\n  LOGICAL :: init\n\n  !Initilization\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(randoms)\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      IF (randoms(x, y) < .933) THEN\n        a(x, y) = .TRUE.\n      ELSE\n        a(x, y) = .FALSE.\n      END IF\n    END DO\n  END DO\n\n  totals = .FALSE.\n  totals_comparison = .FALSE.\n\n  !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT,1:10))\n    !$acc parallel\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        DO y = 1, 10\n          !$acc atomic capture\n            totals(x) = totals(x) .AND. a(x, y)\n            b(x, y) = totals(x)\n          !$acc end atomic\n        END DO\n      END DO\n    !$acc end parallel\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      totals_comparison(x) = totals_comparison(x) .AND. a(x, y)\n    END DO\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    IF (totals_comparison(x) .NEQV. totals(x)) THEN\n      errors = errors + 1\n      WRITE(*, *) totals_comparison(x)\n    END IF\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      passed_a(y) = a(x, y)\n      passed_b(y) = b(x, y)\n    END DO\n    init = .FALSE.\n    IF (.FALSE. .eqv. IS_POSSIBLE(a(x, 1:10), b(x, 1:10), 10, .FALSE.)) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_x_divided_expr_assign.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: x, y !Iterators\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: b\n  REAL(8),DIMENSION(LOOPCOUNT):: totals\n  REAL(8),DIMENSION(10):: passed\n  REAL(8),DIMENSION(10):: passed_b\n  REAL(8) :: holder\n  INTEGER :: errors = 0\n  LOGICAL IS_POSSIBLE\n  LOGICAL IS_POSSIBLE_2\n\n  !Initilization\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n\n  totals = 1\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT,1:10))\n    !$acc parallel\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        DO y = 1, 10\n          !$acc atomic capture\n            totals(x) = totals(x) / a(x, y)\n            b(x, y) = totals(x)\n          !$acc end atomic\n        END DO\n      END DO\n    !$acc end parallel\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      passed(y) = a(x, y)\n    END DO\n    holder = 1\n    IF (IS_POSSIBLE(passed, totals(x), 10, holder) .eqv. .FALSE.) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      passed(y) = a(x, y)\n      passed_b(y) = b(x, y)\n    END DO\n    holder = 1\n    IF (IS_POSSIBLE_2(passed, passed_b, 10, holder) .eqv. .FALSE.) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_x_eqv_expr_assign.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: x, y !Iterators\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n  LOGICAL,DIMENSION(LOOPCOUNT, 10):: a, b !Data\n  LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n  LOGICAL,DIMENSION(10):: passed_a, passed_b\n  LOGICAL:: init\n  INTEGER :: errors = 0\n  LOGICAL IS_POSSIBLE\n\n  !Initilization\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(randoms)\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      IF (randoms(x, y) > .5) THEN\n        a(x, y) = .TRUE.\n      ELSE\n        a(x, y) = .FALSE.\n      END IF\n    END DO\n  END DO\n\n  totals = .FALSE.\n  totals_comparison = .FALSE.\n\n  !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT,1:10))\n    !$acc parallel\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        DO y = 1, 10\n          !$acc atomic capture\n            totals(x) = totals(x) .EQV. a(x, y)\n            b(x, y) = totals(x)\n          !$acc end atomic\n        END DO\n      END DO\n    !$acc end parallel\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      totals_comparison(x) = totals_comparison(x) .EQV. a(x, y)\n    END DO\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      passed_a(y) = a(x, y)\n      passed_b(y) = b(x, y)\n    END DO\n    init = .FALSE.\n    IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .EQV. .FALSE.) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    IF (totals_comparison(x) .NEQV. totals(x)) THEN\n      errors = errors + 1\n      WRITE(*, *) totals_comparison(x)\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_x_minus_expr_assign.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: x, y !Iterators\n  LOGICAL IS_POSSIBLE\n  LOGICAL IS_POSSIBLE_2\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b !Data\n  REAL(8),DIMENSION(LOOPCOUNT):: totals\n  REAL(8),DIMENSION(10):: passed_a, passed_b\n  REAL(8):: init\n  INTEGER :: errors = 0\n\n  !Initilization\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n\n  totals = 0\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT, 1:10))\n    !$acc parallel\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        DO y = 1, 10\n          !$acc atomic capture\n            totals(x) = totals(x) - a(x, y)\n            b(x, y) = totals(x)\n          !$acc end atomic\n        END DO\n      END DO\n    !$acc end parallel\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      passed_a(y) = a(x, y)\n    END DO\n    IF (IS_POSSIBLE(passed_a, totals(x), 10, 0) .eqv. .FALSE.) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      passed_a(y) = a(x, y)\n      passed_b(y) = b(x, y)\n    END DO\n    init = 0\n    IF (IS_POSSIBLE_2(passed_a, passed_b, 10, init) .EQV. .FALSE.) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_x_neqv_expr_assign.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: x, y !Iterators\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n  LOGICAL,DIMENSION(LOOPCOUNT, 10):: a, b !Data\n  LOGICAL,DIMENSION(10):: passed_a, passed_b\n  LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n  LOGICAL IS_POSSIBLE\n  INTEGER :: errors = 0\n\n  !Initilization\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(randoms)\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      IF (randoms(x, y) > .5) THEN\n        a(x, y) = .TRUE.\n      ELSE\n        a(x, y) = .FALSE.\n      END IF\n    END DO\n  END DO\n\n  totals = .FALSE.\n  totals_comparison = .FALSE.\n\n  !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT,1:10))\n    !$acc parallel\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        DO y = 1, 10\n          !$acc atomic capture\n            totals(x) = totals(x) .NEQV. a(x, y)\n            b(x, y) = totals(x)\n          !$acc end atomic\n        END DO\n      END DO\n    !$acc end parallel\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      totals_comparison(x) = totals_comparison(x) .NEQV. a(x, y)\n    END DO\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    IF (totals_comparison(x) .NEQV. totals(x)) THEN\n      errors = errors + 1\n      WRITE(*, *) totals_comparison(x)\n    END IF\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      passed_a(y) = a(x, y)\n      passed_b(y) = b(x, y)\n    END DO\n    IF (IS_POSSIBLE(passed_a, passed_b, 10, .FALSE.) .eqv. .FALSE.) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_x_or_expr_assign.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: x, y !Iterators\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n  LOGICAL,DIMENSION(LOOPCOUNT, 10):: a, b !Data\n  LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n  LOGICAL,DIMENSION(10):: passed_a, passed_b\n  LOGICAL IS_POSSIBLE\n  LOGICAL:: init\n  INTEGER :: errors = 0\n\n  !Initilization\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(randoms)\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      IF (randoms(x, y) > .933) THEN\n        a(x, y) = .TRUE.\n      ELSE\n        a(x, y) = .FALSE.\n      END IF\n    END DO\n  END DO\n\n  totals = .FALSE.\n  totals_comparison = .FALSE.\n\n  !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT,1:10))\n    !$acc parallel\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        DO y = 1, 10\n          !$acc atomic capture\n            totals(x) = totals(x) .OR. a(x, y)\n            b(x, y) = totals(x)\n          !$acc end atomic\n        END DO\n      END DO\n    !$acc end parallel\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      totals_comparison(x) = totals_comparison(x) .OR. a(x, y)\n    END DO\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    IF (totals_comparison(x) .NEQV. totals(x)) THEN\n      errors = errors + 1\n      WRITE(*, *) totals_comparison(x)\n    END IF\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      passed_a(y) = a(x, y)\n      passed_b(y) = b(x, y)\n    END DO\n    init = .FALSE.\n    IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .eqv. .FALSE.) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_x_plus_expr_assign.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: x, y !Iterators\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b !Data\n  REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n  REAL(8),DIMENSION(10):: passed_a, passed_b\n  REAL(8):: init\n  LOGICAL IS_POSSIBLE\n  INTEGER :: errors = 0\n\n  !Initilization\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n\n  totals = 0\n  totals_comparison = 0\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT,1:10))\n    !$acc parallel\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        DO y = 1, 10\n          !$acc atomic capture\n            totals(x) = totals(x) + a(x, y)\n            b(x, y) = totals(x)\n          !$acc end atomic\n        END DO\n      END DO\n    !$acc end parallel\n  !$acc end data\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      totals_comparison(x) = totals_comparison(x) + a(x, y)\n    END DO\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    IF (totals_comparison(x) .NE. totals(x)) THEN\n      errors = errors + 1\n      WRITE(*, *) totals_comparison(x)\n    END IF\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      passed_a(y) = a(x, y)\n      passed_b(y) = b(x, y)\n    END DO\n    init = 0\n    IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .eqv. .FALSE.) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_x_times_expr_assign.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: x, y !Iterators\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b !Data\n  REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n  REAL(8),DIMENSION(10):: passed_a, passed_b\n  REAL(8):: init\n  LOGICAL IS_POSSIBLE\n  INTEGER :: errors = 0\n\n  !Initilization\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n\n  totals = 1\n  totals_comparison = 1\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT,1:10))\n    !$acc parallel\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        DO y = 1, 10\n          !$acc atomic capture\n            totals(x) = totals(x) * a(x, y)\n            b(x, y) = totals(x)\n          !$acc end atomic\n        END DO\n      END DO\n    !$acc end parallel\n  !$acc end data\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      totals_comparison(x) = totals_comparison(x) * a(x, y)\n    END DO\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    IF (totals_comparison(x) .NE. totals(x)) THEN\n      errors = errors + 1\n      WRITE(*, *) totals_comparison(x)\n    END IF\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      passed_a(y) = a(x, y)\n      passed_b(y) = b(x, y)\n    END DO\n    init = 1\n    IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .eqv. .TRUE.) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_expr_and_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) < .933) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic\n                  totals(x) = a(x, y) .AND. totals(x)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .AND. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_expr_and_x_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) < .933) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic\n                  totals(x) = a(x, y) .AND. totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .AND. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_expr_divided_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals\n        REAL(8),DIMENSION(10):: passed\n        INTEGER :: errors = 0\n        LOGICAL IS_POSSIBLE\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 1\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic\n                  totals(x) = a(x, y) / totals(x)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed(y) = a(x, y)\n          END DO\n          IF (IS_POSSIBLE(passed, totals(x), 10, 1) .eqv. .FALSE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_expr_divided_x_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals\n        REAL(8),DIMENSION(10):: passed\n        INTEGER :: errors = 0\n        LOGICAL IS_POSSIBLE\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 1\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic\n                  totals(x) = a(x, y) / totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed(y) = a(x, y)\n          END DO\n          IF (IS_POSSIBLE(passed, totals(x), 10, 1) .eqv. .FALSE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_expr_eqv_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) > .5) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic\n                  totals(x) = a(x, y) .EQV. totals(x)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .EQV. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_expr_eqv_x_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) > .5) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic\n                  totals(x) = a(x, y) .EQV. totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .EQV. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_expr_minus_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        LOGICAL IS_POSSIBLE\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals\n        INTEGER :: errors = 0\n        REAL(8),DIMENSION(10):: passed\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic\n                  totals(x) = a(x, y) - totals(x)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed(y) = a(x, y)\n          END DO\n          IF (IS_POSSIBLE(passed, totals(x), 10, 0) .eqv. .FALSE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_expr_minus_x_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        LOGICAL IS_POSSIBLE\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals\n        INTEGER :: errors = 0\n        REAL(8),DIMENSION(10):: passed\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic\n                  totals(x) = a(x, y) - totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed(y) = a(x, y)\n          END DO\n          IF (IS_POSSIBLE(passed, totals(x), 10, 0) .eqv. .FALSE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_expr_neqv_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) > .5) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic\n                  totals(x) = a(x, y) .NEQV. totals(x)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .NEQV. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_expr_neqv_x_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) > .5) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic\n                  totals(x) = a(x, y) .NEQV. totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .NEQV. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_expr_or_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) > .933) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic\n                  totals(x) = a(x, y) .OR. totals(x)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .OR. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_expr_or_x_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) > .933) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic\n                  totals(x) = a(x, y) .OR. totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .OR. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_expr_plus_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic\n                  totals(x) = a(x, y) + totals(x)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) + a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_expr_plus_x_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic\n                  totals(x) = a(x, y) + totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) + a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_expr_times_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 1\n        totals_comparison = 1\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic\n                  totals(x) = a(x, y) * totals(x)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) * a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_expr_times_x_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 1\n        totals_comparison = 1\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic\n                  totals(x) = a(x, y) * totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) * a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_iand_expr_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        INTEGER,DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT, 8):: randoms\n        INTEGER,DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        a = 0\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 8\n            IF (randoms(x, y) .gt. .933) THEN\n              a(x) = a(x) + ISHFT(1, y - 1)\n            END IF\n          END DO\n        END DO\n        totals = 0\n        totals_comparison = 0\n        DO x = 1, LOOPCOUNT/10 + 1\n          DO y = 0, 7\n            totals(x) = totals(x) + ISHFT(1, y)\n            totals_comparison(x) = totals_comparison(x) + ISHFT(1, y)\n          END DO\n        END DO\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = iand(a(x), totals(MOD(x, LOOPCOUNT/10 + 1) + 1))\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = iand(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_iand_expr_x_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        INTEGER,DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT, 8):: randoms\n        INTEGER,DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        a = 0\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 8\n            IF (randoms(x, y) .gt. .933) THEN\n              a(x) = a(x) + ISHFT(1, y - 1)\n            END IF\n          END DO\n        END DO\n        totals = 0\n        totals_comparison = 0\n        DO x = 1, LOOPCOUNT/10 + 1\n          DO y = 0, 7\n            totals(x) = totals(x) + ISHFT(1, y)\n            totals_comparison(x) = totals_comparison(x) + ISHFT(1, y)\n          END DO\n        END DO\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = iand(a(x), totals(MOD(x, LOOPCOUNT/10 + 1) + 1))\n              !$acc end atomic\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = iand(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_iand_x_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        INTEGER,DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT, 8):: randoms\n        INTEGER,DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        a = 0\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 8\n            IF (randoms(x, y) .gt. .933) THEN\n              a(x) = a(x) + ISHFT(1, y - 1)\n            END IF\n          END DO\n        END DO\n        totals = 0\n        totals_comparison = 0\n        DO x = 1, LOOPCOUNT/10 + 1\n          DO y = 0, 7\n            totals(x) = totals(x) + ISHFT(1, y)\n            totals_comparison(x) = totals_comparison(x) + ISHFT(1, y)\n          END DO\n        END DO\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = iand(totals(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = iand(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_iand_x_expr_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        INTEGER,DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT, 8):: randoms\n        INTEGER,DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        a = 0\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 8\n            IF (randoms(x, y) .gt. .933) THEN\n              a(x) = a(x) + ISHFT(1, y - 1)\n            END IF\n          END DO\n        END DO\n        totals = 0\n        totals_comparison = 0\n        DO x = 1, LOOPCOUNT/10 + 1\n          DO y = 0, 7\n            totals(x) = totals(x) + ISHFT(1, y)\n            totals_comparison(x) = totals_comparison(x) + ISHFT(1, y)\n          END DO\n        END DO\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = iand(totals(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n              !$acc end atomic\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = iand(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_ior_expr_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        INTEGER,DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT, 8):: randoms\n        INTEGER,DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        a = 0\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 8\n            IF (randoms(x, y) .lt. .933) THEN\n              a(x) = a(x) + ISHFT(1, y - 1)\n            END IF\n          END DO\n        END DO\n        totals = 0\n        totals_comparison = 0\n        DO x = 1, LOOPCOUNT/10 + 1\n          totals(x) = 0\n          totals_comparison(x) = 0\n        END DO\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = ior(a(x), totals(MOD(x, LOOPCOUNT/10 + 1) + 1))\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = ior(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_ior_expr_x_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        INTEGER,DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT, 8):: randoms\n        INTEGER,DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        a = 0\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 8\n            IF (randoms(x, y) .lt. .933) THEN\n              a(x) = a(x) + ISHFT(1, y - 1)\n            END IF\n          END DO\n        END DO\n        totals = 0\n        totals_comparison = 0\n        DO x = 1, LOOPCOUNT/10 + 1\n          totals(x) = 0\n          totals_comparison(x) = 0\n        END DO\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = ior(a(x), totals(MOD(x, LOOPCOUNT/10 + 1) + 1))\n              !$acc end atomic\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = ior(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_ior_x_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        INTEGER,DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT, 8):: randoms\n        INTEGER,DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        a = 0\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 8\n            IF (randoms(x, y) .lt. .933) THEN\n              a(x) = a(x) + ISHFT(1, y - 1)\n            END IF\n          END DO\n        END DO\n        totals = 0\n        totals_comparison = 0\n        DO x = 1, LOOPCOUNT/10 + 1\n          totals(x) = 0\n          totals_comparison(x) = 0\n        END DO\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = ior(totals(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = ior(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_ior_x_expr_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        INTEGER,DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT, 8):: randoms\n        INTEGER,DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        a = 0\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 8\n            IF (randoms(x, y) .lt. .933) THEN\n              a(x) = a(x) + ISHFT(1, y - 1)\n            END IF\n          END DO\n        END DO\n        totals = 0\n        totals_comparison = 0\n        DO x = 1, LOOPCOUNT/10 + 1\n          totals(x) = 0\n          totals_comparison(x) = 0\n        END DO\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = ior(totals(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n              !$acc end atomic\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = ior(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_ixor_expr_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        INTEGER,DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT, 8):: randoms\n        INTEGER,DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        a = 0\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 8\n            IF (randoms(x, y) .lt. .5) THEN\n              a(x) = a(x) + ISHFT(1, y - 1)\n            END IF\n          END DO\n        END DO\n        totals = 0\n        totals_comparison = 0\n        DO x = 1, LOOPCOUNT/10 + 1\n          totals(x) = 0\n          totals_comparison(x) = 0\n        END DO\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = ieor(a(x), totals(MOD(x, LOOPCOUNT/10 + 1) + 1))\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = ieor(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_ixor_expr_x_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        INTEGER,DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT, 8):: randoms\n        INTEGER,DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        a = 0\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 8\n            IF (randoms(x, y) .lt. .5) THEN\n              a(x) = a(x) + ISHFT(1, y - 1)\n            END IF\n          END DO\n        END DO\n        totals = 0\n        totals_comparison = 0\n        DO x = 1, LOOPCOUNT/10 + 1\n          totals(x) = 0\n          totals_comparison(x) = 0\n        END DO\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = ieor(a(x), totals(MOD(x, LOOPCOUNT/10 + 1) + 1))\n              !$acc end atomic\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = ieor(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_ixor_x_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        INTEGER,DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT, 8):: randoms\n        INTEGER,DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        a = 0\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 8\n            IF (randoms(x, y) .lt. .5) THEN\n              a(x) = a(x) + ISHFT(1, y - 1)\n            END IF\n          END DO\n        END DO\n        totals = 0\n        totals_comparison = 0\n        DO x = 1, LOOPCOUNT/10 + 1\n          totals(x) = 0\n          totals_comparison(x) = 0\n        END DO\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = ieor(totals(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = ieor(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_ixor_x_expr_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        INTEGER,DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT, 8):: randoms\n        INTEGER,DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        a = 0\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 8\n            IF (randoms(x, y) .lt. .5) THEN\n              a(x) = a(x) + ISHFT(1, y - 1)\n            END IF\n          END DO\n        END DO\n        totals = 0\n        totals_comparison = 0\n        DO x = 1, LOOPCOUNT/10 + 1\n          totals(x) = 0\n          totals_comparison(x) = 0\n        END DO\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = ieor(totals(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n              !$acc end atomic\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = ieor(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_max_expr_list_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.f90\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        REAL(8),DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = max(a(x), b(x), totals(MOD(x, LOOPCOUNT/10 + 1) + 1))\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = max(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x), b(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_max_expr_list_x_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        REAL(8),DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = max(a(x), b(x), totals(MOD(x, LOOPCOUNT/10 + 1) + 1))\n              !$acc end atomic\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = max(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x), b(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_max_expr_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = max(a(x), totals(MOD(x, LOOPCOUNT/10 + 1) + 1))\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = max(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_max_expr_x_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = max(a(x), totals(MOD(x, LOOPCOUNT/10 + 1) + 1))\n              !$acc end atomic\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = max(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_max_x_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = max(totals(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = max(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_max_x_expr_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = max(totals(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n              !$acc end atomic\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = max(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_max_x_expr_list.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        REAL(8),DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = max(totals(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x), b(x))\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = max(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x), b(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_max_x_expr_list_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        REAL(8),DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = max(totals(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x), b(x))\n              !$acc end atomic\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = max(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x), b(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_min_expr_list_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        REAL(8),DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n\n        totals = 1\n        totals_comparison = 1\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = min(a(x), b(x), totals(MOD(x, LOOPCOUNT/10 + 1) + 1))\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = min(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x), b(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_min_expr_list_x_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        REAL(8),DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n\n        totals = 1\n        totals_comparison = 1\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = min(a(x), b(x), totals(MOD(x, LOOPCOUNT/10 + 1) + 1))\n              !$acc end atomic\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = min(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x), b(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_min_expr_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 1\n        totals_comparison = 1\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = min(a(x), totals(MOD(x, LOOPCOUNT/10 + 1) + 1))\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = min(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_min_expr_x_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 1\n        totals_comparison = 1\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = min(a(x), totals(MOD(x, LOOPCOUNT/10 + 1) + 1))\n              !$acc end atomic\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = min(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_min_x_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = min(totals(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = min(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_min_x_expr_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = min(totals(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n              !$acc end atomic\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = min(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_min_x_expr_list.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        REAL(8),DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n\n        totals = 1\n        totals_comparison = 1\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = min(totals(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x), b(x))\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = min(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x), b(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_min_x_expr_list_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        REAL(8),DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n\n        totals = 1\n        totals_comparison = 1\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = min(totals(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x), b(x))\n              !$acc end atomic\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = min(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x), b(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_expr_and_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) < .933) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic update\n                  totals(x) = a(x, y) .AND. totals(x)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .AND. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_expr_and_x_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) < .933) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic update\n                  totals(x) = a(x, y) .AND. totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .AND. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_expr_divided_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals\n        REAL(8),DIMENSION(10):: passed\n        INTEGER :: errors = 0\n        LOGICAL IS_POSSIBLE\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 1\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic update\n                  totals(x) = a(x, y) / totals(x)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed(y) = a(x, y)\n          END DO\n          IF (IS_POSSIBLE(passed, totals(x), 10, 1) .eqv. .FALSE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_expr_divided_x_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals\n        REAL(8),DIMENSION(10):: passed\n        INTEGER :: errors = 0\n        LOGICAL IS_POSSIBLE\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 1\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic update\n                  totals(x) = a(x, y) / totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed(y) = a(x, y)\n          END DO\n          IF (IS_POSSIBLE(passed, totals(x), 10, 1) .eqv. .FALSE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_expr_eqv_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) > .5) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic update\n                  totals(x) = a(x, y) .EQV. totals(x)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .EQV. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_expr_eqv_x_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) > .5) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic update\n                  totals(x) = a(x, y) .EQV. totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .EQV. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_expr_minus_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        LOGICAL IS_POSSIBLE\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals\n        INTEGER :: errors = 0\n        REAL(8),DIMENSION(10):: passed\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic update\n                  totals(x) = a(x, y) - totals(x)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed(y) = a(x, y)\n          END DO\n          IF (IS_POSSIBLE(passed, totals(x), 10, 0) .eqv. .FALSE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_expr_minus_x_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        LOGICAL IS_POSSIBLE\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals\n        INTEGER :: errors = 0\n        REAL(8),DIMENSION(10):: passed\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic update\n                  totals(x) = a(x, y) - totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed(y) = a(x, y)\n          END DO\n          IF (IS_POSSIBLE(passed, totals(x), 10, 0) .eqv. .FALSE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_expr_neqv_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) > .5) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic update\n                  totals(x) = a(x, y) .NEQV. totals(x)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .NEQV. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_expr_neqv_x_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) > .5) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic update\n                  totals(x) = a(x, y) .NEQV. totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .NEQV. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_expr_or_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) > .933) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic update\n                  totals(x) = a(x, y) .OR. totals(x)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .OR. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_expr_or_x_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) > .933) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic update\n                  totals(x) = a(x, y) .OR. totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .OR. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_expr_plus_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic update\n                  totals(x) = a(x, y) + totals(x)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) + a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_expr_plus_x_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic update\n                  totals(x) = a(x, y) + totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) + a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_expr_times_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 1\n        totals_comparison = 1\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic update\n                  totals(x) = a(x, y) * totals(x)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) * a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_expr_times_x_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 1\n        totals_comparison = 1\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic update\n                  totals(x) = a(x, y) * totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) * a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_iand_expr_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        INTEGER,DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT, 8):: randoms\n        INTEGER,DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        a = 0\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 8\n            IF (randoms(x, y) .gt. .933) THEN\n              a(x) = a(x) + ISHFT(1, y - 1)\n            END IF\n          END DO\n        END DO\n        totals = 0\n        totals_comparison = 0\n        DO x = 1, LOOPCOUNT/10 + 1\n          DO y = 0, 7\n            totals(x) = totals(x) + ISHFT(1, y)\n            totals_comparison(x) = totals_comparison(x) + ISHFT(1, y)\n          END DO\n        END DO\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic update\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = iand(a(x), totals(MOD(x, LOOPCOUNT/10 + 1) + 1))\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = iand(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_iand_expr_x_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        INTEGER,DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT, 8):: randoms\n        INTEGER,DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        a = 0\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 8\n            IF (randoms(x, y) .gt. .933) THEN\n              a(x) = a(x) + ISHFT(1, y - 1)\n            END IF\n          END DO\n        END DO\n        totals = 0\n        totals_comparison = 0\n        DO x = 1, LOOPCOUNT/10 + 1\n          DO y = 0, 7\n            totals(x) = totals(x) + ISHFT(1, y)\n            totals_comparison(x) = totals_comparison(x) + ISHFT(1, y)\n          END DO\n        END DO\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic update\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = iand(a(x), totals(MOD(x, LOOPCOUNT/10 + 1) + 1))\n              !$acc end atomic\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = iand(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_iand_x_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        INTEGER,DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT, 8):: randoms\n        INTEGER,DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        a = 0\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 8\n            IF (randoms(x, y) .gt. .933) THEN\n              a(x) = a(x) + ISHFT(1, y - 1)\n            END IF\n          END DO\n        END DO\n        totals = 0\n        totals_comparison = 0\n        DO x = 1, LOOPCOUNT/10 + 1\n          DO y = 0, 7\n            totals(x) = totals(x) + ISHFT(1, y)\n            totals_comparison(x) = totals_comparison(x) + ISHFT(1, y)\n          END DO\n        END DO\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic update\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = iand(totals(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = iand(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_iand_x_expr_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        INTEGER,DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT, 8):: randoms\n        INTEGER,DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        a = 0\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 8\n            IF (randoms(x, y) .gt. .933) THEN\n              a(x) = a(x) + ISHFT(1, y - 1)\n            END IF\n          END DO\n        END DO\n        totals = 0\n        totals_comparison = 0\n        DO x = 1, LOOPCOUNT/10 + 1\n          DO y = 0, 7\n            totals(x) = totals(x) + ISHFT(1, y)\n            totals_comparison(x) = totals_comparison(x) + ISHFT(1, y)\n          END DO\n        END DO\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic update\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = iand(totals(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n              !$acc end atomic\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = iand(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_ior_expr_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        INTEGER,DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT, 8):: randoms\n        INTEGER,DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        a = 0\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 8\n            IF (randoms(x, y) .lt. .933) THEN\n              a(x) = a(x) + ISHFT(1, y - 1)\n            END IF\n          END DO\n        END DO\n        totals = 0\n        totals_comparison = 0\n        DO x = 1, LOOPCOUNT/10 + 1\n          totals(x) = 0\n          totals_comparison(x) = 0\n        END DO\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic update\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = ior(a(x), totals(MOD(x, LOOPCOUNT/10 + 1) + 1))\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = ior(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_ior_expr_x_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        INTEGER,DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT, 8):: randoms\n        INTEGER,DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        a = 0\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 8\n            IF (randoms(x, y) .lt. .933) THEN\n              a(x) = a(x) + ISHFT(1, y - 1)\n            END IF\n          END DO\n        END DO\n        totals = 0\n        totals_comparison = 0\n        DO x = 1, LOOPCOUNT/10 + 1\n          totals(x) = 0\n          totals_comparison(x) = 0\n        END DO\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic update\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = ior(a(x), totals(MOD(x, LOOPCOUNT/10 + 1) + 1))\n              !$acc end atomic\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = ior(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_ior_x_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        INTEGER,DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT, 8):: randoms\n        INTEGER,DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        a = 0\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 8\n            IF (randoms(x, y) .lt. .933) THEN\n              a(x) = a(x) + ISHFT(1, y - 1)\n            END IF\n          END DO\n        END DO\n        totals = 0\n        totals_comparison = 0\n        DO x = 1, LOOPCOUNT/10 + 1\n          totals(x) = 0\n          totals_comparison(x) = 0\n        END DO\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic update\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = ior(totals(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = ior(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_ior_x_expr_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        INTEGER,DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT, 8):: randoms\n        INTEGER,DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        a = 0\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 8\n            IF (randoms(x, y) .lt. .933) THEN\n              a(x) = a(x) + ISHFT(1, y - 1)\n            END IF\n          END DO\n        END DO\n        totals = 0\n        totals_comparison = 0\n        DO x = 1, LOOPCOUNT/10 + 1\n          totals(x) = 0\n          totals_comparison(x) = 0\n        END DO\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic update\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = ior(totals(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n              !$acc end atomic\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = ior(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_ixor_expr_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        INTEGER,DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT, 8):: randoms\n        INTEGER,DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        a = 0\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 8\n            IF (randoms(x, y) .lt. .5) THEN\n              a(x) = a(x) + ISHFT(1, y - 1)\n            END IF\n          END DO\n        END DO\n        totals = 0\n        totals_comparison = 0\n        DO x = 1, LOOPCOUNT/10 + 1\n          totals(x) = 0\n          totals_comparison(x) = 0\n        END DO\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic update\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = ieor(a(x), totals(MOD(x, LOOPCOUNT/10 + 1) + 1))\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = ieor(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_ixor_expr_x_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        INTEGER,DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT, 8):: randoms\n        INTEGER,DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        a = 0\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 8\n            IF (randoms(x, y) .lt. .5) THEN\n              a(x) = a(x) + ISHFT(1, y - 1)\n            END IF\n          END DO\n        END DO\n        totals = 0\n        totals_comparison = 0\n        DO x = 1, LOOPCOUNT/10 + 1\n          totals(x) = 0\n          totals_comparison(x) = 0\n        END DO\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic update\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = ieor(a(x), totals(MOD(x, LOOPCOUNT/10 + 1) + 1))\n              !$acc end atomic\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = ieor(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_ixor_x_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        INTEGER,DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT, 8):: randoms\n        INTEGER,DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        a = 0\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 8\n            IF (randoms(x, y) .lt. .5) THEN\n              a(x) = a(x) + ISHFT(1, y - 1)\n            END IF\n          END DO\n        END DO\n        totals = 0\n        totals_comparison = 0\n        DO x = 1, LOOPCOUNT/10 + 1\n          totals(x) = 0\n          totals_comparison(x) = 0\n        END DO\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic update\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = ieor(totals(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = ieor(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_ixor_x_expr_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        INTEGER,DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT, 8):: randoms\n        INTEGER,DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        a = 0\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 8\n            IF (randoms(x, y) .lt. .5) THEN\n              a(x) = a(x) + ISHFT(1, y - 1)\n            END IF\n          END DO\n        END DO\n        totals = 0\n        totals_comparison = 0\n        DO x = 1, LOOPCOUNT/10 + 1\n          totals(x) = 0\n          totals_comparison(x) = 0\n        END DO\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic update\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = ieor(totals(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n              !$acc end atomic\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = ieor(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_max_expr_list_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        REAL(8),DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic update\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = max(a(x), b(x), totals(MOD(x, LOOPCOUNT/10 + 1) + 1))\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = max(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x), b(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_max_expr_list_x_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        REAL(8),DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic update\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = max(a(x), b(x), totals(MOD(x, LOOPCOUNT/10 + 1) + 1))\n              !$acc end atomic\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = max(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x), b(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_max_expr_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic update\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = max(a(x), totals(MOD(x, LOOPCOUNT/10 + 1) + 1))\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = max(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_max_expr_x_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic update\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = max(a(x), totals(MOD(x, LOOPCOUNT/10 + 1) + 1))\n              !$acc end atomic\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = max(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_max_x_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic update\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = max(totals(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = max(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_max_x_expr_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic update\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = max(totals(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n              !$acc end atomic\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = max(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_max_x_expr_list.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        REAL(8),DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic update\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = max(totals(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x), b(x))\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = max(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x), b(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_max_x_expr_list_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        REAL(8),DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic update\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = max(totals(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x), b(x))\n              !$acc end atomic\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = max(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x), b(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_min_expr_list_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        REAL(8),DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n\n        totals = 1\n        totals_comparison = 1\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic update\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = min(a(x), b(x), totals(MOD(x, LOOPCOUNT/10 + 1) + 1))\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = min(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x), b(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_min_expr_list_x_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        REAL(8),DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n\n        totals = 1\n        totals_comparison = 1\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic update\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = min(a(x), b(x), totals(MOD(x, LOOPCOUNT/10 + 1) + 1))\n              !$acc end atomic\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = min(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x), b(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_min_expr_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 1\n        totals_comparison = 1\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic update\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = min(a(x), totals(MOD(x, LOOPCOUNT/10 + 1) + 1))\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = min(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_min_expr_x_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 1\n        totals_comparison = 1\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic update\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = min(a(x), totals(MOD(x, LOOPCOUNT/10 + 1) + 1))\n              !$acc end atomic\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = min(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_min_x_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic update\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = min(totals(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = min(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_min_x_expr_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic update\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = min(totals(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n              !$acc end atomic\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = min(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_min_x_expr_list.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        REAL(8),DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n\n        totals = 1\n        totals_comparison = 1\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic update\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = min(totals(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x), b(x))\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = min(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x), b(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_min_x_expr_list_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        REAL(8),DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n\n        totals = 1\n        totals_comparison = 1\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic update\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = min(totals(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x), b(x))\n              !$acc end atomic\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = min(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x), b(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_x_and_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) < .933) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic update\n                  totals(x) = totals(x) .AND. a(x, y)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .AND. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_x_and_expr_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) < .933) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic update\n                  totals(x) = totals(x) .AND. a(x, y)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .AND. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_x_divided_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 1\n        totals_comparison = 1\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic update\n                  totals(x) = totals(x) / a(x, y)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) / a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_x_divided_expr_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 1\n        totals_comparison = 1\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic update\n                  totals(x) = totals(x) / a(x, y)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) / a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_x_eqv_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) > .5) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic update\n                  totals(x) = totals(x) .EQV. a(x, y)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .EQV. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_x_eqv_expr_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) > .5) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic update\n                  totals(x) = totals(x) .EQV. a(x, y)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .EQV. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_x_minus_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic update\n                  totals(x) = totals(x) - a(x, y)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) - a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_x_minus_expr_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic update\n                  totals(x) = totals(x) - a(x, y)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) - a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_x_neqv_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) > .5) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic update\n                  totals(x) = totals(x) .NEQV. a(x, y)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .NEQV. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_x_neqv_expr_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) > .5) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic update\n                  totals(x) = totals(x) .NEQV. a(x, y)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .NEQV. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_x_or_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) > .933) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic update\n                  totals(x) = totals(x) .OR. a(x, y)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .OR. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_x_or_expr_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) > .933) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic update\n                  totals(x) = totals(x) .OR. a(x, y)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .OR. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_x_plus_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic update\n                  totals(x) = totals(x) + a(x, y)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) + a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_x_plus_expr_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic update\n                  totals(x) = totals(x) + a(x, y)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) + a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_x_times_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 1\n        totals_comparison = 1\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic update\n                  totals(x) = totals(x) * a(x, y)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) * a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_x_times_expr_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 1\n        totals_comparison = 1\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic update\n                  totals(x) = totals(x) * a(x, y)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) * a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_x_and_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) < .933) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic\n                  totals(x) = totals(x) .AND. a(x, y)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .AND. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_x_and_expr_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) < .933) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic\n                  totals(x) = totals(x) .AND. a(x, y)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .AND. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_x_divided_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 1\n        totals_comparison = 1\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic\n                  totals(x) = totals(x) / a(x, y)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) / a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_x_divided_expr_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 1\n        totals_comparison = 1\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic\n                  totals(x) = totals(x) / a(x, y)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) / a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_x_eqv_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) > .5) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic\n                  totals(x) = totals(x) .EQV. a(x, y)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .EQV. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_x_eqv_expr_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) > .5) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic\n                  totals(x) = totals(x) .EQV. a(x, y)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .EQV. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_x_minus_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic\n                  totals(x) = totals(x) - a(x, y)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) - a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_x_minus_expr_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic\n                  totals(x) = totals(x) - a(x, y)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) - a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_x_neqv_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) > .5) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic\n                  totals(x) = totals(x) .NEQV. a(x, y)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .NEQV. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_x_neqv_expr_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) > .5) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic\n                  totals(x) = totals(x) .NEQV. a(x, y)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .NEQV. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_x_or_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) > .933) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic\n                  totals(x) = totals(x) .OR. a(x, y)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .OR. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_x_or_expr_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) > .933) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic\n                  totals(x) = totals(x) .OR. a(x, y)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .OR. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_x_plus_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic\n                  totals(x) = totals(x) + a(x, y)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) + a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_x_plus_expr_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic\n                  totals(x) = totals(x) + a(x, y)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) + a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_x_times_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 1\n        totals_comparison = 1\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic\n                  totals(x) = totals(x) * a(x, y)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) * a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_x_times_expr_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 1\n        totals_comparison = 1\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic\n                  totals(x) = totals(x) * a(x, y)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) * a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "data_copy_no_lower_bound.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:data,data_region,construct-independent,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copy(c(:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = c(x) + a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "data",
                            "data_region",
                            "construct-independent"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "data_copyin_no_lower_bound.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:data,data_region,construct-independent,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc data copyin(a(:LOOPCOUNT), b(:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "data",
                            "data_region",
                            "construct-independent"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "data_copyout_no_lower_bound.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:data,data_region,construct-independent,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "data",
                            "data_region",
                            "construct-independent"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "data_copyout_reference_counts.F90": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:data,data_region,devonly,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n        INTEGER,DIMENSION(1)::devtest\n\n        devtest(1) = 1\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel present(devtest(1:1))\n          devtest(1) = 0\n        !$acc end parallel\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        IF (devtest(1) .eq. 1) THEN\n          CALL RANDOM_NUMBER(a)\n          CALL RANDOM_NUMBER(b)\n          c = 0\n          !$acc data copyin(c(1:LOOPCOUNT))\n            !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n              !$acc parallel\n                !$acc loop\n                DO x = 1, LOOPCOUNT\n                  c(x) = c(x) + a(x) + b(x)\n                END DO\n              !$acc end parallel\n            !$acc end data\n          !$acc end data\n\n          DO x = 1, LOOPCOUNT\n            IF (abs(c(x)) .gt. PRECISION) THEN\n              errors = errors + 1\n              EXIT\n            END IF\n          END DO\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "data",
                            "data_region",
                            "devonly",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:data,data_region,devonly,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test2()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n        INTEGER,DIMENSION(1)::devtest\n\n        devtest(1) = 1\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel present(devtest(1:1))\n          devtest(1) = 0\n        !$acc end parallel\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc enter data copyin(c(1:LOOPCOUNT))\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = c(x) + a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n        IF (devtest(1) .eq. 1) THEN\n          DO x = 1, LOOPCOUNT\n            IF (abs(c(x)) .gt. PRECISION) THEN\n              errors = errors + 2\n              EXIT\n            END IF\n          END DO\n        END IF\n        !$acc exit data copyout(c(1:LOOPCOUNT))\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 4\n            EXIT\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "data",
                            "data_region",
                            "devonly",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n!T3:data,data_region,devonly,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test3()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n        INTEGER,DIMENSION(1)::devtest\n\n        devtest(1) = 1\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel present(devtest(1:1))\n          devtest(1) = 0\n        !$acc end parallel\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc enter data copyin(c(1:LOOPCOUNT))\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = c(x) + a(x) + b(x)\n            END DO\n          !$acc end parallel\n          !$acc exit data delete(c(1:LOOPCOUNT))\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 8\n            EXIT\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test3 = .FALSE.\n        ELSE\n          test3 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T3\n        LOGICAL :: test3\n#endif\n#ifndef T3\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test3()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 2\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "data",
                            "data_region",
                            "devonly",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "data_create.F90": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:data,data_region,construct-independent,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        b = 0\n        c = 0 \n\n        !$acc data create(b(1:LOOPCOUNT))\n          !$acc data copyin(a(1:LOOPCOUNT))\n            !$acc parallel\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                b(x) = a(x)\n              END DO\n            !$acc end parallel\n          !$acc end data\n          !$acc data copyout(c(1:LOOPCOUNT))\n            !$acc parallel\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                c(x) = b(x)\n              END DO\n            !$acc end parallel\n          !$acc end data\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(a(x) - c(x)) .gt. PRECISION) THEN\n            errors = errors + 1\n            EXIT\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "data",
                            "data_region",
                            "construct-independent"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:data,data_region,construct-independent,V:1.0-2.7\n      LOGICAL FUNCTION test2()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        b = 0\n        c = 0\n \n        !$acc data present_or_create(b(1:LOOPCOUNT))\n          !$acc data copyin(a(1:LOOPCOUNT))\n            !$acc parallel\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                b(x) = a(x)\n              END DO\n            !$acc end parallel\n          !$acc end data\n          !$acc data copyout(c(1:LOOPCOUNT))\n            !$acc parallel\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                c(x) = b(x)\n              END DO\n            !$acc end parallel\n          !$acc end data\n        !$acc end data\n \n        DO x = 1, LOOPCOUNT\n          IF (abs(a(x) - c(x)) .gt. PRECISION) THEN\n            errors = errors + 2\n            EXIT\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "data",
                            "data_region",
                            "construct-independent"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n!T3:data,data_region,construct-independent,V:1.0-2.7\n      LOGICAL FUNCTION test3()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        b = 0\n        c = 0\n \n        !$acc data pcreate(b(1:LOOPCOUNT))\n          !$acc data copyin(a(1:LOOPCOUNT))\n            !$acc parallel\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                b(x) = a(x)\n              END DO\n            !$acc end parallel\n          !$acc end data\n          !$acc data copyout(c(1:LOOPCOUNT))\n            !$acc parallel\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                c(x) = b(x)\n              END DO\n            !$acc end parallel\n          !$acc end data\n        !$acc end data\n     \n        DO x = 1, LOOPCOUNT\n          IF (abs(a(x) - c(x)) .gt. PRECISION) THEN\n            errors = errors + 4\n            EXIT\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test3 = .FALSE.\n        ELSE\n          test3 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T3\n        LOGICAL :: test3\n#endif\n#ifndef T3\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test3()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 2\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "data",
                            "data_region",
                            "construct-independent"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "data_create_no_lower_bound.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:data,data_region,construct-independent,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, d, e !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        CALL RANDOM_NUMBER(d)\n        e = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), d(1:LOOPCOUNT)) create(c(:LOOPCOUNT)) copyout(e(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              e(x) = c(x) + d(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          IF (abs(e(x) - (a(x) + b(x) + d(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "data",
                            "data_region",
                            "construct-independent"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "data_present_no_lower_bound.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:data,data_region,construct-independent,present,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n \n        !$acc enter data copyin(c(1:LOOPCOUNT))\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) present(c(:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n        !$acc exit data copyout(c(1:LOOPCOUNT))\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "data",
                            "data_region",
                            "construct-independent",
                            "present"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "data_with_changing_subscript.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:data,data_region,construct-independent,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, indexer !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n\n        indexer = LOOPCOUNT\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc data copyin(a(1:indexer), b(1:indexer)) copyout(c(1:indexer))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, indexer\n              c(x) = a(x) + b(x)\n            END DO\n            indexer = 1\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "data",
                            "data_region",
                            "construct-independent"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "data_with_derived_type.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:data,data_region,construct-independent,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        TYPE multi_item\n          REAL(8) :: a\n          REAL(8) :: b\n          REAL(8) :: c\n        END TYPE multi_item\n        INTEGER :: x !Iterators\n        TYPE (multi_item),DIMENSION(LOOPCOUNT):: a !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        DO x = 1, LOOPCOUNT\n          CALL RANDOM_NUMBER(a(x)%a)\n          CALL RANDOM_NUMBER(a(x)%b)\n          a(x)%c = 0.0\n        END DO\n\n        !$acc data copy(a(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              a(x)%c = a(x)%a + a(x)%b\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          IF (abs(a(x)%c - (a(x)%a + a(x)%b)) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "data",
                            "data_region",
                            "construct-independent"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "declare_copyin.F90": {
                "num tests": 4,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,declare,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  USE OPENACC\n  USE DECLARE_COPYIN_MOD\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: errors = 0\n  INTEGER :: mult = 2\n  INTEGER :: x\n  REAL(8),DIMENSION(LOOPCOUNT) :: a, b\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  b = 0\n\n  !$acc data copyin(a(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT)) present(fixed_size_array)\n    !$acc parallel\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        b(x) = a(x) + fixed_size_array(MOD(x, 10))\n      END DO\n    !$acc end parallel\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    IF (abs(b(x) - (a(x) + fixed_size_array(MOD(x, 10)))) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "declare"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:construct-independent,declare,V:1.0-2.7\n      LOGICAL FUNCTION test2()\n  USE OPENACC\n  USE DECLARE_COPYIN_MOD\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: errors = 0\n  INTEGER :: mult = 2\n  REAL(8),DIMENSION(LOOPCOUNT) :: a, b\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  b = 0\n\n  !$acc data copyin(a(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT)) present(scalar)\n    !$acc parallel\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        b(x) = a(x) + scalar\n      END DO\n    !$acc end parallel\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    IF (abs(b(x) - (a(x) + scalar)) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "declare"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n!T3:construct-independent,declare,V:1.0-2.7\n      LOGICAL FUNCTION test3()\n  USE OPENACC\n  USE DECLARE_COPYIN_MOD\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: errors = 0\n  INTEGER :: mult = 2\n  REAL(8),DIMENSION(LOOPCOUNT) :: a, b\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  b = a\n\n  !$acc data copy(a(1:LOOPCOUNT))\n    !$acc parallel\n      !$acc loop\n      DO x = 1, 1\n        CALL externMultiplyData(a, LOOPCOUNT)\n      END DO\n    !$acc end parallel\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    IF (abs(a(x) - (b(x) * 2)) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test3 = .FALSE.\n        ELSE\n          test3 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T3\n        LOGICAL :: test3\n#endif\n#ifndef T3\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test3()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 2\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "declare"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "4": {
                        "content": "#ifndef T4\n!T4:construct-independent,declare,V:1.0-2.7\n      LOGICAL FUNCTION test4()\n  USE OPENACC\n  USE DECLARE_COPYIN_MOD\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: errors = 0\n  INTEGER :: mult = 2\n  REAL(8),DIMENSION(LOOPCOUNT) :: a, b\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  b = a\n\n  !$acc data copy(a(1:LOOPCOUNT))\n    !$acc parallel\n      !$acc loop\n      DO x = 1, 1\n        CALL multiplyData(a)\n      END DO\n    !$acc end parallel\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    IF (abs(a(x) - (b(x) * 2)) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test4 = .FALSE.\n        ELSE\n          test4 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T4\n        LOGICAL :: test4\n#endif\n#ifndef T4\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test4()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 3\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "declare"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "declare_copyin_mod.F90": {
                "num tests": 0,
                "tests": {}
            },
            "declare_create.F90": {
                "num tests": 4,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,declare,update,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  USE OPENACC\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: errors = 0\n  INTEGER :: mult = 2\n  REAL(8),DIMENSION(LOOPCOUNT) :: a, b\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  b = 0\n  !$acc update device(n)\n  !$acc data copyin(a(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT)) present(fixed_size_array)\n    !$acc parallel\n      !$acc loop\n      DO x = 1, 10\n        fixed_size_array(x) = x * x\n      END DO\n    !$acc end parallel\n    !$acc parallel\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        b(x) = a(x) + fixed_size_array(MOD(x, 10))\n      END DO\n    !$acc end parallel\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    IF (abs(b(x) - (a(x) + (MOD(x, 10) * MOD(x, 10)))) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "declare",
                            "update"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:construct-independent,declare,update,V:2.0-2.7\n      LOGICAL FUNCTION test2()\n  USE OPENACC\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: errors = 0\n  INTEGER :: mult = 2\n  REAL(8),DIMENSION(LOOPCOUNT) :: a, b\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  b = 0\n  scalar = 10\n  !$acc update device(scalar)\n  !$acc data copyin(a(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT)) present(scalar)\n    !$acc parallel\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        b(x) = a(x) + scalar\n      END DO\n    !$acc end parallel\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    IF (abs(b(x) - (a(x) + scalar)) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "declare",
                            "update"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n!T3:construct-independent,declare,V:2.0-2.7\n      LOGICAL FUNCTION test3()\n  USE OPENACC\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: errors = 0\n  INTEGER :: mult = 2\n  REAL(8),DIMENSION(LOOPCOUNT) :: a, b\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  b = a\n  !$acc update\n  !$acc data copy(a(1:LOOPCOUNT))\n    !$acc parallel\n      !$acc loop\n      DO x = 1, 1\n        CALL externMultiplyData(a, LOOPCOUNT)\n      END DO\n    !$acc end parallel\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    IF (abs(a(x) - (b(x) * 2)) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test3 = .FALSE.\n        ELSE\n          test3 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T3\n        LOGICAL :: test3\n#endif\n#ifndef T3\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test3()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 2\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "declare"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "4": {
                        "content": "#ifndef T4\n!T4:construct-independent,declare,V:2.0-2.7\n      LOGICAL FUNCTION test4()\n  USE OPENACC\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: errors = 0\n  INTEGER :: mult = 2\n  REAL(8),DIMENSION(LOOPCOUNT) :: a, b\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  b = a\n\n  !$acc data copy(a(1:LOOPCOUNT))\n    !$acc parallel\n      !$acc loop\n      DO x = 1, 1\n        CALL multiplyData(a)\n      END DO\n    !$acc end parallel\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    IF (abs(a(x) - (b(x) * 2)) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test4 = .FALSE.\n        ELSE\n          test4 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T4\n        LOGICAL :: test4\n#endif\n#ifndef T4\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test4()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 3\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "declare"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "declare_function_scope_copy.F90": {
                "num tests": 4,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:devonly,construct-independent,declare,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  USE OPENACC\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: errors = 0\n  INTEGER :: mult = 2\n  REAL(8),DIMENSION(LOOPCOUNT, LOOPCOUNT) :: a, b, c\n  INTEGER,DIMENSION(1) :: devtest\n  INTEGER :: x, y\n\n  devtest(1) = 1\n  !$acc enter data copyin(devtest(1:1))\n  !$acc parallel present(devtest(1:1))\n    devtest(1) = 0\n  !$acc end parallel\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n  c = 1\n  !$acc data copyin(a(1:LOOPCOUNT, 1:LOOPCOUNT), b(1:LOOPCOUNT, 1:LOOPCOUNT))\n    DO x = 1, LOOPCOUNT\n      CALL copyin_copyout_test(a(:,x), b(:,x), c(:,x), LOOPCOUNT)\n    END DO\n  !$acc end data\n  DO x = 1, LOOPCOUNT\n    DO y = 1, LOOPCOUNT\n      IF (abs(c(x, y) - (1 + a(x, y) + b(x, y))) .gt. PRECISION) THEN\n        errors = errors + 1\n      END IF\n    END DO\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "construct-independent",
                            "declare"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:devonly,construct-independent,declare,V:2.0-2.7\n      LOGICAL FUNCTION test2()\n  USE OPENACC\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: errors = 0\n  INTEGER :: mult = 2\n  REAL(8),DIMENSION(LOOPCOUNT, LOOPCOUNT) :: a, b, c\n  INTEGER,DIMENSION(1) :: devtest\n  INTEGER :: x, y\n\n  devtest(1) = 1\n  !$acc enter data copyin(devtest(1:1))\n  !$acc parallel present(devtest(1:1))\n    devtest(1) = 0\n  !$acc end parallel\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n  c = 2\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:LOOPCOUNT), b(1:LOOPCOUNT, 1:LOOPCOUNT))\n    DO x = 1, LOOPCOUNT\n      !$acc data copy(c(1:LOOPCOUNT, x:x))\n        CALL copyin_copyout_test(a(:,x), b(:,x), c(:,x), LOOPCOUNT)\n      !$acc end data\n    END DO\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, LOOPCOUNT\n      IF (abs(c(x, y) - (2 + a(x, y) + b(x, y))) .gt. PRECISION) THEN\n        errors = errors + 1\n      END IF\n    END DO\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "construct-independent",
                            "declare"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n!T3:devonly,construct-independent,declare,V:2.0-2.7\n      LOGICAL FUNCTION test3()\n  USE OPENACC\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: errors = 0\n  INTEGER :: mult = 2\n  REAL(8),DIMENSION(LOOPCOUNT, LOOPCOUNT) :: a, b, c\n  INTEGER,DIMENSION(1) :: devtest\n  INTEGER :: x, y\n\n  devtest(1) = 1\n  !$acc enter data copyin(devtest(1:1))\n  !$acc parallel present(devtest(1:1))\n    devtest(1) = 0\n  !$acc end parallel\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  IF (devtest(1) .eq. 1) THEN\n    CALL RANDOM_NUMBER(a)\n    CALL RANDOM_NUMBER(b)\n    c = 3\n\n    !$acc data copyin(a(1:LOOPCOUNT, 1:LOOPCOUNT), b(1:LOOPCOUNT, 1:LOOPCOUNT))\n      DO x = 1, LOOPCOUNT\n        !$acc data copyin(c(1:LOOPCOUNT, x:x))\n          CALL copyin_copyout_test(a(:,x), b(:,x), c(:,x), LOOPCOUNT)\n          DO y = 1, LOOPCOUNT\n            IF (abs(c(y, x) - 3) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        !$acc end data\n        DO y = 1, LOOPCOUNT\n          IF (abs(c(y, x) - 3) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n      END DO\n    !$acc end data\n  END IF\n\n        IF (errors .eq. 0) THEN\n          test3 = .FALSE.\n        ELSE\n          test3 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T3\n        LOGICAL :: test3\n#endif\n#ifndef T3\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test3()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 2\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "construct-independent",
                            "declare"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "4": {
                        "content": "#ifndef T4\n!T4:devonly,construct-independent,declare,V:2.0-2.7\n      LOGICAL FUNCTION test4()\n  USE OPENACC\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: errors = 0\n  INTEGER :: mult = 2\n  REAL(8),DIMENSION(LOOPCOUNT, LOOPCOUNT) :: a, b, c\n  INTEGER,DIMENSION(1) :: devtest\n  INTEGER :: x, y\n\n  devtest(1) = 1\n  !$acc enter data copyin(devtest(1:1))\n  !$acc parallel present(devtest(1:1))\n    devtest(1) = 0\n  !$acc end parallel\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  IF (devtest(1) .eq. 1) THEN\n    CALL RANDOM_NUMBER(a)\n    CALL RANDOM_NUMBER(b)\n    c = 4\n\n    !$acc data copyin(a(1:LOOPCOUNT, 1:LOOPCOUNT), b(1:LOOPCOUNT, 1:LOOPCOUNT))\n      DO x = 1, LOOPCOUNT\n        !$acc data copy(c(1:LOOPCOUNT, x:x))\n          CALL copyin_copyout_test(a(:,x), b(:,x), c(:,x), LOOPCOUNT)\n          DO y = 1, LOOPCOUNT\n            IF (abs(c(y, x) - 4) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        !$acc end data\n        DO y = 1, LOOPCOUNT\n          IF (abs(c(y, x) - (4 + a(y, x) + b(y, x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n      END DO\n    !$acc end data\n  END IF\n\n        IF (errors .eq. 0) THEN\n          test4 = .FALSE.\n        ELSE\n          test4 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T4\n        LOGICAL :: test4\n#endif\n#ifndef T4\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test4()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 3\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "construct-independent",
                            "declare"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "declare_function_scope_copyin.F90": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:devonly,construct-independent,declare,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  USE OPENACC\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: errors = 0\n  INTEGER :: mult = 2\n  REAL(8),DIMENSION(LOOPCOUNT, LOOPCOUNT) :: a, b, c, a_host, b_host\n  INTEGER,DIMENSION(1) :: devtest\n  INTEGER :: x, y\n\n  devtest(1) = 1\n  !$acc enter data copyin(devtest(1:1))\n  !$acc parallel present(devtest(1:1))\n    devtest(1) = 0\n  !$acc end parallel\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n  c = 1\n\n  !$acc data copy(c(1:LOOPCOUNT, 1:LOOPCOUNT))\n    DO x = 1, LOOPCOUNT\n      CALL function_test(a(:,x), b(:,x), c(:,x), LOOPCOUNT)\n    END DO\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, LOOPCOUNT\n      IF (abs(c(x, y) - (1 + a(x, y) + b(x, y))) .gt. PRECISION) THEN\n        errors = errors + 1\n        PRINT*, \"1\"\n      END IF\n    END DO\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "construct-independent",
                            "declare"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:devonly,construct-independent,declare,V:2.0-2.7\n      LOGICAL FUNCTION test2()\n  USE OPENACC\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: errors = 0\n  INTEGER :: mult = 2\n  REAL(8),DIMENSION(LOOPCOUNT, LOOPCOUNT) :: a, b, c, a_host, b_host\n  INTEGER,DIMENSION(1) :: devtest\n  INTEGER :: x, y\n\n  devtest(1) = 1\n  !$acc enter data copyin(devtest(1:1))\n  !$acc parallel present(devtest(1:1))\n    devtest(1) = 0\n  !$acc end parallel\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  IF (devtest(1) .eq. 1) THEN\n    CALL RANDOM_NUMBER(a)\n    CALL RANDOM_NUMBER(b)\n    c = 0\n    a_host = a\n    b_host = b\n\n    !$acc data copy(a(1:LOOPCOUNT, 1:LOOPCOUNT), b(1:LOOPCOUNT, 1:LOOPCOUNT), c(1:LOOPCOUNT, 1:LOOPCOUNT))\n      DO x = 1, LOOPCOUNT\n        CALL function_test_dev_only(a(:,x), b(:,x), c(:,x), LOOPCOUNT)\n      END DO\n    !$acc end data\n\n    DO x = 1, LOOPCOUNT\n      DO y = 1, LOOPCOUNT\n        IF (abs(a(x, y) + 1) .gt. PRECISION) THEN\n          errors = errors + 1\n          PRINT*, \"2\"\n        END IF\n        IF (abs(b(x, y) + 1) .gt. PRECISION) THEN\n          errors = errors + 1\n          PRINT*, \"3\"\n        END IF\n        IF (abs(c(x, y) - (a_host(x, y) + b_host(x, y))) .gt. PRECISION) THEN\n          errors = errors + 1\n          PRINT*, \"4\"\n        END IF\n      END DO\n    END DO\n  END IF\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "construct-independent",
                            "declare"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n!T3:devonly,construct-independent,declare,V:2.0-2.7\n      LOGICAL FUNCTION test3()\n  USE OPENACC\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: errors = 0\n  INTEGER :: mult = 2\n  REAL(8),DIMENSION(LOOPCOUNT, LOOPCOUNT) :: a, b, c, a_host, b_host\n  INTEGER,DIMENSION(1) :: devtest\n  INTEGER :: x, y\n\n  devtest(1) = 1\n  !$acc enter data copyin(devtest(1:1))\n  !$acc parallel present(devtest(1:1))\n    devtest(1) = 0\n  !$acc end parallel\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  IF (devtest(1) .eq. 1) THEN\n    CALL RANDOM_NUMBER(a)\n    CALL RANDOM_NUMBER(b)\n    c = 1\n    a_host = a\n    b_host = b\n\n    !$acc data copy(c(1:LOOPCOUNT, 1:LOOPCOUNt))\n      DO x = 1, LOOPCOUNT\n        CALL function_test_dev_only(a(:,x), b(:,x), c(:,x), LOOPCOUNT)\n      END DO\n    !$acc end data\n\n    DO x = 1, LOOPCOUNT\n      DO y = 1, LOOPCOUNT\n        IF (abs(a(x, y) - a_host(x, y)) .gt. PRECISION) THEN\n          errors = errors + 1\n          PRINT*, \"5\"\n        END IF\n        IF (abs(b(x, y) - b_host(x, y)) .gt. PRECISION) THEN\n          errors = errors + 1\n          PRINT*, \"6\"\n        END IF\n        IF (abs(c(x, y) - (1 + a(x, y) + b(x, y))) .gt. PRECISION) THEN\n          errors = errors + 1\n          PRINT*, \"7\"\n        END IF\n      END DO\n    END DO\n  END IF\n\n        IF (errors .eq. 0) THEN\n          test3 = .FALSE.\n        ELSE\n          test3 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T3\n        LOGICAL :: test3\n#endif\n#ifndef T3\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test3()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 2\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "construct-independent",
                            "declare"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "declare_function_scope_copyout.F90": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:devonly,construct-independent,declare,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  USE OPENACC\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: errors = 0\n  INTEGER :: mult = 2\n  REAL(8),DIMENSION(LOOPCOUNT, LOOPCOUNT) :: a, b, c\n  INTEGER,DIMENSION(1) :: devtest\n  INTEGER :: x, y\n\n  devtest(1) = 1\n  !$acc enter data copyin(devtest(1:1))\n  !$acc parallel present(devtest(1:1))\n    devtest(1) = 0\n  !$acc end parallel\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n  c = 1\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:LOOPCOUNT), b(1:LOOPCOUNT, 1:LOOPCOUNT))\n    DO x = 1, LOOPCOUNT\n      CALL copyout_test(a(:,x), b(:,x), c(:,x), LOOPCOUNT)\n    END DO\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, LOOPCOUNT\n      IF (abs(c(x, y) - (a(x, y) + b(x, y))) .gt. PRECISION) THEN\n        errors = errors + 1\n      END IF\n    END DO\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "construct-independent",
                            "declare"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:devonly,construct-independent,declare,V:2.0-2.7\n      LOGICAL FUNCTION test2()\n  USE OPENACC\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: errors = 0\n  INTEGER :: mult = 2\n  REAL(8),DIMENSION(LOOPCOUNT, LOOPCOUNT) :: a, b, c\n  INTEGER,DIMENSION(1) :: devtest\n  INTEGER :: x, y\n\n  devtest(1) = 1\n  !$acc enter data copyin(devtest(1:1))\n  !$acc parallel present(devtest(1:1))\n    devtest(1) = 0\n  !$acc end parallel\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n  c = 2\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:LOOPCOUNT), b(1:LOOPCOUNT, 1:LOOPCOUNT))\n    DO x = 1, LOOPCOUNT\n      !$acc data copy(c(1:LOOPCOUNT, x:x))\n        CALL copyout_test(a(:,x), b(:,x), c(:,x), LOOPCOUNT)\n      !$acc end data\n    END DO\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, LOOPCOUNT\n      IF (abs(c(x, y) - (a(x, y) + b(x, y))) .gt. PRECISION) THEN\n        errors = errors + 1\n      END IF\n    END DO\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "construct-independent",
                            "declare"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n!T3:devonly,construct-independent,declare,V:2.0-2.7\n      LOGICAL FUNCTION test3()\n  USE OPENACC\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: errors = 0\n  INTEGER :: mult = 2\n  REAL(8),DIMENSION(LOOPCOUNT, LOOPCOUNT) :: a, b, c\n  INTEGER,DIMENSION(1) :: devtest\n  INTEGER :: x, y\n\n  devtest(1) = 1\n  !$acc enter data copyin(devtest(1:1))\n  !$acc parallel present(devtest(1:1))\n    devtest(1) = 0\n  !$acc end parallel\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  IF (devtest(1) .eq. 1) THEN\n    CALL RANDOM_NUMBER(a)\n    CALL RANDOM_NUMBER(b)\n    c = 3\n\n    !$acc data copyin(a(1:LOOPCOUNT, 1:LOOPCOUNT), b(1:LOOPCOUNT, 1:LOOPCOUNT))\n      DO x = 1, LOOPCOUNT\n        !$acc data copyin(c(1:LOOPCOUNT, x:x))\n          CALL copyout_test(a(:,x), b(:,x), c(:,x), LOOPCOUNT)\n        !$acc end data\n        DO y = 1, LOOPCOUNT\n          IF (abs(c(y, x) - 3) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n      END DO\n    !$acc end data\n  END IF\n\n        IF (errors .eq. 0) THEN\n          test3 = .FALSE.\n        ELSE\n          test3 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T3\n        LOGICAL :: test3\n#endif\n#ifndef T3\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test3()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 2\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "construct-independent",
                            "declare"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "declare_function_scope_create.F90": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:devonly,construct-independent,declare,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  USE OPENACC\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: errors = 0\n  INTEGER :: mult = 2\n  REAL(8),DIMENSION(LOOPCOUNT, LOOPCOUNT) :: a, b, c, d\n  INTEGER,DIMENSION(1) :: devtest\n  INTEGER :: x, y\n\n  devtest(1) = 1\n  !$acc enter data copyin(devtest(1:1))\n  !$acc parallel present(devtest(1:1))\n    devtest(1) = 0\n  !$acc end parallel\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n  c = 1\n  d = 0\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:LOOPCOUNT), b(1:LOOPCOUNT, 1:LOOPCOUNT)) copyout(d(1:LOOPCOUNT, 1:LOOPCOUNT))\n    DO x = 1, LOOPCOUNT\n      CALL create_test(a(x), b(x), c(x), d(x), LOOPCOUNT)\n    END DO\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, LOOPCOUNT\n      IF (abs(d(x, y) - (a(x, y) * (a(x, y) + b(x, y)))) .gt. PRECISION) THEN\n        errors = errors + 1\n      END IF\n    END DO\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "construct-independent",
                            "declare"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:devonly,construct-independent,declare,V:2.0-2.7\n      LOGICAL FUNCTION test2()\n  USE OPENACC\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: errors = 0\n  INTEGER :: mult = 2\n  REAL(8),DIMENSION(LOOPCOUNT, LOOPCOUNT) :: a, b, c, d\n  INTEGER,DIMENSION(1) :: devtest\n  INTEGER :: x, y\n\n  devtest(1) = 1\n  !$acc enter data copyin(devtest(1:1))\n  !$acc parallel present(devtest(1:1))\n    devtest(1) = 0\n  !$acc end parallel\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n  c = 2\n  d = 0\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:LOOPCOUNT), b(1:LOOPCOUNT, 1:LOOPCOUNT)) copy(c(1:LOOPCOUNT, 1:LOOPCOUNT)) copyout(d(1:LOOPCOUNT, 1:LOOPCOUNT))\n    DO x = 1, LOOPCOUNT\n      CALL create_as_present(a(x), b(x), c(x), d(x), LOOPCOUNT)\n    END DO\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, LOOPCOUNT\n      IF (abs(c(x, y) - (2 + a(x, y) + b(x, y))) .gt. PRECISION) THEN\n        errors = errors + 1\n      END IF\n      IF (abs(d(x, y) - (a(x, y) * c(x, y))) .gt. PRECISION * 2) THEN\n        errors = errors + 1\n      END IF\n    END DO\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "construct-independent",
                            "declare"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n!T3:devonly,construct-independent,declare,V:2.0-2.7\n      LOGICAL FUNCTION test3()\n  USE OPENACC\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: errors = 0\n  INTEGER :: mult = 2\n  REAL(8),DIMENSION(LOOPCOUNT, LOOPCOUNT) :: a, b, c, d\n  INTEGER,DIMENSION(1) :: devtest\n  INTEGER :: x, y\n\n  devtest(1) = 1\n  !$acc enter data copyin(devtest(1:1))\n  !$acc parallel present(devtest(1:1))\n    devtest(1) = 0\n  !$acc end parallel\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  IF (devtest(1) .eq. 1) THEN\n    CALL RANDOM_NUMBER(a)\n    CALL RANDOM_NUMBER(b)\n    c = 3\n\n    !$acc data copyin(a(1:LOOPCOUNT, 1:LOOPCOUNT), b(1:LOOPCOUNT, 1:LOOPCOUNT))\n      DO x = 1, LOOPCOUNT\n        !$acc data copyin(c(x:x, 1:LOOPCOUNT)) copyout(d(x:x, 1:LOOPCOUNT))\n          CALL create_as_present(a(x), b(x), c(x), d(x), LOOPCOUNT)\n        !$acc end data\n        DO y = 1, LOOPCOUNT\n          IF (abs(c(x, y) - 3) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n          IF (abs(d(x, y) - (a(x, y) * (3 + a(x, y) + b(x, y)))) .gt. PRECISION * 2) THEN\n            errors = errors + 1\n          END IF\n        END DO\n      END DO\n    !$acc end data\n  END IF\n\n        IF (errors .eq. 0) THEN\n          test3 = .FALSE.\n        ELSE\n          test3 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T3\n        LOGICAL :: test3\n#endif\n#ifndef T3\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test3()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 2\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "construct-independent",
                            "declare"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "declare_function_scope_present.F90": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:devonly,construct-independent,declare,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  USE OPENACC\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: errors = 0\n  INTEGER :: mult = 2\n  REAL(8),DIMENSION(LOOPCOUNT, LOOPCOUNT) :: a, b, c, d\n  INTEGER,DIMENSION(1) :: devtest\n  INTEGER :: x, y\n\n  devtest(1) = 1\n  !$acc enter data copyin(devtest(1:1))\n  !$acc parallel present(devtest(1:1))\n    devtest(1) = 0\n  !$acc end parallel\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n  c = 1\n  d = 0\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:LOOPCOUNT), b(1:LOOPCOUNT, 1:LOOPCOUNT)) copyout(d(1:LOOPCOUNT, 1:LOOPCOUNT))\n    DO x = 1, LOOPCOUNT\n      !$acc data copy(c(x:x, 1:LOOPCOUNT))\n        CALL present(a(x), b(x), c(x), d(x), LOOPCOUNT)\n      !$acc end data\n    END DO\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, LOOPCOUNT\n      IF (abs(c(x, y) - (1 + a(x, y) + b(x, y))) .gt. PRECISION) THEN\n        errors = errors + 1\n      END IF\n      IF (abs(d(x, y) - (a(x, y) * c(x, y))) .gt. PRECISION * 2) THEN\n        errors = errors + 1\n      END IF\n    END DO\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "construct-independent",
                            "declare"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:devonly,construct-independent,declare,V:2.0-2.7\n      LOGICAL FUNCTION test2()\n  USE OPENACC\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: errors = 0\n  INTEGER :: mult = 2\n  REAL(8),DIMENSION(LOOPCOUNT, LOOPCOUNT) :: a, b, c, d\n  INTEGER,DIMENSION(1) :: devtest\n  INTEGER :: x, y\n\n  devtest(1) = 1\n  !$acc enter data copyin(devtest(1:1))\n  !$acc parallel present(devtest(1:1))\n    devtest(1) = 0\n  !$acc end parallel\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  IF (devtest(1) .eq. 1) THEN\n    CALL RANDOM_NUMBER(a)\n    CALL RANDOM_NUMBER(b)\n    c = 3\n\n    !$acc data copyin(a(1:LOOPCOUNT, 1:LOOPCOUNT), b(1:LOOPCOUNT, 1:LOOPCOUNT))\n      DO x = 1, LOOPCOUNT\n        !$acc data copyin(c(x:x, 1:LOOPCOUNT)) copyout(d(x:x, 1:LOOPCOUNT))\n          CALL present(a(x), b(x), c(x), d(x), LOOPCOUNT)\n        !$acc end data\n        DO y = 1, LOOPCOUNT\n          IF (abs(c(x, y) - 3) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n          IF (abs(d(x, y) - (a(x, y) * (3 + a(x, y) + b(x, y)))) .gt. PRECISION * 2) THEN\n            errors = errors + 1\n          END IF\n        END DO\n      END DO\n    !$acc end data\n  END IF\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "construct-independent",
                            "declare"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "enter_data_copyin_no_lower_bound.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:data,executable-data,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc enter data copyin(a(:LOOPCOUNT), b(:LOOPCOUNT))\n        !$acc data copyout(c(1:LOOPCOUNT)) present(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n        !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "enter_data_create.F90": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:data,executable-data,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        b = 0\n        c = 0\n\n        !$acc enter data create(b(1:LOOPCOUNT))\n        !$acc data copyin(a(1:LOOPCOUNT))\n          !$acc parallel present(b(1:LOOPCOUNT))\n            !$acc loop \n            DO x = 1, LOOPCOUNT\n              b(x) = a(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n        !$acc data copyout(c(1:LOOPCOUNT))\n          !$acc parallel present(b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n        !$acc exit data delete(b(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(a(x) - c(x)) .gt. PRECISION) THEN\n            errors = errors + 1\n            EXIT\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:data,executable-data,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test2()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        b = 0\n        c = 0\n        !$acc enter data present_or_create(b(1:LOOPCOUNT))\n        !$acc data copyin(a(1:LOOPCOUNT))\n          !$acc parallel present(b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              b(x) = a(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n        !$acc data copyout(c(1:LOOPCOUNT))\n          !$acc parallel present(b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n        !$acc exit data delete(b(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(a(x) - c(x)) .gt. PRECISION) THEN\n            errors = errors + 2\n            EXIT\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n!T3:data,executable-data,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test3()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        b = 0\n        c = 0\n \n        !$acc enter data pcreate(b(1:LOOPCOUNT))\n        !$acc data copyin(a(1:LOOPCOUNT))\n          !$acc parallel present(b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              b(x) = a(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n        !$acc data copyout(c(1:LOOPCOUNT))\n          !$acc parallel present(b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n        !$acc exit data delete(b(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(a(x) - c(x)) .gt. PRECISION) THEN\n            errors = errors + 4\n            EXIT\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test3 = .FALSE.\n        ELSE\n          test3 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T3\n        LOGICAL :: test3\n#endif\n#ifndef T3\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test3()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 2\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "enter_data_create_no_lower_bound.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:data,executable-data,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, d, e !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        CALL RANDOM_NUMBER(d)\n        e = 0\n\n        !$acc enter data create(c(:LOOPCOUNT))\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), d(1:LOOPCOUNT)) copyout(e(1:LOOPCOUNT)) present(c(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              e(x) = c(x) + d(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          IF (abs(e(x) - (a(x) + b(x) + d(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "enter_data_if.F90": {
                "num tests": 5,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:data,executable-data,devonly,construct-independent,if,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, a_copy, b, b_copy, c !Data\n        INTEGER :: errors = 0\n        INTEGER,DIMENSION(1):: devtest\n        LOGICAL :: dev = .TRUE.\n        LOGICAL :: cpu = .FALSE.\n        devtest(1) = 1\n\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel\n          devtest(1) = 0\n        !$acc end parallel\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) if(dev)\n        !$acc data create(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n        !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) if(dev)\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "data",
                            "executable-data",
                            "devonly",
                            "construct-independent",
                            "if"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:data,executable-data,devonly,construct-independent,if,V:2.0-2.7\n      LOGICAL FUNCTION test2()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, a_copy, b, b_copy, c !Data\n        INTEGER :: errors = 0\n        INTEGER,DIMENSION(1):: devtest\n        LOGICAL :: dev = .TRUE.\n        LOGICAL :: cpu = .FALSE.\n        devtest(1) = 1\n\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel\n          devtest(1) = 0\n        !$acc end parallel\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc enter data create(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) if(cpu)\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n        !$acc exit data copyout(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) if(cpu)\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "data",
                            "executable-data",
                            "devonly",
                            "construct-independent",
                            "if"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n!T3:data,executable-data,devonly,construct-independent,if,V:2.0-2.7\n      LOGICAL FUNCTION test3()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, a_copy, b, b_copy, c !Data\n        INTEGER :: errors = 0\n        INTEGER,DIMENSION(1):: devtest\n        LOGICAL :: dev = .TRUE.\n        LOGICAL :: cpu = .FALSE.\n        devtest(1) = 1\n\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel\n          devtest(1) = 0\n        !$acc end parallel\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        IF (devtest(1) .eq. 1) THEN\n          CALL RANDOM_NUMBER(a)\n          a_copy = a\n          CALL RANDOM_NUMBER(b)\n          b_copy = b\n          c = 0\n\n          !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) if(dev)\n\n          a = 0\n          b = 0\n\n          !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n            !$acc parallel\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                c(x) = a(x) + b(x)\n              END DO\n            !$acc end parallel\n          !$acc end data\n          !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) if(dev)\n\n          DO x = 1, LOOPCOUNT\n            IF (abs(c(x) - (a_copy(x) + b_copy(x))) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test3 = .FALSE.\n        ELSE\n          test3 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T3\n        LOGICAL :: test3\n#endif\n#ifndef T3\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test3()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 2\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "data",
                            "executable-data",
                            "devonly",
                            "construct-independent",
                            "if"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "4": {
                        "content": "#ifndef T4\n!T4:data,executable-data,devonly,construct-independent,if,V:2.0-2.7\n      LOGICAL FUNCTION test4()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, a_copy, b, b_copy, c !Data\n        INTEGER :: errors = 0\n        INTEGER,DIMENSION(1):: devtest\n        LOGICAL :: dev = .TRUE.\n        LOGICAL :: cpu = .FALSE.\n        devtest(1) = 1\n\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel\n          devtest(1) = 0\n        !$acc end parallel\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        IF (devtest(1) .eq. 1) THEN\n          CALL RANDOM_NUMBER(a)\n          CALL RANDOM_NUMBER(b)\n          c = 0\n\n          !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) if(cpu)\n          CALL RANDOM_NUMBER(a)\n          a_copy = a\n          CALL RANDOM_NUMBER(b)\n          b_copy = b\n\n          !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n            !$acc parallel\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                c(x) = a(x) + b(x)\n              END DO\n            !$acc end parallel\n          !$acc end data\n          !$acc exit data copyout(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) if(cpu)\n\n          DO x = 1, LOOPCOUNT\n            IF (abs(c(x) - (a_copy(x) + b_copy(x))) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test4 = .FALSE.\n        ELSE\n          test4 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T4\n        LOGICAL :: test4\n#endif\n#ifndef T4\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test4()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 3\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "data",
                            "executable-data",
                            "devonly",
                            "construct-independent",
                            "if"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "5": {
                        "content": "#ifndef T5\n!T5:data,executable-data,devonly,construct-independent,if,V:2.0-2.7\n      LOGICAL FUNCTION test5()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, a_copy, b, b_copy, c !Data\n        INTEGER :: errors = 0\n        INTEGER,DIMENSION(1):: devtest\n        LOGICAL :: dev = .TRUE.\n        LOGICAL :: cpu = .FALSE.\n        devtest(1) = 1\n\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel\n          devtest(1) = 0\n        !$acc end parallel\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        IF (devtest(1) .eq. 1) THEN\n          CALL RANDOM_NUMBER(a)\n          CALL RANDOM_NUMBER(b)\n          c = 0\n\n          !$acc enter data create(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) if(cpu)\n          !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n            !$acc parallel\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                c(x) = a(x) + b(x)\n              END DO\n            !$acc end parallel\n          !$acc end data\n\n          DO x = 1, LOOPCOUNT\n            IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test5 = .FALSE.\n        ELSE\n          test5 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T5\n        LOGICAL :: test5\n#endif\n#ifndef T5\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test5()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 4\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "data",
                            "executable-data",
                            "devonly",
                            "construct-independent",
                            "if"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "exit_data.F90": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:data,executable-data,devonly,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, a_copy !Data\n        INTEGER :: errors = 0\n        INTEGER,DIMENSION(1):: devtest\n        devtest(1) = 1\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel\n          devtest(1) = 0\n        !$acc end parallel\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        a_copy = a\n\n        IF (devtest(1) .eq. 1) THEN\n          !$acc enter data copyin(a(1:LOOPCOUNT))\n          !$acc parallel present(a(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              a(x) = a(x) + 1\n            END DO\n          !$acc end parallel\n          !$acc exit data delete(a(1:LOOPCOUNT))\n\n          DO x = 1, LOOPCOUNT\n            IF (abs(a(x) - a_copy(x)) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "data",
                            "executable-data",
                            "devonly",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:data,executable-data,devonly,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test2()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, a_copy !Data\n        INTEGER :: errors = 0\n        INTEGER,DIMENSION(1):: devtest\n        devtest(1) = 1\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel\n          devtest(1) = 0\n        !$acc end parallel\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        a_copy = a\n        !$acc enter data copyin(a(1:LOOPCOUNT))\n        !$acc parallel present(a(1:LOOPCOUNT))\n          !$acc loop\n          DO x = 1, LOOPCOUNT\n            a(x) = a(x) + 1\n          END DO\n        !$acc end parallel\n        !$acc exit data copyout(a(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(a(x) - (a_copy(x) + 1)) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "data",
                            "executable-data",
                            "devonly",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "exit_data_copyout_no_lower_bound.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:data,executable-data,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        !$acc enter data create(c(1:LOOPCOUNT))\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) present(c(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n        !$acc exit data copyout(c(:LOOPCOUNT))\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "exit_data_copyout_reference_counts.F90": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:data,executable-data,devonly,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n        INTEGER,DIMENSION(1):: devtest\n\n        devtest(1) = 1\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel present(devtest(1:1))\n          devtest(1) = 0\n        !$acc end parallel\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        IF (devtest(1) .eq. 1) THEN\n          !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n          !$acc data copyin(c(1:LOOPCOUNT))\n            !$acc parallel\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                c(x) = c(x) + a(x) + b(x)\n              END DO\n            !$acc end parallel\n            !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n          !$acc end data\n\n          DO x = 1, LOOPCOUNT\n            IF (abs(c(x)) .gt. PRECISION) THEN\n              errors = errors + 1\n              EXIT\n            END IF\n          END DO \n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "data",
                            "executable-data",
                            "devonly",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:data,executable-data,devonly,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test2()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n        INTEGER,DIMENSION(1):: devtest\n\n        devtest(1) = 1\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel present(devtest(1:1))\n          devtest(1) = 0\n        !$acc end parallel\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n        !$acc data copyin(c(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = c(x) + a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n        !$acc exit data copyout(c(1:LOOPCOUNT)) delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 2\n            EXIT\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "data",
                            "executable-data",
                            "devonly",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n!T3:data,executable-data,devonly,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test3()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n        INTEGER,DIMENSION(1):: devtest\n\n        devtest(1) = 1\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel present(devtest(1:1))\n          devtest(1) = 0\n        !$acc end parallel\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n        !$acc enter data copyin(c(1:LOOPCOUNT))\n        !$acc parallel\n          !$acc loop\n          DO x = 1, LOOPCOUNT\n            c(x) = c(x) + a(x) + b(x)\n          END DO\n        !$acc end parallel\n        !$acc exit data delete(c(1:LOOPCOUNT))\n        !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 4\n            EXIT\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test3 = .FALSE.\n        ELSE\n          test3 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T3\n        LOGICAL :: test3\n#endif\n#ifndef T3\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test3()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 2\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "data",
                            "executable-data",
                            "devonly",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "exit_data_delete_no_lower_bound.F90": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:data,executable-data,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n        LOGICAL,DIMENSION(1):: has_device\n\n        has_device(1) = .TRUE.\n        !$acc enter data copyin(has_device(1:1))\n        !$acc parallel present(has_device(1:1))\n          has_device(1) = .FALSE.\n        !$acc end parallel\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n        !$acc data copyout(c(1:LOOPCOUNT)) present(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n        !$acc exit data delete(a(:LOOPCOUNT), b(:LOOPCOUNT))\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:data,executable-data,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test2()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n        LOGICAL,DIMENSION(1):: has_device\n\n        has_device(1) = .TRUE.\n        !$acc enter data copyin(has_device(1:1))\n        !$acc parallel present(has_device(1:1))\n          has_device(1) = .FALSE.\n        !$acc end parallel\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        IF (has_device(1) .eqv. .TRUE.) THEN\n          CALL RANDOM_NUMBER(a)\n          CALL RANDOM_NUMBER(b)\n          c = 0\n          \n          !$acc enter data copyin(c(1:LOOPCOUNT))\n          !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) present(c(1:LOOPCOUNT))\n            !$acc parallel\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                c(x) = a(x) + b(x)\n              END DO\n            !$acc end parallel\n          !$acc end data\n          !$acc exit data delete(c(:LOOPCOUNT))\n\n          DO x = 1, LOOPCOUNT\n            IF (abs(c(x)) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "exit_data_finalize.F90": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:data,executable-data,devonly,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n        INTEGER,DIMENSION(1) :: devtest\n\n        devtest(1) = 1\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel present(devtest(1:1))\n          devtest(1) = 0\n        !$acc end parallel\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n        !$acc enter data create(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n        !$acc parallel present(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n          !$acc loop\n          DO x = 1, LOOPCOUNT\n            c(x) = a(x) + b(x)\n          END DO\n        !$acc end parallel\n        !$acc exit data copyout(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n        IF (devtest(1) .eq. 1) THEN\n          DO x = 1, LOOPCOUNT\n            IF (abs(c(x)) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END IF\n        !$acc exit data copyout(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "data",
                            "executable-data",
                            "devonly",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:data,executable-data,devonly,construct-independent,V:2.5-2.7\n      LOGICAL FUNCTION test2()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n        INTEGER,DIMENSION(1) :: devtest\n\n        devtest(1) = 1\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel present(devtest(1:1))\n          devtest(1) = 0\n        !$acc end parallel\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n        !$acc enter data create(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n        !$acc parallel present(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n          !$acc loop\n          DO x = 1, LOOPCOUNT\n            c(x) = a(x) + b(x)\n          END DO\n        !$acc end parallel\n        !$acc exit data copyout(c(1:LOOPCOUNT)) delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) finalize\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "data",
                            "executable-data",
                            "devonly",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "id": 1,
            "init.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,init,nonvalidating,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: errors = 0\n\n        !$acc init\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "init",
                            "nonvalidating"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "init_device_num.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,construct-independent,internal-control-values,init,nonvalidating,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: device_num\n        INTEGER :: device_type\n        INTEGER :: errors = 0\n\n        device_num = acc_get_device_num(acc_get_device_type())\n        !$acc init device_num(device_num)\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "construct-independent",
                            "internal-control-values",
                            "init",
                            "nonvalidating"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "init_device_type.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,construct-independent,internal-control-values,init,nonvalidating,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: device_type\n        INTEGER :: errors = 0\n\n        device_type = acc_get_device_type()\n        !$acc init device_type(device_type)\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "construct-independent",
                            "internal-control-values",
                            "init",
                            "nonvalidating"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "init_device_type_num.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,construct-independent,internal-control-values,init,nonvalidating,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: device_num\n        INTEGER :: device_type\n        INTEGER :: errors = 0\n\n        device_type = acc_get_device_type()\n        device_num = acc_get_device_num(device_type)\n        !$acc init device_type(device_num) device_num(device_num)\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "construct-independent",
                            "internal-control-values",
                            "init",
                            "nonvalidating"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_async.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:async,kernels,update,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, d, e, f, g !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        CALL RANDOM_NUMBER(d)\n        CALL RANDOM_NUMBER(e)\n        f = 0\n        g = 0\n        !$acc enter data create(g(1:LOOPCOUNT), c(1:LOOPCOUNT), f(1:LOOPCOUNT))\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), d(1:LOOPCOUNT), e(1:LOOPCOUNT))\n          !$acc kernels async(1)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end kernels\n          !$acc kernels async(2)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              f(x) = d(x) + e(x)\n            END DO\n          !$acc end kernels\n          !$acc kernels wait(1, 2) async(3)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              g(x) = c(x) + f(x)\n            END DO\n          !$acc end kernels\n        !$acc end data\n        !$acc wait(1, 2)\n        !$acc update host(c(1:LOOPCOUNT), f(1:LOOPCOUNT))\n        !$acc exit data copyout(g(1:LOOPCOUNT)) async(3)\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n            WRITE(*, *) x, \" a: \", c(x), \" = \", a(x), \" + \", b(x)\n          END IF\n          IF (abs(f(x) - (d(x) + e(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n            WRITE(*, *) x, \" b: \", f(x), \" = \", d(x), \" + \", e(x)\n          END IF\n        END DO\n        !$acc wait(3)\n        DO x = 1, LOOPCOUNT\n          IF (abs(g(x) - (c(x) + f(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n            WRITE(*, *) x, \" c: \", g(x), \" = \", c(x), \" + \", f(x)\n          END IF\n        END DO\n        !$acc exit data delete(c(1:LOOPCOUNT), f(1:LOOPCOUNT))\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "async",
                            "kernels",
                            "update"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_copy.F90": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:devonly,kernels,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n        INTEGER,DIMENSION(1):: devtest\n        devtest(1) = 1\n\n        !$acc enter data copyin(devtest(1:1))\n        !$acc kernels present(devtest)\n          devtest(1) = 0\n        !$acc end kernels\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 1\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n          !$acc kernels copy(c(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = c(x) + a(x) + b(x)\n            END DO\n          !$acc end kernels\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x) + 1)) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "kernels"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:devonly,kernels,V:2.0-2.7\n      LOGICAL FUNCTION test2()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n        INTEGER,DIMENSION(1):: devtest\n        devtest(1) = 1\n\n        !$acc enter data copyin(devtest(1:1))\n        !$acc kernels present(devtest)\n          devtest(1) = 0\n        !$acc end kernels\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        IF (devtest(1) .eq. 1) THEN\n          CALL RANDOM_NUMBER(a)\n          CALL RANDOM_NUMBER(b)\n          c = 1\n\n          !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n            !$acc kernels copy(c(1:LOOPCOUNT))\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                c(x) = c(x) + a(x) + b(x)\n              END DO\n            !$acc end kernels\n          !$acc end data\n\n          DO x = 1, LOOPCOUNT\n            IF (abs(c(x) - 1) .gt. PRECISION) THEN\n              IF ((a(x) + b(x)) .gt. PRECISION) THEN\n                errors = errors + 1\n              END IF\n            END IF\n          END DO\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "kernels"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n!T3:devonly,kernels,V:2.0-2.7\n      LOGICAL FUNCTION test3()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n        INTEGER,DIMENSION(1):: devtest\n        devtest(1) = 1\n\n        !$acc enter data copyin(devtest(1:1))\n        !$acc kernels present(devtest)\n          devtest(1) = 0\n        !$acc end kernels\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        IF (devtest(1) .eq. 1) THEN\n          CALL RANDOM_NUMBER(a)\n          CALL RANDOM_NUMBER(b)\n          c = 1\n\n          !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copy(c(1:LOOPCOUNT))\n            DO x = 1, LOOPCOUNT\n              c(x) = 0\n            END DO\n            !$acc kernels copy(c(1:LOOPCOUNT))\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                c(x) = c(x) + a(x) + b(x)\n              END DO\n            !$acc end kernels\n            DO x = 1, LOOPCOUNT\n              IF (abs(c(x)) .gt. PRECISION) THEN\n                errors = errors + 1\n              END IF\n            END DO\n          !$acc end data\n\n          DO x = 1, LOOPCOUNT\n            IF (abs(c(x) - (1 + a(x) + b(x))) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test3 = .FALSE.\n        ELSE\n          test3 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T3\n        LOGICAL :: test3\n#endif\n#ifndef T3\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test3()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 2\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "kernels"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_copyin.F90": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:devonly,kernels,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        INTEGER :: errors = 0\n        INTEGER,DIMENSION(1):: devtest\n        devtest(1) = 1\n\n        !$acc enter data copyin(devtest(1:1))\n        !$acc kernels\n          devtest(1) = 0\n        !$acc end kernels\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        b = 0\n\n        !$acc data copy(b(1:LOOPCOUNT))\n          !$acc kernels copyin(a(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              b(x) = b(x) + a(x)\n            END DO\n          !$acc end kernels\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(a(x) - b(x)) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "kernels"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:devonly,kernels,V:2.0-2.7\n      LOGICAL FUNCTION test2()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        INTEGER :: errors = 0\n        INTEGER,DIMENSION(1):: devtest\n        devtest(1) = 1\n\n        !$acc enter data copyin(devtest(1:1))\n        !$acc kernels\n          devtest(1) = 0\n        !$acc end kernels\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        IF (devtest(1) .eq. 1) THEN\n          CALL RANDOM_NUMBER(a)\n          b = 0\n          !$acc data copy(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            DO x = 1, LOOPCOUNT\n              a(x) = -1\n            END DO\n            !$acc kernels copyin(a(1:LOOPCOUNT))\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                b(x) = a(x)\n              END DO\n            !$acc end kernels\n            DO x = 1, LOOPCOUNT\n              IF (abs(a(x) + 1) .gt. PRECISION) THEN\n                errors = errors + 1\n              END IF\n            END DO\n          !$acc end data\n          DO x = 1, LOOPCOUNT\n            IF (abs(a(x) - b(x)) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "kernels"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n!T3:devonly,kernels,V:2.0-2.7\n      LOGICAL FUNCTION test3()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        INTEGER :: errors = 0\n        INTEGER,DIMENSION(1):: devtest\n        devtest(1) = 1\n\n        !$acc enter data copyin(devtest(1:1))\n        !$acc kernels\n          devtest(1) = 0\n        !$acc end kernels\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        IF (devtest(1) .eq. 1) THEN\n          CALL RANDOM_NUMBER(a)\n          b = 0\n\n          !$acc kernels copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              b(x) = a(x)\n            END DO\n          !$acc end kernels\n\n          DO x = 1, LOOPCOUNT\n            IF (abs(b(x)) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test3 = .FALSE.\n        ELSE\n          test3 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T3\n        LOGICAL :: test3\n#endif\n#ifndef T3\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test3()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 2\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "kernels"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_copyout.F90": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:devonly,kernels,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        INTEGER :: errors = 0\n        INTEGER,DIMENSION(1):: devtest\n        devtest(1) = 1\n\n        !$acc enter data copyin(devtest(1:1))\n        !$acc kernels present(devtest(1:1))\n          devtest(1) = 0\n        !$acc end kernels\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        b = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT))\n          !$acc kernels copyout(b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              b(x) = a(x)\n            END DO\n          !$acc end kernels\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(a(x) - b(x)) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "kernels"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:devonly,kernels,V:2.0-2.7\n      LOGICAL FUNCTION test2()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        INTEGER :: errors = 0\n        INTEGER,DIMENSION(1):: devtest\n        devtest(1) = 1\n\n        !$acc enter data copyin(devtest(1:1))\n        !$acc kernels present(devtest(1:1))\n          devtest(1) = 0\n        !$acc end kernels\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        IF (devtest(1) .eq. 1) THEN\n          CALL RANDOM_NUMBER(a)\n          b = 0\n          \n          !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            !$acc kernels copyout(b(1:LOOPCOUNT))\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                b(x) = a(x)\n              END DO\n            !$acc end kernels\n          !$acc end data\n          \n          DO x = 1, LOOPCOUNT\n            IF (abs(b(x)) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "kernels"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_create.F90": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:devonly,kernels,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n        INTEGER,DIMENSION(1):: devtest\n        devtest(1) = 1\n\n        !$acc enter data copyin(devtest(1:1))\n        !$acc kernels present(devtest(1:1))\n          devtest(1) = 0\n        !$acc end kernels\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        IF (devtest(1) .eq. 1) THEN\n          CALL RANDOM_NUMBER(a)\n          b = 0\n          c = 0\n          !$acc data copyin(a(1:LOOPCOUNT))\n            !$acc kernels create(b(1:LOOPCOUNT))\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                b(x) = a(x)\n              END DO\n            !$acc end kernels\n          !$acc end data\n          DO x = 1, LOOPCOUNT\n            IF (abs(b(x)) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "kernels"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:devonly,kernels,V:2.0-2.7\n      LOGICAL FUNCTION test2()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n        INTEGER,DIMENSION(1):: devtest\n        devtest(1) = 1\n\n        !$acc enter data copyin(devtest(1:1))\n        !$acc kernels present(devtest(1:1))\n          devtest(1) = 0\n        !$acc end kernels\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        b = 0\n        !$acc data copyin(a(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT))\n          !$acc kernels create(b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              b(x) = a(x)\n            END DO\n          !$acc end kernels\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          IF (abs(b(x) - a(x)) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "kernels"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n!T3:devonly,kernels,V:2.0-2.7\n      LOGICAL FUNCTION test3()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n        INTEGER,DIMENSION(1):: devtest\n        devtest(1) = 1\n\n        !$acc enter data copyin(devtest(1:1))\n        !$acc kernels present(devtest(1:1))\n          devtest(1) = 0\n        !$acc end kernels\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        b = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n          !$acc kernels create(b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              b(x) = a(x)\n            END DO\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = b(x)\n            END DO\n          !$acc end kernels\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - a(x)) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test3 = .FALSE.\n        ELSE\n          test3 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T3\n        LOGICAL :: test3\n#endif\n#ifndef T3\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test3()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 2\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "kernels"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_default_copy.F90": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:devonly,kernels,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n        LOGICAL,DIMENSION(1):: devtest\n        devtest(1) = .TRUE.\n\n        !$acc enter data copyin(devtest(1:1))\n        !$acc kernels\n          devtest(1) = .FALSE.\n        !$acc end kernels\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n          !$acc kernels\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = c(x) + a(x) + b(x)\n            END DO\n          !$acc end kernels\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "kernels"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:devonly,kernels,V:2.0-2.7\n      LOGICAL FUNCTION test2()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n        LOGICAL,DIMENSION(1):: devtest\n        devtest(1) = .TRUE.\n\n        !$acc enter data copyin(devtest(1:1))\n        !$acc kernels\n          devtest(1) = .FALSE.\n        !$acc end kernels\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        IF (devtest(1)) THEN\n          CALL RANDOM_NUMBER(a)\n          CALL RANDOM_NUMBER(b)\n          c = 1\n\n          !$acc enter data copyin(c(1:LOOPCOUNT))\n          c = 0\n          !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            !$acc kernels\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                c(x) = c(x) + a(x) + b(x)\n              END DO\n            !$acc end kernels\n          !$acc end data\n          DO x = 1, LOOPCOUNT\n            IF (abs(c(x)) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n          !$acc exit data copyout(c(1:LOOPCOUNT))\n          DO x = 1, LOOPCOUNT\n            IF (abs(c(x) - (a(x) + b(x) + 1)) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "kernels"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_default_present.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,default,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        b = 0\n\n        !$acc enter data copyin(a(1:LOOPCOUNT)) create(b(1:LOOPCOUNT))\n        !$acc kernels default(present)\n          !$acc loop\n          DO x = 1, LOOPCOUNT\n            b(x) = a(x)\n          END DO\n        !$acc end kernels\n        !$acc exit data delete(a(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT)) \n        DO x = 1, LOOPCOUNT\n          IF (abs(a(x) - b(x)) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "default"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_if.F90": {
                "num tests": 4,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:devonly,kernels,if,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        INTEGER :: errors = 0\n        LOGICAL,DIMENSION(1):: devtest\n        LOGICAL:: data_on_device = .FALSE.\n        devtest(1) = .TRUE.\n\n        !$acc enter data copyin(devtest(1:1))\n        !$acc kernels present(devtest(1:1))\n          devtest(1) = .FALSE.\n        !$acc end kernels\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        b = 0\n\n        !$acc kernels if(data_on_device) present(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n          !$acc loop\n          DO x = 1, LOOPCOUNT\n            b(x) = a(x)\n          END DO\n        !$acc end kernels\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(a(x) - b(x)) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "kernels",
                            "if"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:devonly,kernels,if,V:2.0-2.7\n      LOGICAL FUNCTION test2()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        INTEGER :: errors = 0\n        LOGICAL,DIMENSION(1):: devtest\n        LOGICAL:: data_on_device = .FALSE.\n        devtest(1) = .TRUE.\n\n        !$acc enter data copyin(devtest(1:1))\n        !$acc kernels present(devtest(1:1))\n          devtest(1) = .FALSE.\n        !$acc end kernels\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        b = 0\n\n        data_on_device = .TRUE.\n        !$acc enter data copyin(a(1:LOOPCOUNT)) create(b(1:LOOPCOUNT))\n        !$acc kernels if(data_on_device) present(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n          !$acc loop\n          DO x = 1, LOOPCOUNT\n            b(x) = a(x)\n          END DO\n        !$acc end kernels\n        !$acc exit data copyout(b(1:LOOPCOUNT)) delete(a(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(b(x) - a(x)) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "kernels",
                            "if"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n!T3:devonly,kernels,if,V:2.0-2.7\n      LOGICAL FUNCTION test3()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        INTEGER :: errors = 0\n        LOGICAL,DIMENSION(1):: devtest\n        LOGICAL:: data_on_device = .FALSE.\n        devtest(1) = .TRUE.\n\n        !$acc enter data copyin(devtest(1:1))\n        !$acc kernels present(devtest(1:1))\n          devtest(1) = .FALSE.\n        !$acc end kernels\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        IF (devtest(1) .eqv. .TRUE.) THEN\n          CALL RANDOM_NUMBER(a)\n          b = 0\n\n          !$acc enter data copyin(a(1:LOOPCOUNT)) create(b(1:LOOPCOUNT))\n          DO x = 1, LOOPCOUNT\n            a(x) = -1\n          END DO\n\n          !$acc kernels if(data_on_device) present(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              b(x) = a(x)\n            END DO\n          !$acc end kernels\n\n          DO x = 1, LOOPCOUNT\n            IF (abs(a(x) + 1) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n            IF (abs(b(x)) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n\n          !$acc exit data copyout(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n          data_on_device = .FALSE.\n\n          DO x = 1, LOOPCOUNT\n            IF (abs(a(x) - b(x)) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test3 = .FALSE.\n        ELSE\n          test3 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T3\n        LOGICAL :: test3\n#endif\n#ifndef T3\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test3()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 2\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "kernels",
                            "if"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "4": {
                        "content": "#ifndef T4\n!T4:devonly,kernels,if,V:2.0-2.7\n      LOGICAL FUNCTION test4()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        INTEGER :: errors = 0\n        LOGICAL,DIMENSION(1):: devtest\n        LOGICAL:: data_on_device = .FALSE.\n        devtest(1) = .TRUE.\n\n        !$acc enter data copyin(devtest(1:1))\n        !$acc kernels present(devtest(1:1))\n          devtest(1) = .FALSE.\n        !$acc end kernels\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        IF (devtest(1) .eq. 1) THEN\n          CALL RANDOM_NUMBER(a)\n          b = 0\n\n          !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n          !$acc kernels if(data_on_device) present(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              b(x) = a(x)\n            END DO\n          !$acc end kernels\n\n          DO x = 1, LOOPCOUNT\n            IF (abs(a(x) - b(x)) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n\n          !$acc exit data copyout(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n\n          DO x = 1, LOOPCOUNT\n            IF (abs(b(x)) .gt. PRECISION) THEN\n              IF (abs(b(x) - a(x)) .gt. PRECISION) THEN\n                errors = errors + 1\n              END IF\n            END IF\n          END DO\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test4 = .FALSE.\n        ELSE\n          test4 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T4\n        LOGICAL :: test4\n#endif\n#ifndef T4\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test4()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 3\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "kernels",
                            "if"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, _0, _1, _2, _3, _4, _5, _6, _7, _8, _9 !Iterators\n        REAL(8),DIMENSION(1024):: a, b !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        b = 0\n\n        !$acc data copyin(a(1:1024)) copyout(b(1:1024))\n          !$acc kernels\n            !$acc loop\n            DO _0 = 0, 1\n              !$acc loop\n              DO _1 = 0, 1\n                !$acc loop\n                DO _2 = 0, 1\n                  !$acc loop\n                  DO _3 = 0, 1\n                    !$acc loop\n                    DO _4 = 0, 1\n                      !$acc loop\n                      DO _5 = 0, 1\n                        !$acc loop\n                        DO _6 = 0, 1\n                          !$acc loop\n                          DO _7 = 0, 1\n                            !$acc loop\n                            DO _8 = 0, 1\n                              !$acc loop\n                              DO _9 = 1, 2\n                                b(_0*512+_1*256+_2*128+_3*64+_4*32+_5*16+_6*8+_7*4+_8*2+_9)=a(_0*512+_1*256+_2*128+_3*64+_4*32+_5*16+_6*8+_7*4+_8*2+_9)\n                              END DO\n                            END DO\n                          END DO\n                        END DO\n                      END DO\n                    END DO\n                  END DO\n                END DO\n              END DO\n            END DO\n          !$acc end kernels\n        !$acc end data\n\n        DO x = 1, 1024\n          IF (abs(a(x) - b(x)) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_independent.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        b = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(b(1:LOOPCOUNT))\n          !$acc kernels loop independent\n          DO x = 1, LOOPCOUNT\n            b(x) = b(x) + a(x)\n          END DO\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(a(x) - b(x)) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_add_general.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        REAL(8) :: total\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        total = 0\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copy(total)\n          !$acc parallel loop reduction(+:total)\n          DO x = 1, LOOPCOUNT\n            total = total + a(x) + b(x)\n          END DO\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          total = total - (a(x) + b(x))\n        END DO\n        IF (abs(total) .gt. LOOPCOUNT * PRECISION) THEN\n          WRITE(*, *) total\n          errors = 1\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_add_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,private,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(10*LOOPCOUNT):: a, b, c, d !Data\n        REAL(8) :: avg\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        avg = 0\n        !$acc data copyin(a(1:10*LOOPCOUNT), b(1:10*LOOPCOUNT)) create(c(1:10*LOOPCOUNT)) copyout(d(1:10*LOOPCOUNT))\n          !$acc kernels loop gang private(avg)\n          DO x = 0, 9\n            avg = 0\n            !$acc loop worker reduction(+:avg)\n            DO y = 1, LOOPCOUNT\n              avg = avg + a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y)\n              c(x * LOOPCOUNT + y) = a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y)\n            END DO\n            avg = avg / LOOPCOUNT\n            !$acc loop worker\n            DO y = 1, LOOPCOUNT\n              d(x * LOOPCOUNT + y) = c(x * LOOPCOUNT + y) / avg\n            END DO\n          END DO\n        !$acc end data\n        DO x = 0, 9\n          avg = 0\n          DO y = 1, LOOPCOUNT\n            avg = avg + a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y)\n          END DO\n          avg = avg / LOOPCOUNT\n          DO y = 1, LOOPCOUNT\n            IF (abs(d(x * LOOPCOUNT + y) - ((a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y)) / avg)) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_add_vector_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,private,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(10*LOOPCOUNT):: a, b !Data\n        REAL(8),DIMENSION(10) :: c\n        REAL(8) :: temp\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n\n        !$acc data copyin(a(1:10*LOOPCOUNT), b(1:10*LOOPCOUNT)) copyout(c(1:10))\n          !$acc kernels loop private(temp)\n          DO x = 0, 9\n            temp = 0.0\n            !$acc loop vector reduction(+:temp)\n            DO y = 1, LOOPCOUNT\n              temp = temp + a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y)\n            END DO\n            c(x + 1) = temp\n          END DO\n        !$acc end data\n\n        DO x = 0, 9\n          temp = 0\n          DO y = 1, LOOPCOUNT\n            temp = temp + a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y)\n          END DO\n          IF (abs(temp - c(x + 1)) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_and_general.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT):: a !Data\n        LOGICAL :: results = .TRUE.\n        LOGICAL :: host_results = .TRUE.\n        REAL(8) :: false_margin\n        INTEGER :: errors = 0\n        false_margin = exp(log(.5) / LOOPCOUNT)\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          IF (randoms(x) .lt. false_margin) THEN\n            a(x) = .TRUE.\n          ELSE\n            a(x) = .FALSE.\n          END IF\n        END DO\n\n        !$acc data copyin(a(1:LOOPCOUNT))\n          !$acc kernels loop reduction(.and.:results)\n          DO x = 1, LOOPCOUNT\n            results = results .and. a(x)\n          END DO\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          host_results = host_results .and. a(x)\n        END DO\n        IF (host_results .neqv. results) THEN\n          errors = 1\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_and_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        LOGICAL,DIMENSION(10*LOOPCOUNT):: a, a_copy !Data\n        LOGICAL,DIMENSION(10) :: results, has_false\n        LOGICAL :: host_results = .TRUE.\n        LOGICAL :: temp = .TRUE.\n        REAL(8),DIMENSION(10*LOOPCOUNT):: randoms\n        REAL(8) :: false_margin = exp(log(.5) / LOOPCOUNT)\n        INTEGER :: errors = 0\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, 10\n          results(x) = .TRUE.\n          has_false(x) = .FALSE.\n        END DO\n        DO x = 1, 10*LOOPCOUNT\n          IF (randoms(x) .lt. false_margin) THEN\n            a(x) = .TRUE.\n            a_copy(x) = .TRUE.\n          ELSE\n            a(x) = .FALSE.\n            a_copy(x) = .FALSE.\n            has_false(x / LOOPCOUNT) = .TRUE.\n          END IF\n        END DO\n\n        !$acc data copy(a(1:10*LOOPCOUNT), results(1:10))\n          !$acc kernels loop gang\n          DO x = 0, 9\n            temp = .TRUE.\n            !$acc loop worker reduction(.AND.:temp)\n            DO y = 1, LOOPCOUNT\n              temp = temp .AND. a(x * LOOPCOUNT + y)\n            END DO\n            results(x + 1) = temp\n            !$acc loop worker\n            DO y = 1, LOOPCOUNT\n              IF (temp .eqv. .TRUE.) THEN\n                IF (a(x * LOOPCOUNT + y) .eqv. .TRUE.) THEN\n                  a(x * LOOPCOUNT + y) = .FALSE.\n                ELSE\n                  a(x * LOOPCOUNT + y) = .TRUE.\n                END IF\n              END IF\n            END DO\n          END DO\n        !$acc end data\n        DO x = 0, 9\n          temp = .TRUE.\n          DO y = 1, LOOPCOUNT\n            temp = temp .AND. a_copy(x * LOOPCOUNT + y)\n          END DO\n          IF (temp .neqv. results(x + 1)) THEN\n            errors = errors + 1\n          END IF\n          DO y = 1, LOOPCOUNT\n            IF (temp .eqv. .TRUE.) THEN\n              IF (a(x * LOOPCOUNT + y) .eqv. a_copy(x * LOOPCOUNT + y)) THEN\n                errors = errors + 1\n              END IF\n            ELSE\n              IF (a(x * LOOPCOUNT + y) .neqv. a_copy(x * LOOPCOUNT + y)) THEN\n                errors = errors + 1\n              END IF\n            END IF\n          END DO\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_and_vector_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,private,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        LOGICAL,DIMENSION(10*LOOPCOUNT):: a !Data\n        LOGICAL,DIMENSION(10):: b\n        LOGICAL,DIMENSION(10):: has_false\n        LOGICAL :: temp\n        REAL(8) :: false_margin\n        REAL(8),DIMENSION(10*LOOPCOUNT) :: randoms\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        false_margin = exp(log(.5) / LOOPCOUNT)\n        DO x = 1, 10\n          has_false(x) = .FALSE.\n          b(x) = .TRUE.\n        END DO\n\n        DO x = 0, 9\n          DO y = 1, LOOPCOUNT\n            IF (randoms(x * LOOPCOUNT + y) .lt. false_margin) THEN\n              a(x * LOOPCOUNT + y) = .TRUE.\n            ELSE\n              a(x * LOOPCOUNT + y) = .FALSE.\n              has_false(x + 1) = .TRUE.\n            END IF\n          END DO\n        END DO\n\n        !$acc data copyin(a(1:10*LOOPCOUNT)) copy(b(1:10))\n          !$acc kernels loop private(temp)\n          DO x = 0, 9\n            temp = .TRUE.\n            !$acc loop vector reduction(.AND.:temp)\n            DO y = 1, LOOPCOUNT\n              temp = temp .AND. a(x * LOOPCOUNT + y)\n            END DO\n            b(x + 1) = temp\n          END DO\n        !$acc end data\n\n        DO x = 0, 9\n          temp = .FALSE.\n          DO y = 1, LOOPCOUNT\n            IF (a(x * LOOPCOUNT + y) .eqv. .FALSE.) THEN\n              temp = .TRUE.\n            END IF\n          END DO\n          IF (temp .neqv. has_false(x + 1)) THEN\n            errors = 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_bitand_general.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y, z !Iterators\n        INTEGER,DIMENSION(LOOPCOUNT):: a !Data\n        INTEGER :: b\n        REAL(8),DIMENSION(16 * LOOPCOUNT):: randoms\n        REAL(8) :: false_margin\n        INTEGER :: errors = 0\n        INTEGER :: temp = 1\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        false_margin = exp(log(.5)/n)\n        DO x = 1, LOOPCOUNT\n          DO y = 0, 15\n            IF (randoms(y * LOOPCOUNT + x) .lt. false_margin) THEN\n              temp = 1\n              DO z = 0, y\n                temp = temp * 2\n              END DO\n              a(x) = a(x) + temp\n            END IF\n          END DO\n        END DO\n\n        b = a(1)\n\n        !$acc data copyin(a(1:LOOPCOUNT))\n          !$acc kernels loop reduction(iand:b)\n          DO x = 1, LOOPCOUNT\n            b = iand(b, a(x))\n          END DO\n        !$acc end data\n\n        temp = a(1)\n        DO x = 2, LOOPCOUNT\n          temp = iand(a(x), temp)\n        END DO\n        IF (temp .ne. b) THEN\n          WRITE(*, *) temp\n          WRITE(*, *) b\n          errors = 1\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_bitand_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,private,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y, z !Iterators\n        INTEGER,DIMENSION(10*LOOPCOUNT):: a, b, b_copy !Data\n        REAL(8),DIMENSION(10*LOOPCOUNT):: randoms2\n        INTEGER,DIMENSION(10) :: c\n        REAL(8) :: false_margin\n        REAL(8),DIMENSION(160*LOOPCOUNT)::randoms\n        INTEGER :: errors = 0\n        INTEGER :: temp\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        CALL RANDOM_NUMBER(randoms2)\n        b = FLOOR(10000 * randoms2)\n        b_copy = b\n        false_margin = exp(log(.5)/LOOPCOUNT)\n        DO x = 1, 10 * LOOPCOUNT\n          DO y = 1, 16\n            IF (randoms((y - 1) * 10 * LOOPCOUNT + x) < false_margin) THEN\n              temp = 1\n              DO z = 1, y\n                temp = temp * 2\n              END DO\n              a(x) = a(x) + temp\n            END IF\n          END DO\n        END DO\n\n        DO x = 1, 10\n         c(x) = a((x - 1) * LOOPCOUNT + x)\n        END DO\n\n        !$acc data copyin(a(1:10*LOOPCOUNT)) copy(b(1:10*LOOPCOUNT), c(1:10))\n          !$acc kernels loop gang private(temp)\n          DO x = 1, 10\n            temp = a((x - 1) * LOOPCOUNT + 1)\n            !$acc loop worker reduction(iand:temp)\n            DO y = 2, LOOPCOUNT\n              temp = iand(temp, a((x - 1) * LOOPCOUNT + y))\n            END DO\n            c(x) = temp\n            !$acc loop worker\n            DO y = 1, LOOPCOUNT\n              b((x - 1) * LOOPCOUNT + y) = b((x - 1) * LOOPCOUNT + y) + c(x)\n            END DO\n          END DO\n        !$acc end data\n\n       DO x = 1, 10\n         temp = a((x - 1) * LOOPCOUNT + 1)\n         DO y = 2, LOOPCOUNT\n           temp = iand(temp, a((x - 1) * LOOPCOUNT + y))\n         END DO\n         IF (temp .ne. c(x)) THEN\n           errors = errors + 1\n         END IF\n         DO y = 1, LOOPCOUNT\n           IF (b((x - 1) * LOOPCOUNT + y) .ne. b_copy((x - 1) * LOOPCOUNT + y) + temp) THEN\n             errors = errors + 1\n           END IF\n         END DO\n       END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_bitand_vector_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,private,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y, z, i !Iterators\n        INTEGER,DIMENSION(10*LOOPCOUNT):: a !Data\n        INTEGER,DIMENSION(10):: b\n        INTEGER :: c\n        REAL(8),DIMENSION(160*LOOPCOUNT):: random\n        REAL(8) :: false_margin\n        INTEGER :: errors = 0\n        INTEGER :: temp\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(random)\n        false_margin = exp(log(.5) / n)\n        DO x = 0, 9\n          DO y = 1, LOOPCOUNT\n            DO z = 1, 16\n              IF (random(x * 16 * LOOPCOUNT + (y - 1) * 16 + z - 1) < false_margin) THEN\n                temp = 1\n                DO i = 1, z\n                  temp = temp * 2\n                END DO\n                a(x * LOOPCOUNT + y) = a(x * LOOPCOUNT + y) + temp\n              END IF\n            END DO\n          END DO\n        END DO\n\n        !$acc data copyin(a(1:10*LOOPCOUNT)), copy(b(1:10))\n          !$acc kernels loop private(c)\n          DO x = 0, 9\n            c = a(x * LOOPCOUNT + 1)\n            !$acc loop vector reduction(iand:c)\n            DO y = 1, LOOPCOUNT\n              c = iand(c, a(x * LOOPCOUNT + y))\n            END DO\n            b(x + 1) = c\n          END DO\n        !$acc end data\n\n        DO x = 0, 9\n          temp = a(x * LOOPCOUNT + 1)\n          DO y = 2, LOOPCOUNT\n            temp = iand(temp, a(x * LOOPCOUNT + y))\n          END DO\n          IF (b(x + 1) .ne. temp) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_bitor_general.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y, z !Iterators\n        INTEGER,DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8) :: false_margin\n        REAL(8),DIMENSION(16*LOOPCOUNT):: random\n        INTEGER :: errors = 0\n        INTEGER :: temp\n        INTEGER :: b\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(random)\n        false_margin = exp(log(.5)/n)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 16\n            IF (random((y - 1) * LOOPCOUNT + x) < false_margin) THEN\n              temp = 1\n              DO z = 1, y\n                temp = temp * 2\n              END DO\n              a(x) = a(x) + temp\n            END IF\n          END DO\n        END DO\n        b = a(1)\n        !$acc data copyin(a(1:LOOPCOUNT))\n          !$acc kernels loop reduction(ior:b)\n          DO x = 2, LOOPCOUNT\n            b = ior(b, a(x))\n          END DO\n        !$acc end data\n        temp = a(1)\n        DO x = 2, LOOPCOUNT\n          temp = ior(temp, a(x))\n        END DO\n        IF (temp .ne. b) THEN\n          errors = errors + 1\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_bitor_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,private,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y, z, i !Iterators\n        INTEGER,DIMENSION(10*LOOPCOUNT):: a, b, b_copy !Data\n        REAL(8),DIMENSION(10*LOOPCOUNT):: randoms2\n        INTEGER,DIMENSION(10) :: c\n        REAL(8),DIMENSION(160*LOOPCOUNT):: randoms\n        REAL(8) :: false_margin\n        INTEGER :: errors = 0\n        INTEGER :: temp\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        CALL RANDOM_NUMBER(randoms2)\n        false_margin = exp(log(.5)/n)\n        b = FLOOR(6*randoms2)\n        b_copy = b\n        DO x = 0, 9\n          DO y = 1, LOOPCOUNT\n            DO z = 1, 16\n              IF (randoms(x * 16 * LOOPCOUNT + y * 16 + z - 1) .gt. false_margin) THEN\n                temp = 1\n                DO i = 1, z\n                  temp = temp * 2\n                END DO\n                a(x * LOOPCOUNT + y) = a(x * LOOPCOUNT + y) + temp\n              END IF\n            END DO\n          END DO\n        END DO\n\n        !$acc data copyin(a(1:10*LOOPCOUNT)) copy(b(1:10*LOOPCOUNT), c(1:10))\n          !$acc kernels loop gang private(temp)\n          DO x = 0, 9\n            temp = 0\n            !$acc loop worker reduction(ior:temp)\n            DO y = 1, LOOPCOUNT\n              temp = ior(temp, a(x * LOOPCOUNT + y))\n            END DO\n            c(x + 1) = temp\n            !$acc loop worker\n            DO y = 1, LOOPCOUNT\n              b(x * LOOPCOUNT + y) = b(x * LOOPCOUNT + y) + c(x + 1)\n            END DO\n          END DO\n        !$acc end data\n\n        DO x = 0, 9\n          temp = 0\n          DO y = 1, LOOPCOUNT\n            temp = ior(temp, a(x * LOOPCOUNT + y))\n          END DO\n          IF (temp .ne. c(x + 1)) THEN\n            errors = errors + 1\n          END IF\n          DO y = 1, LOOPCOUNT\n            IF (b(x * LOOPCOUNT + y) .ne. b_copy(x * LOOPCOUNT + y) + c(x + 1)) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_bitor_vector_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,private,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y, z !Iterators\n        INTEGER,DIMENSION(10 * LOOPCOUNT):: a !Data\n        INTEGER,DIMENSION(10) :: b\n        REAL(8) :: false_margin\n        REAL(8),DIMENSION(160 * LOOPCOUNT) :: randoms\n        INTEGER :: errors = 0\n        INTEGER :: temp\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        false_margin = exp(log(.5) / n)\n        DO x = 1, 10 * LOOPCOUNT\n          DO y = 1, 16\n            IF (randoms(y * 10 * LOOPCOUNT + y - 1) .gt. false_margin) THEN\n              temp = 1\n              DO z = 1, y\n                temp = temp * 2\n              END DO\n              a(x) = a(x) + temp\n            END IF\n          END DO\n        END DO\n\n        !$acc data copyin(a(1:10*LOOPCOUNT)) copy(b(1:10))\n          !$acc kernels loop private(temp)\n          DO x = 0, 9\n            temp = 0\n            !$acc loop vector reduction(ior:temp)\n            DO y = 1, LOOPCOUNT\n              temp = ior(temp, a(x * LOOPCOUNT + y))\n            END DO\n            b(x + 1) = temp\n          END DO\n        !$acc end data\n\n        DO x = 0, 9\n          temp = 0\n          DO y = 1, LOOPCOUNT\n            temp = ior(temp, a(x * LOOPCOUNT + y))\n          END DO\n          IF (temp .ne. b(x + 1)) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_bitxor_general.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        INTEGER,DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: randoms\n        INTEGER :: errors = 0\n        INTEGER :: b = 0\n        INTEGER :: temp = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        a = FLOOR(randoms*1000000)\n\n        !$acc data copyin(a(1:LOOPCOUNT))\n          !$acc kernels loop reduction(ieor:b)\n          DO x = 1, LOOPCOUNT\n            b = ieor(b, a(x))\n          END DO\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          temp = ieor(temp, a(x))\n        END DO\n        IF (temp .ne. b) THEN\n          errors = errors + 1\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_bitxor_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,private,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        INTEGER,DIMENSION(10*LOOPCOUNT):: a, b, b_copy !Data\n        REAL(8),DIMENSION(10*LOOPCOUNT):: randoms, randoms2\n        INTEGER,DIMENSION(10):: c\n        REAL*8 :: RAND\n        INTEGER :: errors = 0\n        INTEGER :: temp\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        a = FLOOR(randoms*1000000)\n        CALL RANDOM_NUMBER(randoms2)\n        b = FLOOR(randoms2*1000000)\n        b_copy = b\n        c = 0\n\n        !$acc data copyin(a(1:10*LOOPCOUNT)) copy(b(1:10*LOOPCOUNT), c(1:10))\n          !$acc kernels loop gang private(temp)\n          DO x = 0, 9\n            temp = 0\n            !$acc loop worker reduction(ieor:temp)\n            DO y = 1, LOOPCOUNT\n              temp = ieor(temp, a(x * LOOPCOUNT + y))\n            END DO\n            c(x + 1) = temp\n            !$acc loop worker\n            DO y = 1, LOOPCOUNT\n              b(x * LOOPCOUNT + y) = b(x * LOOPCOUNT + y) + c(x + 1)\n            END DO\n          END DO\n        !$acc end data\n\n        DO x = 0, 9\n          temp = 0\n          DO y = 1, LOOPCOUNT\n            temp = ieor(temp, a(x * LOOPCOUNT + y))\n          END DO\n          IF (temp .ne. c(x + 1)) THEN\n            errors = errors + 1\n          END IF\n          DO y = 1, LOOPCOUNT\n            IF (b(x * LOOPCOUNT + y) .ne. b_copy(x * LOOPCOUNT + y) + c(x + 1)) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_bitxor_vector_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,private,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        INTEGER,DIMENSION(10*LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(10*LOOPCOUNT):: randoms\n        INTEGER,DIMENSION(10):: b\n        INTEGER :: errors = 0\n        INTEGER :: temp\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        a = FLOOR(randoms*1000000)\n\n        !$acc data copyin(a(1:10*LOOPCOUNT)) copy(b(1:10))\n          !$acc kernels loop gang private(temp)\n          DO x = 0, 9\n            temp = 0\n            !$acc loop vector reduction(ieor:temp)\n            DO y = 1, LOOPCOUNT\n              temp = ieor(temp, a(x * LOOPCOUNT + y))\n            END DO\n            b(x + 1) = temp\n          END DO\n        !$acc end data\n\n        DO x = 0, 9\n          temp = 0\n          DO y = 1, LOOPCOUNT\n            temp = ieor(temp, a(x * LOOPCOUNT + y))\n          END DO\n          IF (temp .ne. b(x + 1)) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_max_general.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        REAL(8) :: maximum, temp\n        INTEGER :: errors = 0\n\n        !Initilization\n        maximum = 0\n        temp = 0\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n          !$acc kernels loop reduction(max:maximum)\n          DO x = 1, LOOPCOUNT\n            maximum = max(maximum, a(x) * b(x))\n          END DO\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          temp = max(temp, a(x) * b(x))\n        END DO\n        IF (abs(temp - maximum) .gt. PRECISION) THEN\n          errors = errors + 1\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_max_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,private,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(10 * LOOPCOUNT):: a, b, c !Data\n        REAL(8),DIMENSION(10):: maximum\n        REAL(8) :: temp\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc data copyin(a(1:10*LOOPCOUNT), b(1:10*LOOPCOUNT)) copy(c(1:10*LOOPCOUNT))\n          !$acc kernels loop gang private(temp)\n          DO x = 0, 9\n            temp = 0\n            !$acc loop worker reduction(max:temp)\n            DO y = 1, LOOPCOUNT\n              temp = max(temp, a(x * LOOPCOUNT + y) * b(x * LOOPCOUNT + y))\n            END DO\n            maximum(x + 1) = temp\n            !$acc loop worker\n            DO y = 1, LOOPCOUNT\n              c(x * LOOPCOUNT + y) = (a(x * LOOPCOUNT + y) * b(x * LOOPCOUNT + y)) / maximum(x + 1)\n            END DO\n          END DO\n        !$acc end data\n\n        DO x = 0, 9\n          DO y = 1, LOOPCOUNT\n            IF (a(x * LOOPCOUNT + y) * b(x * LOOPCOUNT + y) - maximum(x + 1) .gt. PRECISION) THEN\n              errors = errors + 1\n            ELSE IF ((c(x * LOOPCOUNT + y) - 1) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_max_vector_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,private,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(10 * LOOPCOUNT):: a, b !Data\n        REAL(8),DIMENSION(10):: maximum\n        INTEGER :: errors = 0\n        REAL(8) :: temp\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        maximum = 0\n\n        !$acc data copyin(a(1:10*LOOPCOUNT), b(1:10*LOOPCOUNT)) copy(maximum(1:10))\n          !$acc kernels loop private(temp)\n          DO x = 0, 9\n            temp = 0\n            !$acc loop vector reduction(max:temp)\n            DO y = 1, LOOPCOUNT\n              temp = max(temp, a(x * LOOPCOUNT + y) * b(x * LOOPCOUNT + y))\n            END DO\n            maximum(x + 1) = temp\n          END DO\n        !$acc end data\n\n        DO x = 0, 9\n          temp = 0\n          DO y = 1, LOOPCOUNT\n            temp = max(temp, a(x * LOOPCOUNT + y) * b(x * LOOPCOUNT + y))\n          END DO\n          IF (abs(temp - maximum(x + 1)) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_min_general.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        REAL(8):: minimum = 1000\n        REAL(8):: temp = 1000\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n          !$acc kernels loop reduction(min:minimum)\n          DO x = 1, LOOPCOUNT\n            minimum = min(minimum, a(x) * b(x))\n          END DO\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          temp = min(temp, a(x) * b(x))\n        END DO\n        IF (abs(temp - minimum) .gt. PRECISION) THEN\n          errors = errors + 1\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_min_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,private,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(10 * LOOPCOUNT):: a, b, c !Data\n        REAL(8),DIMENSION(10):: minimum\n        REAL(8):: temp\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        a = a + 1\n        b = b + 1\n\n        !$acc data copyin(a(1:10*LOOPCOUNT), b(1:10*LOOPCOUNT)) copy(c(1:10*LOOPCOUNT)) copy(minimum(1:10))\n          !$acc kernels loop gang independent private(temp)\n          DO x = 0, 9\n            temp = 1000\n            !$acc loop worker independent reduction(min:temp)\n            DO y = 1, LOOPCOUNT\n              temp = min(temp, a(x * LOOPCOUNT + y) * b(x * LOOPCOUNT + y))\n            END DO\n            minimum(x + 1) = temp\n            !$acc loop independent\n            DO y = 1, LOOPCOUNT\n              c(x * LOOPCOUNT + y) = (a(x * LOOPCOUNT + y) * b(x * LOOPCOUNT + y)) / minimum(x + 1)\n            END DO\n          END DO\n        !$acc end data\n\n        DO x = 0, 9\n          temp = 1000\n          DO y = 1, LOOPCOUNT\n            temp = min(temp, a(x * LOOPCOUNT + y) * b(x * LOOPCOUNT + y))\n          END DO\n          IF (abs(temp - minimum(x + 1)) .gt. PRECISION) THEN\n            errors = errors + 1\n            WRITE(*, *) minimum(x + 1)\n          END IF\n          DO y = 1, LOOPCOUNT\n            IF (abs(c(x * LOOPCOUNT + y) - (a(x * LOOPCOUNT + y) * b(x * LOOPCOUNT + y) / temp)) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_min_vector_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,private,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y!Iterators\n        REAL(8),DIMENSION(10*LOOPCOUNT):: a, b !Data\n        REAL(8),DIMENSION(10):: minimum\n        REAL(8):: temp = 1000\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n\n        !$acc data copyin(a(1:10*LOOPCOUNT), b(1:10*LOOPCOUNT)) copy(minimum(1:10))\n          !$acc kernels loop gang private(temp)\n          DO x = 0, 9\n            temp = 1000\n            !$acc loop vector reduction(min:temp)\n            DO y = 1, LOOPCOUNT\n              temp = min(temp, a(x * LOOPCOUNT + y) * b(x * LOOPCOUNT + y))\n            END DO\n            minimum(x + 1) = temp\n          END DO\n        !$acc end data\n\n        DO x = 0, 9\n          temp = 1000\n          DO y = 1, LOOPCOUNT\n            temp = min(temp, a(x * LOOPCOUNT + y) * b(x * LOOPCOUNT + y))\n          END DO\n          IF (abs(temp - minimum(x + 1)) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_multiply_general.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        INTEGER :: errors = 0\n        REAL(8) :: temp = 1\n        REAL(8) :: multiplied_total = 1\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        a = (999.4 + a)/1000\n        b = (999.4 + b)/1000\n\n        !$acc data copyin(a(1:LOOPCOUNT))\n          !$acc kernels loop reduction(*:multiplied_total)\n          DO x = 1, LOOPCOUNT\n            multiplied_total = multiplied_total * (a(x) + b(x))\n          END DO\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          temp = temp * (a(x) + b(x))\n        END DO\n        IF (abs(temp - multiplied_total) .gt. ((temp / 2) + (multiplied_total / 2)) * PRECISION) THEN\n          WRITE(*, *) temp\n          WRITE(*, *) multiplied_total\n          errors = errors + 1\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_multiply_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,private,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(10*LOOPCOUNT):: a, b, c !Data\n        REAL(8),DIMENSION(10):: totals\n        REAL(8) :: temp\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        a = (999.4 + a) / 2000\n        b = (999.4 + b) / 2000\n\n        !$acc data copyin(a(1:10*LOOPCOUNT), b(1:10*LOOPCOUNT)) copy(c(1:10*LOOPCOUNT), totals(1:10))\n          !$acc kernels loop gang private(temp)\n          DO x = 0, 9\n            temp = 1\n            !$acc loop worker reduction(*:temp)\n            DO y = 1, LOOPCOUNT\n              temp = temp * (a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y))\n            END DO\n            totals(x + 1) = temp\n            !$acc loop worker\n            DO y = 1, LOOPCOUNT\n              c(x * LOOPCOUNT + y) = (a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y)) / totals(x + 1)\n            END DO\n          END DO\n        !$acc end data\n\n        DO x = 0, 9\n          temp = 1\n          DO y = 1, LOOPCOUNT\n            temp = temp * (a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y))\n          END DO\n          IF (abs(temp - totals(x + 1)) .gt. ((temp / 2) + (totals(x + 1) / 2)) * PRECISION) THEN\n            errors = errors + 1\n            WRITE(*, *) temp\n            WRITE(*, *) totals(x + 1)\n            WRITE(*, *) \" \"\n          END IF\n          DO y = 1, LOOPCOUNT\n            IF (abs(c(x * LOOPCOUNT + y) - ((a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y)) / totals(x + 1))) .gt. c(x * LOOPCOUNT + y) * PRECISION) THEN\n              errors = errors + 1\n              WRITE(*, *) c(x * LOOPCOUNT + y)\n              WRITE(*, *) a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y)\n              WRITE(*, *) \" \"\n            END IF\n          END DO\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_multiply_vector_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,private,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(10 * LOOPCOUNT):: a, b !Data\n        REAL(8),DIMENSION(10) :: c\n        REAL(8) :: temp\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        a = (999.4 + a) / 1000\n        b = (999.4 + b) / 1000\n\n        !$acc data copyin(a(1:10*LOOPCOUNT), b(1:10*LOOPCOUNT)) copyout(c(1:10))\n          !$acc parallel loop private(temp)\n          DO x = 0, 9\n            temp = 1\n            !$acc loop vector reduction(*:temp)\n            DO y = 1, LOOPCOUNT\n              temp = temp * (a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y))\n            END DO\n            c(x + 1) = temp\n          END DO\n        !$acc end data\n\n        DO x = 0, 9\n          temp = 1\n          DO y = 1, LOOPCOUNT\n            temp = temp * (a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y))\n          END DO\n          IF (abs(temp - c(x + 1)) .gt. ((temp / 2) + (c(x + 1) / 2)) * PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_or_general.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        LOGICAL,DIMENSION(LOOPCOUNT):: a !Data\n        LOGICAL :: results = .FALSE.\n        LOGICAL :: temp = .FALSE.\n        REAL(8) :: false_margin = exp(log(.5) / n)\n        REAL(8),DIMENSION(LOOPCOUNT):: random\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(random)\n        DO x = 1, LOOPCOUNT\n          IF (random(x) > false_margin) THEN\n            a(x) = .TRUE.\n          ELSE\n            a(x) = .FALSE.\n          END IF\n        END DO\n\n        !$acc data copyin(a(1:LOOPCOUNT))\n          !$acc kernels loop reduction(.OR.:results)\n          DO x = 1, LOOPCOUNT\n            results = results .OR. a(x)\n          END DO\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          temp = temp .OR. a(x)\n        END DO\n        IF (temp .neqv. results) THEN\n          errors = errors + 1\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_or_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,private,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        LOGICAL,DIMENSION(10*LOOPCOUNT):: a, a_copy !Data\n        LOGICAL,DIMENSION(10) :: results\n        LOGICAL :: temp = .FALSE.\n        REAL(8),DIMENSION(10 * LOOPCOUNT) :: random\n        REAL(8) :: false_margin = exp(log(.5) / n)\n        INTEGER :: errors = 0\n\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(random)\n\n        !Initilization\n        DO x = 1, 10 * LOOPCOUNT\n          IF (random(x) .gt. false_margin) THEN\n            a(x) = .TRUE.\n          ELSE\n            a(x) = .FALSE.\n          END IF\n          a_copy(x) = a(x)\n        END DO\n\n        DO x = 1, 10\n          results(x) = .FALSE.\n        END DO\n\n        !$acc data copy(a(1:10*LOOPCOUNT), results(1:10))\n          !$acc kernels loop gang private(temp)\n          DO x = 0, 9\n            temp = .FALSE.\n            !$acc loop worker reduction(.OR.:temp)\n            DO y = 1, LOOPCOUNT\n              temp = temp .OR. a(x * LOOPCOUNT + y)\n            END DO\n            results(x + 1) = temp\n            !$acc loop worker\n            DO y = 1, LOOPCOUNT\n              IF (results(x + 1) .eqv. .TRUE.) THEN\n                IF(a(x * LOOPCOUNT + y) .eqv. .TRUE.) THEN\n                  a(x * LOOPCOUNT + y) = .FALSE.\n                ELSE\n                  a(x * LOOPCOUNT + y) = .TRUE.\n                END IF\n              END IF\n            END DO\n          END DO\n        !$acc end data\n\n        DO x = 0, 9\n          temp = .FALSE.\n          DO y = 1, LOOPCOUNT\n            temp = temp .OR. a_copy(x * LOOPCOUNT + y)\n          END DO\n          IF (temp .neqv. results(x + 1)) THEN\n            errors = errors + 1\n          END IF\n          DO y = 1, LOOPCOUNT\n            IF (temp .eqv. .FALSE.) THEN\n              IF (a(x * LOOPCOUNT + y) .neqv. a_copy(x * LOOPCOUNT + y)) THEN\n                errors = errors + 1\n              END IF\n            ELSE\n              IF (a(x * LOOPCOUNT + y) .eqv. a_copy(x * LOOPCOUNT + y)) THEN\n                errors = errors + 1\n              END IF\n            END IF\n          END DO\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_or_vector_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,private,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        LOGICAL,DIMENSION(10*LOOPCOUNT):: a !Data\n        LOGICAL,DIMENSION(10) :: b\n        LOGICAL :: temp\n        REAL(8),DIMENSION(10*LOOPCOUNT):: randoms\n        REAL(8) :: false_margin = exp(log(.5) / 2)\n        INTEGER :: errors = 0\n\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n\n        !Initilization\n        DO x = 1, 10 * LOOPCOUNT\n          IF (randoms(x) > false_margin) THEN\n            a(x) = .TRUE.\n          ELSE\n            a(x) = .FALSE.\n          END IF\n        END DO\n\n        !$acc data copyin(a(1:10*LOOPCOUNT)), copy(b(1:10))\n          !$acc kernels loop private(temp)\n          DO x = 0, 9\n            temp = .FALSE.\n            !$acc loop vector reduction(.OR.:temp)\n            DO y = 1, LOOPCOUNT\n              temp = temp .OR. a(x * LOOPCOUNT + y)\n            END DO\n            b(x + 1) = temp\n          END DO\n        !$acc end data\n\n        DO x = 0, 9\n          temp = .FALSE.\n          DO y = 1, LOOPCOUNT\n            temp = temp .OR. a(x * LOOPCOUNT + y)\n          END DO\n          IF (temp .neqv. b(x + 1)) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_seq.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        b = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(b(1:LOOPCOUNT))\n          !$acc kernels loop seq\n          DO x = 2, LOOPCOUNT\n            b(x) = b(x - 1) + a(x)\n          END DO\n        !$acc end data\n\n        DO x = 2, LOOPCOUNT\n          IF (abs(b(x) - (b(x - 1) + a(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_tile.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,reduction,combined-constructs,loop,tile,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y, z !Iterators\n        REAL(8),DIMENSION(SMALL_LOOPCOUNT):: a, b, c !Data\n        REAL(8),DIMENSION(SMALL_LOOPCOUNT,SMALL_LOOPCOUNT)::d\n        REAL(8) :: temp\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        CALL RANDOM_NUMBER(c)\n\n        !$acc data copyin(a(1:SMALL_LOOPCOUNT), b(1:SMALL_LOOPCOUNT), c(1:SMALL_LOOPCOUNT)) copyout(d(1:SMALL_LOOPCOUNT,1:SMALL_LOOPCOUNT))\n          !$acc kernels loop tile(*, *) reduction(+:temp)\n          DO x = 1, SMALL_LOOPCOUNT\n            DO y = 1, SMALL_LOOPCOUNT\n              temp = 0\n              DO z = 1, SMALL_LOOPCOUNT\n                temp = temp + a(z) + b(z) + c(z)\n              END DO\n              d(x,y) = temp\n            END DO\n          END DO\n        !$acc end data\n\n        DO x = 1, SMALL_LOOPCOUNT\n          DO y = 1, SMALL_LOOPCOUNT\n            temp = 0\n            DO z = 1, SMALL_LOOPCOUNT\n              temp = temp + a(z) + b(z) + c(z)\n            END DO\n            IF (abs(d(x,y) - temp) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "reduction",
                            "combined-constructs",
                            "loop",
                            "tile"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_vector_blocking.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        REAL(8) :: multiplier\n        INTEGER :: errors = 0\n\n        multiplier = 1\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n          !$acc kernels\n            !$acc loop vector\n            DO x = 1, LOOPCOUNT\n              c(x) = (a(x) + b(x)) * multiplier\n            END DO\n            multiplier = multiplier + 1\n            !$acc loop vector\n            DO x = 1, LOOPCOUNT\n              c(x) = c(x) + ((a(x) + b(x)) * multiplier)\n            END DO\n          !$acc end kernels\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (3 * (a(x) + b(x)))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_worker_blocking.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        REAL(8) :: RAND\n        REAL(8) :: multiplier\n        INTEGER :: errors = 0\n\n        multiplier = 1\n\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n          !$acc kernels\n            !$acc loop worker\n            DO x = 1, LOOPCOUNT\n              c(x) = (a(x) + b(x)) * multiplier\n            END DO\n            multiplier = multiplier + 1\n            !$acc loop worker\n            DO x = 1, LOOPCOUNT\n              c(x) = c(x) + (a(x) + b(x)) * multiplier\n            END DO\n          !$acc end kernels\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (3 * (a(x) + b(x)))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_num_gangs.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,reduction,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        INTEGER :: results !Data\n        INTEGER :: errors = 0\n\n        results = 0\n\n        !$acc kernels num_gangs(8)\n          !$acc loop gang reduction(+:results)\n          DO x = 1, LOOPCOUNT\n            results = 1\n          END DO\n        !$acc end kernels\n          \n        IF (results .ne. 8) THEN\n          errors = errors + 1\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "reduction"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_num_workers.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        b = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT))\n          !$acc kernels loop num_workers(16)\n          DO x = 1, LOOPCOUNT\n            b(x) = a(x)\n          END DO\n          !$acc end kernels\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(a(x) - b(x)) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_present.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        b = 0\n\n        !$acc enter data copyin(a(1:LOOPCOUNT)) create(b(1:LOOPCOUNT))\n        !$acc kernels present(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n          !$acc loop\n          DO x = 1, LOOPCOUNT\n            b(x) = a(x)\n          END DO\n        !$acc end kernels\n        !$acc exit data delete(a(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(a(x) - b(x)) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_scalar_default_copy.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        INTEGER :: errors = 0\n        REAL(8) :: total = 0.0\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n\n        DO x = 1, LOOPCOUNT\n          total = total + a(x)\n        END DO\n        !$acc data copyin(b(1:LOOPCOUNT))\n          !$acc kernels num_gangs(1) vector_length(1)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              total = total + b(x)\n            END DO\n          !$acc end kernels\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          total = total - (a(x) + b(x))\n        END DO\n        IF (abs(total) .gt. (2 * LOOPCOUNT - 2) * PRECISION) THEN\n          errors = errors + 1\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_vector_length.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        b = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT))\n          !$acc kernels vector_length(16)\n            !$acc loop vector\n            DO x = 1, LOOPCOUNT\n              b(x) = a(x)\n            END DO\n          !$acc end kernels\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(a(x) - b(x)) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_wait.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:async,kernels,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT)) async(1)\n        !$acc kernels wait(1)\n          !$acc loop\n          DO x = 1, LOOPCOUNT\n            c(x) = a(x) + b(x)\n          END DO\n        !$acc end kernels\n        !$acc exit data copyout(c(1:LOOPCOUNT)) delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "async",
                            "kernels"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "loop_collapse.F90": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(10*LOOPCOUNT):: a, b, c !Data\n        REAL(8):: total\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        DO x = 0, 9\n          c(x*LOOPCOUNT + 1) = a(x*LOOPCOUNT + 1) + b(x*LOOPCOUNT + 1)\n        END DO\n\n        !$acc data copyin(a(1:10*LOOPCOUNT), b(1:10*LOOPCOUNT)) copy(c(1:10*LOOPCOUNT))\n          !$acc parallel\n            !$acc loop independent\n            DO x = 0, 9\n              DO y = 2, LOOPCOUNT\n                c(x*LOOPCOUNT + y) = c(x*LOOPCOUNT + y - 1) + a(x*LOOPCOUNT + y) + b(x*LOOPCOUNT + y)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 0, 9\n          total = 0\n          DO y = 1, LOOPCOUNT\n            total = total + a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y)\n            IF (abs(total - c(x * LOOPCOUNT + y)) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:construct-independent,loop,V:1.0-2.7\n      LOGICAL FUNCTION test2()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(10*LOOPCOUNT):: a, b, c !Data\n        REAL(8):: total\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc data copyin(a(1:10*LOOPCOUNT), b(1:10*LOOPCOUNT)) copyout(c(1:10*LOOPCOUNT))\n          !$acc parallel\n            !$acc loop independent collapse(2)\n            DO x = 0, 9\n              DO y = 1, LOOPCOUNT\n                c(x*LOOPCOUNT + y) = a(x*LOOPCOUNT + y) + b(x*LOOPCOUNT + y)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 0, 9\n          DO y = 1, LOOPCOUNT\n            IF (abs(c(x*LOOPCOUNT+y) - (a(x*LOOPCOUNT+y)+b(x*LOOPCOUNT+y))) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "loop_no_collapse.F90": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(10 * LOOPCOUNT):: a, b, c !Data\n        REAL(8):: total\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        DO x = 0, 9\n          c(x * LOOPCOUNT + 1) = a(x * LOOPCOUNT + 1) + b(x * LOOPCOUNT + 1)\n        END DO\n\n        !$acc data copyin(a(1:10*LOOPCOUNT), b(1:10*LOOPCOUNT)) copy(c(1:10*LOOPCOUNT))\n          !$acc parallel\n            !$acc loop independent\n            DO x = 0, 9\n              DO y = 2, LOOPCOUNT\n                c(x * LOOPCOUNT + y) = c(x * LOOPCOUNT + y - 1) + a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 0, 9\n          total = 0\n          DO y = 1, LOOPCOUNT\n            total = total + a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y)\n            IF (abs(total - c(x * LOOPCOUNT + y)) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:construct-independent,loop,V:1.0-2.7\n      LOGICAL FUNCTION test2()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(10 * LOOPCOUNT):: a, b, c !Data\n        REAL(8):: total\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        DO x = 0, 9\n          c(x * LOOPCOUNT + 1) = a(x * LOOPCOUNT + 1) + b(x * LOOPCOUNT + 1)\n        END DO\n\n        !$acc data copyin(a(1:10*LOOPCOUNT), b(1:10*LOOPCOUNT)) copy(c(1:10*LOOPCOUNT))\n          !$acc kernels\n            !$acc loop independent\n            DO x = 0, 9\n              DO y = 2, LOOPCOUNT\n                c(x * LOOPCOUNT + y) = c(x * LOOPCOUNT + y - 1) + a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y)\n              END DO\n            END DO\n          !$acc end kernels\n        !$acc end data\n\n        DO x = 0, 9\n          total = 0\n          DO y = 1, LOOPCOUNT\n            total = total + a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y)\n            IF (abs(total - c(x * LOOPCOUNT + y)) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, i_a, i_b, i_c, i_d, i_e, i_f, i_g, i_h, i_i, i_j !Iterators\n        INTEGER, PARAMETER :: PRIVATE_LOOPCOUNT = 1024\n        REAL(8),DIMENSION(PRIVATE_LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors\n        errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc data copyin(a(1:PRIVATE_LOOPCOUNT), b(1:PRIVATE_LOOPCOUNT)) copy(c(1:PRIVATE_LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO i_a = 0, 1\n              !$acc loop\n              DO i_b = 0, 1\n                !$acc loop\n                DO i_c = 0, 1\n                  !$acc loop\n                  DO i_d = 0, 1\n                    !$acc loop\n                    DO i_e = 0, 1\n                      !$acc loop\n                      DO i_f = 0, 1\n                        !$acc loop\n                        DO i_g = 0, 1\n                          !$acc loop\n                          DO i_h = 0, 1\n                            !$acc loop\n                            DO i_i = 0, 1\n                              !$acc loop\n                              DO i_j = 0, 1\n                                c(i_a*512 + i_b*256 + i_c*128 + i_d*64 + i_e*32 + i_f*16 + i_g*8 + i_h*4 + i_i*2 + i_j + 1) = &\n                                a(i_a*512 + i_b*256 + i_c*128 + i_d*64 + i_e*32 + i_f*16 + i_g*8 + i_h*4 + i_i*2 + i_j + 1) + &\n                                b(i_a*512 + i_b*256 + i_c*128 + i_d*64 + i_e*32 + i_f*16 + i_g*8 + i_h*4 + i_i*2 + i_j + 1)\n                              END DO\n                            END DO\n                          END DO\n                        END DO\n                      END DO\n                    END DO\n                  END DO\n                END DO\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, PRIVATE_LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_async.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:async,parallel,update,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y, z !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, d, e, f, g !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        CALL RANDOM_NUMBER(d)\n        CALL RANDOM_NUMBER(e)\n        f = 0\n        g = 0\n        \n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), d(1:LOOPCOUNT), e(1:LOOPCOUNT), c(1:LOOPCOUNT), f(1:LOOPCOUNT), g(1:LOOPCOUNT))\n          !$acc parallel async(1)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n          !$acc parallel async(2)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              f(x) = d(x) + e(x)\n            END DO\n          !$acc end parallel\n          !$acc update host(c(1:LOOPCOUNT)) wait(1) async(4)\n          !$acc update host(f(1:LOOPCOUNT)) wait(2) async(5)\n          !$acc parallel wait(1, 2) async(3)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              g(x) = c(x) + f(x)\n            END DO\n          !$acc end parallel\n          !$acc update host(g(1:LOOPCOUNT)) async(3)\n        !$acc end data\n        !$acc wait\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          ELSE IF (abs(f(x) - (d(x) + e(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          ELSE IF (abs(g(x) - (f(x) + c(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "async",
                            "parallel",
                            "update"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_copy.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, a_host !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        a_host = a\n\n        !$acc parallel copy(a(1:LOOPCOUNT))\n          !$acc loop\n          DO x = 1, LOOPCOUNT\n            a(x) = 2 * a(x)\n          END DO \n        !$acc end parallel\n    \n\n        DO x = 1, LOOPCOUNT\n          IF (abs(a_host(x) - (a(x) / 2)) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_copyin.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, a_copy, b !Data\n        INTEGER :: errors = 0\n        INTEGER,DIMENSION(1):: hasDevice\n        hasDevice(1) = 1\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        a_copy = a\n        b = 0\n\n        !$acc enter data copyin(hasDevice(1:1))\n        !$acc parallel present(hasDevice(1:1))\n          hasDevice(1) = 0\n        !$acc end parallel\n\n\n        !$acc parallel copyin(a(1:LOOPCOUNT))\n          !$acc loop\n          DO x = 1, LOOPCOUNT\n            a(x) = 0.0\n          END DO\n\n        !$acc end parallel\n\n        DO x = 1, LOOPCOUNT\n          IF ((abs(a(x) - a_copy(x)) > PRECISION .AND. hasDevice(1) .eq. 1) .OR. (hasDevice(1) .eq. 0 .AND. abs(a(x)) > PRECISION)) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_copyout.F90": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        INTEGER :: errors = 0\n        INTEGER,DIMENSION(1):: hasDevice\n        hasDevice(1) = 1\n        !$acc enter data copyin(hasDevice(1:1))\n        !$acc parallel present(hasDevice(1:1))\n          hasDevice(1) = 0\n        !$acc end parallel\n\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        b = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT))\n          !$acc parallel copyout(b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              b(x) = a(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(a(x) - b(x)) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:parallel,V:2.0-2.7\n      LOGICAL FUNCTION test2()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        INTEGER :: errors = 0\n        INTEGER,DIMENSION(1):: hasDevice\n        hasDevice(1) = 1\n        !$acc enter data copyin(hasDevice(1:1))\n        !$acc parallel present(hasDevice(1:1))\n          hasDevice(1) = 0\n        !$acc end parallel\n\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        b = a\n        IF (hasDevice(1) .eq. 1) THEN\n          !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            !$acc parallel copyout(b(1:LOOPCOUNT))\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                b(x) = b(x) - a(x)\n              END DO\n            !$acc end parallel\n          !$acc end data\n\n          DO x = 1, LOOPCOUNT\n            IF (abs(a(x) - b(x)) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n!T3:parallel,update,V:2.0-2.7\n      LOGICAL FUNCTION test3()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        INTEGER :: errors = 0\n        INTEGER,DIMENSION(1):: hasDevice\n        hasDevice(1) = 1\n        !$acc enter data copyin(hasDevice(1:1))\n        !$acc parallel present(hasDevice(1:1))\n          hasDevice(1) = 0\n        !$acc end parallel\n\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        b = a\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n          !$acc parallel copyout(b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              b(x) = b(x) - a(x)\n            END DO\n          !$acc end parallel\n          !$acc update host(b(1:LOOPCOUNT))\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(b(x)) > 2 * PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test3 = .FALSE.\n        ELSE\n          test3 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T3\n        LOGICAL :: test3\n#endif\n#ifndef T3\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test3()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 2\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "update"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_create.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        b = 0\n        c = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(c(1:LOOPCOUNT))\n          !$acc parallel create(b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              b(x) = a(x)\n            END DO\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          IF (abs(a(x) - c(x)) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_default_copy.F90": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:devonly,parallel,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n        LOGICAL,DIMENSION(1):: devtest\n        devtest(1) = .TRUE.\n\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel\n          devtest(1) = .FALSE.\n        !$acc end parallel\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = c(x) + a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "parallel"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:devonly,parallel,V:2.0-2.7\n      LOGICAL FUNCTION test2()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n        LOGICAL,DIMENSION(1):: devtest\n        devtest(1) = .TRUE.\n\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel\n          devtest(1) = .FALSE.\n        !$acc end parallel\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        IF (devtest(1)) THEN\n          CALL RANDOM_NUMBER(a)\n          CALL RANDOM_NUMBER(b)\n          c = 1\n\n          !$acc enter data copyin(c(1:LOOPCOUNT))\n          c = 0\n          !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            !$acc parallel\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                c(x) = c(x) + a(x) + b(x)\n              END DO\n            !$acc end parallel\n          !$acc end data\n          DO x = 1, LOOPCOUNT\n            IF (abs(c(x)) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n          !$acc exit data copyout(c(1:LOOPCOUNT))\n          DO x = 1, LOOPCOUNT\n            IF (abs(c(x) - (a(x) + b(x) + 1)) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "parallel"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_default_present.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,default,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a !Data\n        INTEGER :: errors = 0\n\n        a = 0\n\n        !$acc data copy(a(1:LOOPCOUNT))\n          !$acc parallel default(present)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              a(x) = 1.0\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(a(x) - 1) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "default"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_firstprivate.F90": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,firstprivate,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(10 * LOOPCOUNT):: a, b, d !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: c, c_copy\n        REAL*8 :: RAND\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        CALL RANDOM_NUMBER(c)\n        c_copy = c\n        d = 0\n        \n        !$acc data copyin(a(1:10*LOOPCOUNT), b(1:10*LOOPCOUNT)) copy(d(1:10*LOOPCOUNT))\n          !$acc parallel firstprivate(c(1:LOOPCOUNT))\n            !$acc loop gang\n            DO x = 0, 9\n              !$acc loop worker\n              DO y = 1, LOOPCOUNT\n                d(x * LOOPCOUNT + y) = a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y) + c(y)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 0, 9\n          DO y = 1, LOOPCOUNT\n            IF (abs(d(x * LOOPCOUNT + y) - (a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y) + c(y))) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "firstprivate"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:parallel,firstprivate,V:1.0-2.7\n      LOGICAL FUNCTION test2()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(10 * LOOPCOUNT):: a, b, d !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: c, c_copy\n        REAL*8 :: RAND\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        d = 0\n        \n        !$acc data copyin(a(1:10*LOOPCOUNT), b(1:10*LOOPCOUNT)) copy(d(1:10*LOOPCOUNT))\n          !$acc parallel firstprivate(c(1:LOOPCOUNT))\n            !$acc loop gang independent\n            DO x = 0, 9\n              !$acc loop worker independent\n              DO y = 1, LOOPCOUNT\n                c(y) = a(x * LOOPCOUNT + y) - b(x * LOOPCOUNT + y)\n              END DO\n              !$acc loop worker independent\n              DO y = 1, LOOPCOUNT\n                d(x * LOOPCOUNT + y) = a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y) + c(y)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, 10 * LOOPCOUNT\n          IF (abs(d(x) - (2 * a(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO       \n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "firstprivate"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_if.F90": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:devonly,parallel,if,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n        LOGICAL :: host = .FALSE.\n        LOGICAL :: device = .TRUE.\n        INTEGER,DIMENSION(1) :: dev_test\n        dev_test(1) = 0\n\n        !$acc enter data copyin(dev_test(1:1))\n        !$acc parallel present(dev_test(1:1))\n          dev_test(1) = 1\n        !$acc end parallel\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc parallel if(host)\n          !$acc loop\n          DO x = 1, LOOPCOUNT\n            c(x) = a(x) + b(x)\n          END DO\n        !$acc end parallel\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "parallel",
                            "if"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:devonly,parallel,if,V:2.0-2.7\n      LOGICAL FUNCTION test2()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n        LOGICAL :: host = .FALSE.\n        LOGICAL :: device = .TRUE.\n        INTEGER,DIMENSION(1) :: dev_test\n        dev_test(1) = 0\n\n        !$acc enter data copyin(dev_test(1:1))\n        !$acc parallel present(dev_test(1:1))\n          dev_test(1) = 1\n        !$acc end parallel\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        IF (dev_test(1) .eq. 0) THEN\n          CALL RANDOM_NUMBER(a)\n          CALL RANDOM_NUMBER(b)\n          c = a + b\n\n          !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n          !$acc parallel if(host) present(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = c(x) + a(x) + b(x)\n            END DO\n          !$acc end parallel\n          !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n\n          DO x = 1, LOOPCOUNT\n            IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "parallel",
                            "if"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n!T3:devonly,parallel,if,V:2.0-2.7\n      LOGICAL FUNCTION test3()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n        LOGICAL :: host = .FALSE.\n        LOGICAL :: device = .TRUE.\n        INTEGER,DIMENSION(1) :: dev_test\n        dev_test(1) = 0\n\n        !$acc enter data copyin(dev_test(1:1))\n        !$acc parallel present(dev_test(1:1))\n          dev_test(1) = 1\n        !$acc end parallel\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = a + b\n        !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n        !$acc parallel if(device) present(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n          !$acc loop\n          DO x = 1, LOOPCOUNT\n            c(x) = c(x) + a(x) + b(x)\n          END DO\n        !$acc end parallel\n        !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT)), copyout(c(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (2 * (a(x) + b(x)))) .gt. 2 * PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test3 = .FALSE.\n        ELSE\n          test3 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T3\n        LOGICAL :: test3\n#endif\n#ifndef T3\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test3()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 2\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "parallel",
                            "if"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop.F90": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        a = 0\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        !$acc data copy(a(1:LOOPCOUNT))\n          !$acc parallel loop\n          DO x = 1, LOOPCOUNT\n            a(x) = 1\n          END DO\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(a(x) - 1) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:parallel,loop,V:1.0-2.7\n      LOGICAL FUNCTION test2()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        a = 0\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(b)\n        CALL RANDOM_NUMBER(c)\n\n        !$acc data copy(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              a(x) = b(x)\n            END DO\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              a(x) = a(x) + c(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(a(x) - (b(x) + c(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_async.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:async,parallel,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(10 * LOOPCOUNT):: a, b, c, d !Data\n\t\t\t\tINTEGER,DIMENSION(10):: errors_array\n        INTEGER :: errors\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        d = a + b\n\t\t\t\terrors = 0\n\n        !$acc data copyin(a(1:10*LOOPCOUNT), b(1:10*LOOPCOUNT), c(1:10*LOOPCOUNT), d(1:10*LOOPCOUNT)) copy(errors(1:10))\n          DO x = 0, 9\n            !$acc parallel loop async(x)\n            DO y = 1, LOOPCOUNT\n              c(x * LOOPCOUNT + y) = a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y)\n            END DO\n            !$acc parallel loop async(x) reduction(+:errors(x))\n            DO y = 1, LOOPCOUNT\n              IF (c(x * LOOPCOUNT + y) - d(x * LOOPCOUNT + y) .gt. PRECISION .OR. d(x * LOOPCOUNT + y) - c(x * LOOPCOUNT + y) .gt. PRECISION) THEN\n                errors_array(x) = errors_array(x) + 1\n              END IF\n            END DO\n          END DO\n\t\t\t\t\t!$acc wait\n        !$acc end data\n\n\t\t\t\tDO x = 1, 10\n\t\t\t\t\terrors = errors + errors_array(x)\n\t\t\t\tEND DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "async",
                            "parallel",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_auto.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,combined-constructs,loop,auto,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, a_copy, b !Data\n        REAL(8) :: temp\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        a_copy = a\n        b = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT))\n          !$acc parallel loop auto\n          DO x = 1, LOOPCOUNT\n            b(x) = a(x)\n          END DO\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(a(x) - b(x)) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        !$acc data copy(a(1:LOOPCOUNT))\n          !$acc parallel loop auto\n          DO x = 2, LOOPCOUNT\n            a(x) = a(x - 1) + a(x)\n          END DO\n        !$acc end data\n\n        temp = 0\n        DO x = 1, LOOPCOUNT\n          temp = temp + a_copy(x)\n          IF (abs(temp - a(x)) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "combined-constructs",
                            "loop",
                            "auto"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_gang.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copy(c(1:LOOPCOUNT))\n          !$acc parallel loop gang\n          DO x = 1, LOOPCOUNT\n            c(x) = a(x) + b(x)\n          END DO\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_add_general.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        REAL(8) :: total\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        total = 0\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copy(total)\n          !$acc parallel loop reduction(+:total)\n          DO x = 1, LOOPCOUNT\n            total = total + a(x) + b(x)\n          END DO\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          total = total - (a(x) + b(x))\n        END DO\n        IF (abs(total) .gt. LOOPCOUNT * PRECISION) THEN\n          WRITE(*, *) total\n          errors = 1\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_add_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,private,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(10*LOOPCOUNT):: a, b, c, d !Data\n        REAL(8) :: avg\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        avg = 0\n        !$acc data copyin(a(1:10*LOOPCOUNT), b(1:10*LOOPCOUNT)) create(c(1:10*LOOPCOUNT)) copyout(d(1:10*LOOPCOUNT))\n          !$acc parallel loop gang private(avg)\n          DO x = 0, 9\n            avg = 0\n            !$acc loop worker reduction(+:avg)\n            DO y = 1, LOOPCOUNT\n              avg = avg + a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y)\n              c(x * LOOPCOUNT + y) = a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y)\n            END DO\n            avg = avg / LOOPCOUNT\n            !$acc loop worker\n            DO y = 1, LOOPCOUNT\n              d(x * LOOPCOUNT + y) = c(x * LOOPCOUNT + y) / avg\n            END DO\n          END DO\n        !$acc end data\n        DO x = 0, 9\n          avg = 0\n          DO y = 1, LOOPCOUNT\n            avg = avg + a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y)\n          END DO\n          avg = avg / LOOPCOUNT\n          DO y = 1, LOOPCOUNT\n            IF (abs(d(x * LOOPCOUNT + y) - ((a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y)) / avg)) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_add_vector_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,private,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(10*LOOPCOUNT):: a, b !Data\n        REAL(8),DIMENSION(10) :: c\n        REAL(8) :: temp\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n\n        !$acc data copyin(a(1:10*LOOPCOUNT), b(1:10*LOOPCOUNT)) copyout(c(1:10))\n          !$acc parallel loop private(temp)\n          DO x = 0, 9\n            temp = 0.0\n            !$acc loop vector reduction(+:temp)\n            DO y = 1, LOOPCOUNT\n              temp = temp + a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y)\n            END DO\n            c(x + 1) = temp\n          END DO\n        !$acc end data\n\n        DO x = 0, 9\n          temp = 0\n          DO y = 1, LOOPCOUNT\n            temp = temp + a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y)\n          END DO\n          IF (abs(temp - c(x + 1)) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_and_general.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT):: a !Data\n        LOGICAL :: results = .TRUE.\n        LOGICAL :: host_results = .TRUE.\n        REAL(8) :: false_margin\n        INTEGER :: errors = 0\n        false_margin = exp(log(.5) / LOOPCOUNT)\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          IF (randoms(x) .lt. false_margin) THEN\n            a(x) = .TRUE.\n          ELSE\n            a(x) = .FALSE.\n          END IF\n        END DO\n\n        !$acc data copyin(a(1:LOOPCOUNT))\n          !$acc parallel loop reduction(.and.:results)\n          DO x = 1, LOOPCOUNT\n            results = results .and. a(x)\n          END DO\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          host_results = host_results .and. a(x)\n        END DO\n        IF (host_results .neqv. results) THEN\n          errors = 1\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_and_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        LOGICAL,DIMENSION(10*LOOPCOUNT):: a, a_copy !Data\n        LOGICAL,DIMENSION(10) :: results, has_false\n        LOGICAL :: host_results = .TRUE.\n        LOGICAL :: temp = .TRUE.\n        REAL(8),DIMENSION(10*LOOPCOUNT):: randoms\n        REAL(8) :: false_margin = exp(log(.5) / LOOPCOUNT)\n        INTEGER :: errors = 0\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, 10\n          results(x) = .TRUE.\n          has_false(x) = .FALSE.\n        END DO\n        DO x = 1, 10*LOOPCOUNT\n          IF (randoms(x) .lt. false_margin) THEN\n            a(x) = .TRUE.\n            a_copy(x) = .TRUE.\n          ELSE\n            a(x) = .FALSE.\n            a_copy(x) = .FALSE.\n            has_false(x / LOOPCOUNT) = .TRUE.\n          END IF\n        END DO\n\n        !$acc data copy(a(1:10*LOOPCOUNT), results(1:10))\n          !$acc parallel loop gang\n          DO x = 0, 9\n            temp = .TRUE.\n            !$acc loop worker reduction(.AND.:temp)\n            DO y = 1, LOOPCOUNT\n              temp = temp .AND. a(x * LOOPCOUNT + y)\n            END DO\n            results(x + 1) = temp\n            !$acc loop worker\n            DO y = 1, LOOPCOUNT\n              IF (temp .eqv. .TRUE.) THEN\n                IF (a(x * LOOPCOUNT + y) .eqv. .TRUE.) THEN\n                  a(x * LOOPCOUNT + y) = .FALSE.\n                ELSE\n                  a(x * LOOPCOUNT + y) = .TRUE.\n                END IF\n              END IF\n            END DO\n          END DO\n        !$acc end data\n        DO x = 0, 9\n          temp = .TRUE.\n          DO y = 1, LOOPCOUNT\n            temp = temp .AND. a_copy(x * LOOPCOUNT + y)\n          END DO\n          IF (temp .neqv. results(x + 1)) THEN\n            errors = errors + 1\n          END IF\n          DO y = 1, LOOPCOUNT\n            IF (temp .eqv. .TRUE.) THEN\n              IF (a(x * LOOPCOUNT + y) .eqv. a_copy(x * LOOPCOUNT + y)) THEN\n                errors = errors + 1\n              END IF\n            ELSE\n              IF (a(x * LOOPCOUNT + y) .neqv. a_copy(x * LOOPCOUNT + y)) THEN\n                errors = errors + 1\n              END IF\n            END IF\n          END DO\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_and_vector_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,private,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        LOGICAL,DIMENSION(10*LOOPCOUNT):: a !Data\n        LOGICAL,DIMENSION(10):: b\n        LOGICAL,DIMENSION(10):: has_false\n        LOGICAL :: temp\n        REAL(8) :: false_margin\n        REAL(8),DIMENSION(10*LOOPCOUNT) :: randoms\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        false_margin = exp(log(.5) / LOOPCOUNT)\n        DO x = 1, 10\n          has_false(x) = .FALSE.\n          b(x) = .TRUE.\n        END DO\n\n        DO x = 0, 9\n          DO y = 1, LOOPCOUNT\n            IF (randoms(x * LOOPCOUNT + y) .lt. false_margin) THEN\n              a(x * LOOPCOUNT + y) = .TRUE.\n            ELSE\n              a(x * LOOPCOUNT + y) = .FALSE.\n              has_false(x + 1) = .TRUE.\n            END IF\n          END DO\n        END DO\n\n        !$acc data copyin(a(1:10*LOOPCOUNT)) copy(b(1:10))\n          !$acc parallel loop private(temp)\n          DO x = 0, 9\n            temp = .TRUE.\n            !$acc loop vector reduction(.AND.:temp)\n            DO y = 1, LOOPCOUNT\n              temp = temp .AND. a(x * LOOPCOUNT + y)\n            END DO\n            b(x + 1) = temp\n          END DO\n        !$acc end data\n\n        DO x = 0, 9\n          temp = .FALSE.\n          DO y = 1, LOOPCOUNT\n            IF (a(x * LOOPCOUNT + y) .eqv. .FALSE.) THEN\n              temp = .TRUE.\n            END IF\n          END DO\n          IF (temp .neqv. has_false(x + 1)) THEN\n            errors = 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_bitand_general.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y, z !Iterators\n        INTEGER,DIMENSION(LOOPCOUNT):: a !Data\n        INTEGER :: b\n        REAL(8),DIMENSION(16 * LOOPCOUNT):: randoms\n        REAL(8) :: false_margin\n        INTEGER :: errors = 0\n        INTEGER :: temp = 1\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        false_margin = exp(log(.5)/n)\n        DO x = 1, LOOPCOUNT\n          DO y = 0, 15\n            IF (randoms(y * LOOPCOUNT + x) .lt. false_margin) THEN\n              temp = 1\n              DO z = 0, y\n                temp = temp * 2\n              END DO\n              a(x) = a(x) + temp\n            END IF\n          END DO\n        END DO\n        \n        b = a(1)\n\n        !$acc data copyin(a(1:LOOPCOUNT))\n          !$acc parallel loop reduction(iand:b)\n          DO x = 1, LOOPCOUNT\n            b = iand(b, a(x))\n          END DO\n        !$acc end data\n \n        temp = a(1)\n        DO x = 2, LOOPCOUNT\n          temp = iand(a(x), temp)\n        END DO\n        IF (temp .ne. b) THEN\n          WRITE(*, *) temp\n          WRITE(*, *) b\n          errors = 1\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_bitand_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,private,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y, z !Iterators\n        INTEGER,DIMENSION(10*LOOPCOUNT):: a, b, b_copy !Data\n        REAL(8),DIMENSION(10*LOOPCOUNT):: randoms2\n        INTEGER,DIMENSION(10) :: c\n        REAL(8) :: false_margin\n        REAL(8),DIMENSION(160*LOOPCOUNT)::randoms\n        INTEGER :: errors = 0\n        INTEGER :: temp\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        CALL RANDOM_NUMBER(randoms2)\n        b = FLOOR(10000 * randoms2)\n        b_copy = b\n        false_margin = exp(log(.5)/LOOPCOUNT)\n        DO x = 1, 10 * LOOPCOUNT\n          DO y = 1, 16\n            IF (randoms((y - 1) * 10 * LOOPCOUNT + x) < false_margin) THEN\n              temp = 1\n              DO z = 1, y\n                temp = temp * 2\n              END DO\n              a(x) = a(x) + temp\n            END IF\n          END DO\n        END DO\n        \n        DO x = 1, 10\n         c(x) = a((x - 1) * LOOPCOUNT + x)\n        END DO\n        \n        \n\n        !$acc data copyin(a(1:10*LOOPCOUNT)) copy(b(1:10*LOOPCOUNT), c(1:10))\n          !$acc parallel loop gang private(temp)\n          DO x = 1, 10\n            temp = a((x - 1) * LOOPCOUNT + 1)\n            !$acc loop worker reduction(iand:temp)\n            DO y = 2, LOOPCOUNT\n              temp = iand(temp, a((x - 1) * LOOPCOUNT + y))\n            END DO\n            c(x) = temp\n            !$acc loop worker\n            DO y = 1, LOOPCOUNT\n              b((x - 1) * LOOPCOUNT + y) = b((x - 1) * LOOPCOUNT + y) + c(x)\n            END DO\n          END DO\n        !$acc end data\n\n       DO x = 1, 10\n         temp = a((x - 1) * LOOPCOUNT + 1)\n         DO y = 2, LOOPCOUNT\n           temp = iand(temp, a((x - 1) * LOOPCOUNT + y))\n         END DO\n         IF (temp .ne. c(x)) THEN\n           errors = errors + 1\n         END IF\n         DO y = 1, LOOPCOUNT\n           IF (b((x - 1) * LOOPCOUNT + y) .ne. b_copy((x - 1) * LOOPCOUNT + y) + temp) THEN\n             errors = errors + 1\n           END IF\n         END DO\n       END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_bitand_vector_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,private,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y, z, i !Iterators\n        INTEGER,DIMENSION(10*LOOPCOUNT):: a !Data\n        INTEGER,DIMENSION(10):: b\n        INTEGER :: c\n        REAL(8),DIMENSION(160*LOOPCOUNT):: random\n        REAL(8) :: false_margin\n        INTEGER :: errors = 0\n        INTEGER :: temp\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(random)\n        false_margin = exp(log(.5) / n)\n        DO x = 0, 9\n          DO y = 1, LOOPCOUNT\n            DO z = 1, 16\n              IF (random(x * 16 * LOOPCOUNT + (y - 1) * 16 + z - 1) < false_margin) THEN\n                temp = 1\n                DO i = 1, z\n                  temp = temp * 2\n                END DO\n                a(x * LOOPCOUNT + y) = a(x * LOOPCOUNT + y) + temp\n              END IF\n            END DO\n          END DO\n        END DO\n                \n        !$acc data copyin(a(1:10*LOOPCOUNT)), copy(b(1:10))\n          !$acc parallel loop private(c)\n          DO x = 0, 9\n            c = a(x * LOOPCOUNT + 1)\n            !$acc loop vector reduction(iand:c)\n            DO y = 1, LOOPCOUNT\n              c = iand(c, a(x * LOOPCOUNT + y))\n            END DO\n            b(x + 1) = c\n          END DO\n        !$acc end data\n\n        DO x = 0, 9\n          temp = a(x * LOOPCOUNT + 1)\n          DO y = 2, LOOPCOUNT\n            temp = iand(temp, a(x * LOOPCOUNT + y))\n          END DO\n          IF (b(x + 1) .ne. temp) THEN\n            errors = errors + 1\n          END IF\n        END DO       \n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_bitor_general.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y, z !Iterators\n        INTEGER,DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8) :: false_margin\n        REAL(8),DIMENSION(16*LOOPCOUNT):: random\n        INTEGER :: errors = 0\n        INTEGER :: temp\n        INTEGER :: b\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(random)\n        false_margin = exp(log(.5)/n)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 16\n            IF (random((y - 1) * LOOPCOUNT + x) < false_margin) THEN\n              temp = 1\n              DO z = 1, y\n                temp = temp * 2\n              END DO\n              a(x) = a(x) + temp\n            END IF\n          END DO\n        END DO\n        b = a(1)\n        !$acc data copyin(a(1:LOOPCOUNT))\n          !$acc parallel loop reduction(ior:b)\n          DO x = 2, LOOPCOUNT\n            b = ior(b, a(x))\n          END DO\n        !$acc end data\n        temp = a(1)\n        DO x = 2, LOOPCOUNT\n          temp = ior(temp, a(x))\n        END DO\n        IF (temp .ne. b) THEN\n          errors = errors + 1\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_bitor_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,private,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y, z, i !Iterators\n        INTEGER,DIMENSION(10*LOOPCOUNT):: a, b, b_copy !Data\n        REAL(8),DIMENSION(10*LOOPCOUNT):: randoms2\n        INTEGER,DIMENSION(10) :: c\n        REAL(8),DIMENSION(160*LOOPCOUNT):: randoms\n        REAL(8) :: false_margin\n        INTEGER :: errors = 0\n        INTEGER :: temp\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        CALL RANDOM_NUMBER(randoms2)\n        false_margin = exp(log(.5)/n)\n        b = FLOOR(6*randoms2)\n        b_copy = b\n        DO x = 0, 9\n          DO y = 1, LOOPCOUNT\n            DO z = 1, 16\n              IF (randoms(x * 16 * LOOPCOUNT + y * 16 + z - 1) .gt. false_margin) THEN\n                temp = 1\n                DO i = 1, z\n                  temp = temp * 2\n                END DO\n                a(x * LOOPCOUNT + y) = a(x * LOOPCOUNT + y) + temp\n              END IF\n            END DO\n          END DO\n        END DO\n\n        !$acc data copyin(a(1:10*LOOPCOUNT)) copy(b(1:10*LOOPCOUNT), c(1:10))\n          !$acc parallel loop gang private(temp)\n          DO x = 0, 9\n            temp = 0\n            !$acc loop worker reduction(ior:temp)\n            DO y = 1, LOOPCOUNT\n              temp = ior(temp, a(x * LOOPCOUNT + y))\n            END DO\n            c(x + 1) = temp\n            !$acc loop worker\n            DO y = 1, LOOPCOUNT\n              b(x * LOOPCOUNT + y) = b(x * LOOPCOUNT + y) + c(x + 1)\n            END DO\n          END DO\n        !$acc end data\n        \n        DO x = 0, 9\n          temp = 0\n          DO y = 1, LOOPCOUNT\n            temp = ior(temp, a(x * LOOPCOUNT + y))\n          END DO\n          IF (temp .ne. c(x + 1)) THEN\n            errors = errors + 1\n          END IF\n          DO y = 1, LOOPCOUNT\n            IF (b(x * LOOPCOUNT + y) .ne. b_copy(x * LOOPCOUNT + y) + c(x + 1)) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_bitor_vector_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,private,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y, z !Iterators\n        INTEGER,DIMENSION(10 * LOOPCOUNT):: a !Data\n        INTEGER,DIMENSION(10) :: b\n        REAL(8) :: false_margin\n        REAL(8),DIMENSION(160 * LOOPCOUNT) :: randoms\n        INTEGER :: errors = 0\n        INTEGER :: temp\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        false_margin = exp(log(.5) / n)\n        DO x = 1, 10 * LOOPCOUNT\n          DO y = 1, 16\n            IF (randoms(y * 10 * LOOPCOUNT + y - 1) .gt. false_margin) THEN\n              temp = 1\n              DO z = 1, y\n                temp = temp * 2\n              END DO\n              a(x) = a(x) + temp\n            END IF\n          END DO\n        END DO\n\n        !$acc data copyin(a(1:10*LOOPCOUNT)) copy(b(1:10))\n          !$acc parallel loop private(temp)\n          DO x = 0, 9\n            temp = 0\n            !$acc loop vector reduction(ior:temp)\n            DO y = 1, LOOPCOUNT\n              temp = ior(temp, a(x * LOOPCOUNT + y))\n            END DO\n            b(x + 1) = temp\n          END DO\n        !$acc end data\n\n        DO x = 0, 9\n          temp = 0\n          DO y = 1, LOOPCOUNT\n            temp = ior(temp, a(x * LOOPCOUNT + y))\n          END DO\n          IF (temp .ne. b(x + 1)) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_bitxor_general.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        INTEGER,DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: randoms\n        INTEGER :: errors = 0\n        INTEGER :: b = 0\n        INTEGER :: temp = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        a = FLOOR(randoms*1000000)\n\n        !$acc data copyin(a(1:LOOPCOUNT))\n          !$acc parallel loop reduction(ieor:b)\n          DO x = 1, LOOPCOUNT\n            b = ieor(b, a(x))\n          END DO\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          temp = ieor(temp, a(x))\n        END DO\n        IF (temp .ne. b) THEN\n          errors = errors + 1\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_bitxor_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,private,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        INTEGER,DIMENSION(10*LOOPCOUNT):: a, b, b_copy !Data\n        REAL(8),DIMENSION(10*LOOPCOUNT):: randoms, randoms2\n        INTEGER,DIMENSION(10):: c\n        REAL*8 :: RAND\n        INTEGER :: errors = 0\n        INTEGER :: temp\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        a = FLOOR(randoms*1000000)\n        CALL RANDOM_NUMBER(randoms2)\n        b = FLOOR(randoms2*1000000)\n        b_copy = b\n        c = 0\n\n        !$acc data copyin(a(1:10*LOOPCOUNT)) copy(b(1:10*LOOPCOUNT), c(1:10))\n          !$acc parallel loop gang private(temp)\n          DO x = 0, 9\n            temp = 0\n            !$acc loop worker reduction(ieor:temp)\n            DO y = 1, LOOPCOUNT\n              temp = ieor(temp, a(x * LOOPCOUNT + y))\n            END DO\n            c(x + 1) = temp\n            !$acc loop worker\n            DO y = 1, LOOPCOUNT\n              b(x * LOOPCOUNT + y) = b(x * LOOPCOUNT + y) + c(x + 1)\n            END DO\n          END DO\n        !$acc end data\n\n        DO x = 0, 9\n          temp = 0\n          DO y = 1, LOOPCOUNT\n            temp = ieor(temp, a(x * LOOPCOUNT + y))\n          END DO\n          IF (temp .ne. c(x + 1)) THEN\n            errors = errors + 1\n          END IF\n          DO y = 1, LOOPCOUNT\n            IF (b(x * LOOPCOUNT + y) .ne. b_copy(x * LOOPCOUNT + y) + c(x + 1)) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_bitxor_vector_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,private,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        INTEGER,DIMENSION(10*LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(10*LOOPCOUNT):: randoms\n        INTEGER,DIMENSION(10):: b\n        INTEGER :: errors = 0\n        INTEGER :: temp\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        a = FLOOR(randoms*1000000)\n\n        !$acc data copyin(a(1:10*LOOPCOUNT)) copy(b(1:10))\n          !$acc parallel loop gang private(temp)\n          DO x = 0, 9\n            temp = 0\n            !$acc loop vector reduction(ieor:temp)\n            DO y = 1, LOOPCOUNT\n              temp = ieor(temp, a(x * LOOPCOUNT + y))\n            END DO\n            b(x + 1) = temp\n          END DO\n        !$acc end data\n        \n        DO x = 0, 9\n          temp = 0\n          DO y = 1, LOOPCOUNT\n            temp = ieor(temp, a(x * LOOPCOUNT + y))\n          END DO\n          IF (temp .ne. b(x + 1)) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_max_general.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        REAL(8) :: maximum, temp\n        INTEGER :: errors = 0\n\n        !Initilization\n        maximum = 0\n        temp = 0\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n          !$acc parallel loop reduction(max:maximum)\n          DO x = 1, LOOPCOUNT\n            maximum = max(maximum, a(x) * b(x))\n          END DO\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          temp = max(temp, a(x) * b(x))\n        END DO\n        IF (abs(temp - maximum) .gt. PRECISION) THEN\n          errors = errors + 1\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_max_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,private,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(10 * LOOPCOUNT):: a, b, c !Data\n        REAL(8),DIMENSION(10):: maximum\n        REAL(8) :: temp\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc data copyin(a(1:10*LOOPCOUNT), b(1:10*LOOPCOUNT)) copy(c(1:10*LOOPCOUNT))\n          !$acc parallel loop gang private(temp)\n          DO x = 0, 9\n            temp = 0\n            !$acc loop worker reduction(max:temp)\n            DO y = 1, LOOPCOUNT\n              temp = max(temp, a(x * LOOPCOUNT + y) * b(x * LOOPCOUNT + y))\n            END DO\n            maximum(x + 1) = temp\n            !$acc loop worker\n            DO y = 1, LOOPCOUNT\n              c(x * LOOPCOUNT + y) = (a(x * LOOPCOUNT + y) * b(x * LOOPCOUNT + y)) / maximum(x + 1)\n            END DO\n          END DO\n        !$acc end data\n        \n        DO x = 0, 9\n          DO y = 1, LOOPCOUNT\n            IF (a(x * LOOPCOUNT + y) * b(x * LOOPCOUNT + y) - maximum(x + 1) .gt. PRECISION) THEN\n              errors = errors + 1\n            ELSE IF ((c(x * LOOPCOUNT + y) - 1) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_max_vector_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,private,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(10 * LOOPCOUNT):: a, b !Data\n        REAL(8),DIMENSION(10):: maximum\n        INTEGER :: errors = 0\n        REAL(8) :: temp\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        maximum = 0\n\n        !$acc data copyin(a(1:10*LOOPCOUNT), b(1:10*LOOPCOUNT)) copy(maximum(1:10))\n          !$acc parallel loop private(temp)\n          DO x = 0, 9\n            temp = 0\n            !$acc loop vector reduction(max:temp)\n            DO y = 1, LOOPCOUNT\n              temp = max(temp, a(x * LOOPCOUNT + y) * b(x * LOOPCOUNT + y))\n            END DO\n            maximum(x + 1) = temp\n          END DO\n        !$acc end data\n\n        DO x = 0, 9\n          temp = 0\n          DO y = 1, LOOPCOUNT\n            temp = max(temp, a(x * LOOPCOUNT + y) * b(x * LOOPCOUNT + y))\n          END DO\n          IF (abs(temp - maximum(x + 1)) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_min_general.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        REAL(8):: minimum = 1000\n        REAL(8):: temp = 1000\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n          !$acc parallel loop reduction(min:minimum)\n          DO x = 1, LOOPCOUNT\n            minimum = min(minimum, a(x) * b(x))\n          END DO\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          temp = min(temp, a(x) * b(x))\n        END DO\n        IF (abs(temp - minimum) .gt. PRECISION) THEN\n          errors = errors + 1\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_min_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,private,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(10 * LOOPCOUNT):: a, b, c !Data\n        REAL(8),DIMENSION(10):: minimum\n        REAL(8):: temp\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        a = a + 1\n        b = b + 1\n\n        !$acc data copyin(a(1:10*LOOPCOUNT), b(1:10*LOOPCOUNT)) copy(c(1:10*LOOPCOUNT)) copy(minimum(1:10))\n          !$acc parallel loop gang private(temp)\n          DO x = 0, 9\n            temp = 1000\n            !$acc loop worker reduction(min:temp)\n            DO y = 1, LOOPCOUNT\n              temp = min(temp, a(x * LOOPCOUNT + y) * b(x * LOOPCOUNT + y))\n            END DO\n            minimum(x + 1) = temp\n            !$acc loop\n            DO y = 1, LOOPCOUNT\n              c(x * LOOPCOUNT + y) = (a(x * LOOPCOUNT + y) * b(x * LOOPCOUNT + y)) / minimum(x + 1)\n            END DO\n          END DO\n        !$acc end data\n\n        DO x = 0, 9\n          temp = 1000\n          DO y = 1, LOOPCOUNT\n            temp = min(temp, a(x * LOOPCOUNT + y) * b(x * LOOPCOUNT + y))\n          END DO\n          IF (abs(temp - minimum(x + 1)) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n          DO y = 1, LOOPCOUNT\n            IF (abs(c(x * LOOPCOUNT + y) - (a(x * LOOPCOUNT + y) * b(x * LOOPCOUNT + y) / temp)) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_min_vector_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,private,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y!Iterators\n        REAL(8),DIMENSION(10*LOOPCOUNT):: a, b !Data\n        REAL(8),DIMENSION(10):: minimum\n        REAL(8):: temp = 1000\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n\n        !$acc data copyin(a(1:10*LOOPCOUNT), b(1:10*LOOPCOUNT)) copy(minimum(1:10))\n          !$acc parallel loop gang private(temp)\n          DO x = 0, 9\n            temp = 1000\n            !$acc loop vector reduction(min:temp)\n            DO y = 1, LOOPCOUNT\n              temp = min(temp, a(x * LOOPCOUNT + y) * b(x * LOOPCOUNT + y))\n            END DO\n            minimum(x + 1) = temp\n          END DO\n        !$acc end data\n        \n        DO x = 0, 9\n          temp = 1000\n          DO y = 1, LOOPCOUNT\n            temp = min(temp, a(x * LOOPCOUNT + y) * b(x * LOOPCOUNT + y))\n          END DO\n          IF (abs(temp - minimum(x + 1)) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_multiply_general.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        INTEGER :: errors = 0\n        REAL(8) :: temp = 1\n        REAL(8) :: multiplied_total = 1\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        a = (999.4 + a)/1000\n        b = (999.4 + b)/1000\n\n        !$acc data copyin(a(1:LOOPCOUNT))\n          !$acc parallel loop reduction(*:multiplied_total)\n          DO x = 1, LOOPCOUNT\n            multiplied_total = multiplied_total * (a(x) + b(x))\n          END DO\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          temp = temp * (a(x) + b(x))\n        END DO\n        IF (abs(temp - multiplied_total) .gt. ((temp / 2) + (multiplied_total / 2)) * PRECISION) THEN\n          WRITE(*, *) temp\n          WRITE(*, *) multiplied_total\n          errors = errors + 1\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_multiply_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,private,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(10*LOOPCOUNT):: a, b, c !Data\n        REAL(8),DIMENSION(10):: totals\n        REAL(8) :: temp\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        a = (999.4 + a) / 2000\n        b = (999.4 + b) / 2000\n\n        !$acc data copyin(a(1:10*LOOPCOUNT), b(1:10*LOOPCOUNT)) copy(c(1:10*LOOPCOUNT), totals(1:10))\n          !$acc parallel loop gang private(temp)\n          DO x = 0, 9\n            temp = 1\n            !$acc loop worker reduction(*:temp)\n            DO y = 1, LOOPCOUNT\n              temp = temp * (a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y))\n            END DO\n            totals(x + 1) = temp\n            !$acc loop worker\n            DO y = 1, LOOPCOUNT\n              c(x * LOOPCOUNT + y) = (a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y)) / totals(x + 1)\n            END DO\n          END DO\n        !$acc end data\n\n        DO x = 0, 9\n          temp = 1\n          DO y = 1, LOOPCOUNT\n            temp = temp * (a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y))\n          END DO\n          IF (abs(temp - totals(x + 1)) .gt. ((temp / 2) + (totals(x + 1) / 2)) * PRECISION) THEN\n            errors = errors + 1\n            WRITE(*, *) temp\n            WRITE(*, *) totals(x + 1)\n            WRITE(*, *) \" \"\n          END IF\n          DO y = 1, LOOPCOUNT \n            IF (abs(c(x * LOOPCOUNT + y) - ((a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y)) / totals(x + 1))) .gt. c(x * LOOPCOUNT + y) * PRECISION) THEN\n              errors = errors + 1\n              WRITE(*, *) c(x * LOOPCOUNT + y)\n              WRITE(*, *) a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y)\n              WRITE(*, *) \" \"\n            END IF\n          END DO\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_multiply_vector_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,private,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(10 * LOOPCOUNT):: a, b !Data\n        REAL(8),DIMENSION(10) :: c\n        REAL(8) :: temp\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        a = (999.4 + a) / 1000\n        b = (999.4 + b) / 1000\n\n        !$acc data copyin(a(1:10*LOOPCOUNT), b(1:10*LOOPCOUNT)) copyout(c(1:10))\n          !$acc parallel loop private(temp)\n          DO x = 0, 9\n            temp = 1\n            !$acc loop vector reduction(*:temp)\n            DO y = 1, LOOPCOUNT\n              temp = temp * (a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y))\n            END DO\n            c(x + 1) = temp\n          END DO\n        !$acc end data\n\n        DO x = 0, 9\n          temp = 1\n          DO y = 1, LOOPCOUNT\n            temp = temp * (a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y))\n          END DO\n          IF (abs(temp - c(x + 1)) .gt. ((temp / 2) + (c(x + 1) / 2)) * PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_or_general.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        LOGICAL,DIMENSION(LOOPCOUNT):: a !Data\n        LOGICAL :: results = .FALSE.\n        LOGICAL :: temp = .FALSE.\n        REAL(8) :: false_margin = exp(log(.5) / n)\n        REAL(8),DIMENSION(LOOPCOUNT):: random\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(random)\n        DO x = 1, LOOPCOUNT\n          IF (random(x) > false_margin) THEN\n            a(x) = .TRUE.\n          ELSE\n            a(x) = .FALSE.\n          END IF\n        END DO\n\n        !$acc data copyin(a(1:LOOPCOUNT))\n          !$acc parallel loop reduction(.OR.:results)\n          DO x = 1, LOOPCOUNT\n            results = results .OR. a(x)\n          END DO\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          temp = temp .OR. a(x)\n        END DO\n        IF (temp .neqv. results) THEN\n          errors = errors + 1\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_or_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,private,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        LOGICAL,DIMENSION(10*LOOPCOUNT):: a, a_copy !Data\n        LOGICAL,DIMENSION(10) :: results\n        LOGICAL :: temp = .FALSE.\n        REAL(8),DIMENSION(10 * LOOPCOUNT) :: random\n        REAL(8) :: false_margin = exp(log(.5) / n)\n        INTEGER :: errors = 0\n\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(random)\n\n        !Initilization\n        DO x = 1, 10 * LOOPCOUNT\n          IF (random(x) .gt. false_margin) THEN\n            a(x) = .TRUE.\n          ELSE\n            a(x) = .FALSE.\n          END IF\n          a_copy(x) = a(x)\n        END DO\n\n        DO x = 1, 10\n          results(x) = .FALSE.\n        END DO\n\n        !$acc data copy(a(1:10*LOOPCOUNT), results(1:10))\n          !$acc parallel loop gang private(temp)\n          DO x = 0, 9\n            temp = .FALSE.\n            !$acc loop worker reduction(.OR.:temp)\n            DO y = 1, LOOPCOUNT\n              temp = temp .OR. a(x * LOOPCOUNT + y)\n            END DO\n            results(x + 1) = temp\n            !$acc loop worker\n            DO y = 1, LOOPCOUNT\n              IF (results(x + 1) .eqv. .TRUE.) THEN\n                IF(a(x * LOOPCOUNT + y) .eqv. .TRUE.) THEN\n                  a(x * LOOPCOUNT + y) = .FALSE.\n                ELSE\n                  a(x * LOOPCOUNT + y) = .TRUE.\n                END IF\n              END IF\n            END DO\n          END DO\n        !$acc end data\n\n        DO x = 0, 9\n          temp = .FALSE.\n          DO y = 1, LOOPCOUNT\n            temp = temp .OR. a_copy(x * LOOPCOUNT + y)\n          END DO\n          IF (temp .neqv. results(x + 1)) THEN\n            errors = errors + 1\n          END IF\n          DO y = 1, LOOPCOUNT\n            IF (temp .eqv. .FALSE.) THEN\n              IF (a(x * LOOPCOUNT + y) .neqv. a_copy(x * LOOPCOUNT + y)) THEN\n                errors = errors + 1\n              END IF\n            ELSE\n              IF (a(x * LOOPCOUNT + y) .eqv. a_copy(x * LOOPCOUNT + y)) THEN\n                errors = errors + 1\n              END IF\n            END IF\n          END DO\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_or_vector_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,private,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        LOGICAL,DIMENSION(10*LOOPCOUNT):: a !Data\n        LOGICAL,DIMENSION(10) :: b\n        LOGICAL :: temp\n        REAL(8),DIMENSION(10*LOOPCOUNT):: randoms\n        REAL(8) :: false_margin = exp(log(.5) / 2)\n        INTEGER :: errors = 0\n\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n\n        !Initilization\n        DO x = 1, 10 * LOOPCOUNT\n          IF (randoms(x) > false_margin) THEN\n            a(x) = .TRUE.\n          ELSE\n            a(x) = .FALSE.\n          END IF\n        END DO\n\n        !$acc data copyin(a(1:10*LOOPCOUNT)), copy(b(1:10))\n          !$acc parallel loop private(temp)\n          DO x = 0, 9\n            temp = .FALSE.\n            !$acc loop vector reduction(.OR.:temp)\n            DO y = 1, LOOPCOUNT\n              temp = temp .OR. a(x * LOOPCOUNT + y)\n            END DO\n            b(x + 1) = temp\n          END DO\n        !$acc end data\n\n        DO x = 0, 9\n          temp = .FALSE.\n          DO y = 1, LOOPCOUNT\n            temp = temp .OR. a(x * LOOPCOUNT + y)\n          END DO\n          IF (temp .neqv. b(x + 1)) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_seq.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        b = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(b(1:LOOPCOUNT))\n          !$acc parallel loop seq\n          DO x = 2, LOOPCOUNT\n            b(x) = b(x - 1) + a(x)\n          END DO\n        !$acc end data\n        \n        DO x = 2, LOOPCOUNT\n          IF (abs(b(x) - (b(x - 1) + a(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_tile.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,reduction,combined-constructs,loop,tile,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y, z !Iterators\n        REAL(8),DIMENSION(SMALL_LOOPCOUNT):: a, b, c !Data\n        REAL(8),DIMENSION(SMALL_LOOPCOUNT,SMALL_LOOPCOUNT)::d\n        REAL(8) :: temp\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        CALL RANDOM_NUMBER(c)\n\n        !$acc data copyin(a(1:SMALL_LOOPCOUNT), b(1:SMALL_LOOPCOUNT), c(1:SMALL_LOOPCOUNT)) copyout(d(1:SMALL_LOOPCOUNT,1:SMALL_LOOPCOUNT))\n          !$acc parallel loop tile(*, *) reduction(+:temp)\n          DO x = 1, SMALL_LOOPCOUNT\n            DO y = 1, SMALL_LOOPCOUNT \n              temp = 0\n              DO z = 1, SMALL_LOOPCOUNT\n                temp = temp + a(z) + b(z) + c(z)\n              END DO\n              d(x,y) = temp\n            END DO\n          END DO\n        !$acc end data\n        \n        DO x = 1, SMALL_LOOPCOUNT \n          DO y = 1, SMALL_LOOPCOUNT \n            temp = 0\n            DO z = 1, SMALL_LOOPCOUNT\n              temp = temp + a(z) + b(z) + c(z) \n            END DO\n            IF (abs(d(x,y) - temp) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "reduction",
                            "combined-constructs",
                            "loop",
                            "tile"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_vector.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copy(c(1:LOOPCOUNT))\n          !$acc parallel loop vector\n          DO x = 1, LOOPCOUNT\n            c(x) = a(x) + b(x)\n          END DO\n        !$acc end data\n        \n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_vector_blocking.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        REAL(8) :: multiplyer\n        INTEGER :: errors = 0\n\n        multiplyer = 1\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop vector\n            DO x = 1, LOOPCOUNT\n              c(x) = (a(x) + b(x)) * multiplyer\n            END DO\n            multiplyer = multiplyer + 1\n            !$acc loop vector\n            DO x = 1, LOOPCOUNT\n              c(x) = c(x) + ((a(x) + b(x)) * multiplyer)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (3 * (a(x) + b(x)))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_worker.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n          !$acc parallel loop worker\n          DO x = 1, LOOPCOUNT\n            c(x) = a(x) + b(x)\n          END DO\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_worker_blocking.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        REAL(8) :: multiplyer\n        INTEGER :: errors = 0\n\n        multiplyer = 1\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop worker\n            DO x = 1, LOOPCOUNT\n              c(x) = (a(x) + b(x)) * multiplyer\n            END DO\n            multiplyer = multiplyer + 1\n            !$acc loop worker\n            DO x = 1, LOOPCOUNT\n              c(x) = c(x) + (a(x) + b(x)) * multiplyer\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (3 * (a(x) + b(x)))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_present.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n        !$acc parallel present(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copy(c(1:LOOPCOUNT))\n          !$acc loop\n          DO x = 1, LOOPCOUNT\n            c(x) = a(x) + b(x)\n          END DO\n        !$acc end parallel\n        !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_private.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,private,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(10 * LOOPCOUNT):: a, b !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: c\n        REAL(8),DIMENSION(10)::d\n        REAL(8) :: temp\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        d = 0\n\n        !$acc enter data copyin(a(1:10*LOOPCOUNT), b(1:10*LOOPCOUNT), d(1:10)) \n        !$acc parallel num_gangs(10) private(c(1:LOOPCOUNT))\n          !$acc loop gang\n          DO x = 1, 10\n            !$acc loop worker\n            DO y = 1, LOOPCOUNT\n              c(y) = a((x - 1) * LOOPCOUNT + y) + b((x - 1) * LOOPCOUNT + y)\n            END DO\n            !$acc loop seq\n            DO y = 1, LOOPCOUNT\n              d(x) = d(x) + c(y)\n            END DO\n          END DO\n        !$acc end parallel\n        !$acc exit data copyout(d(1:10)) delete(a(1:10*LOOPCOUNT), b(1:10*LOOPCOUNT))\n\n        DO x = 0, 9\n          temp = 0\n          DO y = 1, LOOPCOUNT\n            temp = temp + a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y)\n          END DO\n          IF (abs(temp - d(x + 1)) .gt. 2 * PRECISION * LOOPCOUNT) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "private"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_reduction.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,reduction,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8) :: results = 0\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        !$acc data copyin(a(1:LOOPCOUNT))\n          !$acc parallel reduction(+:results)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              results = results + a(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          results = results - a(x)\n        END DO\n        IF (abs(results) .gt. PRECISION) THEN\n          errors = errors + 1\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "reduction"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_scalar_default_firstprivate.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        REAL(8),DIMENSION(1):: random\n        INTEGER :: errors = 0\n        REAL(8) :: scalar\n        REAL(8) :: scalar_copy\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(random)\n        scalar = random(1)\n        scalar_copy = scalar\n        CALL RANDOM_NUMBER(a)\n        b = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              b(x) = a(x) + scalar\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          IF (abs(b(x) - (a(x) + scalar_copy)) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n        IF (abs(scalar_copy - scalar) .gt. PRECISION) THEN\n          errors = errors + 1\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_switch.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        INTEGER,DIMENSION(LOOPCOUNT):: a\n        REAL(8),DIMENSION(LOOPCOUNT):: b, c, randoms!Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        CALL RANDOM_NUMBER(randoms)\n        a = floor(randoms * 3)\n\n        !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n        !$acc parallel present(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n          !$acc loop\n          DO x = 1, LOOPCOUNT\n            SELECT CASE (a(x))\n              CASE (0)\n                c(x) = b(x) * b(x)\n              CASE (1)\n                c(x) = b(x) / b(x)\n              CASE (2)\n                c(x) = b(x) / 2\n            END SELECT\n          END DO\n        !$acc end parallel\n        !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          SELECT CASE (a(x))\n            CASE (0)\n              IF (abs(c(x) - (b(x) * b(x))) .gt. PRECISION) THEN\n                errors = errors + 1\n              END IF\n            CASE (1)\n              IF (abs(c(x) - (b(x) / b(x))) .gt. PRECISION) THEN\n                errors = errors + 1\n              END IF\n            CASE (2)\n              IF (abs(c(x) - (b(x) / 2)) .gt. PRECISION) THEN\n                errors = errors + 1\n              END IF\n          END SELECT\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_wait.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:async,parallel,update,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        b = a\n\n        !$acc enter data create(a(1:LOOPCOUNT))\n        !$acc update device(a(1:LOOPCOUNT)) async(1)\n        !$acc parallel present(a(1:LOOPCOUNT)) wait(1)\n          !$acc loop\n          DO x = 1, LOOPCOUNT\n            a(x) = a(x) + 1\n          END DO\n        !$acc end parallel\n        !$acc exit data copyout(a(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(a(x) - (b(x) + 1)) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "async",
                            "parallel",
                            "update"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_while_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,reduction,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(10, LOOPCOUNT):: a !Data\n        REAL(8) :: avg\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n \n        !$acc data copy(a(1:10, 1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, 10\n              avg = 0.0\n              DO WHILE (avg - 1000 .lt. PRECISION * LOOPCOUNT)\n                avg = 0.0\n                !$acc loop\n                DO y = 1, LOOPCOUNT\n                  a(x, y) = a(x, y) * 1.5\n                END DO\n                !$acc loop reduction(+:avg)\n                DO y = 1, LOOPCOUNT\n                  avg = avg + (a(x, y) / LOOPCOUNT)\n                END DO\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, 10\n          avg = 0.0\n          DO y = 1, LOOPCOUNT\n            avg = avg + (a(x, y) / LOOPCOUNT)\n          END DO\n          IF (avg < 1000 .OR. avg > 1600) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "reduction",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: x, i_a, i_b, i_c, i_d, i_e, i_f, i_g, i_h, i_i, i_j !Iterators\n  INTEGER, PARAMETER :: PRIVATE_LOOPCOUNT = 1024\n  REAL(8),DIMENSION(PRIVATE_LOOPCOUNT):: a, b, c !Data\n  INTEGER :: errors\n  errors = 0\n\n  !Initilization\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n  c = 0\n\n  !$acc data copyin(a(1:PRIVATE_LOOPCOUNT), b(1:PRIVATE_LOOPCOUNT)) copy(c(1:PRIVATE_LOOPCOUNT))\n    !$acc serial\n      !$acc loop\n      DO i_a = 0, 1\n        !$acc loop\n        DO i_b = 0, 1\n          !$acc loop\n          DO i_c = 0, 1\n            !$acc loop\n            DO i_d = 0, 1\n              !$acc loop\n              DO i_e = 0, 1\n                !$acc loop\n                DO i_f = 0, 1\n                  !$acc loop\n                  DO i_g = 0, 1\n                    !$acc loop\n                    DO i_h = 0, 1\n                      !$acc loop\n                      DO i_i = 0, 1\n                        !$acc loop\n                        DO i_j = 0, 1\n                          c(i_a*512 + i_b*256 + i_c*128 + i_d*64 + i_e*32 + i_f*16 + i_g*8 + i_h*4 + i_i*2 + i_j + 1) = &\n                          a(i_a*512 + i_b*256 + i_c*128 + i_d*64 + i_e*32 + i_f*16 + i_g*8 + i_h*4 + i_i*2 + i_j + 1) + &\n                          b(i_a*512 + i_b*256 + i_c*128 + i_d*64 + i_e*32 + i_f*16 + i_g*8 + i_h*4 + i_i*2 + i_j + 1)\n                        END DO\n                      END DO\n                    END DO\n                  END DO\n                END DO\n              END DO\n            END DO\n          END DO\n        END DO\n      END DO\n    !$acc end serial\n  !$acc end data\n\n  DO x = 1, PRIVATE_LOOPCOUNT\n    IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            ""
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_async.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:async,serial,update,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER:: errors\n  REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, d, e, f, g\n  INTEGER:: x\n\n  errors = 0\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n  c = 0\n  CALL RANDOM_NUMBER(d)\n  CALL RANDOM_NUMBER(e)\n  f = 0\n  g = 0\n\n  !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT), d(1:LOOPCOUNT), e(1:LOOPCOUNT), f(1:LOOPCOUNT), g(1:LOOPCOUNT))\n    !$acc serial async(1)\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        c(x) = a(x) + b(x)\n      END DO\n    !$acc end serial\n    !$acc serial async(2)\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        f(x) = d(x) + e(x)\n      END DO\n    !$acc end serial\n    !$acc serial wait(1, 2) async(3)\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        g(x) = c(x) + f(x)\n      END DO\n    !$acc end serial\n\n    !$acc update host(c(1:LOOPCOUNT)) async(1)\n    !$acc update host(f(1:LOOPCOUNT)) async(2)\n    !$acc update host(g(1:LOOPCOUNT)) async(3)\n\n    !$acc wait(1)\n    DO x = 1, LOOPCOUNT\n      IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n        errors = errors + 1\n      END IF\n    END DO\n\n    !$acc wait(2)\n    DO x = 1, LOOPCOUNT\n      IF (abs(f(x) - (d(x) + e(x))) .gt. PRECISION) THEN\n        errors = errors + 1\n      END IF\n    END DO\n\n    !$acc wait(3)\n    DO x = 1, LOOPCOUNT\n      IF (abs(g(x) - (a(x) + b(x) + d(x) + e(x))) .gt. 4 * PRECISION) THEN\n        errors = errors + 1\n      END IF\n    END DO\n  !$acc end data\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "async",
                            "serial",
                            "update"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_copy.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER:: errors\n  REAL(8),DIMENSION(LOOPCOUNT):: a, a_host\n  INTEGER:: x\n  errors = 0\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  a_host = a\n\n  !$acc serial copy(a(1:LOOPCOUNT))\n    !$acc loop\n    DO x = 1, N\n      a(x) = 2 * a(x)\n    END DO\n  !$acc end serial\n\n  DO x = 1, N\n    IF (abs(a(x) - (2 * a_host(x))) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_copyin.F90": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER:: errors\n  REAL(8),DIMENSION(LOOPCOUNT):: a, a_copy, b\n  INTEGER,DIMENSION(1):: hasDevice\n  INTEGER:: x\n  errors = 0\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  a_copy = a\n  b = 0\n\n  hasDevice(1) = 1\n  !$acc enter data copyin(hasDevice(1:1))\n  !$acc parallel present(hasDevice(1:1))\n    hasDevice(1) = 0\n  !$acc end parallel\n\n  !$acc serial copyin(a(1:LOOPCOUNT))\n    !$acc loop\n    DO x = 1, LOOPCOUNT\n      a(x) = 0\n    END DO\n  !$acc end serial\n\n  DO x = 1, LOOPCOUNT\n    IF (hasDevice(1) .eq. 1) THEN\n      IF (abs(a(x) - a_copy(x)) .gt. PRECISION) THEN\n        errors = errors + 1\n      END IF\n    ELSE\n      IF (abs(a(x)) .gt. PRECISION) THEN\n        errors = errors + 1\n      END IF\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:serial,V:2.6-2.7\n      LOGICAL FUNCTION test2()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER:: errors\n  REAL(8),DIMENSION(LOOPCOUNT):: a, a_copy, b\n  INTEGER,DIMENSION(1):: hasDevice\n  INTEGER:: x\n  errors = 0\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n\n  !$acc data copy(b(1:LOOPCOUNT))\n    !$acc serial copyin(a(1:LOOPCOUNT))\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        b(x) = a(x)\n      END DO\n    !$acc end serial\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    IF (abs(a(x) - b(x)) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_copyout.F90": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER:: errors\n  REAL(8),DIMENSION(LOOPCOUNT):: a, b\n  INTEGER:: x\n  INTEGER,DIMENSION(1):: hasDevice\n  errors = 0\n\n  hasDevice(1) = 1\n  !$acc enter data copyin(hasDevice(1:1))\n  !$acc parallel present(hasDevice(1:1))\n  hasDevice(1) = 0\n  !$acc end parallel\n  \n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  b = 0\n\n\n  !$acc data copyin(a(1:LOOPCOUNT))\n    !$acc serial copyout(b(1:LOOPCOUNT))\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        b(x) = a(x)\n      END DO\n    !$acc end serial\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    IF (abs(a(x) - b(x)) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:serial,V:2.6-2.7\n      LOGICAL FUNCTION test2()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER:: errors\n  REAL(8),DIMENSION(LOOPCOUNT):: a, b\n  INTEGER:: x\n  INTEGER,DIMENSION(1):: hasDevice\n  errors = 0\n\n  hasDevice(1) = 1\n  !$acc enter data copyin(hasDevice(1:1))\n  !$acc parallel present(hasDevice(1:1))\n  hasDevice(1) = 0\n  !$acc end parallel\n  \n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  IF (hasDevice(1) .eq. 1) THEN\n    !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n      !$acc serial copyout(b(1:LOOPCOUNT))\n        !$acc loop\n        DO x = 1, LOOPCOUNT\n          b(x) = b(x) - a(x)\n        END DO\n      !$acc end serial\n    !$acc end data\n\n    DO x = 1, LOOPCOUNT\n      IF (abs(a(x) - b(x)) .gt. PRECISION) THEN\n        errors = errors + 1\n      END IF\n    END DO\n  END IF\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n!T3:serial,update,V:2.6-2.7\n      LOGICAL FUNCTION test3()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER:: errors\n  REAL(8),DIMENSION(LOOPCOUNT):: a, b\n  INTEGER:: x\n  INTEGER,DIMENSION(1):: hasDevice\n  errors = 0\n\n  hasDevice(1) = 1\n  !$acc enter data copyin(hasDevice(1:1))\n  !$acc parallel present(hasDevice(1:1))\n  hasDevice(1) = 0\n  !$acc end parallel\n  \n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n    !$acc serial copyout(b(1:LOOPCOUNT))\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        b(x) = b(x) - a(x)\n      END DO\n    !$acc end serial\n    !$acc update host(b(1:LOOPCOUNT))\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    IF (abs(b(x)) .gt. 2 * PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test3 = .FALSE.\n        ELSE\n          test3 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T3\n        LOGICAL :: test3\n#endif\n#ifndef T3\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test3()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 2\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "update"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_create.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER:: errors\n  REAL(8),DIMENSION(LOOPCOUNT):: a, b, c\n  INTEGER:: x\n  errors = 0\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  b = 0\n  c = 0\n\n  !$acc data copyin(a(1:LOOPCOUNT)) copy(c(1:LOOPCOUNT))\n    !$acc serial create(b(1:LOOPCOUNT))\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        b(x) = a(x)\n      END DO\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        c(x) = b(x)\n      END DO\n    !$acc end serial\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    IF (abs(a(x) - c(x)) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_default_copy.F90": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:devonly,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER:: errors\n  REAL(8),DIMENSION(LOOPCOUNT):: a, b, c\n  INTEGER,DIMENSION(1):: devtest\n  INTEGER:: x\n  errors = 0\n\n  devtest(1) = 1\n  !$acc enter data copyin(devtest(1:1))\n  !$acc parallel present(devtest(1:1))\n    devtest(1) = 0\n  !$acc end parallel\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n  c = 0\n\n  !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n    !$acc serial\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        c(x) = c(x) + b(x) + a(x)\n      END DO\n    !$acc end serial\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:devonly,V:2.6-2.7\n      LOGICAL FUNCTION test2()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER:: errors\n  REAL(8),DIMENSION(LOOPCOUNT):: a, b, c\n  INTEGER,DIMENSION(1):: devtest\n  INTEGER:: x\n  errors = 0\n\n  devtest(1) = 1\n  !$acc enter data copyin(devtest(1:1))\n  !$acc parallel present(devtest(1:1))\n    devtest(1) = 0\n  !$acc end parallel\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  IF (devtest(1) .eq. 1) THEN\n    CALL RANDOM_NUMBER(a)\n    CALL RANDOM_NUMBER(b)\n    c = 1\n\n    !$acc enter data copyin(c(1:LOOPCOUNT))\n    DO x = 1, LOOPCOUNT\n      c(x) = 0\n    END DO\n\n    !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n      !$acc serial\n        !$acc loop\n        DO x = 1, LOOPCOUNT\n          c(x) = c(x) + a(x) + b(x)\n        END DO\n      !$acc end serial\n    !$acc end data\n\n    DO x = 1, LOOPCOUNT\n      if (abs(c(x)) .gt. PRECISION) THEN\n        errors = errors + 1\n      END IF\n    END DO\n\n    !$acc exit data copyout(c(1:LOOPCOUNT))\n\n    DO x = 1, LOOPCOUNT\n      IF (abs(c(x) - (a(x) + b(x) + 1)) .gt. PRECISION) THEN\n        errors = errors + 1\n      END IF\n    END DO\n  END IF\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_default_present.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,default,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER:: errors\n  REAL(8),DIMENSION(LOOPCOUNT):: a\n  INTEGER:: x\n  errors = 0\n\n  a = 0\n\n  !$acc enter data copyin(a(1:LOOPCOUNT))\n  !$acc serial default(present)\n    !$acc loop\n    DO x = 1, LOOPCOUNT\n      a(x) = 1\n    END DO\n  !$acc end serial\n  !$acc exit data copyout(a(1:LOOPCOUNT))\n\n  DO x = 1, LOOPCOUNT\n    IF (abs(a(x) - 1) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "default"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_firstprivate.F90": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,firstprivate,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER:: errors\n  REAL(8),DIMENSION(10, LOOPCOUNT):: a, b, d\n  REAL(8),DIMENSION(10):: c, c_copy\n  INTEGER:: x, y\n\n  errors = 0\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n  CALL RANDOM_NUMBER(c)\n  c_copy = c\n  d = 0\n  !$acc data copyin(a(1:10, 1:LOOPCOUNT), b(1:10, 1:LOOPCOUNT)) copy(d(1:10, 1:LOOPCOUNT))\n    !$acc serial firstprivate(c(1:10))\n      !$acc loop gang\n      DO y = 1, LOOPCOUNT\n        !$acc loop worker\n        DO x = 1, 10\n          d(x, y) = a(x, y) + b(x, y) + c(x)\n        END DO\n      END DO\n    !$acc end serial\n  !$acc end data\n\n  DO y = 1, LOOPCOUNT\n    DO x = 1, 10\n      IF (abs(d(x, y) - (a(x, y) + b(x, y) + c_copy(x))) .gt. PRECISION) THEN\n        errors = errors + 1\n      END IF\n    END DO\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "firstprivate"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:serial,firstprivate,V:2.6-2.7\n      LOGICAL FUNCTION test2()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER:: errors\n  REAL(8),DIMENSION(10, LOOPCOUNT):: a, b, d\n  REAL(8),DIMENSION(10):: c, c_copy\n  INTEGER:: x, y\n\n  errors = 0\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n  d = 0\n  c = 0\n\n  !$acc data copyin(a(1:10, 1:LOOPCOUNT), b(1:10, 1:LOOPCOUNT)) copy(d(1:10, 1:LOOPCOUNT))\n    !$acc serial firstprivate(c(1:10))\n      !$acc loop gang independent\n      DO y = 1, LOOPCOUNT\n        !$acc loop worker independent\n        DO x = 1, 10\n          c(x) = a(x, y) - b(x, y)\n        END DO\n        !$acc loop worker independent\n        DO x = 1, 10\n          d(x, y) = a(x, y) + b(x, y) + c(x)\n        END DO\n      END DO\n    !$acc end serial\n  !$acc end data\n\n  DO y = 1, LOOPCOUNT\n    DO x = 1, 10\n      IF (abs(d(x, y) - (2 * a(x, y))) .gt. PRECISION) THEN\n        errors = errors + 1\n      END IF\n    END DO\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "firstprivate"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_if.F90": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:devonly,serial,if,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER:: errors\n  REAL(8),DIMENSION(LOOPCOUNT):: a, b, c\n  LOGICAL,DIMENSION(1):: devtest\n  LOGICAL:: host, device\n  INTEGER:: x\n  host = .FALSE.\n  device = .TRUE.\n  errors = 0\n\n  devtest(1) = .TRUE.\n  !$acc enter data copyin(devtest(1:1))\n  !$acc parallel present(devtest(1:1))\n    devtest(1) = .FALSE.\n  !$acc end parallel\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n  c = 0\n\n  !$acc serial if(host)\n    !$acc loop\n    DO x = 1, LOOPCOUNT\n      c(x) = a(x) + b(x)\n    END DO\n  !$acc end serial\n\n  DO x = 1, N\n    IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "serial",
                            "if"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:devonly,serial,if,V:2.6-2.7\n      LOGICAL FUNCTION test2()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER:: errors\n  REAL(8),DIMENSION(LOOPCOUNT):: a, b, c\n  LOGICAL,DIMENSION(1):: devtest\n  LOGICAL:: host, device\n  INTEGER:: x\n  host = .FALSE.\n  device = .TRUE.\n  errors = 0\n\n  devtest(1) = .TRUE.\n  !$acc enter data copyin(devtest(1:1))\n  !$acc parallel present(devtest(1:1))\n    devtest(1) = .FALSE.\n  !$acc end parallel\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  IF (devtest(1)) THEN\n    CALL RANDOM_NUMBER(a)\n    CALL RANDOM_NUMBER(b)\n    c = a + b\n\n    !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n    !$acc serial if(host) present(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        c(x) = c(x) + a(x) + b(x)\n      END DO\n    !$acc end serial\n    !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n\n    DO x = 1, LOOPCOUNT\n      IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n        errors = errors + 1\n      END IF\n    END DO\n  END IF\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "serial",
                            "if"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n!T3:devonly,serial,if,V:2.6-2.7\n      LOGICAL FUNCTION test3()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER:: errors\n  REAL(8),DIMENSION(LOOPCOUNT):: a, b, c\n  LOGICAL,DIMENSION(1):: devtest\n  LOGICAL:: host, device\n  INTEGER:: x\n  host = .FALSE.\n  device = .TRUE.\n  errors = 0\n\n  devtest(1) = .TRUE.\n  !$acc enter data copyin(devtest(1:1))\n  !$acc parallel present(devtest(1:1))\n    devtest(1) = .FALSE.\n  !$acc end parallel\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n  c = a + b\n  \n  !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n  !$acc serial if(device) present(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n    !$acc loop\n    DO x = 1, LOOPCOUNT\n      c(x) = c(x) + a(x) + b(x)\n    END DO\n  !$acc end serial\n  !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n\n  DO x = 1, LOOPCOUNT\n    IF (abs(c(x) - (2 * (a(x) + b(x)))) .gt. PRECISION * 2) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test3 = .FALSE.\n        ELSE\n          test3 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T3\n        LOGICAL :: test3\n#endif\n#ifndef T3\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test3()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 2\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "serial",
                            "if"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  REAL(8),DIMENSION(LOOPCOUNT):: a, b, c\n  INTEGER:: x\n  INTEGER:: errors\n\n  errors = 0\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n  c = 0\n\n  !$acc data copy(c(1:LOOPCOUNT))\n    !$acc serial loop\n    DO x = 1, LOOPCOUNT\n      c(x) = 1\n    END DO\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    IF (abs(c(x) - 1) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n  !$acc data copy(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n    !$acc serial\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        c(x) = b(x)\n      END DO\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        c(x) = c(x) + a(x)\n      END DO\n    !$acc end serial\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_async.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:async,serial,combined-constructs,loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER:: errors\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b, c, d\n  INTEGER,DIMENSION(10):: error_array\n  INTEGER:: x, y\n\n  errors = 0\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n  c = 0\n\n  DO y = 1, 10\n    DO x = 1, LOOPCOUNT\n      d(x, y) = a(x, y) + b(x, y)\n    END DO\n  END DO\n\n  error_array = 0\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10), b(1:LOOPCOUNT, 1:10), c(1:LOOPCOUNT, 1:10), d(1:LOOPCOUNT, 1:10)) copy(error_array(1:10))\n    DO y = 1, 10\n      !$acc serial loop async(y)\n      DO x = 1, LOOPCOUNT\n        c(x, y) = a(x, y) + b(x, y)\n      END DO\n      !$acc serial loop async(y)\n      DO x = 1, LOOPCOUNT\n        IF (((c(x, y) - d(x, y)) .gt. PRECISION) .OR. ((d(x, y) - c(x, y)) .gt. PRECISION)) THEN\n          error_array(y) = error_array(y) + 1\n        END IF\n      END DO\n    END DO\n  !$acc end data\n\n  DO x = 1, 10\n    errors = errors + error_array(x)\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "async",
                            "serial",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_auto.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,combined-constructs,loop,auto,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER:: errors\n  REAL(8),DIMENSION(LOOPCOUNT):: a, a_copy, b\n  INTEGER:: x\n  REAL(8):: temp\n  errors = 0\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  a_copy = a\n  b = 0\n\n  !$acc data copyin(a(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT))\n    !$acc serial loop auto\n    DO x = 1, LOOPCOUNT\n      b(x) = a(x)\n    END DO\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    IF (abs(b(x) - a(x)) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n  !$acc data copy(a(1:LOOPCOUNT))\n    !$acc serial loop auto\n    DO x = 2, LOOPCOUNT\n      a(x) = a(x - 1) + a(x)\n    END DO\n  !$acc end data\n\n  temp = 0\n  DO x = 1, LOOPCOUNT\n    temp = temp + a_copy(x)\n    IF (abs(temp - a(x)) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "combined-constructs",
                            "loop",
                            "auto"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_gang.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,combined-constructs,loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER:: errors\n  REAL(8),DIMENSION(LOOPCOUNT):: a, b, c\n  INTEGER:: x\n\n  errors = 0\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n  c = 0\n\n  !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copy(c(1:LOOPCOUNT))\n    !$acc serial loop gang\n    DO x = 1, LOOPCOUNT\n      c(x) = a(x) + b(x)\n    END DO\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_add_general.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,reduction,combined-constructs,loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER:: errors\n  REAL(8),DIMENSION(LOOPCOUNT):: a, b\n  REAL(8):: total\n  INTEGER:: x\n  errors = 0\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n\n  total = 10\n  !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n    !$acc serial loop reduction(+:total)\n    DO x = 1, LOOPCOUNT\n      total = total + a(x) + b(x)\n    END DO\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    total = total - (a(x) + b(x))\n  END DO\n\n  IF (abs(total - 10) .gt. PRECISION) THEN\n    errors = errors + 1\n  END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_add_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,private,reduction,combined-constructs,loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER:: errors\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b, c, d\n  REAL(8):: avg, temp\n  INTEGER:: x, y\n  avg = 0\n  errors = 0\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10), b(1:LOOPCOUNT, 1:10)) create(c(1:LOOPCOUNT, 1:10)) copyout(d(1:LOOPCOUNT, 1:10))\n    !$acc serial loop gang private(avg)\n    DO y = 1, 10\n      avg = 0\n      !$acc loop worker reduction(+:avg)\n      DO x = 1, LOOPCOUNT\n        c(x, y) = a(x, y) + b(x, y)\n        avg = avg + c(x, y)\n      END DO\n      avg = avg / LOOPCOUNT\n      !$acc loop worker\n      DO x = 1, LOOPCOUNT\n        d(x, y) = c(x, y) - avg\n      END DO\n    END DO\n  !$acc end data\n\n  DO y = 1, 10\n    temp = 0\n    DO x = 1, LOOPCOUNT\n      temp = temp + (a(x, y) + b(x, y))\n    END DO\n    temp = temp / LOOPCOUNT\n    DO x = 1, LOOPCOUNT\n      IF (abs(d(x, y) - ((a(x, y) + b(x, y)) - temp)) .gt. PRECISION) THEN\n        errors = errors + 1\n      END IF\n    END DO\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_add_vector_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,private,reduction,combined-constructs,loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER:: errors\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b\n  REAL(8),DIMENSION(10):: c\n  REAL(8):: temp\n  INTEGER:: x, y\n\n  errors = 0\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n\n  !$acc data copyin(a(1:LOOPCOUNT,1:10), b(1:LOOPCOUNT,1:10)) copyout(c(1:10))\n    !$acc serial loop private(temp)\n    DO y = 1, 10\n      temp = 0\n      !$acc loop vector reduction(+:temp)\n      DO x = 1, LOOPCOUNT\n        temp = temp + (a(x, y) + b(x, y))\n      END DO\n      c(y) = temp\n    END DO\n  !$acc end data\n\n  DO y = 1, 10\n    DO x = 1, LOOPCOUNT\n      c(y) = c(y) - (a(x, y) + b(x, y))\n    END DO\n    IF (abs(c(y)) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_and_general.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,reduction,combined-constructs,loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER:: errors\n  INTEGER:: x\n  LOGICAL,DIMENSION(LOOPCOUNT):: a\n  LOGICAL:: result, host_result\n  REAL(8),DIMENSION(LOOPCOUNT):: randoms\n  REAL(8):: false_margin = EXP(LOG(.5) / LOOPCOUNT)\n\n  errors = 0\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(randoms)\n\n  DO x = 1, LOOPCOUNT\n    IF (randoms(x) .lt. false_margin) THEN\n      a(x) = .TRUE.\n    ELSE\n      a(x) = .FALSE.\n    END IF\n  END DO\n\n  result = .TRUE.\n  !$acc data copyin(a(1:LOOPCOUNT))\n    !$acc serial loop reduction(.AND.:result)\n    DO x = 1, LOOPCOUNT\n      result = result .AND. a(x)\n    END DO\n  !$acc end data\n\n  host_result = .TRUE.\n  DO x = 1, LOOPCOUNT\n    host_result = host_result .AND. a(x)\n  END DO\n\n  IF (host_result .NEQV. result) THEN\n    errors = errors + 1\n  END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_and_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,private,reduction,combined-constructs,loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER:: errors\n  REAL(8):: false_margin\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n  LOGICAL,DIMENSION(LOOPCOUNT, 10):: a, a_copy\n  LOGICAL,DIMENSIOn(10):: has_false\n  LOGICAL:: temp\n  INTEGER:: x, y\n  errors = 0\n  false_margin = EXP(LOG(.5) / LOOPCOUNT)\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(randoms)\n\n  has_false = .FALSE.\n  a = .TRUE.\n  DO y = 1, 10\n    DO x = 1, LOOPCOUNT\n      IF (randoms(x, y) .gt. false_margin) THEN\n        a(x, y) = .FALSE.\n        has_false(y) = .TRUE.\n      END IF\n    END DO\n  END DO\n  a_copy = a\n\n  !$acc data copy(a(1:LOOPCOUNT, 1:10))\n    !$acc serial loop gang private(temp)\n    DO y = 1, 10\n      temp = .TRUE.\n      !$acc loop worker reduction(.AND.:temp)\n      DO x = 1, LOOPCOUNT\n        temp = temp .AND. a(x, y)\n      END DO\n      !$acc loop worker\n      DO x = 1, LOOPCOUNT\n        IF (temp) THEN\n          IF (a(x, y) .eq. 1) THEN\n            a(x, y) = .FALSE.\n          ELSE\n            a(x, y) = .TRUE.\n          END IF\n        END IF\n      END DO\n    END DO\n  !$acc end data\n\n  DO y = 1, 10\n    DO x = 1, LOOPCOUNT\n      IF ((has_false(y) .eqv. .TRUE.) .AND. (a(x, y) .neqv. a_copy(x, y))) THEN\n        errors = errors + 1\n      ELSEIF ((has_false(y) .eqv. .FALSE.) .AND. (a(x, y) .eqv. a_copy(x, y))) THEN\n        errors = errors + 1\n      END IF\n    END DO\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_and_vector_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,private,reduction,combined-constructs,loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  LOGICAL,DIMENSION(LOOPCOUNT, 10):: a\n  LOGICAL,DIMENSION(10):: b, has_false\n  LOGICAL:: temp\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n  REAL(8):: false_margin\n  INTEGER:: errors, x, y\n\n  errors = 0\n  false_margin = exp(log(.5) / LOOPCOUNT)\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(randoms)\n\n  has_false = .FALSE.\n  DO y = 1, 10\n    DO x = 1, LOOPCOUNT\n      IF (randoms(x, y) .lt. false_margin) THEN\n        a(x, y) = .TRUE.\n      ELSE\n        a(x, y) = .FALSE.\n        has_false(y) = .TRUE.\n      END IF\n    END DO\n  END DO\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(b(1:10))\n    !$acc serial loop private(temp)\n    DO y = 1, 10\n      temp = .TRUE.\n      !$acc loop vector reduction(.AND.:temp)\n      DO x = 1, LOOPCOUNT\n        temp = temp .AND. a(x, y)\n      END DO\n      b(y) = temp\n    END DO\n  !$acc end data\n\n  DO x = 1, 10\n    IF (has_false(x) .eqv. b(x)) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_bitand_general.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,reduction,combined-constructs,loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER,DIMENSION(N):: a\n  INTEGER:: b, host_b\n  REAL(8):: false_margin\n  REAL(8),DIMENSION(LOOPCOUNT, 16):: randoms\n  INTEGER:: x, y\n  INTEGER:: errors\n\n  errors = 0\n  false_margin = exp(log(.5)/LOOPCOUNT)\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(randoms)\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 16\n      IF (randoms(x, y) .lt. false_margin) THEN\n        a(x) = a(x) + 2**(y - 1)\n      END IF\n    END DO\n  END DO\n\n  b = a(1)\n  host_b = a(1)\n  DO x = 2, LOOPCOUNT\n    host_b = iand(host_b, a(x))\n  END DO\n\n  !$acc data copyin(a(1:LOOPCOUNT))\n    !$acc serial loop reduction(iand: b)\n    DO x = 1, LOOPCOUNT\n      b = iand(b, a(x))\n    END DO\n  !$acc end data\n\n  IF (b .ne. host_b) THEN\n    errors = errors + 1\n  END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_bitand_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,private,reduction,combined-constructs,loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER,DIMENSION(LOOPCOUNT, 10):: a, b, b_copy\n  INTEGER,DIMENSION(10):: c, host_c\n  INTEGER:: errors, x, y, z, temp\n  REAL(8):: false_margin\n  REAL(8),DIMENSION(LOOPCOUNT, 10, 17):: randoms\n\n  errors = 0\n  false_margin = exp(log(.5) / LOOPCOUNT)\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(randoms)\n\n  DO y = 1, 10\n    DO x = 1, LOOPCOUNT\n      b(x) = INT(10 * randoms(x, y, 17))\n      DO z = 1, 16\n        IF (randoms(x, y, z) .lt. false_margin) THEN\n          a(x) = a(x) + 2**(z - 1)\n        END IF\n      END DO\n    END DO\n  END DO\n\n  b_copy = b\n\n  DO y = 1, 10\n    temp = a(1, y)\n    DO x = 1, LOOPCOUNT\n      temp = iand(temp, a(x, y))\n    END DO\n    host_c(y) = temp\n  END DO\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(b(1:LOOPCOUNT, 1:10), c(1:10))\n    !$acc serial loop gang private(temp)\n    DO y = 1, 10\n      temp = a(1, y)\n      !$acc loop worker reduction(iand:temp)\n      DO x = 1, LOOPCOUNT\n        temp = iand(temp, a(x, y))\n      END DO\n      c(y) = temp\n      !$acc loop worker\n      DO x = 1, LOOPCOUNT\n        b(x, y) = b(x, y) + c(y)\n      END DO\n    END DO\n  !$acc end data\n\n  DO y = 1, 10\n    IF (host_c(y) .ne. c(y)) THEN\n      errors = errors + 1\n    END IF\n    DO x = 1, LOOPCOUNT\n      IF (b(x, y) .ne. b_copy(x, y) + c(y)) THEN\n        errors = errors + 1\n      END IF\n    END DO\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_bitand_vector_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,private,reduction,combined-constructs,loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER,DIMENSION(LOOPCOUNT, 10):: a\n  INTEGER,DIMENSION(10):: b, b_host\n  REAL(8),DIMENSION(LOOPCOUNT, 10, 16):: randoms\n  REAL(8):: false_margin\n  INTEGER:: x, y, temp, c\n  INTEGER:: errors\n\n  errors = 0\n  false_margin = exp(log(.5) / LOOPCOUNT)\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(randoms)\n\n  DO y = 1, 10\n    DO x = 1, LOOPCOUNT\n      DO z = 1, 16\n        IF (randoms(x, y, z) .lt. false_margin) THEN\n          a(x, y) = a(x, y) + 2**(z - 1)\n        END IF\n      END DO\n    END DO\n  END DO\n\n  DO y = 1, 10\n    b_host(y) = a(1, y)\n    DO x = 1, LOOPCOUNT\n      b_host(y) = iand(b_host(y), a(x, y))\n    END DO\n  END DO\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(b(1:10))\n    !$acc serial loop private(c)\n    DO y = 1, 10\n      c = a(1, y)\n      !$acc loop vector reduction(iand:c)\n      DO x = 1, LOOPCOUNT\n        c = iand(c, a(x, y))\n      END DO\n      b(y) = c\n    END DO\n  !$acc end data\n\n  DO x = 1, 10\n    IF (b(x) .ne. b_host(x)) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_bitor_general.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,reduction,combined-constructs,loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER:: errors, temp, x, y, b, host_b\n  INTEGER,DIMENSION(LOOPCOUNT):: a\n  REAL(8):: false_margin\n  REAL(8),DIMENSION(LOOPCOUNT, 16):: randoms\n  errors = 0\n  false_margin = exp(log(.5) / LOOPCOUNT)\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(randoms)\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 16\n      IF (randoms(x, y) .gt. false_margin) THEN\n        a(x) = a(x) + 2**(y - 1)\n      END IF\n    END DO\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    host_b = ior(host_b, a(x))\n  END DO\n\n  !$acc data copyin(a(1:LOOPCOUNT))\n    !$acc serial loop reduction(ior:b)\n    DO x = 1, LOOPCOUNT\n      b = ior(b, a(x))\n    END DO\n  !$acc end data\n\n  IF (b .ne. host_b) THEN\n    errors = errors + 1\n  END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_bitor_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,private,reduction,combined-constructs,loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER:: errors, x, y, z, temp\n  INTEGER,DIMENSION(LOOPCOUNT, 10):: a, b, b_copy\n  INTEGER,DIMENSION(10):: c\n  REAL(8):: false_margin\n  REAL(8),DIMENSION(LOOPCOUNT, 10, 17):: randoms\n\n  errors = 0\n  false_margin = exp(log(.5) / LOOPCOUNT)\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(randoms)\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      b(x, y) = INT(randoms(x, y, 17) * 1000)\n      DO z = 1, 16\n        IF (randoms(x, y, z) .gt. false_margin) THEN\n          a(x, y) = a(x, y) + 2**(z-1)\n        END IF\n      END DO\n    END DO\n  END DO\n\n  b_copy = b\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(b(1:LOOPCOUNT, 1:10), c(1:10))\n    !$acc serial loop gang private(temp)\n    DO y = 1, 10\n      temp = 0\n      !$acc loop worker reduction(ior:temp)\n      DO x = 1, LOOPCOUNT\n        temp = ior(temp, a(x, y))\n      END DO\n      c(y) = temp\n      !$acc loop worker\n      DO x = 1, LOOPCOUNT\n        b(x, y) = b(x, y) + c(y)\n      END DO\n    END DO\n  !$acc end data\n\n  DO y = 1, 10\n    temp = a(1, y)\n    DO x = 2, LOOPCOUNT\n      temp = ior(temp, a(x, y))\n    END DO\n    IF (temp .ne. c(y)) THEN\n      errors = errors + 1\n    END IF\n    DO x = 1, LOOPCOUNT\n      IF (b(x, y) .ne. (b_copy(x, y) + temp)) THEN\n        errors = errors + 1\n      END IF\n    END DO\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_bitor_vector_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,private,reduction,combined-constructs,loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER:: errors, x, y, z, temp\n  INTEGER,DIMENSION(LOOPCOUNT, 10):: a\n  INTEGER,DIMENSION(10):: b\n  REAL(8):: false_margin\n  REAL(8),DIMENSION(LOOPCOUNT, 10, 16):: randoms\n\n  errors = 0\n  false_margin = exp(log(.5) / LOOPCOUNT)\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBERs(randoms)\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      DO z = 1, 16\n        IF (randoms(x, y, z) .gt. false_margin) THEN\n          a(x, y) = a(x, y) + 2**(z - 1)\n        END IF\n      END DO\n    END DO\n  END DO\n\n  !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(b(1:10))\n    !$acc serial loop private(temp)\n    DO y = 1, 10\n      temp = 0\n      !$acc loop vector reduction(ior:temp)\n      DO x = 1, LOOPCOUNT\n        temp = ior(temp, a(x, y))\n      END DO\n      b(y) = temp\n    END DO\n  !$acc end data\n\n  DO y = 1, 10\n    temp = a(1, y)\n    DO x = 2, LOOPCOUNT\n      temp = ior(temp, a(x, y))\n    END DO\n    IF (temp .ne. b(y)) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_bitxor_general.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,reduction,combined-constructs,loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER,DIMENSION(LOOPCOUNT):: a\n  REAL(8),DIMENSION(LOOPCOUNT):: randoms\n  INTEGER:: errors, b, host_b, x\n\n  errors = 0\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(randoms)\n\n  DO x = 1, LOOPCOUNT\n    a(x) = INT(randoms(x) * 100000)\n  END DO\n\n  b = 0\n  host_b = 0\n\n  DO x = 1, LOOPCOUNT\n    host_b = ieor(host_b, a(x))\n  END DO\n\n  !$acc data copyin(a(1:LOOPCOUNT))\n    !$acc serial loop reduction(ieor:b)\n    DO x = 1, LOOPCOUNT\n      b = ieor(b, a(x))\n    END DO\n  !$acc end data\n\n  IF (b .ne. host_b) THEN\n    errors = errors + 1\n  END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_bitxor_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,private,reduction,combined-constructs,loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER,DIMENSION(LOOPCOUNT, 10):: a, b, host_b\n  INTEGER,DIMENSION(10):: c, host_c\n  REAL(8),DIMENSION(LOOPCOUNT, 10, 2):: randoms\n  INTEGER:: errors, x, y, temp\n\n  errors = 0\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(randoms)\n\n  c = 0\n  host_c = 0\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      b(x, y) = INT(randoms(x, y, 1) * 1000)\n      a(x, y) = INT(randoms(x, y, 2) * 1000)\n    END DO\n  END DO\n  host_b = b\n\n  DO y = 1, 10\n    DO x = 1, LOOPCOUNT\n      host_c(y) = ieor(host_c(y), a(x, y))\n    END DO\n    DO x = 1, LOOPCOUNT\n      host_b(x, y) = host_b(x, y) + host_c(y)\n    END DO\n  END DO\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(b(1:LOOPCOUNT, 1:10), c(1:10))\n    !$acc serial loop gang private(temp)\n    DO y = 1, 10\n      temp = 0\n      !$acc loop worker reduction(ieor:temp)\n      DO x = 1, LOOPCOUNT\n        temp = ieor(temp, a(x, y))\n      END DO\n      c(y) = temp\n      DO x = 1, LOOPCOUNT\n        b(x, y) = b(x, y) + c(y)\n      END DO\n    END DO\n  !$acc end data\n\n  DO y = 1, 10\n    IF (c(y) .ne. host_c(y)) THEN\n      errors = errors + 1\n    END IF\n    DO x = 1, LOOPCOUNT\n      IF (host_b(x, y) .ne. b(x, y)) THEN\n        errors = errors + 1\n      END IF\n    END DO\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_bitxor_vector_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,private,reduction,combined-constructs,loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER,DIMENSION(LOOPCOUNT, 10):: a\n  INTEGER,DIMENSION(10):: b, host_b\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n  INTEGER:: errors, x, y, temp\n\n  errors = 0\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(randoms)\n\n  DO y = 1, 10\n    DO x = 1, LOOPCOUNT\n      a(x, y) = INT(randoms(x, y) * 10000)\n    END DO\n  END DO\n\n  DO y = 1, 10\n    DO x = 1, LOOPCOUNT\n      host_b(y) = ieor(host_b(y), a(x, y))\n    END DO\n  END DO\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10))\n    !$acc serial loop private(temp)\n    DO y = 1, 10\n      temp = 0\n      !$acc loop vector reduction(ieor:temp)\n      DO x = 1, LOOPCOUNT\n        temp = ieor(temp, a(x, y))\n      END DO\n      b(y) = temp\n    END DO\n  !$acc end data\n\n  DO y = 1, 10\n    IF (b(y) .ne. host_b(y)) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_max_general.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,reduction,combined-constructs,loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  REAL(8),DIMENSION(LOOPCOUNT):: a, b\n  REAL(8):: maxval, host_max\n  INTEGER:: errors, x\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n\n  errors = 0\n\n  DO x = 1, LOOPCOUNT\n    host_max = max(host_max, a(x) * b(x))\n  END DO\n\n  !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n    !$acc serial loop reduction(max:maxval)\n    DO x = 1, LOOPCOUNT\n      maxval = max(maxval, a(x) * b(x))\n    END DO\n  !$acc end data\n\n  IF (abs(host_max - max) .gt. PRECISION) THEN\n    errors = errors + 1\n  END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_max_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,private,reduction,combined-constructs,loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b, c\n  REAL(8),DIMENSIOn(10):: host_maximums, maximums\n  REAL(8):: temp\n  INTEGER:: errors, x, y\n\n  errors = 0\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n  c = 0\n  maximums = 0\n  host_maximums = 0\n\n  DO y = 1, 10\n    DO x = 1, LOOPCOUNT\n      host_maximums(y) = max(host_maximums(y), a(x, y) * b(x, y))\n    ENDDO\n  END DO\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10), b(1:LOOPCOUNT, 1:10)) copy(c(1:LOOPCOUNT, 1:10), maximums(1:10))\n    !$acc serial loop gang private(temp)\n    DO y = 1, 10\n      temp = 0\n      !$acc loop worker reduction(max:temp)\n      DO x = 1, LOOPCOUNT\n        temp = max(temp, a(x, y) * b(x, y))\n      END DO\n      maximums(y) = temp\n      !$acc loop worker\n      DO x = 1, LOOPCOUNT\n        c(x, y) = (a(x, y) * b(x, y)) / maximums(y)\n      END DO\n    END DO\n  !$acc end data\n\n  DO y = 1, 10\n    IF (maximums(y) .ne. host_maximums(y)) THEN\n      errors = errors + 1\n    END IF\n    DO x = 1, LOOPCOUNT\n      IF (abs(c(x, y) - ((a(x, y) * b(x, y)) / maximums(y))) .gt. PRECISION) THEN\n        errors = errors + 1\n      END IF\n    END DO\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_max_vector_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,private,reduction,combined-constructs,loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b\n  REAL(8),DIMENSION(10):: maximums, host_maximums\n  REAL(8):: temp\n  INTEGER:: errors, x, y\n\n  errors = 0\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n\n  host_maximums = 0\n  DO y = 1, 10\n    DO x = 1, LOOPCOUNT\n      host_maximums(y) = max(host_maximums(y), a(x, y) * b(x, y))\n    END DO\n  END DO\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10), b(1:LOOPCOUNT, 1:10)) copy(maximums(1:10))\n    !$acc serial loop private(temp)\n    DO y = 1, 10\n      temp = 0\n      !$acc loop vector reduction(max:temp)\n      DO x = 1, LOOPCOUNT\n        temp = max(temp, a(x, y) * b(x, y))\n      END DO\n      maximums(y) = temp\n    END DO\n  !$acc end data\n\n  DO x = 1, 10\n    IF (abs(host_maximums(x) - maximums(x)) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_min_general.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,reduction,combined-constructs,loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER:: errors, x\n  REAL(8),DIMENSION(LOOPCOUNT):: a, b\n  REAL(8):: minimum, host_minimum\n\n  errors = 0\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n\n  minimum = a(1) * b(1)\n  host_minimum = minimum\n\n  DO x = 2, LOOPCOUNT\n    host_minimum = min(host_minimum, a(x) * b(x))\n  END DO\n\n  !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n    !$acc serial loop reduction(min:minimum)\n    DO x = 1, LOOPCOUNT\n      minimum = min(minimum, a(x) * b(x))\n    END DO\n  !$acc end data\n\n  IF (abs(host_minimum - minimum) .gt. PRECISION) THEN\n    errors = errors + 1\n  END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_min_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,private,reduction,combined-constructs,loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b, c\n  REAL(8),DIMENSION(10):: minimums, host_minimums\n  REAL(8):: temp\n  INTEGER:: errors, x, y\n\n  errors = 0\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n  c = 0\n  mimimums = 0\n  host_minimums = 0\n\n  DO y = 1, 10\n    DO x = 1, LOOPCOUNT\n      host_minimums(y) = min(host_minimums(y), a(x, y) * b(x, y))\n    END DO\n  END DO\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10), b(1:LOOPCOUNT, 1:10)) copy(c(1:LOOPCOUNT, 1:10), minimums(1:10))\n    !$acc serial loop gang private(temp)\n    DO y = 1, 10\n      temp = 1\n      !$acc loop reduction(min: temp)\n      DO x = 1, LOOPCOUNT\n        temp = min(temp, a(x, y) * b(x, y))\n      END DO\n      minimums(y) = temp\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        c(x, y) = (a(x, y) * b(x, y)) / minimums(y)\n      END DO\n    END DO\n  !$acc end data\n\n  DO y = 1, 10\n    IF (abs(minimums(y) - host_minimums(y)) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n    DO x = 1, LOOPCOUNT\n      IF (abs(c(x, y) - ((a(x, y) * b(x, y)) / minimums(y))) .gt. PRECISION) THEN\n        errors = errors + 1\n      END IF\n    END DO\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_min_vector_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,private,reduction,combined-constructs,loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b\n  REAL(8),DIMENSION(10):: minimums, host_minimums\n  REAL(8):: temp\n  INTEGER:: errors, x, y\n\n  errors = 0\n  minimums = 1\n  host_minimums = 1\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n\n  DO y = 1, 10\n    DO x = 1, LOOPCOUNT\n      host_minimums(y) = min(host_minimums(y), a(x, y) * b(x, y))\n    END DO\n  END DO\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10), b(1:LOOPCOUNT, 1:10)) copy(minimums(1:10))\n    !$acc serial loop gang private(temp)\n    DO y = 1, 10\n      temp = 1\n      !$acc loop vector reduction(min:temp)\n      DO x = 1, LOOPCOUNT\n        temp = min(temp, a(x, y) * b(x, y))\n      END DO\n      minimums(y) = temp\n    END DO\n  !$acc end data\n\n  DO x = 1, 10\n    IF (abs(host_minimums(x) - minimums(x)) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_multiply_general.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,reduction,combined-constructs,loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  REAL(8),DIMENSION(10):: a, b\n  REAL(8):: reduced, host_reduced\n  INTEGER:: errors, x, y\n\n  errors = 0\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  DO y = 1, LOOPCOUNT\n    CALL RANDOM_NUMBER(a)\n    CALL RANDOM_NUMBER(b)\n    reduced = 1\n    host_reduced = 1\n\n    DO x = 1, 10\n      host_reduced = host_reduced * (a(x) + b(x))\n    END DO\n\n    !$acc data copyin(a(1:10), b(1:10))\n      !$acc serial loop reduction(*:reduced)\n      DO x = 1, 10\n        reduced = reduced * (a(x) + b(x))\n      END DO\n    !$acc end data\n\n    IF (abs(host_reduced - reduced) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_multiply_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,private,reduction,combined-constructs,loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  REAL(8),DIMENSION(10, LOOPCOUNT):: a, b, c\n  REAL(8),DIMENSION(LOOPCOUNT):: totals, host_totals\n  REAL(8):: temp\n  INTEGER:: errors, x, y\n\n  errors = 0\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n  c = 0\n\n\n  host_totals = 1\n  DO y = 1, LOOPCOUNT\n    DO x = 1, 10\n      host_totals(y) = host_totals(y) * (a(x, y) + b(x, y))\n    END DO\n  END DO\n\n  !$acc data copyin(a(1:10, 1:LOOPCOUNT), b(1:10, 1:LOOPCOUNT)) copyout(c(1:10, 1:LOOPCOUNT)) copy(totals(1:LOOPCOUNT))\n    !$acc serial loop gang private(temp)\n    DO y = 1, LOOPCOUNT\n      temp = 1\n      !$acc loop worker reduction(*:temp)\n      DO x = 1, 10\n        temp = temp * (a(x, y) + b(x, y))\n      END DO\n      totals(y) = temp\n      !$acc loop worker\n      DO x = 1, 10\n        c(x, y) = (a(x, y) + b(x, y)) / totals(y)\n      END DO\n    END DO\n  !$acc end data\n\n  DO y = 1, LOOPCOUNT\n    IF (abs(host_totals(y) - totals(y)) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n    DO x = 1, 10\n      IF (c(x, y) - ((a(x, y) + b(x, y)) / totals(y)) .gt. PRECISION) THEN\n        errors = errors + 1\n      END IF\n    END DO\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_multiply_vector_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,private,reduction,combined-constructs,loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  REAL(8),DIMENSION(10, LOOPCOUNT):: a, b\n  REAL(8),DIMENSION(LOOPCOUNT):: totals, host_totals\n  REAL(8):: temp\n  INTEGER:: errors\n\n  errors = 0\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n\n  host_totals = 1\n  DO y = 1, LOOPCOUNT\n    DO x = 1, 10\n      host_totals(y) = host_totals(y) * (a(x, y) + b(x, y))\n    END DO\n  END DO\n\n  !$acc data copyin(a(1:10, 1:LOOPCOUNT), b(1:10, 1:LOOPCOUNT)) copyout(totals(1:LOOPCOUNT))\n    !$acc serial loop private(temp)\n    DO y = 1, LOOPCOUNT\n      temp = 1\n      !$acc loop vector reduction(*:temp)\n      DO x = 1, 10\n        temp = temp * (a(x, y) + b(x, y))\n      END DO\n      totals(y) = temp\n    END DO\n  !$acc end data\n\n  DO y = 1, LOOPCOUNT\n    IF (abs(host_totals(y) - totals(y)) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_or_general.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,reduction,combined-constructs,loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  LOGICAL,DIMENSION(LOOPCOUNT):: a\n  LOGICAL:: result, host_result\n  REAL(8),DIMENSION(LOOPCOUNT):: randoms\n  REAL(8):: false_margin\n  INTEGER:: errors, x\n\n  errors = 0\n  false_margin = exp(log(.5) / LOOPCOUNT)\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(randoms)\n\n  DO x = 1, LOOPCOUNT\n    IF (randoms(x) .gt. false_margin) THEN\n      a(x) = .TRUE.\n    ELSE\n      a(x) = .FALSE.\n    END IF\n  END DO\n\n  host_result = .FALSE.\n  result = .FALSE.\n\n  DO x = 1, LOOPCOUNT\n    host_result = host_result .OR. a(x)\n  END DO\n\n  !$acc data copyin(a(1:LOOPCOUNT))\n    !$acc serial loop reduction(.OR.: result)\n    DO x = 1, LOOPCOUNT\n      result = result .OR. a(x)\n    END DO\n  !$acc end data\n\n  IF (host_result .neqv. result) THEN\n    errors = errors + 1\n  END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_or_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,private,reduction,combined-constructs,loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  LOGICAL,DIMENSION(LOOPCOUNT, 10):: a, a_copy\n  LOGICAL,DIMENSION(10):: results\n  LOGICAL:: temp\n  REAL(8):: false_margin\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n  INTEGER:: errors\n  INTEGER:: x, y\n\n  errors = 0\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(randoms)\n\n  DO y = 1, 10\n    DO x = 1, LOOPCOUNT\n      IF (randoms(x, y) .gt. false_margin) THEN\n        a(x, y) = .TRUE.\n      ELSE\n        a(x, y) = .FALSE.\n      END IF\n    END DO\n  END DO\n\n  a_copy = a\n\n  !$acc data copy(a(1:LOOPCOUNT, 1:10))\n    !$acc serial loop gang private(temp)\n    DO y = 1, 10\n      temp = .FALSE.\n      !$acc loop worker reduction(.OR.:temp)\n      DO x = 1, LOOPCOUNT\n        temp = temp .OR. a(x, y)\n      END DO\n      results(y) = temp\n      !$acc loop worker\n      DO x = 1, LOOPCOUNT\n        IF (results(y)) THEN\n          IF (a(x, y)) THEN\n            a(x, y) = .FALSE.\n          ELSE\n            a(x, y) = .TRUE.\n          END IF\n        END IF\n      END DO\n    END DO\n  !$acc data\n\n  DO y = 1, 10\n    temp = .FALSE.\n    DO x = 1, LOOPCOUNT\n      temp = temp .OR. a(x, y)\n    END DO\n    IF (temp .neqv. results(y)) THEN\n      errors = errors + 1\n    END IF\n    DO x = 1, LOOPCOUNT\n      IF (temp) THEN\n        IF (a(x, y) .eqv. a_copy(x, y)) THEN\n          errors = errors + 1\n        END IF\n      ELSE\n        IF (a(x, y) .neqv. a_copy(x, y)) THEN\n          errors = errors + 1\n        END IF\n      END IF\n    END DO\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_or_vector_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,private,reduction,combined-constructs,loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  LOGICAL,DIMENSION(LOOPCOUNT, 10):: a\n  LOGICAL,DIMENSION(10):: b\n  LOGICAL:: temp\n  REAL(8):: false_margin\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n  INTEGER:: errors\n  INTEGER:: x, y\n\n  errors = 0\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(randoms)\n\n  DO y = 1, 10\n    DO x = 1, LOOPCOUNT\n      IF (randoms(x, y) .gt. false_margin) THEN\n        a(x, y) = .TRUE.\n      ELSE\n        a(x, y) = .FALSE.\n      END IF\n    END DO\n  END DO\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(b(1:10))\n    !$acc serial loop private(temp)\n    DO y = 1, 10\n      temp = .FALSE.\n      !$acc loop vector reduction(.OR.:temp)\n      DO x = 1, LOOPCOUNT\n        temp = temp .OR. a(x, y)\n      END DO\n      b(y) = temp\n    END DO\n  !$acc end data\n\n  DO y = 1, 10\n    temp = .FALSE.\n    DO x = 1, LOOPCOUNT\n      temp = temp .OR. a(x, y)\n    END DO\n    IF (temp .neqv. b(y)) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_seq.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,combined-constructs,loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  REAL(8),DIMENSION(LOOPCOUNT):: a, b\n  REAL(8):: temp\n  INTEGER:: errors, x\n\n  errors = 0\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  b = 0\n\n  !$acc data copyin(a(1:LOOPCOUNT)) copy(b(1:LOOPCOUNT))\n    !$acc serial loop seq\n    DO x = 2, LOOPCOUNT\n      b(x) = b(x - 1) + a(x)\n    END DO\n  !$acc end data\n\n  temp = 0\n  DO x = 2, LOOPCOUNT\n    temp = temp + a(x)\n    IF (abs(b(x) - temp) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_tile.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,combined-constructs,loop,tile,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER:: errors\n  REAL(8),DIMENSION(100):: a, b, c\n  REAL(8),DIMENSION(100, 100):: d2\n  REAL(8),DIMENSION(100, 100, 100):: d3\n  INTEGER:: x, y, z\n  errors = 0\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n  CALL RANDOM_NUMBER(c)\n  d2 = 0\n  d3 = 0\n\n  !$acc data copyin(a(1:100), b(1:100), c(1:100)) copyout(d2(1:100, 1:100))\n    !$acc serial loop tile(*, *)\n    DO x = 1, 100\n      DO y = 1, 100\n        DO z = 1, 100\n          d2(x, y) = d2(x, y) + (a(x) * b(y) * c(z))\n        END DO\n      END DO\n    END DO\n  !$acc end data\n\n  DO x = 1, 100\n    DO y = 1, 100\n      DO z = 1, 100\n        d2(x, y) = d2(x, y) - (a(x) * b(y) * c(z))\n      END DO\n      IF (abs(d2(x, y)) .gt. 10*PRECISION) THEN\n        errors = errors + 1\n      END IF\n    END DO\n  END DO\n\n  !$acc data copyin(a(1:100), b(1:100), c(1:100)) copyout(d3(1:100, 1:100, 1:100))\n    !$acc serial loop tile(*, *, *)\n    DO x = 1, 100\n      DO y = 1, 100\n        DO z = 1, 100\n          d3(x, y, z) = a(x) * b(y) * c(z)\n        END DO\n      END DO\n    END DO\n  !$acc end data\n\n  DO x = 1, 100\n    DO y = 1, 100\n      DO z = 1, 100\n        IF (abs(d3(x, y, z) - (a(x) * b(y) * c(z))) .gt. PRECISION) THEN\n          errors = errors + 1\n        END IF\n      END DO\n    END DO\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "combined-constructs",
                            "loop",
                            "tile"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_vector.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,combined-constructs,loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  REAL(8),DIMENSION(LOOPCOUNT):: a, b, c\n  INTEGER:: x\n  INTEGER:: errors\n\n  errors = 0\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n  c = 0\n\n  !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copy(c(1:LOOPCOUNT))\n    !$acc serial loop vector\n    DO x = 1, LOOPCOUNT\n      c(x) = a(x) + b(x)\n    END DO\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_vector_blocking.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER:: errors\n  REAL(8),DIMENSION(LOOPCOUNT):: a, b, c\n  INTEGER:: multiplier, x\n  errors = 0\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n  c = 0\n\n  !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n    !$acc serial\n      !$acc loop vector\n      DO x = 1, LOOPCOUNT\n        c(x) = (a(x) + b(x)) * multiplier\n      END DO\n      multiplier = multiplier + 1\n      !$acc loop vector\n      DO x = 1, LOOPCOUNT\n        c(x) = c(x) + ((a(x) + b(x)) * multiplier)\n      END DO\n    !$acc end serial\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    IF (abs(c(x) - ((a(x) + b(x)) * 3)) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_worker.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,combined-constructs,loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  REAL(8),DIMENSION(LOOPCOUNT):: a, b, c\n  INTEGER:: x\n  INTEGER:: errors\n\n  errors = 0\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n  c = 0\n\n  !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copy(c(1:LOOPCOUNT))\n    !$acc serial loop worker\n    DO x = 1, LOOPCOUNT\n      c(x) = a(x) + b(x)\n    END DO\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_worker_blocking.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  REAL(8),DIMENSION(LOOPCOUNT):: a, b, c\n  INTEGER:: multiplier\n  INTEGER:: x\n  INTEGER:: errors\n\n  errors = 0\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n  c = 0\n\n  !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n    !$acc serial\n      !$acc loop worker\n      DO x = 1, LOOPCOUNT\n        c(x) = (a(x) + b(x)) * multiplier\n      END DO\n      multiplier = multiplier + 1\n      !$acc loop worker\n      DO x = 1, LOOPCOUNT\n        c(x) = c(x) + ((a(x) + b(x)) * multiplier)\n      END DO\n    !$acc end serial\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    IF (abs(c(x) - (3 * (a(x) + b(x)))) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_present.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  REAL(8),DIMENSION(LOOPCOUNT):: a, b, c\n  INTEGER:: x\n  INTEGER:: errors\n\n  errors = 0\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n  c = 0\n\n  !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) create(c(1:LOOPCOUNT))\n  !$acc serial present(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n    !$acc loop\n    DO x = 1, LOOPCOUNT\n      c(x) = a(x) + b(x)\n    END DO\n  !$acc end serial\n  !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n\n  DO x = 1, LOOPCOUNT\n    IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_private.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,private,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b\n  REAL(8),DIMENSION(LOOPCOUNT):: c\n  REAL(8),DIMENSION(10):: d\n  REAL(8):: temp\n  INTEGER:: x, y\n  INTEGER:: errors\n\n  errors = 0\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n  c = 0\n  d = 0\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10), b(1:LOOPCOUNT, 1:10)) copy(d(1:10))\n    !$acc serial private(c(1:LOOPCOUNT))\n      !$acc loop gang\n      DO y = 1, 10\n        !$acc loop worker\n        DO x = 1, LOOPCOUNT\n          c(x) = a(x, y) + b(x, y)\n        END DO\n        !$acc loop seq\n        DO x = 1, LOOPCOUNT\n          d(y) = d(y) + c(x)\n        END DO\n      END DO\n    !$acc end serial\n  !$acc end data\n\n  DO y = 1, 10\n    temp = 0\n    DO x = 1, LOOPCOUNT\n      temp = temp + (a(x, y) + b(x, y))\n    END DO\n    IF (abs(d(x) - temp) .gt. (2 * PRECISION * LOOPCOUNT)) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "private"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_reduction.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,reduction,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  REAL(8),DIMENSION(LOOPCOUNT):: a\n  REAL(8):: reduction\n  INTEGER:: errors, x\n\n  errors = 0\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n\n  !$acc serial copyin(a(1:LOOPCOUNT)) reduction(+:reduction)\n    !$acc loop\n    DO x = 1, LOOPCOUNT\n      reduction = reduction + a(x)\n    END DO\n  !$acc end serial\n\n  DO x = 1, LOOPCOUNT\n    reduction = reduction - a(x)\n  END DO\n\n  IF (abs(reduction) .gt. PRECISION) THEN\n    errors = errors + 1\n  END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "reduction"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_scalar_default_firstprivate.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  REAL(8),DIMENSION(LOOPCOUNT):: a, b\n  REAL(8):: scalar, scalar_copy\n  INTEGER:: x\n  INTEGER:: errors\n\n  errors = 0\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  b = 0\n  scalar = 5.5\n  scalar_copy = scalar\n\n  !$acc data copyin(a(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT))\n    !$acc serial\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        b(x) = a(x) + scalar\n      END DO\n    !$acc end serial\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    IF (abs(b(x) - (a(x) + scalar_copy)) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n  IF (abs(scalar_copy - scalar) .gt. PRECISION) THEN\n    errors = errors + 1\n  END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            ""
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_switch.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER,DIMENSION(LOOPCOUNT):: a\n  REAL(8),DIMENSION(LOOPCOUNT):: a_randoms, b, b_host, c\n  INTEGER:: errors, x\n\n  errors = 0\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a_randoms)\n  CALL RANDOM_NUMBER(b)\n  c = 0\n  b_host = b\n\n  DO x = 1, LOOPCOUNT\n    a(x) = INT(a_randoms(x) * 4)\n  END DO\n\n  !$acc data copyin(a(1:LOOPCOUNT)) copy(b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n    !$acc serial\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        SELECT CASE(a(x))\n        CASE (0)\n          c(x) = b(x) * b(x)\n        CASE (1)\n          c(x) = b(x) / b(x)\n        CASE (2)\n          b(x) = b(x) / 2\n        CASE DEFAULT\n          c(x) = a(x) + b(x)\n        END SELECT\n      END DO\n    !$acc end serial\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    SELECT CASE(a(x))\n    CASE(0)\n      IF (abs(c(x) - (b_host(x) * b_host(x))) .gt. PRECISION) THEN\n        errors = errors + 1\n      END IF\n    CASE(1)\n      IF (abs(c(x) - 1) .gt. PRECISION) THEN\n        errors = errors + 1\n      END IF\n    CASE(2)\n      IF (abs(c(x)) .gt. PRECISION) THEN\n        errors = errors + 1\n      END IF\n      IF (abs(b(x) - (b_host(x) / 2)) .gt. PRECISION) THEN\n        errors = errors + 1\n      END IF\n    CASE DEFAULT\n      IF (abs(c(x) - (b_host(x) + a(x))) .gt. PRECISION) THEN\n        errors = errors + 1\n      END IF\n    END SELECT\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            ""
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_wait.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:async,serial,update,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  REAL(8),DIMENSION(LOOPCOUNT):: a, a_copy\n  INTEGER:: errors, x\n\n  errors = 0\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  a_copy = a\n\n  !$acc enter data create(a(1:LOOPCOUNT))\n  !$acc update device(a(1:LOOPCOUNT)) async(1)\n  !$acc serial present(a(1:lOOPCOUNT)) wait(1)\n    !$acc loop\n    DO x = 1, LOOPCOUNT\n      a(x) = a(x) + 1\n    END DO\n  !$acc end serial\n  !$acc exit data copyout(a(1:LOOPCOUNT))\n\n  DO x = 1, LOOPCOUNT\n    IF (abs(a(x) - (a_copy(x) + 1)) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "async",
                            "serial",
                            "update"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_while_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:reduction,loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: a\n  REAL(8):: avg\n  INTEGER:: errors, x, y\n\n  errors = 0\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n\n  !$acc data copy(a(1:LOOPCOUNT, 1:10))\n    !$acc serial\n      !$acc loop\n      DO y = 1, 10\n        avg = 0\n        DO WHILE (avg .lt. 1000)\n          avg = 0\n          !$acc loop reduction(+:avg)\n          DO x = 1, LOOPCOUNT\n            a(x, y) = a(x, y) * 1.5\n            avg = avg + (a(x, y) / LOOPCOUNT)\n          END DO\n        END DO\n      END DO\n    !$acc end serial\n  !$acc end data\n\n  DO y = 1, 10\n    avg = 0\n    DO x = 1, LOOPCOUNT\n      avg = avg + (a(x, y) / LOOPCOUNT)\n    END DO\n    IF ((avg .lt. 1000) .or. (avg .gt. 1500)) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "reduction",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "set_default_async.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:async,construct-independent,internal-control-values,set,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, a_host, b_host !Data\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        a_host = a\n        b_host = b\n        c = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n          !$acc set default_async(1)\n          !$acc parallel async\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              a(x) = a(x) * a(x)\n            END DO\n          !$acc end parallel\n          !$acc set default_async(2)\n          !$acc parallel async\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              b(x) = b(x) * b(x)\n            END DO\n          !$acc end parallel\n          !$acc parallel async(1) wait(2)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n          !$acc wait(1)\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a_host(x) * a_host(x) + b_host(x) * b_host(x))) .gt. 4 * PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "async",
                            "construct-independent",
                            "internal-control-values",
                            "set"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "set_device_num.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,construct-independent,internal-control-values,set,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(:, :),ALLOCATABLE :: host_copy\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n        INTEGER :: temp\n\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        ALLOCATE(host_copy(acc_get_num_devices(acc_get_device_type()), LOOPCOUNT))\n\n        IF (acc_get_device_type() .ne. acc_device_none) THEN\n          !host_copy(acc_get_num_devices(acc_get_device_type()), LOOPCOUNT)\n          DO x = 1, acc_get_num_devices(acc_get_device_type())\n            CALL RANDOM_NUMBER(a)\n            host_copy(x, :) = a\n            !$acc set device_num(x)\n            !$acc enter data copyin(a(1:LOOPCOUNT))\n          END DO\n\n          DO x = 1, acc_get_num_devices(acc_get_device_type())\n            !$acc set device_num(x)\n            !$acc data present(a(1:LOOPCOUNT))\n              !$acc parallel\n                !$acc loop\n                DO y = 1, LOOPCOUNT\n                  a(y) = a(y) + 1\n                END DO\n              !$acc end parallel\n            !$acc end data\n          END DO\n\n          DO x = 1, acc_get_num_devices(acc_get_device_type())\n            !$acc set device_num(x)\n            !$acc exit data copyout(a(1:LOOPCOUNT))\n            temp = errors\n            DO y = 1, LOOPCOUNT\n              IF (abs(a(y) - (host_copy(x, y) + 1)) .gt. PRECISION) THEN\n                PRINT*, a(y)\n                PRINT*, host_copy(x, y)\n                errors = errors + 1\n              END IF\n            END DO\n            IF (temp .ne. errors) THEN\n              PRINT*, x\n            END IF\n          END DO\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "construct-independent",
                            "internal-control-values",
                            "set"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "set_device_type.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,construct-independent,internal-control-values,set,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: errors = 0\n        INTEGER :: device_type\n\n        device_type = acc_get_device_type()\n        !$acc set device_type(device_type)\n        IF (acc_get_device_type() .ne. device_type) THEN\n          errors = errors + 1\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "construct-independent",
                            "internal-control-values",
                            "set"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "shutdown.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,shutdown,nonvalidating,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: errors = 0\n\n        !$acc shutdown\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "shutdown",
                            "nonvalidating"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "shutdown_device_num.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,construct-independent,internal-control-values,shutdown,nonvalidating,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: device_num\n        INTEGER :: device_type\n        INTEGER :: errors = 0\n\n        device_num = acc_get_device_num(acc_get_device_type())\n        !$acc shutdown device_num(device_num)\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "construct-independent",
                            "internal-control-values",
                            "shutdown",
                            "nonvalidating"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "shutdown_device_type.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,construct-independent,internal-control-values,shutdown,nonvalidating,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: device_type\n        INTEGER :: errors = 0\n\n        device_type = acc_get_device_type()\n        !$acc shutdown device_type(device_type)\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "construct-independent",
                            "internal-control-values",
                            "shutdown",
                            "nonvalidating"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "shutdown_device_type_num.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,construct-independent,internal-control-values,shutdown,nonvalidating,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: device_num\n        INTEGER :: device_type\n        INTEGER :: errors = 0\n\n        device_type = acc_get_device_type()\n        device_num = acc_get_device_num(device_type)\n        !$acc shutdown device_type(device_num) device_num(device_num)\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "construct-independent",
                            "internal-control-values",
                            "shutdown",
                            "nonvalidating"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "template.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT))\n          !$acc parallel\n\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          IF (abs(a(x)) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            }
        }
    ]
}
