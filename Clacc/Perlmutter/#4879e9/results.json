var jsonResults = {
    "configs": [
        {
            "CC": "clang",
            "CCFlags": [
                "-fopenacc",
                "-fopenmp-targets=nvptx64-nvidia-cuda",
                "-lm"
            ],
            "CC_ACC_Version": "2.7",
            "CPP": "",
            "CPPFlags": [
                "-fopenacc",
                "-fopenmp-targets=nvptx64-nvidia-cuda",
                "-lm"
            ],
            "CPP_ACC_Version": null,
            "FC": "",
            "FCFlags": [],
            "FC_ACC_Version": null,
            "PostCompileCommands": [],
            "PostRunCommands": [],
            "PreCompileCommands": [],
            "PreRunCommands": [],
            "build_dir": "/global/u1/v/vaidhy/OpenACCV-V/build",
            "config_id": -1,
            "config_name": "init_config.txt",
            "env": null,
            "exclude_tags": [],
            "exclude_tests": [
                "acc_testsuite.Fh",
                "acc_testsuite.h",
                "acc_testsuite_declare.h"
            ],
            "export_format": "json",
            "fast": false,
            "id": 1,
            "include_by_default": true,
            "include_tags": [],
            "include_tests": [],
            "keep_build_dir": false,
            "keep_mutated_tests": false,
            "keep_partial_results": false,
            "keep_policy": "on-error",
            "mutated_test_dir": "/global/u1/v/vaidhy/OpenACCV-V/build/mutated_tests",
            "mutators": [],
            "partial": false,
            "partial_results_dir": "/global/u1/v/vaidhy/OpenACCV-V/build/partial_results",
            "runtime_prefix": "",
            "seed": null,
            "system_name": null,
            "tag_evaluation": null,
            "test_dir": "/global/u1/v/vaidhy/OpenACCV-V/Tests",
            "timeout": 10
        }
    ],
    "runs": {
        "acc_async_test.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_async_test.c/acc_async_test.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_async_test.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004896378144621849
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_async_test.c/acc_async_test.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_async_test.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004573225975036621
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT2 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_async_test.c/acc_async_test.c2 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_async_test.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004604304907843471
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_async_test.c/acc_async_test.c3 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_async_test.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004752088105306029
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT3 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_async_test.c/acc_async_test.c4 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_async_test.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004639085847884417
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_async_test.c/acc_async_test.c5 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_async_test.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004617923172190785
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT2 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_async_test.c/acc_async_test.c6 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_async_test.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004570293007418513
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_async_test.c/acc_async_test.c7 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_async_test.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004512045998126268
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_async_test_all.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_async_test_all.c/acc_async_test_all.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_async_test_all.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.00535900192335248
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_async_test_all.c/acc_async_test_all.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_async_test_all.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.00508271181024611
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT2 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_async_test_all.c/acc_async_test_all.c2 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_async_test_all.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005421228939667344
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_async_test_all.c/acc_async_test_all.c3 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_async_test_all.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.0049472220707684755
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT3 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_async_test_all.c/acc_async_test_all.c4 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_async_test_all.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.009134998079389334
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_async_test_all.c/acc_async_test_all.c5 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_async_test_all.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005636127898469567
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT2 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_async_test_all.c/acc_async_test_all.c6 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_async_test_all.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005716095911338925
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_async_test_all.c/acc_async_test_all.c7 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_async_test_all.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005519215948879719
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_copyin.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -DT2 -DT3 -DT4 -DT5 -DT6 -DT7 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_copyin.c/acc_copyin.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyin.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.00996749708428979
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT2 -DT3 -DT4 -DT5 -DT6 -DT7 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_copyin.c/acc_copyin.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyin.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.010121844010427594
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -DT3 -DT4 -DT5 -DT6 -DT7 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_copyin.c/acc_copyin.c2 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyin.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.009938373928889632
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -DT2 -DT4 -DT5 -DT6 -DT7 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_copyin.c/acc_copyin.c3 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyin.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005885598948225379
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -DT2 -DT3 -DT5 -DT6 -DT7 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_copyin.c/acc_copyin.c4 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyin.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004669117042794824
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -DT2 -DT3 -DT4 -DT6 -DT7 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_copyin.c/acc_copyin.c5 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyin.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004669117042794824
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -DT2 -DT3 -DT4 -DT5 -DT7 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_copyin.c/acc_copyin.c6 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyin.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005307110026478767
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -DT2 -DT3 -DT4 -DT5 -DT6 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_copyin.c/acc_copyin.c7 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyin.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004790010862052441
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT7 -DT1 -DT2 -DT3 -DT4 -DT5 -DT6 -DT7 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_copyin.c/acc_copyin.c8 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyin.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004668558016419411
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_copyin_async.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -DT2 -DT3 -DT4 -DT5 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_copyin_async.c/acc_copyin_async.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyin_async.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005460898857563734
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT2 -DT3 -DT4 -DT5 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_copyin_async.c/acc_copyin_async.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyin_async.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.00552033307030797
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -DT3 -DT4 -DT5 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_copyin_async.c/acc_copyin_async.c2 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyin_async.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005280920071527362
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -DT2 -DT4 -DT5 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_copyin_async.c/acc_copyin_async.c3 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyin_async.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.00525689497590065
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -DT2 -DT3 -DT5 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_copyin_async.c/acc_copyin_async.c4 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyin_async.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004952739924192429
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -DT2 -DT3 -DT4 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_copyin_async.c/acc_copyin_async.c5 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyin_async.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004934790078550577
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT5 -DT1 -DT2 -DT3 -DT4 -DT5 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_copyin_async.c/acc_copyin_async.c6 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyin_async.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004945336142554879
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_copyout.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_copyout.c/acc_copyout.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyout.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004942543106153607
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_copyout.c/acc_copyout.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyout.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004839177941903472
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT2 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_copyout.c/acc_copyout.c2 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyout.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005392665043473244
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_copyout.c/acc_copyout.c3 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyout.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005861154990270734
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_copyout_async.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -DT2 -DT3 -DT4 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_copyout_async.c/acc_copyout_async.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyout_async.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.00503137893974781
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT2 -DT3 -DT4 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_copyout_async.c/acc_copyout_async.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyout_async.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.009793245000764728
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -DT3 -DT4 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_copyout_async.c/acc_copyout_async.c2 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyout_async.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.010039991000667214
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -DT2 -DT4 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_copyout_async.c/acc_copyout_async.c3 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyout_async.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.009941027034074068
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -DT2 -DT3 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_copyout_async.c/acc_copyout_async.c4 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyout_async.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.010355670936405659
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT4 -DT1 -DT2 -DT3 -DT4 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_copyout_async.c/acc_copyout_async.c5 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyout_async.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.009942983044311404
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_copyout_finalize.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_copyout_finalize.c/acc_copyout_finalize.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyout_finalize.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.010512183187529445
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_copyout_finalize.c/acc_copyout_finalize.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyout_finalize.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005670978920534253
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT2 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_copyout_finalize.c/acc_copyout_finalize.c2 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyout_finalize.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.009838781086727977
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_copyout_finalize.c/acc_copyout_finalize.c3 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyout_finalize.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.009064179845154285
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT3 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_copyout_finalize.c/acc_copyout_finalize.c4 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyout_finalize.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004881361965090036
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_copyout_finalize.c/acc_copyout_finalize.c5 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyout_finalize.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.009326989063993096
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT2 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_copyout_finalize.c/acc_copyout_finalize.c6 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyout_finalize.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005727760028094053
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_copyout_finalize.c/acc_copyout_finalize.c7 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyout_finalize.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.006024023052304983
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_copyout_finalize_async.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -DT2 -DT3 -DT4 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_copyout_finalize_async.c/acc_copyout_finalize_async.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyout_finalize_async.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.009453959064558148
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT2 -DT3 -DT4 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_copyout_finalize_async.c/acc_copyout_finalize_async.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyout_finalize_async.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.00553374201990664
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -DT3 -DT4 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_copyout_finalize_async.c/acc_copyout_finalize_async.c2 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyout_finalize_async.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.006122217979282141
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -DT2 -DT4 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_copyout_finalize_async.c/acc_copyout_finalize_async.c3 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyout_finalize_async.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004816409898921847
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -DT2 -DT3 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_copyout_finalize_async.c/acc_copyout_finalize_async.c4 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyout_finalize_async.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005253123119473457
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT4 -DT1 -DT2 -DT3 -DT4 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_copyout_finalize_async.c/acc_copyout_finalize_async.c5 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyout_finalize_async.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.00504814088344574
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_create.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -DT2 -DT3 -DT4 -DT5 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_create.c/acc_create.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_create.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.0050625279545784
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT2 -DT3 -DT4 -DT5 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_create.c/acc_create.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_create.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.0054879270028322935
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -DT3 -DT4 -DT5 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_create.c/acc_create.c2 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_create.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005709182005375624
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -DT2 -DT4 -DT5 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_create.c/acc_create.c3 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_create.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005370036931708455
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -DT2 -DT3 -DT5 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_create.c/acc_create.c4 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_create.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.0049613299779593945
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -DT2 -DT3 -DT4 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_create.c/acc_create.c5 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_create.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005131111945956945
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT5 -DT1 -DT2 -DT3 -DT4 -DT5 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_create.c/acc_create.c6 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_create.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004992967005819082
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_create_async.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -DT2 -DT3 -DT4 -DT5 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_create_async.c/acc_create_async.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_create_async.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005027328850701451
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT2 -DT3 -DT4 -DT5 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_create_async.c/acc_create_async.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_create_async.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004934930009767413
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -DT3 -DT4 -DT5 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_create_async.c/acc_create_async.c2 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_create_async.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004893584875389934
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -DT2 -DT4 -DT5 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_create_async.c/acc_create_async.c3 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_create_async.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005297542084008455
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -DT2 -DT3 -DT5 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_create_async.c/acc_create_async.c4 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_create_async.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.0046582219656556845
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -DT2 -DT3 -DT4 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_create_async.c/acc_create_async.c5 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_create_async.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.0050054690800607204
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT5 -DT1 -DT2 -DT3 -DT4 -DT5 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_create_async.c/acc_create_async.c6 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_create_async.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005324150901287794
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_delete.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_delete.c/acc_delete.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_delete.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005323732038959861
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_delete.c/acc_delete.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_delete.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005641225958243012
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT2 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_delete.c/acc_delete.c2 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_delete.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005847116932272911
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_delete.c/acc_delete.c3 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_delete.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005593805108219385
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_delete_async.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_delete_async.c/acc_delete_async.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_delete_async.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.010204395977780223
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_delete_async.c/acc_delete_async.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_delete_async.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.009897446958348155
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT2 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_delete_async.c/acc_delete_async.c2 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_delete_async.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.010292673949152231
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_delete_async.c/acc_delete_async.c3 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_delete_async.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.006359047023579478
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_delete_finalize.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_delete_finalize.c/acc_delete_finalize.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_delete_finalize.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004908948903903365
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_delete_finalize.c/acc_delete_finalize.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_delete_finalize.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005241948878392577
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT2 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_delete_finalize.c/acc_delete_finalize.c2 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_delete_finalize.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004957210039719939
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_delete_finalize.c/acc_delete_finalize.c3 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_delete_finalize.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005861643934622407
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_delete_finalize_async.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_delete_finalize_async.c/acc_delete_finalize_async.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_delete_finalize_async.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.010461130179464817
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_delete_finalize_async.c/acc_delete_finalize_async.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_delete_finalize_async.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.010122403036803007
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT2 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_delete_finalize_async.c/acc_delete_finalize_async.c2 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_delete_finalize_async.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.009897655807435513
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_delete_finalize_async.c/acc_delete_finalize_async.c3 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_delete_finalize_async.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.009850164875388145
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_deviceptr.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_deviceptr.c/acc_deviceptr.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_deviceptr.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005638362839818001
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_deviceptr.c/acc_deviceptr.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_deviceptr.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005070490995422006
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_free.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_free.c/acc_free.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_free.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.00482297595590353
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_free.c/acc_free.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_free.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004943799925968051
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_get_default_async.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_get_default_async.c/acc_get_default_async.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_get_default_async.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.00590850692242384
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_get_default_async.c/acc_get_default_async.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_get_default_async.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005382817005738616
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_get_device_num.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_get_device_num.c/acc_get_device_num.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_get_device_num.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005617761053144932
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_get_device_num.c/acc_get_device_num.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_get_device_num.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005403907969594002
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_get_device_type.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_get_device_type.c/acc_get_device_type.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_get_device_type.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005349921993911266
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_get_device_type.c/acc_get_device_type.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_get_device_type.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004904967965558171
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_get_num_devices.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_get_num_devices.c/acc_get_num_devices.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_get_num_devices.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004929134156554937
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_get_num_devices.c/acc_get_num_devices.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_get_num_devices.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.00501811015419662
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_get_property.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_get_property.c/acc_get_property.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_get_property.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005479476880282164
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_get_property.c/acc_get_property.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_get_property.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005378347123041749
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_hostptr.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_hostptr.c/acc_hostptr.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_hostptr.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005599042866379023
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_hostptr.c/acc_hostptr.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_hostptr.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005312418099492788
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_init.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_init.c/acc_init.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_init.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005509576993063092
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_init.c/acc_init.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_init.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005352786043658853
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_is_present.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_is_present.c/acc_is_present.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_is_present.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005360746989026666
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_is_present.c/acc_is_present.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_is_present.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004882897948846221
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_malloc.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_malloc.c/acc_malloc.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_malloc.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.0050503769889473915
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_malloc.c/acc_malloc.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_malloc.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005786634981632233
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_map_data.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_map_data.c/acc_map_data.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_map_data.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.009923218050971627
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_map_data.c/acc_map_data.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_map_data.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.01006534299813211
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT2 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_map_data.c/acc_map_data.c2 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_map_data.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.00997510994784534
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_map_data.c/acc_map_data.c3 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_map_data.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.009984329110011458
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT3 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_map_data.c/acc_map_data.c4 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_map_data.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005933858919888735
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_map_data.c/acc_map_data.c5 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_map_data.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005030052037909627
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT2 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_map_data.c/acc_map_data.c6 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_map_data.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.0061890550423413515
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_map_data.c/acc_map_data.c7 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_map_data.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005228469846770167
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_memcpy_device.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_memcpy_device.c/acc_memcpy_device.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_memcpy_device.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.0050815248396247625
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_memcpy_device.c/acc_memcpy_device.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_memcpy_device.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005632007960230112
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_memcpy_from_device.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_memcpy_from_device.c/acc_memcpy_from_device.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_memcpy_from_device.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.0050639251712709665
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_memcpy_from_device.c/acc_memcpy_from_device.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_memcpy_from_device.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004933252930641174
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_memcpy_from_device_async.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_memcpy_from_device_async.c/acc_memcpy_from_device_async.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_memcpy_from_device_async.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005162050947546959
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_memcpy_from_device_async.c/acc_memcpy_from_device_async.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_memcpy_from_device_async.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004938841098919511
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_memcpy_to_device.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_memcpy_to_device.c/acc_memcpy_to_device.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_memcpy_to_device.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004877171944826841
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_memcpy_to_device.c/acc_memcpy_to_device.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_memcpy_to_device.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005351948086172342
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_memcpy_to_device_async.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_memcpy_to_device_async.c/acc_memcpy_to_device_async.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_memcpy_to_device_async.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005144382128491998
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_memcpy_to_device_async.c/acc_memcpy_to_device_async.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_memcpy_to_device_async.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004962726030498743
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_on_device.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_on_device.c/acc_on_device.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_on_device.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005652331048622727
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_on_device.c/acc_on_device.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_on_device.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005822394043207169
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_set_default_async.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_set_default_async.c/acc_set_default_async.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_set_default_async.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005469768075272441
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_set_default_async.c/acc_set_default_async.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_set_default_async.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.00560225616209209
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_set_device_num.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_set_device_num.c/acc_set_device_num.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_set_device_num.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005232659867033362
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_set_device_num.c/acc_set_device_num.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_set_device_num.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005217714002355933
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_set_device_type.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_set_device_type.c/acc_set_device_type.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_set_device_type.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005457754945382476
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_set_device_type.c/acc_set_device_type.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_set_device_type.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004727083956822753
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_shutdown.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_shutdown.c/acc_shutdown.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_shutdown.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004777998197823763
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_shutdown.c/acc_shutdown.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_shutdown.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.00492508290335536
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_unmap_data.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_unmap_data.c/acc_unmap_data.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_unmap_data.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005748501978814602
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_unmap_data.c/acc_unmap_data.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_unmap_data.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005692979088053107
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT2 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_unmap_data.c/acc_unmap_data.c2 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_unmap_data.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005183142842724919
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_unmap_data.c/acc_unmap_data.c3 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_unmap_data.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005172527860850096
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT3 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_unmap_data.c/acc_unmap_data.c4 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_unmap_data.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005337351001799107
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_unmap_data.c/acc_unmap_data.c5 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_unmap_data.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005263250088319182
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT2 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_unmap_data.c/acc_unmap_data.c6 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_unmap_data.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005448817042633891
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_unmap_data.c/acc_unmap_data.c7 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_unmap_data.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.0054446260910481215
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_update_device.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_update_device.c/acc_update_device.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_update_device.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005464809015393257
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_update_device.c/acc_update_device.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_update_device.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004767103819176555
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT2 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_update_device.c/acc_update_device.c2 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_update_device.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004953157855197787
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_update_device.c/acc_update_device.c3 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_update_device.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005014758091419935
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_update_device_async.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_update_device_async.c/acc_update_device_async.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_update_device_async.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005691512022167444
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_update_device_async.c/acc_update_device_async.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_update_device_async.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.00567649700678885
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT2 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_update_device_async.c/acc_update_device_async.c2 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_update_device_async.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005629634018987417
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_update_device_async.c/acc_update_device_async.c3 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_update_device_async.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005626281024888158
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_update_self.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_update_self.c/acc_update_self.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_update_self.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005260945064947009
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_update_self.c/acc_update_self.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_update_self.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005359281087294221
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT2 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_update_self.c/acc_update_self.c2 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_update_self.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005310531938448548
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_update_self.c/acc_update_self.c3 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_update_self.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005301731871441007
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_update_self_async.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_update_self_async.c/acc_update_self_async.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_update_self_async.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005037246970459819
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_update_self_async.c/acc_update_self_async.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_update_self_async.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004737281007692218
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT2 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_update_self_async.c/acc_update_self_async.c2 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_update_self_async.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004712696885690093
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_update_self_async.c/acc_update_self_async.c3 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_update_self_async.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004764869110658765
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_wait.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_wait.c/acc_wait.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_wait.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005264576990157366
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_wait.c/acc_wait.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_wait.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005230356007814407
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_wait_all.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_wait_all.c/acc_wait_all.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_wait_all.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005230844020843506
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_wait_all.c/acc_wait_all.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_wait_all.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004973551025614142
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_wait_all_async.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_wait_all_async.c/acc_wait_all_async.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_wait_all_async.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.0050484901294112206
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_wait_all_async.c/acc_wait_all_async.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_wait_all_async.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004950363887473941
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_wait_async.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_wait_async.c/acc_wait_async.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_wait_async.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005075728055089712
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_wait_async.c/acc_wait_async.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_wait_async.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004939120961353183
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_bitand_equals.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_bitand_equals.c/atomic_bitand_equals.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_bitand_equals.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005065392004325986
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_bitand_equals.c/atomic_bitand_equals.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_bitand_equals.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004610661184415221
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_bitor_equals.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_bitor_equals.c/atomic_bitor_equals.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_bitor_equals.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005030052969232202
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_bitor_equals.c/atomic_bitor_equals.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_bitor_equals.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004629865987226367
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_bitxor_equals.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_bitxor_equals.c/atomic_bitxor_equals.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_bitxor_equals.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004819623893126845
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_bitxor_equals.c/atomic_bitxor_equals.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_bitxor_equals.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.009686039993539453
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_bitand_equals.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_capture_bitand_equals.c/atomic_capture_bitand_equals.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_bitand_equals.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005821764934808016
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_capture_bitand_equals.c/atomic_capture_bitand_equals.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_bitand_equals.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004645581124350429
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_bitor_equals.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_capture_bitor_equals.c/atomic_capture_bitor_equals.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_bitor_equals.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.009972944157198071
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_capture_bitor_equals.c/atomic_capture_bitor_equals.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_bitor_equals.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005044718971475959
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_bitxor_equals.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_capture_bitxor_equals.c/atomic_capture_bitxor_equals.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_bitxor_equals.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.010069325100630522
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_capture_bitxor_equals.c/atomic_capture_bitxor_equals.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_bitxor_equals.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.010263759875670075
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_divided_equals.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_capture_divided_equals.c/atomic_capture_divided_equals.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_divided_equals.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.010558977024629712
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_capture_divided_equals.c/atomic_capture_divided_equals.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_divided_equals.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.010141679085791111
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_expr_bitand_x.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_capture_expr_bitand_x.c/atomic_capture_expr_bitand_x.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_bitand_x.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005109600955620408
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_capture_expr_bitand_x.c/atomic_capture_expr_bitand_x.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_bitand_x.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004982979968190193
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_expr_bitor_x.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_capture_expr_bitor_x.c/atomic_capture_expr_bitor_x.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_bitor_x.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005744870053604245
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_capture_expr_bitor_x.c/atomic_capture_expr_bitor_x.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_bitor_x.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005593735026195645
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_expr_bitxor_x.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_capture_expr_bitxor_x.c/atomic_capture_expr_bitxor_x.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_bitxor_x.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005337210837751627
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_capture_expr_bitxor_x.c/atomic_capture_expr_bitxor_x.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_bitxor_x.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.00583866611123085
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_expr_divided_x.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_capture_expr_divided_x.c/atomic_capture_expr_divided_x.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_divided_x.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.0054994511883705854
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_capture_expr_divided_x.c/atomic_capture_expr_divided_x.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_divided_x.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.0050275379326194525
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_expr_lshift_x.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_capture_expr_lshift_x.c/atomic_capture_expr_lshift_x.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_lshift_x.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005158769199624658
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_capture_expr_lshift_x.c/atomic_capture_expr_lshift_x.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_lshift_x.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.0053290389478206635
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_expr_minus_x.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_capture_expr_minus_x.c/atomic_capture_expr_minus_x.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_minus_x.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005029143998399377
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_capture_expr_minus_x.c/atomic_capture_expr_minus_x.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_minus_x.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004993665963411331
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_expr_multiply_x.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_capture_expr_multiply_x.c/atomic_capture_expr_multiply_x.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_multiply_x.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005822113947942853
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_capture_expr_multiply_x.c/atomic_capture_expr_multiply_x.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_multiply_x.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005336232949048281
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_expr_plus_x.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_capture_expr_plus_x.c/atomic_capture_expr_plus_x.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_plus_x.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005240062950178981
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_capture_expr_plus_x.c/atomic_capture_expr_plus_x.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_plus_x.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005390220088884234
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_expr_rshift_x.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_capture_expr_rshift_x.c/atomic_capture_expr_rshift_x.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_rshift_x.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005410264944657683
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_capture_expr_rshift_x.c/atomic_capture_expr_rshift_x.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_rshift_x.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005075728055089712
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_lshift_equals.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_capture_lshift_equals.c/atomic_capture_lshift_equals.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_lshift_equals.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004992967005819082
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_capture_lshift_equals.c/atomic_capture_lshift_equals.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_lshift_equals.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004938492085784674
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_minus_equals.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_capture_minus_equals.c/atomic_capture_minus_equals.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_minus_equals.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005092768929898739
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_capture_minus_equals.c/atomic_capture_minus_equals.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_minus_equals.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004997088108211756
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_multiply_equals.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_capture_multiply_equals.c/atomic_capture_multiply_equals.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_multiply_equals.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005549805937334895
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_capture_multiply_equals.c/atomic_capture_multiply_equals.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_multiply_equals.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.009747708914801478
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_plus_equals.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_capture_plus_equals.c/atomic_capture_plus_equals.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_plus_equals.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.009825929999351501
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_capture_plus_equals.c/atomic_capture_plus_equals.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_plus_equals.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005962213966995478
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_postdecrement.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_capture_postdecrement.c/atomic_capture_postdecrement.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_postdecrement.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005686274031177163
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_capture_postdecrement.c/atomic_capture_postdecrement.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_postdecrement.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004830449121072888
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_postincrement.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_capture_postincrement.c/atomic_capture_postincrement.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_postincrement.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005120635963976383
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_capture_postincrement.c/atomic_capture_postincrement.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_postincrement.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005646744975820184
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_predecrement.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_capture_predecrement.c/atomic_capture_predecrement.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_predecrement.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.0057627500500530005
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_capture_predecrement.c/atomic_capture_predecrement.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_predecrement.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005840481957420707
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_preincrement.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_capture_preincrement.c/atomic_capture_preincrement.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_preincrement.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.010297982953488827
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_capture_preincrement.c/atomic_capture_preincrement.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_preincrement.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.010396736906841397
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_rshift_equals.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_capture_rshift_equals.c/atomic_capture_rshift_equals.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_rshift_equals.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.0054758451879024506
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_capture_rshift_equals.c/atomic_capture_rshift_equals.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_rshift_equals.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.0050290049985051155
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_divided_equals.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_divided_equals.c/atomic_divided_equals.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_divided_equals.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004989685025066137
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_divided_equals.c/atomic_divided_equals.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_divided_equals.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005705549847334623
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_expr_bitand_x.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_expr_bitand_x.c/atomic_expr_bitand_x.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_bitand_x.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005537025164812803
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_expr_bitand_x.c/atomic_expr_bitand_x.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_bitand_x.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005632007960230112
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_expr_bitor_x.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_expr_bitor_x.c/atomic_expr_bitor_x.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_bitor_x.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005313395988196135
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_expr_bitor_x.c/atomic_expr_bitor_x.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_bitor_x.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005305154016241431
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_expr_bitxor_x.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_expr_bitxor_x.c/atomic_expr_bitxor_x.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_bitxor_x.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005186145892366767
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_expr_bitxor_x.c/atomic_expr_bitxor_x.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_bitxor_x.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004956091986969113
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_expr_divided_x.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_expr_divided_x.c/atomic_expr_divided_x.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_divided_x.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005036758026108146
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_expr_divided_x.c/atomic_expr_divided_x.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_divided_x.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004674773896113038
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_expr_lshift_x.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_expr_lshift_x.c/atomic_expr_lshift_x.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_lshift_x.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005429469980299473
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_expr_lshift_x.c/atomic_expr_lshift_x.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_lshift_x.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005343915894627571
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_expr_minus_x.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_expr_minus_x.c/atomic_expr_minus_x.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_minus_x.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.0051309720147401094
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_expr_minus_x.c/atomic_expr_minus_x.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_minus_x.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.0053891020361334085
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_expr_multiply_x.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_expr_multiply_x.c/atomic_expr_multiply_x.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_multiply_x.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005427166121080518
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_expr_multiply_x.c/atomic_expr_multiply_x.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_multiply_x.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.0051137220580130816
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_expr_plus_x.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_expr_plus_x.c/atomic_expr_plus_x.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_plus_x.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004551365971565247
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_expr_plus_x.c/atomic_expr_plus_x.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_plus_x.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004880174994468689
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_expr_rshift_x.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_expr_rshift_x.c/atomic_expr_rshift_x.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_rshift_x.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004860271001234651
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_expr_rshift_x.c/atomic_expr_rshift_x.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_rshift_x.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004828142933547497
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_lshift_equals.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_lshift_equals.c/atomic_lshift_equals.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_lshift_equals.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.00543589610606432
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_lshift_equals.c/atomic_lshift_equals.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_lshift_equals.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.0058787548914551735
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_minus_equals.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_minus_equals.c/atomic_minus_equals.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_minus_equals.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005774273071438074
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_minus_equals.c/atomic_minus_equals.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_minus_equals.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005755626130849123
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_multiply_equals.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_multiply_equals.c/atomic_multiply_equals.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_multiply_equals.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.0056682550348341465
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_multiply_equals.c/atomic_multiply_equals.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_multiply_equals.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005227491958066821
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_plus_equals.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_plus_equals.c/atomic_plus_equals.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_plus_equals.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005201651016250253
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_plus_equals.c/atomic_plus_equals.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_plus_equals.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005142495967447758
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_postdecrement.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_postdecrement.c/atomic_postdecrement.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_postdecrement.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.00486690504476428
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_postdecrement.c/atomic_postdecrement.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_postdecrement.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.00563584896735847
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_postincrement.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_postincrement.c/atomic_postincrement.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_postincrement.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005513697862625122
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_postincrement.c/atomic_postincrement.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_postincrement.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005333230132237077
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_predecrement.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_predecrement.c/atomic_predecrement.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_predecrement.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005294329021126032
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_predecrement.c/atomic_predecrement.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_predecrement.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.0053938517812639475
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_preincrement.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_preincrement.c/atomic_preincrement.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_preincrement.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005455730948597193
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_preincrement.c/atomic_preincrement.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_preincrement.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005160165019333363
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_rshift_equals.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_rshift_equals.c/atomic_rshift_equals.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_rshift_equals.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004856290062889457
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_rshift_equals.c/atomic_rshift_equals.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_rshift_equals.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004773179069161415
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_structured_assign_assign.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_structured_assign_assign.c/atomic_structured_assign_assign.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_structured_assign_assign.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.010086644906550646
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_structured_assign_assign.c/atomic_structured_assign_assign.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_structured_assign_assign.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.010027490090578794
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_structured_assign_bitand_equals.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_structured_assign_bitand_equals.c/atomic_structured_assign_bitand_equals.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_structured_assign_bitand_equals.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.009930900065228343
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_structured_assign_bitand_equals.c/atomic_structured_assign_bitand_equals.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_structured_assign_bitand_equals.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.009884316939860582
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_structured_assign_bitor_equals.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_structured_assign_bitor_equals.c/atomic_structured_assign_bitor_equals.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_structured_assign_bitor_equals.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005173644982278347
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_structured_assign_bitor_equals.c/atomic_structured_assign_bitor_equals.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_structured_assign_bitor_equals.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004933184012770653
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_structured_assign_bitxor_equals.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_structured_assign_bitxor_equals.c/atomic_structured_assign_bitxor_equals.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_structured_assign_bitxor_equals.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004804887110367417
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_structured_assign_bitxor_equals.c/atomic_structured_assign_bitxor_equals.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_structured_assign_bitxor_equals.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004722055979073048
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_structured_assign_divided_equals.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_structured_assign_divided_equals.c/atomic_structured_assign_divided_equals.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_structured_assign_divided_equals.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.0057890089228749275
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_structured_assign_divided_equals.c/atomic_structured_assign_divided_equals.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_structured_assign_divided_equals.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005274635041132569
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_structured_assign_expr_bitand_x.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_structured_assign_expr_bitand_x.c/atomic_structured_assign_expr_bitand_x.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_structured_assign_expr_bitand_x.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.0055476410780102015
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_structured_assign_expr_bitand_x.c/atomic_structured_assign_expr_bitand_x.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_structured_assign_expr_bitand_x.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.00555504416115582
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_structured_assign_expr_bitor_x.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_structured_assign_expr_bitor_x.c/atomic_structured_assign_expr_bitor_x.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_structured_assign_expr_bitor_x.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005614477908238769
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_structured_assign_expr_bitor_x.c/atomic_structured_assign_expr_bitor_x.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_structured_assign_expr_bitor_x.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005135092884302139
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_structured_assign_expr_bitxor_x.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_structured_assign_expr_bitxor_x.c/atomic_structured_assign_expr_bitxor_x.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_structured_assign_expr_bitxor_x.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.00479112914763391
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_structured_assign_expr_bitxor_x.c/atomic_structured_assign_expr_bitxor_x.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_structured_assign_expr_bitxor_x.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005026560043916106
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_structured_assign_expr_divided_x.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_structured_assign_expr_divided_x.c/atomic_structured_assign_expr_divided_x.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_structured_assign_expr_divided_x.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.00565889710560441
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_structured_assign_expr_divided_x.c/atomic_structured_assign_expr_divided_x.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_structured_assign_expr_divided_x.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005570478970184922
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_structured_assign_expr_multiply_x.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_structured_assign_expr_multiply_x.c/atomic_structured_assign_expr_multiply_x.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_structured_assign_expr_multiply_x.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005606726044788957
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_structured_assign_expr_multiply_x.c/atomic_structured_assign_expr_multiply_x.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_structured_assign_expr_multiply_x.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005794666009023786
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_structured_assign_expr_plus_x.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_structured_assign_expr_plus_x.c/atomic_structured_assign_expr_plus_x.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_structured_assign_expr_plus_x.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.00540390913374722
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_structured_assign_expr_plus_x.c/atomic_structured_assign_expr_plus_x.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_structured_assign_expr_plus_x.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.00528559903614223
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_structured_assign_lshift_equals.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_structured_assign_lshift_equals.c/atomic_structured_assign_lshift_equals.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_structured_assign_lshift_equals.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.00530857709236443
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_structured_assign_lshift_equals.c/atomic_structured_assign_lshift_equals.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_structured_assign_lshift_equals.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005108135053887963
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_structured_assign_minus_equals.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_structured_assign_minus_equals.c/atomic_structured_assign_minus_equals.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_structured_assign_minus_equals.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.0050502370577305555
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_structured_assign_minus_equals.c/atomic_structured_assign_minus_equals.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_structured_assign_minus_equals.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.00492759607732296
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_structured_assign_multiply_equals.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_structured_assign_multiply_equals.c/atomic_structured_assign_multiply_equals.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_structured_assign_multiply_equals.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.00583419599570334
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_structured_assign_multiply_equals.c/atomic_structured_assign_multiply_equals.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_structured_assign_multiply_equals.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.0053673130460083485
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_structured_assign_plus_equals.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_structured_assign_plus_equals.c/atomic_structured_assign_plus_equals.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_structured_assign_plus_equals.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005302431061863899
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_structured_assign_plus_equals.c/atomic_structured_assign_plus_equals.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_structured_assign_plus_equals.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.0053970650769770145
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_structured_assign_postdecrement.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_structured_assign_postdecrement.c/atomic_structured_assign_postdecrement.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_structured_assign_postdecrement.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005376322194933891
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_structured_assign_postdecrement.c/atomic_structured_assign_postdecrement.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_structured_assign_postdecrement.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.0055996018927544355
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_structured_assign_postincrement.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_structured_assign_postincrement.c/atomic_structured_assign_postincrement.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_structured_assign_postincrement.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.00532526895403862
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_structured_assign_postincrement.c/atomic_structured_assign_postincrement.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_structured_assign_postincrement.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005466625792905688
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_structured_assign_predecrement.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_structured_assign_predecrement.c/atomic_structured_assign_predecrement.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_structured_assign_predecrement.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005629564169794321
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_structured_assign_predecrement.c/atomic_structured_assign_predecrement.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_structured_assign_predecrement.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005705410148948431
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_structured_assign_preincrement.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_structured_assign_preincrement.c/atomic_structured_assign_preincrement.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_structured_assign_preincrement.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.006052587879821658
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_structured_assign_preincrement.c/atomic_structured_assign_preincrement.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_structured_assign_preincrement.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.009876633994281292
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_structured_assign_rshift_equals.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_structured_assign_rshift_equals.c/atomic_structured_assign_rshift_equals.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_structured_assign_rshift_equals.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.010259221075102687
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_structured_assign_rshift_equals.c/atomic_structured_assign_rshift_equals.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_structured_assign_rshift_equals.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.0057605840265750885
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_structured_assign_x_bitand_expr.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_structured_assign_x_bitand_expr.c/atomic_structured_assign_x_bitand_expr.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_structured_assign_x_bitand_expr.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.0050850179977715015
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_structured_assign_x_bitand_expr.c/atomic_structured_assign_x_bitand_expr.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_structured_assign_x_bitand_expr.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004958536010235548
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_structured_assign_x_bitor_expr.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_structured_assign_x_bitor_expr.c/atomic_structured_assign_x_bitor_expr.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_structured_assign_x_bitor_expr.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.00575325102545321
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_structured_assign_x_bitor_expr.c/atomic_structured_assign_x_bitor_expr.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_structured_assign_x_bitor_expr.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005516631994396448
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_structured_assign_x_bitxor_expr.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_structured_assign_x_bitxor_expr.c/atomic_structured_assign_x_bitxor_expr.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_structured_assign_x_bitxor_expr.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005161911016330123
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_structured_assign_x_bitxor_expr.c/atomic_structured_assign_x_bitxor_expr.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_structured_assign_x_bitxor_expr.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005744590889662504
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_structured_assign_x_divided_expr.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_structured_assign_x_divided_expr.c/atomic_structured_assign_x_divided_expr.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_structured_assign_x_divided_expr.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.0056770548690110445
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_structured_assign_x_divided_expr.c/atomic_structured_assign_x_divided_expr.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_structured_assign_x_divided_expr.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005733206868171692
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_structured_assign_x_lshift_expr.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_structured_assign_x_lshift_expr.c/atomic_structured_assign_x_lshift_expr.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_structured_assign_x_lshift_expr.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005042205099016428
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_structured_assign_x_lshift_expr.c/atomic_structured_assign_x_lshift_expr.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_structured_assign_x_lshift_expr.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004773878026753664
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_structured_assign_x_minus_expr.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_structured_assign_x_minus_expr.c/atomic_structured_assign_x_minus_expr.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_structured_assign_x_minus_expr.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005113581893965602
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_structured_assign_x_minus_expr.c/atomic_structured_assign_x_minus_expr.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_structured_assign_x_minus_expr.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005285180173814297
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_structured_assign_x_multiply_expr.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_structured_assign_x_multiply_expr.c/atomic_structured_assign_x_multiply_expr.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_structured_assign_x_multiply_expr.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005660084076225758
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_structured_assign_x_multiply_expr.c/atomic_structured_assign_x_multiply_expr.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_structured_assign_x_multiply_expr.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.0052419479470700026
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_structured_assign_x_plus_expr.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_structured_assign_x_plus_expr.c/atomic_structured_assign_x_plus_expr.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_structured_assign_x_plus_expr.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005415920866653323
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_structured_assign_x_plus_expr.c/atomic_structured_assign_x_plus_expr.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_structured_assign_x_plus_expr.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005554415052756667
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_structured_assign_x_rshift_expr.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_structured_assign_x_rshift_expr.c/atomic_structured_assign_x_rshift_expr.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_structured_assign_x_rshift_expr.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005391546990722418
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_structured_assign_x_rshift_expr.c/atomic_structured_assign_x_rshift_expr.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_structured_assign_x_rshift_expr.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005165403010323644
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_structured_bitand_equals_assign.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_structured_bitand_equals_assign.c/atomic_structured_bitand_equals_assign.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_structured_bitand_equals_assign.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.0048293310683220625
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_structured_bitand_equals_assign.c/atomic_structured_bitand_equals_assign.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_structured_bitand_equals_assign.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005039341049268842
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_structured_bitor_equals_assign.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_structured_bitor_equals_assign.c/atomic_structured_bitor_equals_assign.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_structured_bitor_equals_assign.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005221485858783126
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_structured_bitor_equals_assign.c/atomic_structured_bitor_equals_assign.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_structured_bitor_equals_assign.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005563215119764209
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_structured_bitxor_equals_assign.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_structured_bitxor_equals_assign.c/atomic_structured_bitxor_equals_assign.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_structured_bitxor_equals_assign.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005506505025550723
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_structured_bitxor_equals_assign.c/atomic_structured_bitxor_equals_assign.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_structured_bitxor_equals_assign.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.01009914604946971
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_structured_divided_equals_assign.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_structured_divided_equals_assign.c/atomic_structured_divided_equals_assign.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_structured_divided_equals_assign.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.009901428129523993
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_structured_divided_equals_assign.c/atomic_structured_divided_equals_assign.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_structured_divided_equals_assign.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.010204185964539647
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_structured_expr_bitand_x_assign.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_structured_expr_bitand_x_assign.c/atomic_structured_expr_bitand_x_assign.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_structured_expr_bitand_x_assign.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.009691487066447735
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_structured_expr_bitand_x_assign.c/atomic_structured_expr_bitand_x_assign.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_structured_expr_bitand_x_assign.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.0051282490603625774
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_structured_expr_bitor_x_assign.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_structured_expr_bitor_x_assign.c/atomic_structured_expr_bitor_x_assign.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_structured_expr_bitor_x_assign.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.009914417983964086
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_structured_expr_bitor_x_assign.c/atomic_structured_expr_bitor_x_assign.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_structured_expr_bitor_x_assign.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.010079939849674702
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_structured_expr_bitxor_x_assign.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_structured_expr_bitxor_x_assign.c/atomic_structured_expr_bitxor_x_assign.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_structured_expr_bitxor_x_assign.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.010311460820958018
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_structured_expr_bitxor_x_assign.c/atomic_structured_expr_bitxor_x_assign.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_structured_expr_bitxor_x_assign.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.010098308091983199
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_structured_expr_multiply_x_assign.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_structured_expr_multiply_x_assign.c/atomic_structured_expr_multiply_x_assign.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_structured_expr_multiply_x_assign.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.0054211600217968225
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_structured_expr_multiply_x_assign.c/atomic_structured_expr_multiply_x_assign.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_structured_expr_multiply_x_assign.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005002186866477132
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_structured_expr_plus_x_assign.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_structured_expr_plus_x_assign.c/atomic_structured_expr_plus_x_assign.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_structured_expr_plus_x_assign.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004954625153914094
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_structured_expr_plus_x_assign.c/atomic_structured_expr_plus_x_assign.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_structured_expr_plus_x_assign.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005866531981155276
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_structured_lshift_equals_assign.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_structured_lshift_equals_assign.c/atomic_structured_lshift_equals_assign.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_structured_lshift_equals_assign.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005495609948411584
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_structured_lshift_equals_assign.c/atomic_structured_lshift_equals_assign.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_structured_lshift_equals_assign.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005411660997197032
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_structured_minus_equals_assign.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_structured_minus_equals_assign.c/atomic_structured_minus_equals_assign.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_structured_minus_equals_assign.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.010340444976463914
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_structured_minus_equals_assign.c/atomic_structured_minus_equals_assign.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_structured_minus_equals_assign.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.010193641064688563
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_structured_multiply_equals_assign.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_structured_multiply_equals_assign.c/atomic_structured_multiply_equals_assign.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_structured_multiply_equals_assign.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.006347384070977569
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_structured_multiply_equals_assign.c/atomic_structured_multiply_equals_assign.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_structured_multiply_equals_assign.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.009839619044214487
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_structured_plus_equals_assign.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_structured_plus_equals_assign.c/atomic_structured_plus_equals_assign.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_structured_plus_equals_assign.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.009703220101073384
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_structured_plus_equals_assign.c/atomic_structured_plus_equals_assign.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_structured_plus_equals_assign.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.009874679148197174
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_structured_postdecrement_assign.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_structured_postdecrement_assign.c/atomic_structured_postdecrement_assign.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_structured_postdecrement_assign.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.009935860056430101
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_structured_postdecrement_assign.c/atomic_structured_postdecrement_assign.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_structured_postdecrement_assign.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.01000060117803514
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_structured_postincrement_assign.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_structured_postincrement_assign.c/atomic_structured_postincrement_assign.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_structured_postincrement_assign.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.006046860944479704
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_structured_postincrement_assign.c/atomic_structured_postincrement_assign.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_structured_postincrement_assign.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004993596114218235
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_structured_predecrement_assign.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_structured_predecrement_assign.c/atomic_structured_predecrement_assign.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_structured_predecrement_assign.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005003234138712287
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_structured_predecrement_assign.c/atomic_structured_predecrement_assign.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_structured_predecrement_assign.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.0048733309376984835
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_structured_preincrement_assign.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_structured_preincrement_assign.c/atomic_structured_preincrement_assign.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_structured_preincrement_assign.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005714769009500742
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_structured_preincrement_assign.c/atomic_structured_preincrement_assign.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_structured_preincrement_assign.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005430588033050299
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_structured_rshift_equals_assign.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_structured_rshift_equals_assign.c/atomic_structured_rshift_equals_assign.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_structured_rshift_equals_assign.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005006027175113559
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_structured_rshift_equals_assign.c/atomic_structured_rshift_equals_assign.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_structured_rshift_equals_assign.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005027048988267779
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_structured_x_bitand_expr_assign.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_structured_x_bitand_expr_assign.c/atomic_structured_x_bitand_expr_assign.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_structured_x_bitand_expr_assign.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004909856943413615
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_structured_x_bitand_expr_assign.c/atomic_structured_x_bitand_expr_assign.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_structured_x_bitand_expr_assign.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004794551059603691
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_structured_x_bitor_expr_assign.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_structured_x_bitor_expr_assign.c/atomic_structured_x_bitor_expr_assign.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_structured_x_bitor_expr_assign.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005568803055211902
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_structured_x_bitor_expr_assign.c/atomic_structured_x_bitor_expr_assign.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_structured_x_bitor_expr_assign.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005320379976183176
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_structured_x_bitxor_expr_assign.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_structured_x_bitxor_expr_assign.c/atomic_structured_x_bitxor_expr_assign.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_structured_x_bitxor_expr_assign.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.00522644491866231
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_structured_x_bitxor_expr_assign.c/atomic_structured_x_bitxor_expr_assign.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_structured_x_bitxor_expr_assign.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.00534147210419178
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_structured_x_divided_expr_assign.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_structured_x_divided_expr_assign.c/atomic_structured_x_divided_expr_assign.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_structured_x_divided_expr_assign.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005296075018122792
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_structured_x_divided_expr_assign.c/atomic_structured_x_divided_expr_assign.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_structured_x_divided_expr_assign.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.0051999748684465885
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_structured_x_lshift_expr_assign.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_structured_x_lshift_expr_assign.c/atomic_structured_x_lshift_expr_assign.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_structured_x_lshift_expr_assign.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005151086021214724
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_structured_x_lshift_expr_assign.c/atomic_structured_x_lshift_expr_assign.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_structured_x_lshift_expr_assign.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005166939925402403
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_structured_x_minus_expr_assign.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_structured_x_minus_expr_assign.c/atomic_structured_x_minus_expr_assign.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_structured_x_minus_expr_assign.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004732462111860514
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_structured_x_minus_expr_assign.c/atomic_structured_x_minus_expr_assign.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_structured_x_minus_expr_assign.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004855940118432045
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_structured_x_multiply_expr_assign.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_structured_x_multiply_expr_assign.c/atomic_structured_x_multiply_expr_assign.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_structured_x_multiply_expr_assign.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004903641063719988
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_structured_x_multiply_expr_assign.c/atomic_structured_x_multiply_expr_assign.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_structured_x_multiply_expr_assign.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004869768861681223
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_structured_x_plus_expr_assign.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_structured_x_plus_expr_assign.c/atomic_structured_x_plus_expr_assign.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_structured_x_plus_expr_assign.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005543939070776105
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_structured_x_plus_expr_assign.c/atomic_structured_x_plus_expr_assign.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_structured_x_plus_expr_assign.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004768500104546547
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_structured_x_rshift_expr_assign.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_structured_x_rshift_expr_assign.c/atomic_structured_x_rshift_expr_assign.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_structured_x_rshift_expr_assign.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005271701142191887
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_structured_x_rshift_expr_assign.c/atomic_structured_x_rshift_expr_assign.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_structured_x_rshift_expr_assign.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.0050155960489064455
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_bitand_equals.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_update_bitand_equals.c/atomic_update_bitand_equals.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_bitand_equals.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.010343169094994664
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_update_bitand_equals.c/atomic_update_bitand_equals.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_bitand_equals.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.006014873972162604
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_bitor_equals.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_update_bitor_equals.c/atomic_update_bitor_equals.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_bitor_equals.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004815012915059924
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_update_bitor_equals.c/atomic_update_bitor_equals.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_bitor_equals.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005035988986492157
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_bitxor_equals.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_update_bitxor_equals.c/atomic_update_bitxor_equals.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_bitxor_equals.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.0054683019407093525
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_update_bitxor_equals.c/atomic_update_bitxor_equals.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_bitxor_equals.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005569081986322999
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_divided_equals.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_update_divided_equals.c/atomic_update_divided_equals.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_divided_equals.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.00586282997392118
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_update_divided_equals.c/atomic_update_divided_equals.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_divided_equals.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005377159919589758
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_expr_bitand_x.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_update_expr_bitand_x.c/atomic_update_expr_bitand_x.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_bitand_x.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005144940922036767
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_update_expr_bitand_x.c/atomic_update_expr_bitand_x.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_bitand_x.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005242436891421676
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_expr_bitor_x.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_update_expr_bitor_x.c/atomic_update_expr_bitor_x.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_bitor_x.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.0053215669468045235
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_update_expr_bitor_x.c/atomic_update_expr_bitor_x.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_bitor_x.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.0050246750470250845
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_expr_bitxor_x.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_update_expr_bitxor_x.c/atomic_update_expr_bitxor_x.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_bitxor_x.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004977602977305651
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_update_expr_bitxor_x.c/atomic_update_expr_bitxor_x.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_bitxor_x.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.0051798599306494
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_expr_divided_x.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_update_expr_divided_x.c/atomic_update_expr_divided_x.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_divided_x.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005724546033889055
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_update_expr_divided_x.c/atomic_update_expr_divided_x.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_divided_x.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005256964126601815
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_expr_lshift_x.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_update_expr_lshift_x.c/atomic_update_expr_lshift_x.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_lshift_x.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005174483172595501
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_update_expr_lshift_x.c/atomic_update_expr_lshift_x.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_lshift_x.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004921381128951907
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_expr_minus_x.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_update_expr_minus_x.c/atomic_update_expr_minus_x.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_minus_x.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005779580911621451
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_update_expr_minus_x.c/atomic_update_expr_minus_x.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_minus_x.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005753041943535209
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_expr_multiply_x.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_update_expr_multiply_x.c/atomic_update_expr_multiply_x.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_multiply_x.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.0052894409745931625
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_update_expr_multiply_x.c/atomic_update_expr_multiply_x.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_multiply_x.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.0054048169404268265
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_expr_plus_x.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_update_expr_plus_x.c/atomic_update_expr_plus_x.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_plus_x.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005318912910297513
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_update_expr_plus_x.c/atomic_update_expr_plus_x.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_plus_x.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005201930180191994
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_expr_rshift_x.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_update_expr_rshift_x.c/atomic_update_expr_rshift_x.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_rshift_x.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005395946791395545
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_update_expr_rshift_x.c/atomic_update_expr_rshift_x.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_rshift_x.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005124476971104741
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_lshift_equals.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_update_lshift_equals.c/atomic_update_lshift_equals.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_lshift_equals.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004979138961061835
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_update_lshift_equals.c/atomic_update_lshift_equals.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_lshift_equals.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005728875985369086
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_minus_equals.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_update_minus_equals.c/atomic_update_minus_equals.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_minus_equals.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005763937020674348
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_update_minus_equals.c/atomic_update_minus_equals.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_minus_equals.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.009963026968762279
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_multiply_equals.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_update_multiply_equals.c/atomic_update_multiply_equals.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_multiply_equals.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.010160536039620638
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_update_multiply_equals.c/atomic_update_multiply_equals.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_multiply_equals.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005607075057923794
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_plus_equals.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_update_plus_equals.c/atomic_update_plus_equals.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_plus_equals.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005488625960424542
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_update_plus_equals.c/atomic_update_plus_equals.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_plus_equals.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005218971986323595
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_postdecrement.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_update_postdecrement.c/atomic_update_postdecrement.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_postdecrement.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005700870882719755
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_update_postdecrement.c/atomic_update_postdecrement.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_postdecrement.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005626700120046735
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_postincrement.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_update_postincrement.c/atomic_update_postincrement.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_postincrement.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.0057580010034143925
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_update_postincrement.c/atomic_update_postincrement.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_postincrement.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.009876494063064456
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_predecrement.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_update_predecrement.c/atomic_update_predecrement.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_predecrement.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.010193919064477086
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_update_predecrement.c/atomic_update_predecrement.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_predecrement.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.006053075892850757
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_preincrement.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_update_preincrement.c/atomic_update_preincrement.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_preincrement.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005869325948879123
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_update_preincrement.c/atomic_update_preincrement.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_preincrement.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.00548974284902215
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_rshift_equals.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_update_rshift_equals.c/atomic_update_rshift_equals.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_rshift_equals.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.010079310974106193
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_update_rshift_equals.c/atomic_update_rshift_equals.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_rshift_equals.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.010032589081674814
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_x_bitand_expr.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_update_x_bitand_expr.c/atomic_update_x_bitand_expr.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_bitand_expr.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.009980626869946718
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_update_x_bitand_expr.c/atomic_update_x_bitand_expr.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_bitand_expr.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.009893535869196057
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_x_bitor_expr.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_update_x_bitor_expr.c/atomic_update_x_bitor_expr.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_bitor_expr.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.0062153160106390715
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_update_x_bitor_expr.c/atomic_update_x_bitor_expr.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_bitor_expr.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.009872933151200414
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_x_bitxor_expr.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_update_x_bitxor_expr.c/atomic_update_x_bitxor_expr.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_bitxor_expr.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.009794640820473433
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_update_x_bitxor_expr.c/atomic_update_x_bitxor_expr.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_bitxor_expr.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.00969714391976595
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_x_divided_expr.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_update_x_divided_expr.c/atomic_update_x_divided_expr.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_divided_expr.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005411800928413868
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_update_x_divided_expr.c/atomic_update_x_divided_expr.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_divided_expr.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005337070906534791
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_x_lshift_expr.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_update_x_lshift_expr.c/atomic_update_x_lshift_expr.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_lshift_expr.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.0052093330305069685
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_update_x_lshift_expr.c/atomic_update_x_lshift_expr.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_lshift_expr.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005268139066174626
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_x_minus_expr.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_update_x_minus_expr.c/atomic_update_x_minus_expr.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_minus_expr.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005141169065609574
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_update_x_minus_expr.c/atomic_update_x_minus_expr.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_minus_expr.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.0047370020765811205
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_x_multiply_expr.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_update_x_multiply_expr.c/atomic_update_x_multiply_expr.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_multiply_expr.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.009295491967350245
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_update_x_multiply_expr.c/atomic_update_x_multiply_expr.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_multiply_expr.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.009588961023837328
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_x_plus_expr.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_update_x_plus_expr.c/atomic_update_x_plus_expr.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_plus_expr.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.009598530130460858
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_update_x_plus_expr.c/atomic_update_x_plus_expr.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_plus_expr.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.009588822023943067
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_x_rshift_expr.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_update_x_rshift_expr.c/atomic_update_x_rshift_expr.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_rshift_expr.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005350062157958746
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_update_x_rshift_expr.c/atomic_update_x_rshift_expr.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_rshift_expr.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005543031031265855
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_x_bitand_expr.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_x_bitand_expr.c/atomic_x_bitand_expr.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_bitand_expr.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.0051427059806883335
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_x_bitand_expr.c/atomic_x_bitand_expr.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_bitand_expr.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.00492410478182137
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_x_bitor_expr.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_x_bitor_expr.c/atomic_x_bitor_expr.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_bitor_expr.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.0058337070513516665
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_x_bitor_expr.c/atomic_x_bitor_expr.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_bitor_expr.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005694165825843811
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_x_bitxor_expr.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_x_bitxor_expr.c/atomic_x_bitxor_expr.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_bitxor_expr.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.006003140937536955
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_x_bitxor_expr.c/atomic_x_bitxor_expr.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_bitxor_expr.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.006175647024065256
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_x_divided_expr.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_x_divided_expr.c/atomic_x_divided_expr.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_divided_expr.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005876100854948163
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_x_divided_expr.c/atomic_x_divided_expr.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_divided_expr.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005676216911524534
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_x_lshift_expr.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_x_lshift_expr.c/atomic_x_lshift_expr.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_lshift_expr.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004514211090281606
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_x_lshift_expr.c/atomic_x_lshift_expr.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_lshift_expr.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.0050972390454262495
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_x_minus_expr.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_x_minus_expr.c/atomic_x_minus_expr.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_minus_expr.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004770175786688924
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_x_minus_expr.c/atomic_x_minus_expr.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_minus_expr.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.00565191195346415
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_x_multiply_expr.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_x_multiply_expr.c/atomic_x_multiply_expr.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_multiply_expr.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.0052870651707053185
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_x_multiply_expr.c/atomic_x_multiply_expr.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_multiply_expr.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005242157960310578
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_x_plus_expr.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_x_plus_expr.c/atomic_x_plus_expr.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_plus_expr.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005359071074053645
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_x_plus_expr.c/atomic_x_plus_expr.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_plus_expr.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005247676046565175
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_x_rshift_expr.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_x_rshift_expr.c/atomic_x_rshift_expr.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_rshift_expr.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004865718074142933
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_x_rshift_expr.c/atomic_x_rshift_expr.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_rshift_expr.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005046464968472719
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "data_copy_no_lower_bound.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/data_copy_no_lower_bound.c/data_copy_no_lower_bound.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/data_copy_no_lower_bound.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004675053060054779
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/data_copy_no_lower_bound.c/data_copy_no_lower_bound.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/data_copy_no_lower_bound.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005014688009396195
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "data_copyin_no_lower_bound.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/data_copyin_no_lower_bound.c/data_copyin_no_lower_bound.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/data_copyin_no_lower_bound.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.009552924195304513
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/data_copyin_no_lower_bound.c/data_copyin_no_lower_bound.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/data_copyin_no_lower_bound.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.00993886194191873
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "data_copyout_no_lower_bound.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/data_copyout_no_lower_bound.c/data_copyout_no_lower_bound.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/data_copyout_no_lower_bound.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.010465809144079685
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/data_copyout_no_lower_bound.c/data_copyout_no_lower_bound.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/data_copyout_no_lower_bound.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.010171081870794296
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "data_copyout_reference_counts.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/data_copyout_reference_counts.c/data_copyout_reference_counts.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/data_copyout_reference_counts.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.0060944221913814545
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/data_copyout_reference_counts.c/data_copyout_reference_counts.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/data_copyout_reference_counts.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004992688074707985
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT2 -o /global/u1/v/vaidhy/OpenACCV-V/build/data_copyout_reference_counts.c/data_copyout_reference_counts.c2 /global/u1/v/vaidhy/OpenACCV-V/Tests/data_copyout_reference_counts.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.0048034898936748505
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/data_copyout_reference_counts.c/data_copyout_reference_counts.c3 /global/u1/v/vaidhy/OpenACCV-V/Tests/data_copyout_reference_counts.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005017761141061783
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT3 -o /global/u1/v/vaidhy/OpenACCV-V/build/data_copyout_reference_counts.c/data_copyout_reference_counts.c4 /global/u1/v/vaidhy/OpenACCV-V/Tests/data_copyout_reference_counts.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004996669013053179
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/data_copyout_reference_counts.c/data_copyout_reference_counts.c5 /global/u1/v/vaidhy/OpenACCV-V/Tests/data_copyout_reference_counts.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004701243015006185
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT2 -o /global/u1/v/vaidhy/OpenACCV-V/build/data_copyout_reference_counts.c/data_copyout_reference_counts.c6 /global/u1/v/vaidhy/OpenACCV-V/Tests/data_copyout_reference_counts.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005437432089820504
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/data_copyout_reference_counts.c/data_copyout_reference_counts.c7 /global/u1/v/vaidhy/OpenACCV-V/Tests/data_copyout_reference_counts.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005539609119296074
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "data_create.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/data_create.c/data_create.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/data_create.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005242787068709731
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/data_create.c/data_create.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/data_create.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004769407911226153
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT2 -o /global/u1/v/vaidhy/OpenACCV-V/build/data_create.c/data_create.c2 /global/u1/v/vaidhy/OpenACCV-V/Tests/data_create.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004909298848360777
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/data_create.c/data_create.c3 /global/u1/v/vaidhy/OpenACCV-V/Tests/data_create.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004868510877713561
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT3 -o /global/u1/v/vaidhy/OpenACCV-V/build/data_create.c/data_create.c4 /global/u1/v/vaidhy/OpenACCV-V/Tests/data_create.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004998834105208516
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/data_create.c/data_create.c5 /global/u1/v/vaidhy/OpenACCV-V/Tests/data_create.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004895820049569011
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT2 -o /global/u1/v/vaidhy/OpenACCV-V/build/data_create.c/data_create.c6 /global/u1/v/vaidhy/OpenACCV-V/Tests/data_create.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004813478095456958
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/data_create.c/data_create.c7 /global/u1/v/vaidhy/OpenACCV-V/Tests/data_create.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.0047657061368227005
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "data_create_no_lower_bound.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/data_create_no_lower_bound.c/data_create_no_lower_bound.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/data_create_no_lower_bound.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.0049558819737285376
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/data_create_no_lower_bound.c/data_create_no_lower_bound.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/data_create_no_lower_bound.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.0048668349627405405
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "data_present_no_lower_bound.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/data_present_no_lower_bound.c/data_present_no_lower_bound.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/data_present_no_lower_bound.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.0047336488496512175
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/data_present_no_lower_bound.c/data_present_no_lower_bound.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/data_present_no_lower_bound.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004937374033033848
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "data_with_changing_subscript.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/data_with_changing_subscript.c/data_with_changing_subscript.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/data_with_changing_subscript.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005510415881872177
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/data_with_changing_subscript.c/data_with_changing_subscript.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/data_with_changing_subscript.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004873261088505387
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "data_with_structs.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/data_with_structs.c/data_with_structs.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/data_with_structs.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.0051700829062610865
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/data_with_structs.c/data_with_structs.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/data_with_structs.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.00493171694688499
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "declare_copyin.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -DT2 -DT3 -DT4 -DT5 -o /global/u1/v/vaidhy/OpenACCV-V/build/declare_copyin.c/declare_copyin.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/declare_copyin.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.00508376001380384
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT2 -DT3 -DT4 -DT5 -o /global/u1/v/vaidhy/OpenACCV-V/build/declare_copyin.c/declare_copyin.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/declare_copyin.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005261014914140105
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -DT3 -DT4 -DT5 -o /global/u1/v/vaidhy/OpenACCV-V/build/declare_copyin.c/declare_copyin.c2 /global/u1/v/vaidhy/OpenACCV-V/Tests/declare_copyin.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004858593922108412
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -DT2 -DT4 -DT5 -o /global/u1/v/vaidhy/OpenACCV-V/build/declare_copyin.c/declare_copyin.c3 /global/u1/v/vaidhy/OpenACCV-V/Tests/declare_copyin.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004889603005722165
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -DT2 -DT3 -DT5 -o /global/u1/v/vaidhy/OpenACCV-V/build/declare_copyin.c/declare_copyin.c4 /global/u1/v/vaidhy/OpenACCV-V/Tests/declare_copyin.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004750410793349147
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -DT2 -DT3 -DT4 -o /global/u1/v/vaidhy/OpenACCV-V/build/declare_copyin.c/declare_copyin.c5 /global/u1/v/vaidhy/OpenACCV-V/Tests/declare_copyin.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004803839838132262
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT5 -DT1 -DT2 -DT3 -DT4 -DT5 -o /global/u1/v/vaidhy/OpenACCV-V/build/declare_copyin.c/declare_copyin.c6 /global/u1/v/vaidhy/OpenACCV-V/Tests/declare_copyin.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.0050203450955450535
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "declare_create.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -DT2 -DT3 -DT4 -DT5 -o /global/u1/v/vaidhy/OpenACCV-V/build/declare_create.c/declare_create.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/declare_create.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005688928067684174
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT2 -DT3 -DT4 -DT5 -o /global/u1/v/vaidhy/OpenACCV-V/build/declare_create.c/declare_create.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/declare_create.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005025442922487855
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -DT3 -DT4 -DT5 -o /global/u1/v/vaidhy/OpenACCV-V/build/declare_create.c/declare_create.c2 /global/u1/v/vaidhy/OpenACCV-V/Tests/declare_create.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005319053074344993
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -DT2 -DT4 -DT5 -o /global/u1/v/vaidhy/OpenACCV-V/build/declare_create.c/declare_create.c3 /global/u1/v/vaidhy/OpenACCV-V/Tests/declare_create.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005112882936373353
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -DT2 -DT3 -DT5 -o /global/u1/v/vaidhy/OpenACCV-V/build/declare_create.c/declare_create.c4 /global/u1/v/vaidhy/OpenACCV-V/Tests/declare_create.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004998135846108198
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -DT2 -DT3 -DT4 -o /global/u1/v/vaidhy/OpenACCV-V/build/declare_create.c/declare_create.c5 /global/u1/v/vaidhy/OpenACCV-V/Tests/declare_create.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004930249880999327
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT5 -DT1 -DT2 -DT3 -DT4 -DT5 -o /global/u1/v/vaidhy/OpenACCV-V/build/declare_create.c/declare_create.c6 /global/u1/v/vaidhy/OpenACCV-V/Tests/declare_create.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.0048115921672433615
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "declare_device_resident.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/declare_device_resident.c/declare_device_resident.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/declare_device_resident.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.010529643157497048
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/declare_device_resident.c/declare_device_resident.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/declare_device_resident.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.006124943029135466
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT2 -o /global/u1/v/vaidhy/OpenACCV-V/build/declare_device_resident.c/declare_device_resident.c2 /global/u1/v/vaidhy/OpenACCV-V/Tests/declare_device_resident.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.0054483970161527395
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/declare_device_resident.c/declare_device_resident.c3 /global/u1/v/vaidhy/OpenACCV-V/Tests/declare_device_resident.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004774924833327532
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT3 -o /global/u1/v/vaidhy/OpenACCV-V/build/declare_device_resident.c/declare_device_resident.c4 /global/u1/v/vaidhy/OpenACCV-V/Tests/declare_device_resident.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.0049381430726498365
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/declare_device_resident.c/declare_device_resident.c5 /global/u1/v/vaidhy/OpenACCV-V/Tests/declare_device_resident.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004835058003664017
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT2 -o /global/u1/v/vaidhy/OpenACCV-V/build/declare_device_resident.c/declare_device_resident.c6 /global/u1/v/vaidhy/OpenACCV-V/Tests/declare_device_resident.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004784283926710486
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/declare_device_resident.c/declare_device_resident.c7 /global/u1/v/vaidhy/OpenACCV-V/Tests/declare_device_resident.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.0054895339999347925
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "declare_function_scope_copy.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -DT2 -DT3 -DT4 -o /global/u1/v/vaidhy/OpenACCV-V/build/declare_function_scope_copy.c/declare_function_scope_copy.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copy.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.00518356217071414
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT2 -DT3 -DT4 -o /global/u1/v/vaidhy/OpenACCV-V/build/declare_function_scope_copy.c/declare_function_scope_copy.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copy.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005500358995050192
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -DT3 -DT4 -o /global/u1/v/vaidhy/OpenACCV-V/build/declare_function_scope_copy.c/declare_function_scope_copy.c2 /global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copy.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005468440940603614
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -DT2 -DT4 -o /global/u1/v/vaidhy/OpenACCV-V/build/declare_function_scope_copy.c/declare_function_scope_copy.c3 /global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copy.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.0055620979983359575
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -DT2 -DT3 -o /global/u1/v/vaidhy/OpenACCV-V/build/declare_function_scope_copy.c/declare_function_scope_copy.c4 /global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copy.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.0052589899860322475
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT4 -DT1 -DT2 -DT3 -DT4 -o /global/u1/v/vaidhy/OpenACCV-V/build/declare_function_scope_copy.c/declare_function_scope_copy.c5 /global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copy.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005352856125682592
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "declare_function_scope_copyin.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/declare_function_scope_copyin.c/declare_function_scope_copyin.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copyin.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005412430036813021
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/declare_function_scope_copyin.c/declare_function_scope_copyin.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copyin.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005240411963313818
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT2 -o /global/u1/v/vaidhy/OpenACCV-V/build/declare_function_scope_copyin.c/declare_function_scope_copyin.c2 /global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copyin.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005017621209844947
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/declare_function_scope_copyin.c/declare_function_scope_copyin.c3 /global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copyin.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.0050170631147921085
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT3 -o /global/u1/v/vaidhy/OpenACCV-V/build/declare_function_scope_copyin.c/declare_function_scope_copyin.c4 /global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copyin.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005041856085881591
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/declare_function_scope_copyin.c/declare_function_scope_copyin.c5 /global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copyin.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005128248827531934
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT2 -o /global/u1/v/vaidhy/OpenACCV-V/build/declare_function_scope_copyin.c/declare_function_scope_copyin.c6 /global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copyin.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004927875939756632
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/declare_function_scope_copyin.c/declare_function_scope_copyin.c7 /global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copyin.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005284621845930815
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "declare_function_scope_copyout.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -DT2 -DT3 -DT4 -o /global/u1/v/vaidhy/OpenACCV-V/build/declare_function_scope_copyout.c/declare_function_scope_copyout.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copyout.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005196482175961137
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT2 -DT3 -DT4 -o /global/u1/v/vaidhy/OpenACCV-V/build/declare_function_scope_copyout.c/declare_function_scope_copyout.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copyout.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005019437056034803
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -DT3 -DT4 -o /global/u1/v/vaidhy/OpenACCV-V/build/declare_function_scope_copyout.c/declare_function_scope_copyout.c2 /global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copyout.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004990452900528908
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -DT2 -DT4 -o /global/u1/v/vaidhy/OpenACCV-V/build/declare_function_scope_copyout.c/declare_function_scope_copyout.c3 /global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copyout.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004971247166395187
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -DT2 -DT3 -o /global/u1/v/vaidhy/OpenACCV-V/build/declare_function_scope_copyout.c/declare_function_scope_copyout.c4 /global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copyout.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004886111943051219
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT4 -DT1 -DT2 -DT3 -DT4 -o /global/u1/v/vaidhy/OpenACCV-V/build/declare_function_scope_copyout.c/declare_function_scope_copyout.c5 /global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copyout.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.009695118991658092
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "declare_function_scope_create.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/declare_function_scope_create.c/declare_function_scope_create.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_create.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.009670744882896543
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/declare_function_scope_create.c/declare_function_scope_create.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_create.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.0051186110358685255
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT2 -o /global/u1/v/vaidhy/OpenACCV-V/build/declare_function_scope_create.c/declare_function_scope_create.c2 /global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_create.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005313814152032137
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/declare_function_scope_create.c/declare_function_scope_create.c3 /global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_create.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.00941282301209867
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT3 -o /global/u1/v/vaidhy/OpenACCV-V/build/declare_function_scope_create.c/declare_function_scope_create.c4 /global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_create.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.009999833069741726
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/declare_function_scope_create.c/declare_function_scope_create.c5 /global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_create.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.010250630090013146
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT2 -o /global/u1/v/vaidhy/OpenACCV-V/build/declare_function_scope_create.c/declare_function_scope_create.c6 /global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_create.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.010328222997486591
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/declare_function_scope_create.c/declare_function_scope_create.c7 /global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_create.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.010350432014092803
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "declare_function_scope_deviceptr.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/declare_function_scope_deviceptr.c/declare_function_scope_deviceptr.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_deviceptr.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.010295397834852338
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/declare_function_scope_deviceptr.c/declare_function_scope_deviceptr.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_deviceptr.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005866392981261015
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT2 -o /global/u1/v/vaidhy/OpenACCV-V/build/declare_function_scope_deviceptr.c/declare_function_scope_deviceptr.c2 /global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_deviceptr.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.009869651170447469
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/declare_function_scope_deviceptr.c/declare_function_scope_deviceptr.c3 /global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_deviceptr.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.009142330847680569
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "declare_function_scope_present.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/declare_function_scope_present.c/declare_function_scope_present.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_present.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.009906176943331957
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/declare_function_scope_present.c/declare_function_scope_present.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_present.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.010251329047605395
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT2 -o /global/u1/v/vaidhy/OpenACCV-V/build/declare_function_scope_present.c/declare_function_scope_present.c2 /global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_present.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.010296165943145752
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/declare_function_scope_present.c/declare_function_scope_present.c3 /global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_present.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.009927618084475398
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "enter_data_copyin_no_lower_bound.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/enter_data_copyin_no_lower_bound.c/enter_data_copyin_no_lower_bound.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_copyin_no_lower_bound.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005805281922221184
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/enter_data_copyin_no_lower_bound.c/enter_data_copyin_no_lower_bound.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_copyin_no_lower_bound.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.00522909895516932
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "enter_data_create.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/enter_data_create.c/enter_data_create.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_create.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005155905149877071
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/enter_data_create.c/enter_data_create.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_create.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005039831157773733
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT2 -o /global/u1/v/vaidhy/OpenACCV-V/build/enter_data_create.c/enter_data_create.c2 /global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_create.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.0047275039833039045
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/enter_data_create.c/enter_data_create.c3 /global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_create.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005744590889662504
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT3 -o /global/u1/v/vaidhy/OpenACCV-V/build/enter_data_create.c/enter_data_create.c4 /global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_create.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005428701872006059
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/enter_data_create.c/enter_data_create.c5 /global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_create.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005758419865742326
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT2 -o /global/u1/v/vaidhy/OpenACCV-V/build/enter_data_create.c/enter_data_create.c6 /global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_create.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005457756109535694
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/enter_data_create.c/enter_data_create.c7 /global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_create.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005623697070404887
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "enter_data_create_no_lower_bound.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/enter_data_create_no_lower_bound.c/enter_data_create_no_lower_bound.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_create_no_lower_bound.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005467812996357679
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/enter_data_create_no_lower_bound.c/enter_data_create_no_lower_bound.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_create_no_lower_bound.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005319401854649186
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "enter_exit_data_if.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -DT2 -DT3 -DT4 -DT5 -o /global/u1/v/vaidhy/OpenACCV-V/build/enter_exit_data_if.c/enter_exit_data_if.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/enter_exit_data_if.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004979837918654084
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT2 -DT3 -DT4 -DT5 -o /global/u1/v/vaidhy/OpenACCV-V/build/enter_exit_data_if.c/enter_exit_data_if.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/enter_exit_data_if.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.0047659859992563725
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -DT3 -DT4 -DT5 -o /global/u1/v/vaidhy/OpenACCV-V/build/enter_exit_data_if.c/enter_exit_data_if.c2 /global/u1/v/vaidhy/OpenACCV-V/Tests/enter_exit_data_if.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004581955960020423
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -DT2 -DT4 -DT5 -o /global/u1/v/vaidhy/OpenACCV-V/build/enter_exit_data_if.c/enter_exit_data_if.c3 /global/u1/v/vaidhy/OpenACCV-V/Tests/enter_exit_data_if.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005083340918645263
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -DT2 -DT3 -DT5 -o /global/u1/v/vaidhy/OpenACCV-V/build/enter_exit_data_if.c/enter_exit_data_if.c4 /global/u1/v/vaidhy/OpenACCV-V/Tests/enter_exit_data_if.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005079430062323809
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -DT2 -DT3 -DT4 -o /global/u1/v/vaidhy/OpenACCV-V/build/enter_exit_data_if.c/enter_exit_data_if.c5 /global/u1/v/vaidhy/OpenACCV-V/Tests/enter_exit_data_if.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.0049498057924211025
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT5 -DT1 -DT2 -DT3 -DT4 -DT5 -o /global/u1/v/vaidhy/OpenACCV-V/build/enter_exit_data_if.c/enter_exit_data_if.c6 /global/u1/v/vaidhy/OpenACCV-V/Tests/enter_exit_data_if.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005135511979460716
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "exit_data.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/exit_data.c/exit_data.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/exit_data.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005660641938447952
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/exit_data.c/exit_data.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/exit_data.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005617970135062933
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT2 -o /global/u1/v/vaidhy/OpenACCV-V/build/exit_data.c/exit_data.c2 /global/u1/v/vaidhy/OpenACCV-V/Tests/exit_data.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005331624066457152
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/exit_data.c/exit_data.c3 /global/u1/v/vaidhy/OpenACCV-V/Tests/exit_data.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.0052436948753893375
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "exit_data_copyout_no_lower_bound.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/exit_data_copyout_no_lower_bound.c/exit_data_copyout_no_lower_bound.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/exit_data_copyout_no_lower_bound.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005675867898389697
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/exit_data_copyout_no_lower_bound.c/exit_data_copyout_no_lower_bound.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/exit_data_copyout_no_lower_bound.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005432055098935962
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "exit_data_copyout_reference_counts.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/exit_data_copyout_reference_counts.c/exit_data_copyout_reference_counts.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/exit_data_copyout_reference_counts.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004978511016815901
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/exit_data_copyout_reference_counts.c/exit_data_copyout_reference_counts.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/exit_data_copyout_reference_counts.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004829190904274583
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT2 -o /global/u1/v/vaidhy/OpenACCV-V/build/exit_data_copyout_reference_counts.c/exit_data_copyout_reference_counts.c2 /global/u1/v/vaidhy/OpenACCV-V/Tests/exit_data_copyout_reference_counts.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005152622936293483
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/exit_data_copyout_reference_counts.c/exit_data_copyout_reference_counts.c3 /global/u1/v/vaidhy/OpenACCV-V/Tests/exit_data_copyout_reference_counts.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005149199860170484
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT3 -o /global/u1/v/vaidhy/OpenACCV-V/build/exit_data_copyout_reference_counts.c/exit_data_copyout_reference_counts.c4 /global/u1/v/vaidhy/OpenACCV-V/Tests/exit_data_copyout_reference_counts.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004843998001888394
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/exit_data_copyout_reference_counts.c/exit_data_copyout_reference_counts.c5 /global/u1/v/vaidhy/OpenACCV-V/Tests/exit_data_copyout_reference_counts.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004986820975318551
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT2 -o /global/u1/v/vaidhy/OpenACCV-V/build/exit_data_copyout_reference_counts.c/exit_data_copyout_reference_counts.c6 /global/u1/v/vaidhy/OpenACCV-V/Tests/exit_data_copyout_reference_counts.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005423394031822681
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/exit_data_copyout_reference_counts.c/exit_data_copyout_reference_counts.c7 /global/u1/v/vaidhy/OpenACCV-V/Tests/exit_data_copyout_reference_counts.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005056172842159867
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "exit_data_delete_no_lower_bound.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/exit_data_delete_no_lower_bound.c/exit_data_delete_no_lower_bound.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/exit_data_delete_no_lower_bound.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005177276907488704
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/exit_data_delete_no_lower_bound.c/exit_data_delete_no_lower_bound.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/exit_data_delete_no_lower_bound.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.0049255709163844585
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "exit_data_finalize.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/exit_data_finalize.c/exit_data_finalize.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/exit_data_finalize.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004853355931118131
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/exit_data_finalize.c/exit_data_finalize.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/exit_data_finalize.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004876054124906659
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT2 -o /global/u1/v/vaidhy/OpenACCV-V/build/exit_data_finalize.c/exit_data_finalize.c2 /global/u1/v/vaidhy/OpenACCV-V/Tests/exit_data_finalize.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.0047025009989738464
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/exit_data_finalize.c/exit_data_finalize.c3 /global/u1/v/vaidhy/OpenACCV-V/Tests/exit_data_finalize.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005823092069476843
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "host_data.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/host_data.c/host_data.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/host_data.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005320030031725764
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/host_data.c/host_data.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/host_data.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.0054912089835852385
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "init.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/init.c/init.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/init.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.009710903046652675
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/init.c/init.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/init.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.009697494097054005
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "init_device_num.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/init_device_num.c/init_device_num.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/init_device_num.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.00958777405321598
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/init_device_num.c/init_device_num.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/init_device_num.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.009549152106046677
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "init_device_type.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT2 -DT3 -o /global/u1/v/vaidhy/OpenACCV-V/build/init_device_type.c/init_device_type.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/init_device_type.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.0056224400177598
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT2 -DT3 -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/init_device_type.c/init_device_type.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/init_device_type.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.0054685811046510935
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "init_device_type_num.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT2 -DT3 -o /global/u1/v/vaidhy/OpenACCV-V/build/init_device_type_num.c/init_device_type_num.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/init_device_type_num.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005176787963137031
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT2 -DT3 -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/init_device_type_num.c/init_device_type_num.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/init_device_type_num.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004711230983957648
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "init_device_type_num_nvidia.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/init_device_type_num_nvidia.c/init_device_type_num_nvidia.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/init_device_type_num_nvidia.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.0058901391457766294
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/init_device_type_num_nvidia.c/init_device_type_num_nvidia.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/init_device_type_num_nvidia.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.0056389919482171535
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "init_device_type_nvidia.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/init_device_type_nvidia.c/init_device_type_nvidia.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/init_device_type_nvidia.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.0053562079556286335
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/init_device_type_nvidia.c/init_device_type_nvidia.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/init_device_type_nvidia.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.0053739468567073345
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "init_if.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/init_if.c/init_if.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/init_if.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005505386972799897
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/init_if.c/init_if.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/init_if.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005150527926161885
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT2 -o /global/u1/v/vaidhy/OpenACCV-V/build/init_if.c/init_if.c2 /global/u1/v/vaidhy/OpenACCV-V/Tests/init_if.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004682525992393494
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/init_if.c/init_if.c3 /global/u1/v/vaidhy/OpenACCV-V/Tests/init_if.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004651518072932959
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_async.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_async.c/kernels_async.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_async.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004843648988753557
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_async.c/kernels_async.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_async.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004866625880822539
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_copy.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_copy.c/kernels_copy.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_copy.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.00999599089846015
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_copy.c/kernels_copy.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_copy.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.010204325895756483
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT2 -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_copy.c/kernels_copy.c2 /global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_copy.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.010394292883574963
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_copy.c/kernels_copy.c3 /global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_copy.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.009925172897055745
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT3 -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_copy.c/kernels_copy.c4 /global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_copy.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.010261524934321642
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_copy.c/kernels_copy.c5 /global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_copy.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005749619100242853
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT2 -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_copy.c/kernels_copy.c6 /global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_copy.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004659199854359031
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_copy.c/kernels_copy.c7 /global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_copy.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.0050977980718016624
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_copyin.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_copyin.c/kernels_copyin.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_copyin.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005365146789699793
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_copyin.c/kernels_copyin.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_copyin.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.0047957380302250385
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT2 -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_copyin.c/kernels_copyin.c2 /global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_copyin.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005119169130921364
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_copyin.c/kernels_copyin.c3 /global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_copyin.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005355858942493796
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT3 -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_copyin.c/kernels_copyin.c4 /global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_copyin.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005697658052667975
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_copyin.c/kernels_copyin.c5 /global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_copyin.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005204653833061457
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT2 -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_copyin.c/kernels_copyin.c6 /global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_copyin.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005600509932264686
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_copyin.c/kernels_copyin.c7 /global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_copyin.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005028934916481376
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_copyout.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_copyout.c/kernels_copyout.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_copyout.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005128597840666771
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_copyout.c/kernels_copyout.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_copyout.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.00528741511516273
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT2 -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_copyout.c/kernels_copyout.c2 /global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_copyout.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005052402149885893
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_copyout.c/kernels_copyout.c3 /global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_copyout.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.0054581749718636274
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_create.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_create.c/kernels_create.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_create.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.0048779400531202555
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_create.c/kernels_create.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_create.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004812429891899228
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT2 -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_create.c/kernels_create.c2 /global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_create.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.00478756707161665
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_create.c/kernels_create.c3 /global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_create.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.0050866929814219475
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT3 -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_create.c/kernels_create.c4 /global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_create.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005506505025550723
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_create.c/kernels_create.c5 /global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_create.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005272888112813234
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT2 -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_create.c/kernels_create.c6 /global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_create.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.00485168001614511
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_create.c/kernels_create.c7 /global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_create.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.0046404830645769835
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_default_copy.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_default_copy.c/kernels_default_copy.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_default_copy.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.00499031413346529
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_default_copy.c/kernels_default_copy.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_default_copy.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.0049702690448611975
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT2 -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_default_copy.c/kernels_default_copy.c2 /global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_default_copy.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005770293064415455
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_default_copy.c/kernels_default_copy.c3 /global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_default_copy.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.010398622136563063
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_default_present.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_default_present.c/kernels_default_present.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_default_present.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005244742846116424
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_default_present.c/kernels_default_present.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_default_present.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005246557993814349
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_if.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -DT2 -DT3 -DT4 -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_if.c/kernels_if.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_if.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005632566986605525
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT2 -DT3 -DT4 -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_if.c/kernels_if.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_if.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005877356976270676
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -DT3 -DT4 -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_if.c/kernels_if.c2 /global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_if.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005598135059699416
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -DT2 -DT4 -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_if.c/kernels_if.c3 /global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_if.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.0053212870843708515
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -DT2 -DT3 -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_if.c/kernels_if.c4 /global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_if.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005480454070493579
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT4 -DT1 -DT2 -DT3 -DT4 -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_if.c/kernels_if.c5 /global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_if.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005564262857660651
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_loop.c/kernels_loop.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005282875150442123
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_loop.c/kernels_loop.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005434289108961821
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_independent.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_loop_independent.c/kernels_loop_independent.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_independent.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005286716856062412
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_loop_independent.c/kernels_loop_independent.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_independent.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.010005628922954202
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_reduction_add_general.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_loop_reduction_add_general.c/kernels_loop_reduction_add_general.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_add_general.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.009766845963895321
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_loop_reduction_add_general.c/kernels_loop_reduction_add_general.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_add_general.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.009643296943977475
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_reduction_add_loop.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_loop_reduction_add_loop.c/kernels_loop_reduction_add_loop.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_add_loop.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.009641899960115552
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_loop_reduction_add_loop.c/kernels_loop_reduction_add_loop.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_add_loop.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.009479590924456716
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_reduction_add_vector_loop.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_loop_reduction_add_vector_loop.c/kernels_loop_reduction_add_vector_loop.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_add_vector_loop.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.00534629006870091
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_loop_reduction_add_vector_loop.c/kernels_loop_reduction_add_vector_loop.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_add_vector_loop.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005684807896614075
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_reduction_and_general.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_loop_reduction_and_general.c/kernels_loop_reduction_and_general.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_and_general.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.0050474428571760654
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_loop_reduction_and_general.c/kernels_loop_reduction_and_general.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_and_general.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005349922925233841
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_reduction_and_loop.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_loop_reduction_and_loop.c/kernels_loop_reduction_and_loop.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_and_loop.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.00574752502143383
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_loop_reduction_and_loop.c/kernels_loop_reduction_and_loop.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_and_loop.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005745778093114495
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_reduction_and_vector_loop.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_loop_reduction_and_vector_loop.c/kernels_loop_reduction_and_vector_loop.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_and_vector_loop.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005322823999449611
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_loop_reduction_and_vector_loop.c/kernels_loop_reduction_and_vector_loop.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_and_vector_loop.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004650050075724721
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_reduction_bitand_general.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_loop_reduction_bitand_general.c/kernels_loop_reduction_bitand_general.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitand_general.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005077684065327048
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_loop_reduction_bitand_general.c/kernels_loop_reduction_bitand_general.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitand_general.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004985144827514887
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_reduction_bitand_loop.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_loop_reduction_bitand_loop.c/kernels_loop_reduction_bitand_loop.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitand_loop.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005274634109809995
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_loop_reduction_bitand_loop.c/kernels_loop_reduction_bitand_loop.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitand_loop.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005243764957413077
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_reduction_bitand_vector_loop.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_loop_reduction_bitand_vector_loop.c/kernels_loop_reduction_bitand_vector_loop.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitand_vector_loop.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004888416035100818
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_loop_reduction_bitand_vector_loop.c/kernels_loop_reduction_bitand_vector_loop.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitand_vector_loop.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004941913997754455
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_reduction_bitor_general.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_loop_reduction_bitor_general.c/kernels_loop_reduction_bitor_general.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitor_general.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005562796024605632
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_loop_reduction_bitor_general.c/kernels_loop_reduction_bitor_general.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitor_general.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005126361967995763
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_reduction_bitor_loop.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_loop_reduction_bitor_loop.c/kernels_loop_reduction_bitor_loop.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitor_loop.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.0048625050112605095
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_loop_reduction_bitor_loop.c/kernels_loop_reduction_bitor_loop.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitor_loop.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.0047940609510988
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_reduction_bitor_vector_loop.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_loop_reduction_bitor_vector_loop.c/kernels_loop_reduction_bitor_vector_loop.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitor_vector_loop.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004808936966583133
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_loop_reduction_bitor_vector_loop.c/kernels_loop_reduction_bitor_vector_loop.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitor_vector_loop.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.009793034987524152
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_reduction_bitxor_general.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_loop_reduction_bitxor_general.c/kernels_loop_reduction_bitxor_general.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitxor_general.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005009170854464173
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_loop_reduction_bitxor_general.c/kernels_loop_reduction_bitxor_general.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitxor_general.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004914885852485895
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_reduction_bitxor_loop.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_loop_reduction_bitxor_loop.c/kernels_loop_reduction_bitxor_loop.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitxor_loop.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005564612103626132
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_loop_reduction_bitxor_loop.c/kernels_loop_reduction_bitxor_loop.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitxor_loop.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005762958899140358
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_reduction_bitxor_vector_loop.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_loop_reduction_bitxor_vector_loop.c/kernels_loop_reduction_bitxor_vector_loop.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitxor_vector_loop.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005525710992515087
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_loop_reduction_bitxor_vector_loop.c/kernels_loop_reduction_bitxor_vector_loop.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitxor_vector_loop.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.0055117420852184296
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_reduction_max_general.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_loop_reduction_max_general.c/kernels_loop_reduction_max_general.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_max_general.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005914233857765794
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_loop_reduction_max_general.c/kernels_loop_reduction_max_general.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_max_general.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.0052286789286881685
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_reduction_max_loop.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_loop_reduction_max_loop.c/kernels_loop_reduction_max_loop.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_max_loop.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.0050471629947423935
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_loop_reduction_max_loop.c/kernels_loop_reduction_max_loop.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_max_loop.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004831985104829073
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_reduction_max_vector_loop.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_loop_reduction_max_vector_loop.c/kernels_loop_reduction_max_vector_loop.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_max_vector_loop.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004588311072438955
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_loop_reduction_max_vector_loop.c/kernels_loop_reduction_max_vector_loop.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_max_vector_loop.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004551365971565247
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_reduction_min_general.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_loop_reduction_min_general.c/kernels_loop_reduction_min_general.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_min_general.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005732647841796279
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_loop_reduction_min_general.c/kernels_loop_reduction_min_general.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_min_general.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005265414947643876
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_reduction_min_loop.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_loop_reduction_min_loop.c/kernels_loop_reduction_min_loop.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_min_loop.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005038014147430658
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_loop_reduction_min_loop.c/kernels_loop_reduction_min_loop.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_min_loop.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.00497830007225275
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_reduction_min_vector_loop.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_loop_reduction_min_vector_loop.c/kernels_loop_reduction_min_vector_loop.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_min_vector_loop.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.00510073103941977
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_loop_reduction_min_vector_loop.c/kernels_loop_reduction_min_vector_loop.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_min_vector_loop.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004888904979452491
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_reduction_multiply_general.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_loop_reduction_multiply_general.c/kernels_loop_reduction_multiply_general.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_multiply_general.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.0052832241635769606
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_loop_reduction_multiply_general.c/kernels_loop_reduction_multiply_general.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_multiply_general.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005242367973551154
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_reduction_multiply_loop.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_loop_reduction_multiply_loop.c/kernels_loop_reduction_multiply_loop.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_multiply_loop.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005049469182267785
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_loop_reduction_multiply_loop.c/kernels_loop_reduction_multiply_loop.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_multiply_loop.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005061550997197628
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_reduction_multiply_vector_loop.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_loop_reduction_multiply_vector_loop.c/kernels_loop_reduction_multiply_vector_loop.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_multiply_vector_loop.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.0054975650273263454
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_loop_reduction_multiply_vector_loop.c/kernels_loop_reduction_multiply_vector_loop.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_multiply_vector_loop.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.0052790341433137655
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_reduction_or_general.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_loop_reduction_or_general.c/kernels_loop_reduction_or_general.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_or_general.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004993945127353072
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_loop_reduction_or_general.c/kernels_loop_reduction_or_general.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_or_general.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005004281876608729
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_reduction_or_loop.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_loop_reduction_or_loop.c/kernels_loop_reduction_or_loop.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_or_loop.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004934790078550577
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_loop_reduction_or_loop.c/kernels_loop_reduction_or_loop.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_or_loop.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004793013911694288
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_reduction_or_vector_loop.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_loop_reduction_or_vector_loop.c/kernels_loop_reduction_or_vector_loop.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_or_vector_loop.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.0053361637983471155
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_loop_reduction_or_vector_loop.c/kernels_loop_reduction_or_vector_loop.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_or_vector_loop.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005164985079318285
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_seq.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_loop_seq.c/kernels_loop_seq.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_seq.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.0048659981694072485
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_loop_seq.c/kernels_loop_seq.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_seq.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004992268979549408
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_tile.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_loop_tile.c/kernels_loop_tile.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_tile.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005626420956104994
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_loop_tile.c/kernels_loop_tile.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_tile.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005516701145097613
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT2 -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_loop_tile.c/kernels_loop_tile.c2 /global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_tile.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.01003391481935978
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_loop_tile.c/kernels_loop_tile.c3 /global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_tile.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.010570429963991046
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_vector_blocking.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_loop_vector_blocking.c/kernels_loop_vector_blocking.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_vector_blocking.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005927852122113109
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_loop_vector_blocking.c/kernels_loop_vector_blocking.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_vector_blocking.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005702337017282844
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_worker_blocking.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_loop_worker_blocking.c/kernels_loop_worker_blocking.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_worker_blocking.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004812638973817229
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_loop_worker_blocking.c/kernels_loop_worker_blocking.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_worker_blocking.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004938840866088867
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_num_gangs.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_num_gangs.c/kernels_num_gangs.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_num_gangs.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.0048788480926305056
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_num_gangs.c/kernels_num_gangs.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_num_gangs.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005686832824721932
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_num_workers.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_num_workers.c/kernels_num_workers.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_num_workers.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.010449745925143361
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_num_workers.c/kernels_num_workers.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_num_workers.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.01032221713103354
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_present.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_present.c/kernels_present.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_present.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.010565122123807669
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_present.c/kernels_present.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_present.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005640250165015459
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_scalar_default_copy.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_scalar_default_copy.c/kernels_scalar_default_copy.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_scalar_default_copy.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005104154115542769
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_scalar_default_copy.c/kernels_scalar_default_copy.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_scalar_default_copy.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005151296034455299
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_vector_length.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_vector_length.c/kernels_vector_length.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_vector_length.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.0056848069652915
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_vector_length.c/kernels_vector_length.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_vector_length.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005717562977224588
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_wait.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_wait.c/kernels_wait.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_wait.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.00552948284894228
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_wait.c/kernels_wait.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_wait.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005342169897630811
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "loop_collapse.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/loop_collapse.c/loop_collapse.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/loop_collapse.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005881688091903925
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/loop_collapse.c/loop_collapse.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/loop_collapse.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.0056300528813153505
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT2 -o /global/u1/v/vaidhy/OpenACCV-V/build/loop_collapse.c/loop_collapse.c2 /global/u1/v/vaidhy/OpenACCV-V/Tests/loop_collapse.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005487228976562619
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/loop_collapse.c/loop_collapse.c3 /global/u1/v/vaidhy/OpenACCV-V/Tests/loop_collapse.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005435058148577809
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "loop_no_collapse_default.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/loop_no_collapse_default.c/loop_no_collapse_default.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/loop_no_collapse_default.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004885972011834383
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/loop_no_collapse_default.c/loop_no_collapse_default.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/loop_no_collapse_default.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004826257936656475
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel.c/parallel.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005750596988946199
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel.c/parallel.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005223720101639628
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_async.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_async.c/parallel_async.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_async.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.0053410520777106285
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_async.c/parallel_async.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_async.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005434498889371753
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_copy.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT2 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_copy.c/parallel_copy.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_copy.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005621462129056454
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT2 -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_copy.c/parallel_copy.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_copy.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005612103035673499
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_copyin.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_copyin.c/parallel_copyin.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_copyin.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005697658052667975
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_copyin.c/parallel_copyin.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_copyin.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.0049271779134869576
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT2 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_copyin.c/parallel_copyin.c2 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_copyin.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005044648889452219
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_copyin.c/parallel_copyin.c3 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_copyin.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.0050382239278405905
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_copyout.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_copyout.c/parallel_copyout.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_copyout.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005632427055388689
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_copyout.c/parallel_copyout.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_copyout.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005155486054718494
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT2 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_copyout.c/parallel_copyout.c2 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_copyout.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005308995023369789
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_copyout.c/parallel_copyout.c3 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_copyout.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005016783019527793
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT3 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_copyout.c/parallel_copyout.c4 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_copyout.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004932764917612076
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_copyout.c/parallel_copyout.c5 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_copyout.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004860967863351107
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT2 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_copyout.c/parallel_copyout.c6 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_copyout.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004789872094988823
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_copyout.c/parallel_copyout.c7 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_copyout.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.0048539850395172834
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_create.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_create.c/parallel_create.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_create.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.0049799769185483456
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_create.c/parallel_create.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_create.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005005958024412394
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_default_copy.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_default_copy.c/parallel_default_copy.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_default_copy.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005195573903620243
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_default_copy.c/parallel_default_copy.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_default_copy.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.0047610970214009285
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT2 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_default_copy.c/parallel_default_copy.c2 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_default_copy.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005268349079415202
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_default_copy.c/parallel_default_copy.c3 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_default_copy.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005094445077702403
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_default_present.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_default_present.c/parallel_default_present.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_default_present.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005323940888047218
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_default_present.c/parallel_default_present.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_default_present.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005288602085784078
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_deviceptr.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_deviceptr.c/parallel_deviceptr.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_deviceptr.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005229306872934103
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_deviceptr.c/parallel_deviceptr.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_deviceptr.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.00523838703520596
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_firstprivate.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_firstprivate.c/parallel_firstprivate.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_firstprivate.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005225955042988062
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_firstprivate.c/parallel_firstprivate.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_firstprivate.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.00449870596639812
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT2 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_firstprivate.c/parallel_firstprivate.c2 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_firstprivate.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004790569888427854
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_firstprivate.c/parallel_firstprivate.c3 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_firstprivate.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005096121923997998
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_if.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_if.c/parallel_if.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_if.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005024953978136182
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_if.c/parallel_if.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_if.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005126711912453175
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT2 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_if.c/parallel_if.c2 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_if.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.00497906981036067
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_if.c/parallel_if.c3 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_if.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004894002806395292
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT3 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_if.c/parallel_if.c4 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_if.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.0047942709643393755
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_if.c/parallel_if.c5 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_if.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005244811996817589
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT2 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_if.c/parallel_if.c6 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_if.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005419763037934899
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_if.c/parallel_if.c7 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_if.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005296773975715041
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_independent_atomic.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_independent_atomic.c/parallel_independent_atomic.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_independent_atomic.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.0051410989835858345
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_independent_atomic.c/parallel_independent_atomic.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_independent_atomic.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005205492023378611
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT2 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_independent_atomic.c/parallel_independent_atomic.c2 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_independent_atomic.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004870675969868898
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_independent_atomic.c/parallel_independent_atomic.c3 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_independent_atomic.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004698310047388077
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_independent_atomic_capture.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_independent_atomic_capture.c/parallel_independent_atomic_capture.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_independent_atomic_capture.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005682992050424218
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_independent_atomic_capture.c/parallel_independent_atomic_capture.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_independent_atomic_capture.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005389312980696559
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_independent_atomic_read.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_independent_atomic_read.c/parallel_independent_atomic_read.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_independent_atomic_read.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004878359846770763
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_independent_atomic_read.c/parallel_independent_atomic_read.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_independent_atomic_read.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004910974996164441
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_independent_atomic_update.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_independent_atomic_update.c/parallel_independent_atomic_update.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_independent_atomic_update.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004954764852300286
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_independent_atomic_update.c/parallel_independent_atomic_update.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_independent_atomic_update.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004781070863828063
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_independent_atomic_write.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_independent_atomic_write.c/parallel_independent_atomic_write.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_independent_atomic_write.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004780932096764445
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_independent_atomic_write.c/parallel_independent_atomic_write.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_independent_atomic_write.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004767592065036297
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop.c/parallel_loop.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004620997002348304
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop.c/parallel_loop.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004571130964905024
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT2 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop.c/parallel_loop.c2 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004573155893012881
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop.c/parallel_loop.c3 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.00455367099493742
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_async.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_async.c/parallel_loop_async.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_async.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004662692081183195
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_async.c/parallel_loop_async.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_async.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.0046080059837549925
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_auto.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_auto.c/parallel_loop_auto.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_auto.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004988985834643245
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_auto.c/parallel_loop_auto.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_auto.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005067627178505063
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT2 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_auto.c/parallel_loop_auto.c2 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_auto.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004929413087666035
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_auto.c/parallel_loop_auto.c3 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_auto.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005053588887676597
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT3 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_auto.c/parallel_loop_auto.c4 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_auto.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.0053751349914819
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_auto.c/parallel_loop_auto.c5 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_auto.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004850910976529121
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT2 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_auto.c/parallel_loop_auto.c6 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_auto.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004854264901950955
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_auto.c/parallel_loop_auto.c7 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_auto.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.00465249503031373
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_gang.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_gang.c/parallel_loop_gang.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_gang.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004686855943873525
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_gang.c/parallel_loop_gang.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_gang.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004691744921728969
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_independent.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_independent.c/parallel_loop_independent.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_independent.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.0046873451210558414
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_independent.c/parallel_loop_independent.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_independent.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004699358018115163
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_independent_reduction.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_independent_reduction.c/parallel_loop_independent_reduction.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_independent_reduction.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005660712020471692
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_independent_reduction.c/parallel_loop_independent_reduction.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_independent_reduction.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005381978815421462
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_reduction_add_general.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_add_general.c/parallel_loop_reduction_add_general.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_add_general.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005274773808196187
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_add_general.c/parallel_loop_reduction_add_general.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_add_general.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.008952434873208404
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT2 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_add_general.c/parallel_loop_reduction_add_general.c2 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_add_general.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.008945869980379939
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_add_general.c/parallel_loop_reduction_add_general.c3 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_add_general.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.009043716127052903
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_reduction_add_general_type_check_pt1.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -DT2 -DT3 -DT4 -DT5 -DT6 -DT7 -DT8 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_add_general_type_check_pt1.c/parallel_loop_reduction_add_general_type_check_pt1.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_add_general_type_check_pt1.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.008904525078833103
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT2 -DT3 -DT4 -DT5 -DT6 -DT7 -DT8 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_add_general_type_check_pt1.c/parallel_loop_reduction_add_general_type_check_pt1.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_add_general_type_check_pt1.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.009019901044666767
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -DT3 -DT4 -DT5 -DT6 -DT7 -DT8 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_add_general_type_check_pt1.c/parallel_loop_reduction_add_general_type_check_pt1.c2 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_add_general_type_check_pt1.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.0089671709574759
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -DT2 -DT4 -DT5 -DT6 -DT7 -DT8 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_add_general_type_check_pt1.c/parallel_loop_reduction_add_general_type_check_pt1.c3 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_add_general_type_check_pt1.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005056242924183607
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -DT2 -DT3 -DT5 -DT6 -DT7 -DT8 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_add_general_type_check_pt1.c/parallel_loop_reduction_add_general_type_check_pt1.c4 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_add_general_type_check_pt1.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005185587098821998
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -DT2 -DT3 -DT4 -DT6 -DT7 -DT8 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_add_general_type_check_pt1.c/parallel_loop_reduction_add_general_type_check_pt1.c5 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_add_general_type_check_pt1.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.0051211251411587
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -DT2 -DT3 -DT4 -DT5 -DT7 -DT8 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_add_general_type_check_pt1.c/parallel_loop_reduction_add_general_type_check_pt1.c6 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_add_general_type_check_pt1.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004869488999247551
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -DT2 -DT3 -DT4 -DT5 -DT6 -DT8 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_add_general_type_check_pt1.c/parallel_loop_reduction_add_general_type_check_pt1.c7 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_add_general_type_check_pt1.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005073563894256949
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -DT2 -DT3 -DT4 -DT5 -DT6 -DT7 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_add_general_type_check_pt1.c/parallel_loop_reduction_add_general_type_check_pt1.c8 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_add_general_type_check_pt1.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.00501538603566587
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT8 -DT1 -DT2 -DT3 -DT4 -DT5 -DT6 -DT7 -DT8 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_add_general_type_check_pt1.c/parallel_loop_reduction_add_general_type_check_pt1.c9 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_add_general_type_check_pt1.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005123011069372296
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_reduction_add_general_type_check_pt2.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -DT2 -DT3 -DT4 -DT5 -DT6 -DT7 -DT8 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_add_general_type_check_pt2.c/parallel_loop_reduction_add_general_type_check_pt2.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_add_general_type_check_pt2.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.010579649126157165
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT2 -DT3 -DT4 -DT5 -DT6 -DT7 -DT8 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_add_general_type_check_pt2.c/parallel_loop_reduction_add_general_type_check_pt2.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_add_general_type_check_pt2.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.010376762133091688
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -DT3 -DT4 -DT5 -DT6 -DT7 -DT8 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_add_general_type_check_pt2.c/parallel_loop_reduction_add_general_type_check_pt2.c2 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_add_general_type_check_pt2.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.01009083492681384
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -DT2 -DT4 -DT5 -DT6 -DT7 -DT8 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_add_general_type_check_pt2.c/parallel_loop_reduction_add_general_type_check_pt2.c3 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_add_general_type_check_pt2.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.006240457994863391
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -DT2 -DT3 -DT5 -DT6 -DT7 -DT8 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_add_general_type_check_pt2.c/parallel_loop_reduction_add_general_type_check_pt2.c4 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_add_general_type_check_pt2.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.010461129015311599
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -DT2 -DT3 -DT4 -DT6 -DT7 -DT8 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_add_general_type_check_pt2.c/parallel_loop_reduction_add_general_type_check_pt2.c5 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_add_general_type_check_pt2.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.006066974019631743
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -DT2 -DT3 -DT4 -DT5 -DT7 -DT8 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_add_general_type_check_pt2.c/parallel_loop_reduction_add_general_type_check_pt2.c6 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_add_general_type_check_pt2.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.0054394579492509365
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -DT2 -DT3 -DT4 -DT5 -DT6 -DT8 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_add_general_type_check_pt2.c/parallel_loop_reduction_add_general_type_check_pt2.c7 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_add_general_type_check_pt2.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005028795916587114
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -DT2 -DT3 -DT4 -DT5 -DT6 -DT7 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_add_general_type_check_pt2.c/parallel_loop_reduction_add_general_type_check_pt2.c8 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_add_general_type_check_pt2.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.0050348020158708096
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT8 -DT1 -DT2 -DT3 -DT4 -DT5 -DT6 -DT7 -DT8 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_add_general_type_check_pt2.c/parallel_loop_reduction_add_general_type_check_pt2.c9 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_add_general_type_check_pt2.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004999882075935602
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_reduction_add_general_type_check_pt3.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_add_general_type_check_pt3.c/parallel_loop_reduction_add_general_type_check_pt3.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_add_general_type_check_pt3.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.0056562419049441814
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_add_general_type_check_pt3.c/parallel_loop_reduction_add_general_type_check_pt3.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_add_general_type_check_pt3.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005115746986120939
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT2 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_add_general_type_check_pt3.c/parallel_loop_reduction_add_general_type_check_pt3.c2 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_add_general_type_check_pt3.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004869070136919618
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_add_general_type_check_pt3.c/parallel_loop_reduction_add_general_type_check_pt3.c3 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_add_general_type_check_pt3.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005196901969611645
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_reduction_add_loop.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_add_loop.c/parallel_loop_reduction_add_loop.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_add_loop.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004988009110093117
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_add_loop.c/parallel_loop_reduction_add_loop.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_add_loop.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004845952847972512
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT2 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_add_loop.c/parallel_loop_reduction_add_loop.c2 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_add_loop.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004835966043174267
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_add_loop.c/parallel_loop_reduction_add_loop.c3 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_add_loop.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004868930904194713
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_reduction_add_vector_loop.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_add_vector_loop.c/parallel_loop_reduction_add_vector_loop.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_add_vector_loop.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.0053729701321572065
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_add_vector_loop.c/parallel_loop_reduction_add_vector_loop.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_add_vector_loop.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004839387955144048
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT2 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_add_vector_loop.c/parallel_loop_reduction_add_vector_loop.c2 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_add_vector_loop.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004968593129888177
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_add_vector_loop.c/parallel_loop_reduction_add_vector_loop.c3 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_add_vector_loop.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004875076934695244
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_reduction_and_general.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_and_general.c/parallel_loop_reduction_and_general.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_and_general.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.00556663703173399
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_and_general.c/parallel_loop_reduction_and_general.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_and_general.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005268207984045148
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT2 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_and_general.c/parallel_loop_reduction_and_general.c2 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_and_general.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.0051290858536958694
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_and_general.c/parallel_loop_reduction_and_general.c3 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_and_general.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004913280019536614
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_reduction_and_loop.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_and_loop.c/parallel_loop_reduction_and_loop.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_and_loop.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005123568931594491
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_and_loop.c/parallel_loop_reduction_and_loop.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_and_loop.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004813477164134383
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT2 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_and_loop.c/parallel_loop_reduction_and_loop.c2 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_and_loop.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004737979033961892
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_and_loop.c/parallel_loop_reduction_and_loop.c3 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_and_loop.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004766615107655525
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_reduction_and_vector_loop.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_and_vector_loop.c/parallel_loop_reduction_and_vector_loop.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_and_vector_loop.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004957906901836395
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_and_vector_loop.c/parallel_loop_reduction_and_vector_loop.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_and_vector_loop.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.00513635016977787
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT2 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_and_vector_loop.c/parallel_loop_reduction_and_vector_loop.c2 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_and_vector_loop.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004880663938820362
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_and_vector_loop.c/parallel_loop_reduction_and_vector_loop.c3 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_and_vector_loop.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004784842953085899
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_reduction_bitand_general.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_bitand_general.c/parallel_loop_reduction_bitand_general.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitand_general.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005633475026115775
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_bitand_general.c/parallel_loop_reduction_bitand_general.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitand_general.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005379674024879932
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT2 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_bitand_general.c/parallel_loop_reduction_bitand_general.c2 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitand_general.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005218483041971922
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_bitand_general.c/parallel_loop_reduction_bitand_general.c3 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitand_general.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005242089042440057
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_reduction_bitand_loop.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_bitand_loop.c/parallel_loop_reduction_bitand_loop.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitand_loop.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005229378119111061
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_bitand_loop.c/parallel_loop_reduction_bitand_loop.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitand_loop.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005255707073956728
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT2 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_bitand_loop.c/parallel_loop_reduction_bitand_loop.c2 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitand_loop.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005190686089918017
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_bitand_loop.c/parallel_loop_reduction_bitand_loop.c3 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitand_loop.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005236640805378556
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_reduction_bitand_vector_loop.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_bitand_vector_loop.c/parallel_loop_reduction_bitand_vector_loop.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitand_vector_loop.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005236571189016104
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_bitand_vector_loop.c/parallel_loop_reduction_bitand_vector_loop.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitand_vector_loop.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.0050877409521490335
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT2 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_bitand_vector_loop.c/parallel_loop_reduction_bitand_vector_loop.c2 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitand_vector_loop.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.0051054798532277346
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_bitand_vector_loop.c/parallel_loop_reduction_bitand_vector_loop.c3 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitand_vector_loop.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005150178913027048
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_reduction_bitor_general.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_bitor_general.c/parallel_loop_reduction_bitor_general.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitor_general.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005200672894716263
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_bitor_general.c/parallel_loop_reduction_bitor_general.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitor_general.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.009423719020560384
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT2 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_bitor_general.c/parallel_loop_reduction_bitor_general.c2 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitor_general.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005268906941637397
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_bitor_general.c/parallel_loop_reduction_bitor_general.c3 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitor_general.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004987101070582867
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_reduction_bitor_loop.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_bitor_loop.c/parallel_loop_reduction_bitor_loop.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitor_loop.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.0050019770860672
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_bitor_loop.c/parallel_loop_reduction_bitor_loop.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitor_loop.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004883177811279893
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT2 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_bitor_loop.c/parallel_loop_reduction_bitor_loop.c2 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitor_loop.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004758303053677082
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_bitor_loop.c/parallel_loop_reduction_bitor_loop.c3 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitor_loop.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.00479105906561017
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_reduction_bitor_vector_loop.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_bitor_vector_loop.c/parallel_loop_reduction_bitor_vector_loop.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitor_vector_loop.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005332951201125979
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_bitor_vector_loop.c/parallel_loop_reduction_bitor_vector_loop.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitor_vector_loop.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.0052066100761294365
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT2 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_bitor_vector_loop.c/parallel_loop_reduction_bitor_vector_loop.c2 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitor_vector_loop.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005076846107840538
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_bitor_vector_loop.c/parallel_loop_reduction_bitor_vector_loop.c3 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitor_vector_loop.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005008890992030501
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_reduction_bitxor_general.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_bitxor_general.c/parallel_loop_reduction_bitxor_general.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitxor_general.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005780000006780028
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_bitxor_general.c/parallel_loop_reduction_bitxor_general.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitxor_general.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005558395991101861
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT2 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_bitxor_general.c/parallel_loop_reduction_bitxor_general.c2 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitxor_general.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005336791975423694
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_bitxor_general.c/parallel_loop_reduction_bitxor_general.c3 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitxor_general.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005679919151589274
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_reduction_bitxor_loop.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_bitxor_loop.c/parallel_loop_reduction_bitxor_loop.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitxor_loop.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.0056268388871103525
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_bitxor_loop.c/parallel_loop_reduction_bitxor_loop.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitxor_loop.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005469001131132245
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT2 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_bitxor_loop.c/parallel_loop_reduction_bitxor_loop.c2 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitxor_loop.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005445114802569151
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_bitxor_loop.c/parallel_loop_reduction_bitxor_loop.c3 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitxor_loop.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.00527798687107861
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_reduction_bitxor_vector_loop.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_bitxor_vector_loop.c/parallel_loop_reduction_bitxor_vector_loop.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitxor_vector_loop.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005049887113273144
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_bitxor_vector_loop.c/parallel_loop_reduction_bitxor_vector_loop.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitxor_vector_loop.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004753134911879897
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT2 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_bitxor_vector_loop.c/parallel_loop_reduction_bitxor_vector_loop.c2 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitxor_vector_loop.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004806075012311339
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_bitxor_vector_loop.c/parallel_loop_reduction_bitxor_vector_loop.c3 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitxor_vector_loop.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004923057043924928
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_reduction_max_general.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_max_general.c/parallel_loop_reduction_max_general.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_max_general.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005655403947457671
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_max_general.c/parallel_loop_reduction_max_general.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_max_general.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005494910990819335
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT2 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_max_general.c/parallel_loop_reduction_max_general.c2 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_max_general.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005472911987453699
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_max_general.c/parallel_loop_reduction_max_general.c3 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_max_general.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005364309996366501
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_reduction_max_loop.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_max_loop.c/parallel_loop_reduction_max_loop.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_max_loop.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005559933139011264
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_max_loop.c/parallel_loop_reduction_max_loop.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_max_loop.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005356556968763471
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT2 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_max_loop.c/parallel_loop_reduction_max_loop.c2 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_max_loop.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.0057663810439407825
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_max_loop.c/parallel_loop_reduction_max_loop.c3 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_max_loop.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005964657990261912
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_reduction_max_vector_loop.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_max_vector_loop.c/parallel_loop_reduction_max_vector_loop.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_max_vector_loop.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005105549935251474
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_max_vector_loop.c/parallel_loop_reduction_max_vector_loop.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_max_vector_loop.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.00518083805218339
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT2 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_max_vector_loop.c/parallel_loop_reduction_max_vector_loop.c2 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_max_vector_loop.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005246139131486416
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_max_vector_loop.c/parallel_loop_reduction_max_vector_loop.c3 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_max_vector_loop.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005790126975625753
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_reduction_min_general.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_min_general.c/parallel_loop_reduction_min_general.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_min_general.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.010010797996073961
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_min_general.c/parallel_loop_reduction_min_general.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_min_general.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.010193640133365989
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT2 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_min_general.c/parallel_loop_reduction_min_general.c2 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_min_general.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.010303708957508206
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_min_general.c/parallel_loop_reduction_min_general.c3 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_min_general.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.0101565548684448
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_reduction_min_loop.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_min_loop.c/parallel_loop_reduction_min_loop.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_min_loop.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005202419124543667
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_min_loop.c/parallel_loop_reduction_min_loop.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_min_loop.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.00480265193618834
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT2 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_min_loop.c/parallel_loop_reduction_min_loop.c2 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_min_loop.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005130065139383078
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_min_loop.c/parallel_loop_reduction_min_loop.c3 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_min_loop.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.00520192994736135
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_reduction_min_vector_loop.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_min_vector_loop.c/parallel_loop_reduction_min_vector_loop.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_min_vector_loop.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005741028813645244
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_min_vector_loop.c/parallel_loop_reduction_min_vector_loop.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_min_vector_loop.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005568522959947586
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT2 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_min_vector_loop.c/parallel_loop_reduction_min_vector_loop.c2 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_min_vector_loop.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005635849898681045
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_min_vector_loop.c/parallel_loop_reduction_min_vector_loop.c3 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_min_vector_loop.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005186006892472506
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_reduction_multiply_general.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_multiply_general.c/parallel_loop_reduction_multiply_general.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_multiply_general.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005394479958340526
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_multiply_general.c/parallel_loop_reduction_multiply_general.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_multiply_general.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005491138901561499
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT2 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_multiply_general.c/parallel_loop_reduction_multiply_general.c2 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_multiply_general.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.010353714926168323
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_multiply_general.c/parallel_loop_reduction_multiply_general.c3 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_multiply_general.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005983934039250016
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_reduction_multiply_loop.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_multiply_loop.c/parallel_loop_reduction_multiply_loop.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_multiply_loop.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005023767007514834
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_multiply_loop.c/parallel_loop_reduction_multiply_loop.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_multiply_loop.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005864646984264255
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT2 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_multiply_loop.c/parallel_loop_reduction_multiply_loop.c2 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_multiply_loop.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005416898988187313
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_multiply_loop.c/parallel_loop_reduction_multiply_loop.c3 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_multiply_loop.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.0053388881497085094
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_reduction_multiply_vector_loop.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT3 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_multiply_vector_loop.c/parallel_loop_reduction_multiply_vector_loop.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_multiply_vector_loop.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.0053870780393481255
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT3 -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_multiply_vector_loop.c/parallel_loop_reduction_multiply_vector_loop.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_multiply_vector_loop.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005328551167622209
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT3 -DT2 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_multiply_vector_loop.c/parallel_loop_reduction_multiply_vector_loop.c2 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_multiply_vector_loop.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005168477073311806
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT3 -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_multiply_vector_loop.c/parallel_loop_reduction_multiply_vector_loop.c3 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_multiply_vector_loop.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005226164124906063
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_reduction_or_general.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_or_general.c/parallel_loop_reduction_or_general.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_or_general.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005300614982843399
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_or_general.c/parallel_loop_reduction_or_general.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_or_general.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.00501804007217288
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT2 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_or_general.c/parallel_loop_reduction_or_general.c2 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_or_general.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.008951737079769373
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_or_general.c/parallel_loop_reduction_or_general.c3 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_or_general.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005227561108767986
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_reduction_or_loop.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_or_loop.c/parallel_loop_reduction_or_loop.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_or_loop.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.010022670961916447
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_or_loop.c/parallel_loop_reduction_or_loop.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_or_loop.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.009918888099491596
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_reduction_or_vector_loop.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_or_vector_loop.c/parallel_loop_reduction_or_vector_loop.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_or_vector_loop.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.010272420942783356
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_or_vector_loop.c/parallel_loop_reduction_or_vector_loop.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_or_vector_loop.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.009967077989131212
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_seq.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_seq.c/parallel_loop_seq.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_seq.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005576833849772811
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_seq.c/parallel_loop_seq.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_seq.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004620716907083988
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_tile.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_tile.c/parallel_loop_tile.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_tile.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005806469824165106
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_tile.c/parallel_loop_tile.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_tile.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.009444252122193575
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT2 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_tile.c/parallel_loop_tile.c2 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_tile.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.0050690940115600824
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_tile.c/parallel_loop_tile.c3 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_tile.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005666649201884866
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_vector.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_vector.c/parallel_loop_vector.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_vector.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.0052999157924205065
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_vector.c/parallel_loop_vector.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_vector.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005301523022353649
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_vector_blocking.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_vector_blocking.c/parallel_loop_vector_blocking.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_vector_blocking.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005205631954595447
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_vector_blocking.c/parallel_loop_vector_blocking.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_vector_blocking.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.0052242090459913015
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_worker.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_worker.c/parallel_loop_worker.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_worker.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.0058494918048381805
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_worker.c/parallel_loop_worker.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_worker.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005158349173143506
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_worker_blocking.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_worker_blocking.c/parallel_loop_worker_blocking.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_worker_blocking.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004959024954587221
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_worker_blocking.c/parallel_loop_worker_blocking.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_worker_blocking.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004696076037362218
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_present.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_present.c/parallel_present.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_present.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.006053913850337267
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_present.c/parallel_present.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_present.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.0051608639769256115
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_private.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_private.c/parallel_private.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_private.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005269255954772234
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_private.c/parallel_private.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_private.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.0051175630651414394
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_reduction.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_reduction.c/parallel_reduction.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_reduction.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005006656050682068
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_reduction.c/parallel_reduction.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_reduction.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004923196975141764
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_scalar_default_firstprivate.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_scalar_default_firstprivate.c/parallel_scalar_default_firstprivate.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_scalar_default_firstprivate.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005422904854640365
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_scalar_default_firstprivate.c/parallel_scalar_default_firstprivate.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_scalar_default_firstprivate.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004903082037344575
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_switch.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_switch.c/parallel_switch.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_switch.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005428143078461289
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_switch.c/parallel_switch.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_switch.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005730343051254749
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_wait.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_wait.c/parallel_wait.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_wait.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005939445924013853
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_wait.c/parallel_wait.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_wait.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005355440080165863
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_wait_devnum.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_wait_devnum.c/parallel_wait_devnum.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_wait_devnum.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.01057371310889721
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_wait_devnum.c/parallel_wait_devnum.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_wait_devnum.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005848583998158574
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_while_loop.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_while_loop.c/parallel_while_loop.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_while_loop.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005749759031459689
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_while_loop.c/parallel_while_loop.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_while_loop.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.0053265951573848724
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "routine_bind.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -DT2 -DT3 -DT4 -o /global/u1/v/vaidhy/OpenACCV-V/build/routine_bind.c/routine_bind.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/routine_bind.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005402581999078393
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT2 -DT3 -DT4 -o /global/u1/v/vaidhy/OpenACCV-V/build/routine_bind.c/routine_bind.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/routine_bind.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.00530683109536767
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -DT3 -DT4 -o /global/u1/v/vaidhy/OpenACCV-V/build/routine_bind.c/routine_bind.c2 /global/u1/v/vaidhy/OpenACCV-V/Tests/routine_bind.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005271421978250146
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -DT2 -DT4 -o /global/u1/v/vaidhy/OpenACCV-V/build/routine_bind.c/routine_bind.c3 /global/u1/v/vaidhy/OpenACCV-V/Tests/routine_bind.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005782444961369038
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -DT2 -DT3 -o /global/u1/v/vaidhy/OpenACCV-V/build/routine_bind.c/routine_bind.c4 /global/u1/v/vaidhy/OpenACCV-V/Tests/routine_bind.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005334767047315836
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT4 -DT1 -DT2 -DT3 -DT4 -o /global/u1/v/vaidhy/OpenACCV-V/build/routine_bind.c/routine_bind.c5 /global/u1/v/vaidhy/OpenACCV-V/Tests/routine_bind.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.0054244420025497675
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "routine_gang.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -DT2 -DT3 -DT4 -DT5 -DT6 -DT7 -DT8 -DT9 -DT10 -o /global/u1/v/vaidhy/OpenACCV-V/build/routine_gang.c/routine_gang.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/routine_gang.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005531228147447109
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT2 -DT3 -DT4 -DT5 -DT6 -DT7 -DT8 -DT9 -DT10 -o /global/u1/v/vaidhy/OpenACCV-V/build/routine_gang.c/routine_gang.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/routine_gang.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.0054259090684354305
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -DT3 -DT4 -DT5 -DT6 -DT7 -DT8 -DT9 -DT10 -o /global/u1/v/vaidhy/OpenACCV-V/build/routine_gang.c/routine_gang.c2 /global/u1/v/vaidhy/OpenACCV-V/Tests/routine_gang.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.009515698999166489
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -DT2 -DT4 -DT5 -DT6 -DT7 -DT8 -DT9 -DT10 -o /global/u1/v/vaidhy/OpenACCV-V/build/routine_gang.c/routine_gang.c3 /global/u1/v/vaidhy/OpenACCV-V/Tests/routine_gang.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005103244911879301
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -DT2 -DT3 -DT5 -DT6 -DT7 -DT8 -DT9 -DT10 -o /global/u1/v/vaidhy/OpenACCV-V/build/routine_gang.c/routine_gang.c4 /global/u1/v/vaidhy/OpenACCV-V/Tests/routine_gang.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005127341020852327
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -DT2 -DT3 -DT4 -DT6 -DT7 -DT8 -DT9 -DT10 -o /global/u1/v/vaidhy/OpenACCV-V/build/routine_gang.c/routine_gang.c5 /global/u1/v/vaidhy/OpenACCV-V/Tests/routine_gang.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005396924912929535
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -DT2 -DT3 -DT4 -DT5 -DT7 -DT8 -DT9 -DT10 -o /global/u1/v/vaidhy/OpenACCV-V/build/routine_gang.c/routine_gang.c6 /global/u1/v/vaidhy/OpenACCV-V/Tests/routine_gang.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005134184844791889
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -DT2 -DT3 -DT4 -DT5 -DT6 -DT8 -DT9 -DT10 -o /global/u1/v/vaidhy/OpenACCV-V/build/routine_gang.c/routine_gang.c7 /global/u1/v/vaidhy/OpenACCV-V/Tests/routine_gang.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004900707863271236
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -DT2 -DT3 -DT4 -DT5 -DT6 -DT7 -DT9 -DT10 -o /global/u1/v/vaidhy/OpenACCV-V/build/routine_gang.c/routine_gang.c8 /global/u1/v/vaidhy/OpenACCV-V/Tests/routine_gang.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004993945127353072
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -DT2 -DT3 -DT4 -DT5 -DT6 -DT7 -DT8 -DT10 -o /global/u1/v/vaidhy/OpenACCV-V/build/routine_gang.c/routine_gang.c9 /global/u1/v/vaidhy/OpenACCV-V/Tests/routine_gang.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.009840665850788355
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -DT2 -DT3 -DT4 -DT5 -DT6 -DT7 -DT8 -DT9 -o /global/u1/v/vaidhy/OpenACCV-V/build/routine_gang.c/routine_gang.c10 /global/u1/v/vaidhy/OpenACCV-V/Tests/routine_gang.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.010038664098829031
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT10 -DT1 -DT2 -DT3 -DT4 -DT5 -DT6 -DT7 -DT8 -DT9 -DT10 -o /global/u1/v/vaidhy/OpenACCV-V/build/routine_gang.c/routine_gang.c11 /global/u1/v/vaidhy/OpenACCV-V/Tests/routine_gang.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.01012352085672319
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "routine_nohost.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/routine_nohost.c/routine_nohost.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/routine_nohost.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.01005724212154746
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/routine_nohost.c/routine_nohost.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/routine_nohost.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.010121565079316497
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "routine_seq.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -DT2 -DT3 -DT4 -o /global/u1/v/vaidhy/OpenACCV-V/build/routine_seq.c/routine_seq.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/routine_seq.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005234614945948124
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT2 -DT3 -DT4 -o /global/u1/v/vaidhy/OpenACCV-V/build/routine_seq.c/routine_seq.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/routine_seq.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.0052637390326708555
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -DT3 -DT4 -o /global/u1/v/vaidhy/OpenACCV-V/build/routine_seq.c/routine_seq.c2 /global/u1/v/vaidhy/OpenACCV-V/Tests/routine_seq.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005094934953376651
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -DT2 -DT4 -o /global/u1/v/vaidhy/OpenACCV-V/build/routine_seq.c/routine_seq.c3 /global/u1/v/vaidhy/OpenACCV-V/Tests/routine_seq.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005303337937220931
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -DT2 -DT3 -o /global/u1/v/vaidhy/OpenACCV-V/build/routine_seq.c/routine_seq.c4 /global/u1/v/vaidhy/OpenACCV-V/Tests/routine_seq.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005404887022450566
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT4 -DT1 -DT2 -DT3 -DT4 -o /global/u1/v/vaidhy/OpenACCV-V/build/routine_seq.c/routine_seq.c5 /global/u1/v/vaidhy/OpenACCV-V/Tests/routine_seq.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005991615820676088
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "routine_vector.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -DT2 -DT3 -DT4 -DT5 -DT6 -o /global/u1/v/vaidhy/OpenACCV-V/build/routine_vector.c/routine_vector.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/routine_vector.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.006009286968037486
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT2 -DT3 -DT4 -DT5 -DT6 -o /global/u1/v/vaidhy/OpenACCV-V/build/routine_vector.c/routine_vector.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/routine_vector.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005339655093848705
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -DT3 -DT4 -DT5 -DT6 -o /global/u1/v/vaidhy/OpenACCV-V/build/routine_vector.c/routine_vector.c2 /global/u1/v/vaidhy/OpenACCV-V/Tests/routine_vector.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005819390062242746
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -DT2 -DT4 -DT5 -DT6 -o /global/u1/v/vaidhy/OpenACCV-V/build/routine_vector.c/routine_vector.c3 /global/u1/v/vaidhy/OpenACCV-V/Tests/routine_vector.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004975507967174053
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -DT2 -DT3 -DT5 -DT6 -o /global/u1/v/vaidhy/OpenACCV-V/build/routine_vector.c/routine_vector.c4 /global/u1/v/vaidhy/OpenACCV-V/Tests/routine_vector.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005653518019244075
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -DT2 -DT3 -DT4 -DT6 -o /global/u1/v/vaidhy/OpenACCV-V/build/routine_vector.c/routine_vector.c5 /global/u1/v/vaidhy/OpenACCV-V/Tests/routine_vector.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.010113114025443792
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -DT2 -DT3 -DT4 -DT5 -o /global/u1/v/vaidhy/OpenACCV-V/build/routine_vector.c/routine_vector.c6 /global/u1/v/vaidhy/OpenACCV-V/Tests/routine_vector.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.006177602102980018
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT6 -DT1 -DT2 -DT3 -DT4 -DT5 -DT6 -o /global/u1/v/vaidhy/OpenACCV-V/build/routine_vector.c/routine_vector.c7 /global/u1/v/vaidhy/OpenACCV-V/Tests/routine_vector.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004974180832505226
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "routine_worker.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -DT2 -DT3 -DT4 -DT5 -DT6 -DT7 -DT8 -o /global/u1/v/vaidhy/OpenACCV-V/build/routine_worker.c/routine_worker.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/routine_worker.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.0048535659443587065
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT2 -DT3 -DT4 -DT5 -DT6 -DT7 -DT8 -o /global/u1/v/vaidhy/OpenACCV-V/build/routine_worker.c/routine_worker.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/routine_worker.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004761445801705122
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -DT3 -DT4 -DT5 -DT6 -DT7 -DT8 -o /global/u1/v/vaidhy/OpenACCV-V/build/routine_worker.c/routine_worker.c2 /global/u1/v/vaidhy/OpenACCV-V/Tests/routine_worker.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004753972869366407
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -DT2 -DT4 -DT5 -DT6 -DT7 -DT8 -o /global/u1/v/vaidhy/OpenACCV-V/build/routine_worker.c/routine_worker.c3 /global/u1/v/vaidhy/OpenACCV-V/Tests/routine_worker.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004973551956936717
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -DT2 -DT3 -DT5 -DT6 -DT7 -DT8 -o /global/u1/v/vaidhy/OpenACCV-V/build/routine_worker.c/routine_worker.c4 /global/u1/v/vaidhy/OpenACCV-V/Tests/routine_worker.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.0100214839912951
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -DT2 -DT3 -DT4 -DT6 -DT7 -DT8 -o /global/u1/v/vaidhy/OpenACCV-V/build/routine_worker.c/routine_worker.c5 /global/u1/v/vaidhy/OpenACCV-V/Tests/routine_worker.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.006020182045176625
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -DT2 -DT3 -DT4 -DT5 -DT7 -DT8 -o /global/u1/v/vaidhy/OpenACCV-V/build/routine_worker.c/routine_worker.c6 /global/u1/v/vaidhy/OpenACCV-V/Tests/routine_worker.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005852913949638605
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -DT2 -DT3 -DT4 -DT5 -DT6 -DT8 -o /global/u1/v/vaidhy/OpenACCV-V/build/routine_worker.c/routine_worker.c7 /global/u1/v/vaidhy/OpenACCV-V/Tests/routine_worker.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005452728131785989
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -DT2 -DT3 -DT4 -DT5 -DT6 -DT7 -o /global/u1/v/vaidhy/OpenACCV-V/build/routine_worker.c/routine_worker.c8 /global/u1/v/vaidhy/OpenACCV-V/Tests/routine_worker.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005773504031822085
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT8 -DT1 -DT2 -DT3 -DT4 -DT5 -DT6 -DT7 -DT8 -o /global/u1/v/vaidhy/OpenACCV-V/build/routine_worker.c/routine_worker.c9 /global/u1/v/vaidhy/OpenACCV-V/Tests/routine_worker.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005826932843774557
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/serial.c/serial.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/serial.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.0053367228247225285
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/serial.c/serial.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/serial.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005691582104191184
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_async.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_async.c/serial_async.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/serial_async.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005017132963985205
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_async.c/serial_async.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/serial_async.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004860060987994075
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_copy.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_copy.c/serial_copy.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/serial_copy.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.00542919198051095
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_copy.c/serial_copy.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/serial_copy.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.010004582116380334
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_copyin.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_copyin.c/serial_copyin.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/serial_copyin.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005743962014093995
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_copyin.c/serial_copyin.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/serial_copyin.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005555182928219438
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT2 -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_copyin.c/serial_copyin.c2 /global/u1/v/vaidhy/OpenACCV-V/Tests/serial_copyin.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005711696110665798
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_copyin.c/serial_copyin.c3 /global/u1/v/vaidhy/OpenACCV-V/Tests/serial_copyin.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005381979048252106
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_copyout.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_copyout.c/serial_copyout.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/serial_copyout.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005508949048817158
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_copyout.c/serial_copyout.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/serial_copyout.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005241808947175741
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT2 -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_copyout.c/serial_copyout.c2 /global/u1/v/vaidhy/OpenACCV-V/Tests/serial_copyout.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005060153780505061
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_copyout.c/serial_copyout.c3 /global/u1/v/vaidhy/OpenACCV-V/Tests/serial_copyout.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005070490995422006
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT3 -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_copyout.c/serial_copyout.c4 /global/u1/v/vaidhy/OpenACCV-V/Tests/serial_copyout.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005073842825368047
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_copyout.c/serial_copyout.c5 /global/u1/v/vaidhy/OpenACCV-V/Tests/serial_copyout.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004990104120224714
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT2 -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_copyout.c/serial_copyout.c6 /global/u1/v/vaidhy/OpenACCV-V/Tests/serial_copyout.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.010059268213808537
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_copyout.c/serial_copyout.c7 /global/u1/v/vaidhy/OpenACCV-V/Tests/serial_copyout.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.010103128151968122
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_create.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_create.c/serial_create.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/serial_create.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.010168917011469603
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_create.c/serial_create.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/serial_create.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.009899331955239177
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_default_copy.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_default_copy.c/serial_default_copy.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/serial_default_copy.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.006103431107476354
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_default_copy.c/serial_default_copy.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/serial_default_copy.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005390011006966233
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT2 -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_default_copy.c/serial_default_copy.c2 /global/u1/v/vaidhy/OpenACCV-V/Tests/serial_default_copy.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005149828968569636
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_default_copy.c/serial_default_copy.c3 /global/u1/v/vaidhy/OpenACCV-V/Tests/serial_default_copy.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005168336909264326
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_default_present.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_default_present.c/serial_default_present.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/serial_default_present.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.009947382844984531
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_default_present.c/serial_default_present.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/serial_default_present.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005794387077912688
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_deviceptr.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_deviceptr.c/serial_deviceptr.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/serial_deviceptr.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.010038663865998387
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_deviceptr.c/serial_deviceptr.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/serial_deviceptr.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.0056474420707672834
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_firstprivate.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_firstprivate.c/serial_firstprivate.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/serial_firstprivate.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005635638954117894
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_firstprivate.c/serial_firstprivate.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/serial_firstprivate.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005520193139091134
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT2 -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_firstprivate.c/serial_firstprivate.c2 /global/u1/v/vaidhy/OpenACCV-V/Tests/serial_firstprivate.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005274774041026831
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_firstprivate.c/serial_firstprivate.c3 /global/u1/v/vaidhy/OpenACCV-V/Tests/serial_firstprivate.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005214432021602988
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_if.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_if.c/serial_if.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/serial_if.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005154018988832831
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_if.c/serial_if.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/serial_if.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004801325034350157
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT2 -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_if.c/serial_if.c2 /global/u1/v/vaidhy/OpenACCV-V/Tests/serial_if.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005924849072471261
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_if.c/serial_if.c3 /global/u1/v/vaidhy/OpenACCV-V/Tests/serial_if.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005445603979751468
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT3 -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_if.c/serial_if.c4 /global/u1/v/vaidhy/OpenACCV-V/Tests/serial_if.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.00558095402084291
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_if.c/serial_if.c5 /global/u1/v/vaidhy/OpenACCV-V/Tests/serial_if.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.0056635059881955385
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT2 -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_if.c/serial_if.c6 /global/u1/v/vaidhy/OpenACCV-V/Tests/serial_if.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005652541061863303
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_if.c/serial_if.c7 /global/u1/v/vaidhy/OpenACCV-V/Tests/serial_if.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005541354883462191
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_loop.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_loop.c/serial_loop.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/serial_loop.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.010283316019922495
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_loop.c/serial_loop.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/serial_loop.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.0059406328946352005
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT2 -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_loop.c/serial_loop.c2 /global/u1/v/vaidhy/OpenACCV-V/Tests/serial_loop.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005484923953190446
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_loop.c/serial_loop.c3 /global/u1/v/vaidhy/OpenACCV-V/Tests/serial_loop.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.006396063137799501
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_loop_async.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_loop_async.c/serial_loop_async.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/serial_loop_async.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005491209914907813
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_loop_async.c/serial_loop_async.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/serial_loop_async.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.009776273043826222
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_loop_auto.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_loop_auto.c/serial_loop_auto.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/serial_loop_auto.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.00972005189396441
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_loop_auto.c/serial_loop_auto.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/serial_loop_auto.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.00984178390353918
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT2 -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_loop_auto.c/serial_loop_auto.c2 /global/u1/v/vaidhy/OpenACCV-V/Tests/serial_loop_auto.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.00973618496209383
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_loop_auto.c/serial_loop_auto.c3 /global/u1/v/vaidhy/OpenACCV-V/Tests/serial_loop_auto.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.009764401009306312
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_loop_gang.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_loop_gang.c/serial_loop_gang.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/serial_loop_gang.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005316259106621146
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_loop_gang.c/serial_loop_gang.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/serial_loop_gang.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004919914994388819
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_loop_reduction_add_general.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_loop_reduction_add_general.c/serial_loop_reduction_add_general.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/serial_loop_reduction_add_general.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004736304050311446
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_loop_reduction_add_general.c/serial_loop_reduction_add_general.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/serial_loop_reduction_add_general.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005088368896394968
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_loop_reduction_add_loop.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_loop_reduction_add_loop.c/serial_loop_reduction_add_loop.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/serial_loop_reduction_add_loop.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005542960949242115
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_loop_reduction_add_loop.c/serial_loop_reduction_add_loop.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/serial_loop_reduction_add_loop.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005304666003212333
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_loop_reduction_add_vector_loop.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_loop_reduction_add_vector_loop.c/serial_loop_reduction_add_vector_loop.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/serial_loop_reduction_add_vector_loop.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005442182067781687
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_loop_reduction_add_vector_loop.c/serial_loop_reduction_add_vector_loop.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/serial_loop_reduction_add_vector_loop.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005166731076315045
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_loop_reduction_and_general.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_loop_reduction_and_general.c/serial_loop_reduction_and_general.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/serial_loop_reduction_and_general.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005291745066642761
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_loop_reduction_and_general.c/serial_loop_reduction_and_general.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/serial_loop_reduction_and_general.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.00580800580792129
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_loop_reduction_and_loop.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_loop_reduction_and_loop.c/serial_loop_reduction_and_loop.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/serial_loop_reduction_and_loop.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004916073055937886
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_loop_reduction_and_loop.c/serial_loop_reduction_and_loop.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/serial_loop_reduction_and_loop.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005477451020851731
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_loop_reduction_and_vector_loop.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_loop_reduction_and_vector_loop.c/serial_loop_reduction_and_vector_loop.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/serial_loop_reduction_and_vector_loop.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.009841713821515441
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_loop_reduction_and_vector_loop.c/serial_loop_reduction_and_vector_loop.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/serial_loop_reduction_and_vector_loop.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.010244065895676613
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_loop_reduction_bitand_general.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_loop_reduction_bitand_general.c/serial_loop_reduction_bitand_general.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/serial_loop_reduction_bitand_general.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.009938372997567058
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_loop_reduction_bitand_general.c/serial_loop_reduction_bitand_general.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/serial_loop_reduction_bitand_general.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.010006329044699669
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_loop_reduction_bitand_loop.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_loop_reduction_bitand_loop.c/serial_loop_reduction_bitand_loop.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/serial_loop_reduction_bitand_loop.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005589405074715614
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_loop_reduction_bitand_loop.c/serial_loop_reduction_bitand_loop.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/serial_loop_reduction_bitand_loop.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005147036164999008
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_loop_reduction_bitand_vector_loop.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_loop_reduction_bitand_vector_loop.c/serial_loop_reduction_bitand_vector_loop.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/serial_loop_reduction_bitand_vector_loop.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004991500871255994
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_loop_reduction_bitand_vector_loop.c/serial_loop_reduction_bitand_vector_loop.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/serial_loop_reduction_bitand_vector_loop.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.0057403999380767345
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_loop_reduction_bitor_general.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_loop_reduction_bitor_general.c/serial_loop_reduction_bitor_general.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/serial_loop_reduction_bitor_general.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005375414155423641
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_loop_reduction_bitor_general.c/serial_loop_reduction_bitor_general.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/serial_loop_reduction_bitor_general.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.00983060896396637
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_loop_reduction_bitor_loop.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_loop_reduction_bitor_loop.c/serial_loop_reduction_bitor_loop.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/serial_loop_reduction_bitor_loop.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005611754022538662
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_loop_reduction_bitor_loop.c/serial_loop_reduction_bitor_loop.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/serial_loop_reduction_bitor_loop.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005621810909360647
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_loop_reduction_bitor_vector_loop.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_loop_reduction_bitor_vector_loop.c/serial_loop_reduction_bitor_vector_loop.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/serial_loop_reduction_bitor_vector_loop.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.0058003938756883144
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_loop_reduction_bitor_vector_loop.c/serial_loop_reduction_bitor_vector_loop.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/serial_loop_reduction_bitor_vector_loop.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005390150938183069
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_loop_reduction_bitxor_general.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_loop_reduction_bitxor_general.c/serial_loop_reduction_bitxor_general.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/serial_loop_reduction_bitxor_general.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005014758091419935
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_loop_reduction_bitxor_general.c/serial_loop_reduction_bitxor_general.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/serial_loop_reduction_bitxor_general.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004825000884011388
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_loop_reduction_bitxor_loop.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_loop_reduction_bitxor_loop.c/serial_loop_reduction_bitxor_loop.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/serial_loop_reduction_bitxor_loop.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.010013173101469874
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_loop_reduction_bitxor_loop.c/serial_loop_reduction_bitxor_loop.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/serial_loop_reduction_bitxor_loop.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.010128129972144961
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_loop_reduction_bitxor_vector_loop.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_loop_reduction_bitxor_vector_loop.c/serial_loop_reduction_bitxor_vector_loop.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/serial_loop_reduction_bitxor_vector_loop.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.009933345019817352
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_loop_reduction_bitxor_vector_loop.c/serial_loop_reduction_bitxor_vector_loop.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/serial_loop_reduction_bitxor_vector_loop.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.00997357303276658
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_loop_reduction_max_general.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_loop_reduction_max_general.c/serial_loop_reduction_max_general.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/serial_loop_reduction_max_general.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.009396200999617577
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_loop_reduction_max_general.c/serial_loop_reduction_max_general.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/serial_loop_reduction_max_general.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005710229044780135
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_loop_reduction_max_loop.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_loop_reduction_max_loop.c/serial_loop_reduction_max_loop.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/serial_loop_reduction_max_loop.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005717212799936533
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_loop_reduction_max_loop.c/serial_loop_reduction_max_loop.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/serial_loop_reduction_max_loop.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.0055817230604588985
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_loop_reduction_max_vector_loop.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_loop_reduction_max_vector_loop.c/serial_loop_reduction_max_vector_loop.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/serial_loop_reduction_max_vector_loop.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004902804037556052
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_loop_reduction_max_vector_loop.c/serial_loop_reduction_max_vector_loop.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/serial_loop_reduction_max_vector_loop.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004905038047581911
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_loop_reduction_min_general.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_loop_reduction_min_general.c/serial_loop_reduction_min_general.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/serial_loop_reduction_min_general.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004790568957105279
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_loop_reduction_min_general.c/serial_loop_reduction_min_general.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/serial_loop_reduction_min_general.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004822066985070705
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_loop_reduction_min_loop.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_loop_reduction_min_loop.c/serial_loop_reduction_min_loop.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/serial_loop_reduction_min_loop.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.0054087277967482805
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_loop_reduction_min_loop.c/serial_loop_reduction_min_loop.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/serial_loop_reduction_min_loop.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005147523945197463
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_loop_reduction_min_vector_loop.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_loop_reduction_min_vector_loop.c/serial_loop_reduction_min_vector_loop.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/serial_loop_reduction_min_vector_loop.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004884086083620787
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_loop_reduction_min_vector_loop.c/serial_loop_reduction_min_vector_loop.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/serial_loop_reduction_min_vector_loop.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.0060259089805185795
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_loop_reduction_multiply_general.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_loop_reduction_multiply_general.c/serial_loop_reduction_multiply_general.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/serial_loop_reduction_multiply_general.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005299707176163793
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_loop_reduction_multiply_general.c/serial_loop_reduction_multiply_general.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/serial_loop_reduction_multiply_general.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005469209980219603
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_loop_reduction_multiply_loop.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_loop_reduction_multiply_loop.c/serial_loop_reduction_multiply_loop.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/serial_loop_reduction_multiply_loop.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.0052383169531822205
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_loop_reduction_multiply_loop.c/serial_loop_reduction_multiply_loop.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/serial_loop_reduction_multiply_loop.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005150318145751953
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_loop_reduction_multiply_vector_loop.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_loop_reduction_multiply_vector_loop.c/serial_loop_reduction_multiply_vector_loop.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/serial_loop_reduction_multiply_vector_loop.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.00583419599570334
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_loop_reduction_multiply_vector_loop.c/serial_loop_reduction_multiply_vector_loop.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/serial_loop_reduction_multiply_vector_loop.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005056941881775856
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_loop_reduction_or_general.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_loop_reduction_or_general.c/serial_loop_reduction_or_general.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/serial_loop_reduction_or_general.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005028934916481376
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_loop_reduction_or_general.c/serial_loop_reduction_or_general.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/serial_loop_reduction_or_general.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004872143967077136
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_loop_reduction_or_loop.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_loop_reduction_or_loop.c/serial_loop_reduction_or_loop.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/serial_loop_reduction_or_loop.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.009199809981510043
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_loop_reduction_or_loop.c/serial_loop_reduction_or_loop.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/serial_loop_reduction_or_loop.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.009160490008071065
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_loop_reduction_or_vector_loop.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_loop_reduction_or_vector_loop.c/serial_loop_reduction_or_vector_loop.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/serial_loop_reduction_or_vector_loop.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.00903561501763761
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_loop_reduction_or_vector_loop.c/serial_loop_reduction_or_vector_loop.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/serial_loop_reduction_or_vector_loop.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.009103500051423907
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_loop_seq.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_loop_seq.c/serial_loop_seq.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/serial_loop_seq.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005343846045434475
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_loop_seq.c/serial_loop_seq.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/serial_loop_seq.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005182165885344148
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_loop_tile.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_loop_tile.c/serial_loop_tile.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/serial_loop_tile.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005094655090942979
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_loop_tile.c/serial_loop_tile.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/serial_loop_tile.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.00551579287275672
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT2 -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_loop_tile.c/serial_loop_tile.c2 /global/u1/v/vaidhy/OpenACCV-V/Tests/serial_loop_tile.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.006042669992893934
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_loop_tile.c/serial_loop_tile.c3 /global/u1/v/vaidhy/OpenACCV-V/Tests/serial_loop_tile.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005206121131777763
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_loop_vector.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_loop_vector.c/serial_loop_vector.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/serial_loop_vector.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.009054471971467137
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_loop_vector.c/serial_loop_vector.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/serial_loop_vector.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.00906341103836894
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_loop_vector_blocking.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_loop_vector_blocking.c/serial_loop_vector_blocking.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/serial_loop_vector_blocking.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004741750890389085
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_loop_vector_blocking.c/serial_loop_vector_blocking.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/serial_loop_vector_blocking.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.0048293310683220625
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_loop_worker.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_loop_worker.c/serial_loop_worker.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/serial_loop_worker.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005465786904096603
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_loop_worker.c/serial_loop_worker.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/serial_loop_worker.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005067487014457583
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_loop_worker_blocking.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_loop_worker_blocking.c/serial_loop_worker_blocking.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/serial_loop_worker_blocking.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005457337014377117
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_loop_worker_blocking.c/serial_loop_worker_blocking.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/serial_loop_worker_blocking.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005950550781562924
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_present.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_present.c/serial_present.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/serial_present.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005305992206558585
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_present.c/serial_present.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/serial_present.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.0052113591227680445
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_private.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_private.c/serial_private.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/serial_private.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005147314863279462
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_private.c/serial_private.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/serial_private.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005172528093680739
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_reduction.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_reduction.c/serial_reduction.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/serial_reduction.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005770222982391715
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_reduction.c/serial_reduction.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/serial_reduction.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005242368206381798
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_scalar_default_firstprivate.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_scalar_default_firstprivate.c/serial_scalar_default_firstprivate.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/serial_scalar_default_firstprivate.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.006141982972621918
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_scalar_default_firstprivate.c/serial_scalar_default_firstprivate.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/serial_scalar_default_firstprivate.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.010205863043665886
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_switch.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_switch.c/serial_switch.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/serial_switch.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005622579948976636
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_switch.c/serial_switch.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/serial_switch.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.010099215898662806
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_wait.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_wait.c/serial_wait.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/serial_wait.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.009327128995209932
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_wait.c/serial_wait.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/serial_wait.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.009115302935242653
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_while_loop.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_while_loop.c/serial_while_loop.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/serial_while_loop.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005617970135062933
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/serial_while_loop.c/serial_while_loop.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/serial_while_loop.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004870607051998377
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "set_default_async.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/set_default_async.c/set_default_async.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/set_default_async.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.0051367690321058035
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/set_default_async.c/set_default_async.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/set_default_async.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005932322004809976
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "set_device_num.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/set_device_num.c/set_device_num.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/set_device_num.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005436873063445091
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/set_device_num.c/set_device_num.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/set_device_num.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.009938583010807633
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "set_device_type.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/set_device_type.c/set_device_type.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/set_device_type.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005558955017477274
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/set_device_type.c/set_device_type.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/set_device_type.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005529551999643445
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT2 -o /global/u1/v/vaidhy/OpenACCV-V/build/set_device_type.c/set_device_type.c2 /global/u1/v/vaidhy/OpenACCV-V/Tests/set_device_type.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.009354366920888424
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/set_device_type.c/set_device_type.c3 /global/u1/v/vaidhy/OpenACCV-V/Tests/set_device_type.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.009811892174184322
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT3 -o /global/u1/v/vaidhy/OpenACCV-V/build/set_device_type.c/set_device_type.c4 /global/u1/v/vaidhy/OpenACCV-V/Tests/set_device_type.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005622370168566704
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/set_device_type.c/set_device_type.c5 /global/u1/v/vaidhy/OpenACCV-V/Tests/set_device_type.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005303199170157313
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT2 -o /global/u1/v/vaidhy/OpenACCV-V/build/set_device_type.c/set_device_type.c6 /global/u1/v/vaidhy/OpenACCV-V/Tests/set_device_type.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004994642920792103
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/set_device_type.c/set_device_type.c7 /global/u1/v/vaidhy/OpenACCV-V/Tests/set_device_type.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005495189921930432
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "set_device_type_num.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT3 -o /global/u1/v/vaidhy/OpenACCV-V/build/set_device_type_num.c/set_device_type_num.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/set_device_type_num.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005160025088116527
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT3 -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/set_device_type_num.c/set_device_type_num.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/set_device_type_num.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005201651016250253
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT3 -DT2 -o /global/u1/v/vaidhy/OpenACCV-V/build/set_device_type_num.c/set_device_type_num.c2 /global/u1/v/vaidhy/OpenACCV-V/Tests/set_device_type_num.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005242368206381798
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT3 -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/set_device_type_num.c/set_device_type_num.c3 /global/u1/v/vaidhy/OpenACCV-V/Tests/set_device_type_num.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005478637991473079
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "set_device_type_num_nvidia.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/set_device_type_num_nvidia.c/set_device_type_num_nvidia.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/set_device_type_num_nvidia.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.00522414012812078
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/set_device_type_num_nvidia.c/set_device_type_num_nvidia.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/set_device_type_num_nvidia.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005159537075087428
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "set_device_type_nvidia.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/set_device_type_nvidia.c/set_device_type_nvidia.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/set_device_type_nvidia.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.0052974720019847155
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/set_device_type_nvidia.c/set_device_type_nvidia.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/set_device_type_nvidia.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.0050730048678815365
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "set_if.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/set_if.c/set_if.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/set_if.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004865647992119193
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/set_if.c/set_if.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/set_if.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.0048608300276100636
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT2 -o /global/u1/v/vaidhy/OpenACCV-V/build/set_if.c/set_if.c2 /global/u1/v/vaidhy/OpenACCV-V/Tests/set_if.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004893515026196837
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/set_if.c/set_if.c3 /global/u1/v/vaidhy/OpenACCV-V/Tests/set_if.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004664018051698804
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "shutdown.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/shutdown.c/shutdown.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/shutdown.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004761515883728862
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/shutdown.c/shutdown.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/shutdown.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005488137016072869
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "shutdown_device_num.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/shutdown_device_num.c/shutdown_device_num.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/shutdown_device_num.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.009292558068409562
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/shutdown_device_num.c/shutdown_device_num.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/shutdown_device_num.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.009252400137484074
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "shutdown_device_type.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/shutdown_device_type.c/shutdown_device_type.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/shutdown_device_type.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005086274119094014
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/shutdown_device_type.c/shutdown_device_type.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/shutdown_device_type.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005206400062888861
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT2 -o /global/u1/v/vaidhy/OpenACCV-V/build/shutdown_device_type.c/shutdown_device_type.c2 /global/u1/v/vaidhy/OpenACCV-V/Tests/shutdown_device_type.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004991780035197735
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/shutdown_device_type.c/shutdown_device_type.c3 /global/u1/v/vaidhy/OpenACCV-V/Tests/shutdown_device_type.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.00487870816141367
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT3 -o /global/u1/v/vaidhy/OpenACCV-V/build/shutdown_device_type.c/shutdown_device_type.c4 /global/u1/v/vaidhy/OpenACCV-V/Tests/shutdown_device_type.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.00544260093010962
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/shutdown_device_type.c/shutdown_device_type.c5 /global/u1/v/vaidhy/OpenACCV-V/Tests/shutdown_device_type.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005372760118916631
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT2 -o /global/u1/v/vaidhy/OpenACCV-V/build/shutdown_device_type.c/shutdown_device_type.c6 /global/u1/v/vaidhy/OpenACCV-V/Tests/shutdown_device_type.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005433102138340473
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/shutdown_device_type.c/shutdown_device_type.c7 /global/u1/v/vaidhy/OpenACCV-V/Tests/shutdown_device_type.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005515652941539884
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "shutdown_device_type_num.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/shutdown_device_type_num.c/shutdown_device_type_num.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/shutdown_device_type_num.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005479337181895971
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/shutdown_device_type_num.c/shutdown_device_type_num.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/shutdown_device_type_num.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005361725110560656
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "shutdown_device_type_num_nvidia.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/shutdown_device_type_num_nvidia.c/shutdown_device_type_num_nvidia.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/shutdown_device_type_num_nvidia.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005800322862342
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/shutdown_device_type_num_nvidia.c/shutdown_device_type_num_nvidia.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/shutdown_device_type_num_nvidia.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005236082011833787
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "shutdown_device_type_nvidia.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/shutdown_device_type_nvidia.c/shutdown_device_type_nvidia.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/shutdown_device_type_nvidia.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.005241389852017164
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/shutdown_device_type_nvidia.c/shutdown_device_type_nvidia.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/shutdown_device_type_nvidia.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.004843718837946653
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "shutdown_if.c": [
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -o /global/u1/v/vaidhy/OpenACCV-V/build/shutdown_if.c/shutdown_if.c0 /global/u1/v/vaidhy/OpenACCV-V/Tests/shutdown_if.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.010440736077725887
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/shutdown_if.c/shutdown_if.c1 /global/u1/v/vaidhy/OpenACCV-V/Tests/shutdown_if.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.010215430986136198
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT2 -o /global/u1/v/vaidhy/OpenACCV-V/build/shutdown_if.c/shutdown_if.c2 /global/u1/v/vaidhy/OpenACCV-V/Tests/shutdown_if.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": false,
                    "output": "",
                    "result": 127,
                    "runtime": 0.0062001601327210665
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "clang -fopenacc -fopenmp-targets=nvptx64-nvidia-cuda -lm -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/shutdown_if.c/shutdown_if.c3 /global/u1/v/vaidhy/OpenACCV-V/Tests/shutdown_if.c",
                    "config": 1,
                    "errors": "/bin/sh: clang: command not found\n",
                    "export": true,
                    "output": "",
                    "result": 127,
                    "runtime": 0.010391080053523183
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ]
    },
    "summary": {
        "1": {
            "1": {
                "1": {
                    "acc_async_test.c": {
                        "1": {
                            "result": "Unknown Section Result",
                            "run_index": -1
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        },
                        "3": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        }
                    },
                    "acc_async_test_all.c": {
                        "1": {
                            "result": "Unknown Section Result",
                            "run_index": -1
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        },
                        "3": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        }
                    },
                    "acc_copyin.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 1
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "3": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        },
                        "4": {
                            "result": "Compilation Failure",
                            "run_index": 4
                        },
                        "5": {
                            "result": "Compilation Failure",
                            "run_index": 5
                        },
                        "6": {
                            "result": "Compilation Failure",
                            "run_index": 6
                        },
                        "7": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        }
                    },
                    "acc_copyin_async.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 1
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "3": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        },
                        "4": {
                            "result": "Compilation Failure",
                            "run_index": 4
                        },
                        "5": {
                            "result": "Compilation Failure",
                            "run_index": 5
                        }
                    },
                    "acc_copyout.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        }
                    },
                    "acc_copyout_async.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 1
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "3": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        },
                        "4": {
                            "result": "Compilation Failure",
                            "run_index": 4
                        }
                    },
                    "acc_copyout_finalize.c": {
                        "1": {
                            "result": "Unknown Section Result",
                            "run_index": -1
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        },
                        "3": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        }
                    },
                    "acc_copyout_finalize_async.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 1
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "3": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        },
                        "4": {
                            "result": "Compilation Failure",
                            "run_index": 4
                        }
                    },
                    "acc_create.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 1
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "3": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        },
                        "4": {
                            "result": "Compilation Failure",
                            "run_index": 4
                        },
                        "5": {
                            "result": "Compilation Failure",
                            "run_index": 5
                        }
                    },
                    "acc_create_async.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 1
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "3": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        },
                        "4": {
                            "result": "Compilation Failure",
                            "run_index": 4
                        },
                        "5": {
                            "result": "Compilation Failure",
                            "run_index": 5
                        }
                    },
                    "acc_delete.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        }
                    },
                    "acc_delete_async.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        }
                    },
                    "acc_delete_finalize.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        }
                    },
                    "acc_delete_finalize_async.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        }
                    },
                    "acc_deviceptr.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "acc_free.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "acc_get_default_async.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "acc_get_device_num.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "acc_get_device_type.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "acc_get_num_devices.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "acc_get_property.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "acc_hostptr.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "acc_init.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "acc_is_present.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "acc_malloc.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "acc_map_data.c": {
                        "1": {
                            "result": "Unknown Section Result",
                            "run_index": -1
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        },
                        "3": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        }
                    },
                    "acc_memcpy_device.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "acc_memcpy_from_device.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "acc_memcpy_from_device_async.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "acc_memcpy_to_device.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "acc_memcpy_to_device_async.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "acc_on_device.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "acc_set_default_async.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "acc_set_device_num.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "acc_set_device_type.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "acc_shutdown.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "acc_unmap_data.c": {
                        "1": {
                            "result": "Unknown Section Result",
                            "run_index": -1
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        },
                        "3": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        }
                    },
                    "acc_update_device.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        }
                    },
                    "acc_update_device_async.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        }
                    },
                    "acc_update_self.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        }
                    },
                    "acc_update_self_async.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        }
                    },
                    "acc_wait.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "acc_wait_all.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "acc_wait_all_async.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "acc_wait_async.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_bitand_equals.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_bitor_equals.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_bitxor_equals.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_bitand_equals.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_bitor_equals.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_bitxor_equals.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_divided_equals.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_expr_bitand_x.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_expr_bitor_x.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_expr_bitxor_x.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_expr_divided_x.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_expr_lshift_x.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_expr_minus_x.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_expr_multiply_x.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_expr_plus_x.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_expr_rshift_x.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_lshift_equals.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_minus_equals.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_multiply_equals.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_plus_equals.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_postdecrement.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_postincrement.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_predecrement.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_preincrement.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_rshift_equals.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_divided_equals.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_expr_bitand_x.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_expr_bitor_x.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_expr_bitxor_x.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_expr_divided_x.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_expr_lshift_x.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_expr_minus_x.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_expr_multiply_x.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_expr_plus_x.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_expr_rshift_x.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_lshift_equals.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_minus_equals.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_multiply_equals.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_plus_equals.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_postdecrement.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_postincrement.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_predecrement.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_preincrement.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_rshift_equals.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_structured_assign_assign.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_structured_assign_bitand_equals.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_structured_assign_bitor_equals.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_structured_assign_bitxor_equals.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_structured_assign_divided_equals.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_structured_assign_expr_bitand_x.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_structured_assign_expr_bitor_x.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_structured_assign_expr_bitxor_x.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_structured_assign_expr_divided_x.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_structured_assign_expr_multiply_x.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_structured_assign_expr_plus_x.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_structured_assign_lshift_equals.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_structured_assign_minus_equals.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_structured_assign_multiply_equals.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_structured_assign_plus_equals.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_structured_assign_postdecrement.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_structured_assign_postincrement.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_structured_assign_predecrement.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_structured_assign_preincrement.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_structured_assign_rshift_equals.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_structured_assign_x_bitand_expr.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_structured_assign_x_bitor_expr.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_structured_assign_x_bitxor_expr.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_structured_assign_x_divided_expr.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_structured_assign_x_lshift_expr.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_structured_assign_x_minus_expr.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_structured_assign_x_multiply_expr.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_structured_assign_x_plus_expr.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_structured_assign_x_rshift_expr.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_structured_bitand_equals_assign.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_structured_bitor_equals_assign.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_structured_bitxor_equals_assign.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_structured_divided_equals_assign.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_structured_expr_bitand_x_assign.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_structured_expr_bitor_x_assign.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_structured_expr_bitxor_x_assign.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_structured_expr_multiply_x_assign.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_structured_expr_plus_x_assign.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_structured_lshift_equals_assign.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_structured_minus_equals_assign.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_structured_multiply_equals_assign.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_structured_plus_equals_assign.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_structured_postdecrement_assign.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_structured_postincrement_assign.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_structured_predecrement_assign.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_structured_preincrement_assign.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_structured_rshift_equals_assign.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_structured_x_bitand_expr_assign.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_structured_x_bitor_expr_assign.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_structured_x_bitxor_expr_assign.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_structured_x_divided_expr_assign.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_structured_x_lshift_expr_assign.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_structured_x_minus_expr_assign.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_structured_x_multiply_expr_assign.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_structured_x_plus_expr_assign.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_structured_x_rshift_expr_assign.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_update_bitand_equals.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_update_bitor_equals.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_update_bitxor_equals.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_update_divided_equals.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_update_expr_bitand_x.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_update_expr_bitor_x.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_update_expr_bitxor_x.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_update_expr_divided_x.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_update_expr_lshift_x.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_update_expr_minus_x.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_update_expr_multiply_x.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_update_expr_plus_x.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_update_expr_rshift_x.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_update_lshift_equals.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_update_minus_equals.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_update_multiply_equals.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_update_plus_equals.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_update_postdecrement.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_update_postincrement.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_update_predecrement.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_update_preincrement.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_update_rshift_equals.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_update_x_bitand_expr.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_update_x_bitor_expr.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_update_x_bitxor_expr.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_update_x_divided_expr.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_update_x_lshift_expr.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_update_x_minus_expr.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_update_x_multiply_expr.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_update_x_plus_expr.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_update_x_rshift_expr.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_x_bitand_expr.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_x_bitor_expr.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_x_bitxor_expr.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_x_divided_expr.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_x_lshift_expr.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_x_minus_expr.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_x_multiply_expr.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_x_plus_expr.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_x_rshift_expr.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "data_copy_no_lower_bound.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "data_copyin_no_lower_bound.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "data_copyout_no_lower_bound.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "data_copyout_reference_counts.c": {
                        "1": {
                            "result": "Unknown Section Result",
                            "run_index": -1
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        },
                        "3": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        }
                    },
                    "data_create.c": {
                        "1": {
                            "result": "Unknown Section Result",
                            "run_index": -1
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        },
                        "3": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        }
                    },
                    "data_create_no_lower_bound.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "data_present_no_lower_bound.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "data_with_changing_subscript.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "data_with_structs.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "declare_copyin.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 1
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "3": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        },
                        "4": {
                            "result": "Compilation Failure",
                            "run_index": 4
                        },
                        "5": {
                            "result": "Compilation Failure",
                            "run_index": 5
                        }
                    },
                    "declare_create.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 1
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "3": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        },
                        "4": {
                            "result": "Compilation Failure",
                            "run_index": 4
                        },
                        "5": {
                            "result": "Compilation Failure",
                            "run_index": 5
                        }
                    },
                    "declare_device_resident.c": {
                        "1": {
                            "result": "Unknown Section Result",
                            "run_index": -1
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        },
                        "3": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        }
                    },
                    "declare_function_scope_copy.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 1
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "3": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        },
                        "4": {
                            "result": "Compilation Failure",
                            "run_index": 4
                        }
                    },
                    "declare_function_scope_copyin.c": {
                        "1": {
                            "result": "Unknown Section Result",
                            "run_index": -1
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        },
                        "3": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        }
                    },
                    "declare_function_scope_copyout.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 1
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "3": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        },
                        "4": {
                            "result": "Compilation Failure",
                            "run_index": 4
                        }
                    },
                    "declare_function_scope_create.c": {
                        "1": {
                            "result": "Unknown Section Result",
                            "run_index": -1
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        },
                        "3": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        }
                    },
                    "declare_function_scope_deviceptr.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        }
                    },
                    "declare_function_scope_present.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        }
                    },
                    "enter_data_copyin_no_lower_bound.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "enter_data_create.c": {
                        "1": {
                            "result": "Unknown Section Result",
                            "run_index": -1
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        },
                        "3": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        }
                    },
                    "enter_data_create_no_lower_bound.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "enter_exit_data_if.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 1
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "3": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        },
                        "4": {
                            "result": "Compilation Failure",
                            "run_index": 4
                        },
                        "5": {
                            "result": "Compilation Failure",
                            "run_index": 5
                        }
                    },
                    "exit_data.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        }
                    },
                    "exit_data_copyout_no_lower_bound.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "exit_data_copyout_reference_counts.c": {
                        "1": {
                            "result": "Unknown Section Result",
                            "run_index": -1
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        },
                        "3": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        }
                    },
                    "exit_data_delete_no_lower_bound.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "exit_data_finalize.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        }
                    },
                    "host_data.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "init.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "init_device_num.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "init_device_type.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        },
                        "2": {
                            "result": "Excluded From Run",
                            "run_index": -1
                        },
                        "3": {
                            "result": "Excluded From Run",
                            "run_index": -1
                        }
                    },
                    "init_device_type_num.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        },
                        "2": {
                            "result": "Excluded From Run",
                            "run_index": -1
                        },
                        "3": {
                            "result": "Excluded From Run",
                            "run_index": -1
                        }
                    },
                    "init_device_type_num_nvidia.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "init_device_type_nvidia.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "init_if.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        }
                    },
                    "kernels_async.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "kernels_copy.c": {
                        "1": {
                            "result": "Unknown Section Result",
                            "run_index": -1
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        },
                        "3": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        }
                    },
                    "kernels_copyin.c": {
                        "1": {
                            "result": "Unknown Section Result",
                            "run_index": -1
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        },
                        "3": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        }
                    },
                    "kernels_copyout.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        }
                    },
                    "kernels_create.c": {
                        "1": {
                            "result": "Unknown Section Result",
                            "run_index": -1
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        },
                        "3": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        }
                    },
                    "kernels_default_copy.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        }
                    },
                    "kernels_default_present.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "kernels_if.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 1
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "3": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        },
                        "4": {
                            "result": "Compilation Failure",
                            "run_index": 4
                        }
                    },
                    "kernels_loop.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_independent.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_add_general.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_add_loop.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_add_vector_loop.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_and_general.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_and_loop.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_and_vector_loop.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_bitand_general.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_bitand_loop.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_bitand_vector_loop.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_bitor_general.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_bitor_loop.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_bitor_vector_loop.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_bitxor_general.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_bitxor_loop.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_bitxor_vector_loop.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_max_general.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_max_loop.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_max_vector_loop.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_min_general.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_min_loop.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_min_vector_loop.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_multiply_general.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_multiply_loop.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_multiply_vector_loop.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_or_general.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_or_loop.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_or_vector_loop.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_seq.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_tile.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        }
                    },
                    "kernels_loop_vector_blocking.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_worker_blocking.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "kernels_num_gangs.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "kernels_num_workers.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "kernels_present.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "kernels_scalar_default_copy.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "kernels_vector_length.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "kernels_wait.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "loop_collapse.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        }
                    },
                    "loop_no_collapse_default.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "parallel.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "parallel_async.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "parallel_copy.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        },
                        "2": {
                            "result": "Excluded From Run",
                            "run_index": -1
                        }
                    },
                    "parallel_copyin.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        }
                    },
                    "parallel_copyout.c": {
                        "1": {
                            "result": "Unknown Section Result",
                            "run_index": -1
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        },
                        "3": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        }
                    },
                    "parallel_create.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "parallel_default_copy.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        }
                    },
                    "parallel_default_present.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "parallel_deviceptr.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "parallel_firstprivate.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        }
                    },
                    "parallel_if.c": {
                        "1": {
                            "result": "Unknown Section Result",
                            "run_index": -1
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        },
                        "3": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        }
                    },
                    "parallel_independent_atomic.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        }
                    },
                    "parallel_independent_atomic_capture.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "parallel_independent_atomic_read.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "parallel_independent_atomic_update.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "parallel_independent_atomic_write.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "parallel_loop.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        }
                    },
                    "parallel_loop_async.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_auto.c": {
                        "1": {
                            "result": "Unknown Section Result",
                            "run_index": -1
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        },
                        "3": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        }
                    },
                    "parallel_loop_gang.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_independent.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_independent_reduction.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_reduction_add_general.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        }
                    },
                    "parallel_loop_reduction_add_general_type_check_pt1.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 1
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "3": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        },
                        "4": {
                            "result": "Compilation Failure",
                            "run_index": 4
                        },
                        "5": {
                            "result": "Compilation Failure",
                            "run_index": 5
                        },
                        "6": {
                            "result": "Compilation Failure",
                            "run_index": 6
                        },
                        "7": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        },
                        "8": {
                            "result": "Compilation Failure",
                            "run_index": 8
                        }
                    },
                    "parallel_loop_reduction_add_general_type_check_pt2.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 1
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "3": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        },
                        "4": {
                            "result": "Compilation Failure",
                            "run_index": 4
                        },
                        "5": {
                            "result": "Compilation Failure",
                            "run_index": 5
                        },
                        "6": {
                            "result": "Compilation Failure",
                            "run_index": 6
                        },
                        "7": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        },
                        "8": {
                            "result": "Compilation Failure",
                            "run_index": 8
                        }
                    },
                    "parallel_loop_reduction_add_general_type_check_pt3.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        }
                    },
                    "parallel_loop_reduction_add_loop.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        }
                    },
                    "parallel_loop_reduction_add_vector_loop.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        }
                    },
                    "parallel_loop_reduction_and_general.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        }
                    },
                    "parallel_loop_reduction_and_loop.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        }
                    },
                    "parallel_loop_reduction_and_vector_loop.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        }
                    },
                    "parallel_loop_reduction_bitand_general.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        }
                    },
                    "parallel_loop_reduction_bitand_loop.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        }
                    },
                    "parallel_loop_reduction_bitand_vector_loop.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        }
                    },
                    "parallel_loop_reduction_bitor_general.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        }
                    },
                    "parallel_loop_reduction_bitor_loop.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        }
                    },
                    "parallel_loop_reduction_bitor_vector_loop.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        }
                    },
                    "parallel_loop_reduction_bitxor_general.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        }
                    },
                    "parallel_loop_reduction_bitxor_loop.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        }
                    },
                    "parallel_loop_reduction_bitxor_vector_loop.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        }
                    },
                    "parallel_loop_reduction_max_general.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        }
                    },
                    "parallel_loop_reduction_max_loop.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        }
                    },
                    "parallel_loop_reduction_max_vector_loop.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        }
                    },
                    "parallel_loop_reduction_min_general.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        }
                    },
                    "parallel_loop_reduction_min_loop.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        }
                    },
                    "parallel_loop_reduction_min_vector_loop.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        }
                    },
                    "parallel_loop_reduction_multiply_general.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        }
                    },
                    "parallel_loop_reduction_multiply_loop.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        }
                    },
                    "parallel_loop_reduction_multiply_vector_loop.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        },
                        "3": {
                            "result": "Excluded From Run",
                            "run_index": -1
                        }
                    },
                    "parallel_loop_reduction_or_general.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        }
                    },
                    "parallel_loop_reduction_or_loop.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_reduction_or_vector_loop.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_seq.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_tile.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        }
                    },
                    "parallel_loop_vector.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_vector_blocking.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_worker.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_worker_blocking.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "parallel_present.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "parallel_private.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "parallel_reduction.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "parallel_scalar_default_firstprivate.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "parallel_switch.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "parallel_wait.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "parallel_wait_devnum.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "parallel_while_loop.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "routine_bind.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 1
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "3": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        },
                        "4": {
                            "result": "Compilation Failure",
                            "run_index": 4
                        }
                    },
                    "routine_gang.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 1
                        },
                        "10": {
                            "result": "Compilation Failure",
                            "run_index": 10
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "3": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        },
                        "4": {
                            "result": "Compilation Failure",
                            "run_index": 4
                        },
                        "5": {
                            "result": "Compilation Failure",
                            "run_index": 5
                        },
                        "6": {
                            "result": "Compilation Failure",
                            "run_index": 6
                        },
                        "7": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        },
                        "8": {
                            "result": "Compilation Failure",
                            "run_index": 8
                        },
                        "9": {
                            "result": "Compilation Failure",
                            "run_index": 9
                        }
                    },
                    "routine_nohost.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "routine_seq.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 1
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "3": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        },
                        "4": {
                            "result": "Compilation Failure",
                            "run_index": 4
                        }
                    },
                    "routine_vector.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 1
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "3": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        },
                        "4": {
                            "result": "Compilation Failure",
                            "run_index": 4
                        },
                        "5": {
                            "result": "Compilation Failure",
                            "run_index": 5
                        },
                        "6": {
                            "result": "Compilation Failure",
                            "run_index": 6
                        }
                    },
                    "routine_worker.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 1
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "3": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        },
                        "4": {
                            "result": "Compilation Failure",
                            "run_index": 4
                        },
                        "5": {
                            "result": "Compilation Failure",
                            "run_index": 5
                        },
                        "6": {
                            "result": "Compilation Failure",
                            "run_index": 6
                        },
                        "7": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        },
                        "8": {
                            "result": "Compilation Failure",
                            "run_index": 8
                        }
                    },
                    "serial.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "serial_async.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "serial_copy.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "serial_copyin.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        }
                    },
                    "serial_copyout.c": {
                        "1": {
                            "result": "Unknown Section Result",
                            "run_index": -1
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        },
                        "3": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        }
                    },
                    "serial_create.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "serial_default_copy.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        }
                    },
                    "serial_default_present.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "serial_deviceptr.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "serial_firstprivate.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        }
                    },
                    "serial_if.c": {
                        "1": {
                            "result": "Unknown Section Result",
                            "run_index": -1
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        },
                        "3": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        }
                    },
                    "serial_loop.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        }
                    },
                    "serial_loop_async.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "serial_loop_auto.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        }
                    },
                    "serial_loop_gang.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "serial_loop_reduction_add_general.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "serial_loop_reduction_add_loop.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "serial_loop_reduction_add_vector_loop.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "serial_loop_reduction_and_general.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "serial_loop_reduction_and_loop.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "serial_loop_reduction_and_vector_loop.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "serial_loop_reduction_bitand_general.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "serial_loop_reduction_bitand_loop.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "serial_loop_reduction_bitand_vector_loop.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "serial_loop_reduction_bitor_general.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "serial_loop_reduction_bitor_loop.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "serial_loop_reduction_bitor_vector_loop.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "serial_loop_reduction_bitxor_general.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "serial_loop_reduction_bitxor_loop.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "serial_loop_reduction_bitxor_vector_loop.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "serial_loop_reduction_max_general.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "serial_loop_reduction_max_loop.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "serial_loop_reduction_max_vector_loop.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "serial_loop_reduction_min_general.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "serial_loop_reduction_min_loop.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "serial_loop_reduction_min_vector_loop.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "serial_loop_reduction_multiply_general.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "serial_loop_reduction_multiply_loop.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "serial_loop_reduction_multiply_vector_loop.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "serial_loop_reduction_or_general.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "serial_loop_reduction_or_loop.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "serial_loop_reduction_or_vector_loop.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "serial_loop_seq.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "serial_loop_tile.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        }
                    },
                    "serial_loop_vector.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "serial_loop_vector_blocking.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "serial_loop_worker.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "serial_loop_worker_blocking.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "serial_present.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "serial_private.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "serial_reduction.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "serial_scalar_default_firstprivate.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "serial_switch.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "serial_wait.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "serial_while_loop.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "set_default_async.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "set_device_num.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "set_device_type.c": {
                        "1": {
                            "result": "Unknown Section Result",
                            "run_index": -1
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        },
                        "3": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        }
                    },
                    "set_device_type_num.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        },
                        "3": {
                            "result": "Excluded From Run",
                            "run_index": -1
                        }
                    },
                    "set_device_type_num_nvidia.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "set_device_type_nvidia.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "set_if.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        }
                    },
                    "shutdown.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "shutdown_device_num.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "shutdown_device_type.c": {
                        "1": {
                            "result": "Unknown Section Result",
                            "run_index": -1
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        },
                        "3": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        }
                    },
                    "shutdown_device_type_num.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "shutdown_device_type_num_nvidia.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "shutdown_device_type_nvidia.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "shutdown_if.c": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        }
                    }
                }
            }
        }
    },
    "systems": [
        {
            "id": 1,
            "machine": "x86_64",
            "name": null,
            "node": "login23",
            "processor": "x86_64",
            "release": "5.3.18-150300.59.87_11.0.78-cray_shasta_c",
            "version": "#1 SMP Thu Oct 20 22:11:23 UTC 2022 (c16132b)"
        }
    ],
    "testsuites": [
        {
            "acc_async_test.c": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:async,runtime,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    real_t *d = (real_t *)malloc(n * sizeof(real_t));\n    real_t *e = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0;\n        d[x] = rand() / (real_t)(RAND_MAX / 10);\n        e[x] = 0;\n    }\n\n    #pragma acc enter data copyin(a[0:n], b[0:n]) create(c[0:n]) async(1)\n    #pragma acc enter data copyin(d[0:n]) create(e[0:n]) async(2)\n    #pragma acc parallel present(a[0:n], b[0:n], c[0:n]) async(1)\n    {\n        #pragma acc loop\n        for (int x = 0; x < n; ++x){\n            c[x] = a[x] + b[x];\n        }\n    }\n    #pragma acc parallel present(c[0:n], d[0:n], e[0:n]) async(1) wait(2)\n    {\n        #pragma acc loop\n        for (int x = 0; x < n; ++x){\n            e[x] = c[x] + d[x];\n        }\n    }\n    #pragma acc exit data copyout(e[0:n]) async(1)\n\n    while (!acc_async_test(1));\n    for (int x = 0; x < n; ++x){\n        if (fabs(e[x] - (a[x] + b[x] + d[x])) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "async",
                            "runtime",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:async,runtime,construct-independent,V:1.0-2.7\nint test2(){\n    int err = 0;\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    real_t *d = (real_t *)malloc(n * sizeof(real_t));\n    real_t *e = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0;\n        d[x] = rand() / (real_t)(RAND_MAX / 10);\n        e[x] = 0;\n    }\n    #pragma acc data copyin(a[0:n], b[0:n], d[0:n]) create(c[0:n]) copyout(e[0:n])\n    {\n        #pragma acc parallel present(a[0:n], b[0:n], c[0:n]) async(1)\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x) {\n                c[x] = a[x] + b[x];\n            }\n        }\n        #pragma acc parallel present(c[0:n], d[0:n], e[0:n]) async(1)\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x) {\n                e[x] = c[x] + d[x];\n            }\n        }\n        while (!acc_async_test(1));\n    }\n\n    for (int x = 0; x < n; ++x) {\n        if (fabs(e[x] - (a[x] + b[x] + d[x])) > PRECISION) {\n            err += 1;\n        }\n    }\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "async",
                            "runtime",
                            "construct-independent"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n//T3:async,runtime,construct-independent,V:2.5-2.7\nint test3() {\n    int err = 0;\n    real_t* a = (real_t*)malloc(n * sizeof(real_t));\n    real_t* b = (real_t*)malloc(n * sizeof(real_t));\n    real_t* c = (real_t*)malloc(n * sizeof(real_t));\n    real_t* d = (real_t*)malloc(n * sizeof(real_t));\n    real_t* e = (real_t*)malloc(n * sizeof(real_t));\n    int async_val = acc_get_default_async();\n\n    for (int x = 0; x < n; ++x) {\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0;\n        d[x] = rand() / (real_t)(RAND_MAX / 10);\n        e[x] = 0;\n    }\n    #pragma acc data copyin(a[0:n], b[0:n], d[0:n]) create(c[0:n]) copyout(e[0:n])\n    {\n        #pragma acc parallel present(a[0:n], b[0:n], c[0:n]) async\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x) {\n                c[x] = a[x] + b[x];\n            }\n        }\n        #pragma acc parallel present(c[0:n], d[0:n], e[0:n]) async\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x) {\n                e[x] = c[x] + d[x];\n            }\n        }\n        while (!acc_async_test(async_val));\n    }\n\n    for (int x = 0; x < n; ++x) {\n        if (fabs(e[x] - (a[x] + b[x] + d[x])) > PRECISION) {\n            err += 1;\n        }\n    }\n    return err;\n}\n#endif\n#ifndef T3\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x) {\n        failed = failed + test3();\n    }\n    if (failed != 0) {\n        failcode = failcode + (1 << 2);\n    }\n#endif\n",
                        "tags": [
                            "async",
                            "runtime",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_async_test_all.c": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:async,runtime,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    real_t **a = (real_t **)malloc(10 * sizeof(real_t*));\n    real_t **b = (real_t **)malloc(10 * sizeof(real_t*));\n    real_t **c = (real_t **)malloc(10 * sizeof(real_t*));\n    real_t **d = (real_t **)malloc(10 * sizeof(real_t*));\n    real_t **e = (real_t **)malloc(10 * sizeof(real_t*));\n\n    for (int x = 0; x < 10; ++x){\n        a[x] = (real_t *)malloc(n * sizeof(real_t));\n        b[x] = (real_t *)malloc(n * sizeof(real_t));\n        c[x] = (real_t *)malloc(n * sizeof(real_t));\n        d[x] = (real_t *)malloc(n * sizeof(real_t));\n        e[x] = (real_t *)malloc(n * sizeof(real_t));\n        for (int y = 0; y < n; ++y){\n            a[x][y] = rand() / (real_t)(RAND_MAX / 10);\n            b[x][y] = rand() / (real_t)(RAND_MAX / 10);\n            c[x][y] = 0;\n            d[x][y] = rand() / (real_t)(RAND_MAX / 10);\n            e[x][y] = 0;\n        }\n    }\n\n    #pragma acc enter data create(a[0:10][0:n], b[0:10][0:n], c[0:10][0:n], d[0:10][0:n], e[0:10][0:n])\n    for (int x = 0; x < 10; ++x){\n        #pragma acc update device(a[x:1][0:n], b[x:1][0:n], d[x:1][0:n]) async(x)\n        #pragma acc parallel present(a[x:1][0:n], b[x:1][0:n], c[x:1][0:n]) async(x)\n        {\n            #pragma acc loop\n            for (int y = 0; y < n; ++y){\n                c[x][y] = a[x][y] + b[x][y];\n            }\n        }\n        #pragma acc parallel present(c[x:1][0:n], d[x:1][0:n], e[x:1][0:n]) async(x)\n        {\n            #pragma acc loop\n            for (int y = 0; y < n; ++y){\n                e[x][y] = c[x][y] + d[x][y];\n            }\n        }\n        #pragma acc update host(e[x:1][0:n]) async(x)\n    }\n   \n    while(!acc_async_test_all());\n    for (int x = 0; x < 10; ++x){\n        for (int y = 0; y < n; ++y){\n            if (fabs(e[x][y] - (a[x][y] + b[x][y] + d[x][y])) > PRECISION){\n                err += 1;\n            }\n        }\n    }\n    #pragma acc exit data delete(a[0:10][0:n], b[0:10][0:n], c[0:10][0:n], d[0:10][0:n], e[0:10][0:n])\n    for (int x = 0; x < 10; ++x){\n        free(a[x]);\n        free(b[x]);\n        free(c[x]);\n        free(d[x]);\n        free(e[x]);\n    }\n    free(a);\n    free(b);\n    free(c);\n    free(d);\n    free(e);\n    \n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "async",
                            "runtime",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:async,runtime,construct-independent,V:1.0-2.7\nint test2(){\n    int err = 0;\n    real_t *a = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t *d = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t *e = (real_t *)malloc(10 * n * sizeof(real_t));\n\n    for (int x = 0; x < 10*n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0;\n        d[x] = rand() / (real_t)(RAND_MAX / 10);\n        e[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:10*n], b[0:10*n], d[0:10*n]) copyout(c[0:10*n], e[0:10*n])\n    {\n        for (int x = 0; x < 10; ++x){\n            #pragma acc parallel present(a[0:10*n], b[0:10*n], c[0:10*n]) async(x)\n            {\n                #pragma acc loop\n                for (int y = 0; y < n; ++y){\n                    c[x * n + y] = a[x * n + y] + b[x * n + y];\n                }\n            }\n            #pragma acc parallel present(c[0:10*n], d[0:10*n], e[0:10*n]) async(x)\n            {\n                #pragma acc loop\n                for (int y = 0; y < n; ++y){\n                    e[x * n + y] = c[x * n + y] + d[x * n + y];\n                }\n            }\n        }\n        while(!acc_async_test_all());\n    }\n\n    for (int x = 0; x < 10*n; ++x){\n        if (fabs(e[x] - (a[x] + b[x] + d[x])) > PRECISION){\n            err += 1;\n        }\n    }\n    \n    free(a);\n    free(b);\n    free(c);\n    free(d);\n    free(e);\n    \n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "async",
                            "runtime",
                            "construct-independent"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n//T3:async,runtime,construct-independent,V:2.5-2.7\nint test3(){\n    int err = 0;\n    real_t **a = (real_t **)malloc(10 * sizeof(real_t *));\n    real_t **b = (real_t **)malloc(10 * sizeof(real_t *));\n    real_t **c = (real_t **)malloc(10 * sizeof(real_t *));\n    real_t **d = (real_t **)malloc(10 * sizeof(real_t *));\n    real_t **e = (real_t **)malloc(10 * sizeof(real_t *));\n\n    for (int x = 0; x < 10; ++x){\n        a[x] = (real_t *)malloc(n * sizeof(real_t));\n        b[x] = (real_t *)malloc(n * sizeof(real_t));\n        c[x] = (real_t *)malloc(n * sizeof(real_t));\n        d[x] = (real_t *)malloc(n * sizeof(real_t));\n        e[x] = (real_t *)malloc(n * sizeof(real_t));\n        for (int y = 0; y < n; ++y){\n            a[x][y] = rand() / (real_t)(RAND_MAX / 10);\n            b[x][y] = rand() / (real_t)(RAND_MAX / 10);\n            c[x][y] = 0;\n            d[x][y] = rand() / (real_t)(RAND_MAX / 10);\n            e[x][y] = 0;\n        }\n    }\n\n    #pragma acc data copyin(a[0:10][0:n], b[0:10][0:n], d[0:10][0:n]) copyout(c[0:10][0:n], e[0:10][0:n])\n    {\n        for (int x = 0; x < 10; ++x){\n            acc_set_default_async(x);\n            #pragma acc parallel present(a[0:10][0:n], b[0:10][0:n], c[0:10][0:n]) async\n            {\n                #pragma acc loop\n                for (int y = 0; y < n; ++y){\n                    c[x][y] = a[x][y] + b[x][y];\n                }\n            }\n            #pragma acc parallel present(c[0:10][0:n], d[0:10][0:n], e[0:10][0:n]) async\n            {\n                #pragma acc loop\n                for (int y = 0; y < n; ++y){\n                    e[x][y] = c[x][y] + d[x][y];\n                }\n            }\n        }\n        while (!acc_async_test_all());\n    }\n\n    int count = 0;\n    int total = 0;\n    for (int x = 0; x < 10; ++x) {\n        for (int y = 0; y < n; ++y) {\n            if (fabs(e[x][y]) < PRECISION) {\n                count += 1;\n            }\n            total += 1;\n        }\n    }\n    printf(\"%d out of %d\\n\", count, total);\n\n    for (int x = 0; x < 10; ++x){\n        for (int y = 0; y < n; ++y){\n            if (fabs(e[x][y] - (a[x][y] + b[x][y] + d[x][y])) > PRECISION){\n                err += 1;\n            }\n        }\n    }\n    \n    for (int x = 0; x < 10; ++x){\n        free(a[x]);\n        free(b[x]);\n        free(c[x]);\n        free(d[x]);\n        free(e[x]);\n    }\n    free(a);\n    free(b);\n    free(c);\n    free(d);\n    free(e);\n    \n    return err;\n}\n#endif\n#ifndef T3\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test3();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 2);\n    }\n#endif\n",
                        "tags": [
                            "async",
                            "runtime",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_copyin.c": {
                "num tests": 7,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0.0;\n    }\n\n    acc_copyin(a, n * sizeof(real_t));\n    acc_copyin(b, n * sizeof(real_t));\n\n    #pragma acc data copy(c[0:n])\n    {\n        #pragma acc parallel present(a[0:n], b[0:n])\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                c[x] = a[x] + b[x];\n            }\n        }\n    }\n\n    acc_copyout(a, n * sizeof(real_t));\n    acc_copyout(b, n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test2(){\n    int err = 0;\n    srand(time(NULL));\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0.0;\n    }\n\n    acc_copyin(a, n * sizeof(real_t));\n    acc_copyin(b, n * sizeof(real_t));\n\n    #pragma acc data copy(c[0:n])\n    {\n        #pragma acc parallel present(a[0:n], b[0:n])\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                c[x] = a[x] + b[x];\n            }\n        }\n    }\n\n    #pragma acc exit data copyout(a[0:n], b[0:n])\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION){\n            err += 1;\n        }\n    }\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n//T3:runtime,data,executable-data,devonly,construct-independent,reference-counting,V:2.5-2.7\nint test3(){\n    int err = 0;\n    srand(time(NULL));\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * a_copy = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b_copy = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n    int * dev_test = (int *)malloc(n * sizeof(int));\n\n    dev_test[0] = 1;\n    #pragma acc enter data copyin(dev_test[0:1])\n    #pragma acc parallel present(dev_test[0:1])\n    {\n        dev_test[0] = 0;\n    }\n\n    if (dev_test[0] == 1){\n        for (int x = 0; x < n; ++x){\n            a[x] = rand() / (real_t)(RAND_MAX / 10);\n            a_copy[x] = a[x];\n            b[x] = rand() / (real_t)(RAND_MAX / 10);\n            b_copy[x] = b[x];\n            c[x] = 0.0;\n        }\n\n        acc_copyin(a, n * sizeof(real_t));\n        acc_copyin(b, n * sizeof(real_t));\n\n        for (int x = 0; x < n; ++x){\n            a[x] = 0;\n            b[x] = 0;\n        }\n\n        #pragma acc data copyin(a[0:n], b[0:n]) copyout(c[0:n])\n        {\n            #pragma acc parallel\n            {\n                #pragma acc loop\n                for (int x = 0; x < n; ++x){\n                    c[x] = a[x] + b[x];\n                }\n            }\n        }\n\n        acc_copyout(a, n * sizeof(real_t));\n        acc_copyout(b, n * sizeof(real_t));\n\n        for (int x = 0; x < n; ++x){\n            if (fabs(a[x] - a_copy[x]) > PRECISION){\n                err += 1;\n            }\n            if (fabs(b[x] - b_copy[x]) > PRECISION){\n                err += 1;\n            }\n            if (fabs(c[x] - (a[x] + b[x])) > PRECISION){\n                err += 1;\n            }\n        }\n    }\n    return err;\n}\n#endif\n#ifndef T3\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test3();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 2);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "devonly",
                            "construct-independent",
                            "reference-counting"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "4": {
                        "content": "#ifndef T4\n//T4:runtime,data,executable-data,construct-independent,compatibility-features,V:2.0-2.7\nint test4(){\n    int err = 0;\n    srand(time(NULL));\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0.0;\n    }\n\n    acc_pcopyin(a, n * sizeof(real_t));\n    acc_pcopyin(b, n * sizeof(real_t));\n\n    #pragma acc data copy(c[0:n])\n    {\n        #pragma acc parallel present(a[0:n], b[0:n])\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                c[x] = a[x] + b[x];\n            }\n        }\n    }\n\n    #pragma acc exit data delete(a[0:n], b[0:n])\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION){\n            err += 1;\n        }\n    }\n    return err;\n}\n#endif\n#ifndef T4\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test4();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 3);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent",
                            "compatibility-features"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "5": {
                        "content": "#ifndef T5\n//T5:runtime,data,executable-data,construct-independent,compatibility-features,V:2.0-2.7\nint test5(){\n    int err = 0;\n    srand(time(NULL));\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0;\n    }\n\n    acc_present_or_copyin(a, n * sizeof(real_t));\n    acc_present_or_copyin(b, n * sizeof(real_t));\n\n    #pragma acc data copyout(c[0:n]) present(a[0:n], b[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                c[x] = a[x] + b[x];\n            }\n        }\n    }\n\n    #pragma acc exit data delete(a[0:n], b[0:n])\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION){\n            err += 1;\n        }\n    }\n    return err;\n}\n#endif\n#ifndef T5\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test5();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 4);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent",
                            "compatibility-features"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "6": {
                        "content": "#ifndef T6\n//T6:runtime,data,executable-data,construct-independent,reference-counting,V:2.5-2.7\nint test6() {\n    int err = 0;\n    srand(time(NULL));\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x) {\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0;\n    }\n\n    acc_copyin(a, n * sizeof(real_t));\n    acc_copyin(a, n * sizeof(real_t));\n    acc_copyin(b, n * sizeof(real_t));\n    acc_copyin(b, n * sizeof(real_t));\n\n    #pragma acc data copyout(c[0:n])\n    {\n        #pragma acc parallel present(a[0:n], b[0:n])\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x) {\n                c[x] = a[x] + b[x];\n            }\n        }\n    }\n\n    #pragma acc exit data delete(a[0:n], b[0:n])\n    #pragma acc exit data delete(a[0:n], b[0:n])\n\n    for (int x = 0; x < n; ++x) {\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION) {\n            err += 1;\n        }\n    }\n    return err;\n}\n#endif\n#ifndef T6\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x) {\n        failed = failed + test6();\n    }\n    if (failed != 0) {\n        failcode = failcode + (1 << 5);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent",
                            "reference-counting"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "7": {
                        "content": "#ifndef T7\n//T7:runtime,data,executable-data,construct-independent,reference-counting,devonly,V:2.5-2.7\nint test7() {\n    int err = 0;\n    srand(time(NULL));\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *a_copy = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b_copy = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    int * dev_test = (int *)malloc(n * sizeof(int));\n\n    dev_test[0] = 1;\n    #pragma acc enter data copyin(dev_test[0:1])\n    #pragma acc parallel present(dev_test[0:1])\n    {\n        dev_test[0] = 0;\n    }\n\n    if (dev_test[0] == 1){\n        for (int x = 0; x < n; ++x){\n            a[x] = rand() / (real_t)(RAND_MAX / 10);\n            b[x] = rand() / (real_t)(RAND_MAX / 10);\n            a_copy[x] = a[x];\n            b_copy[x] = b[x];\n            c[x] = 0;\n        }\n        \n        acc_copyin(a, n * sizeof(real_t));\n        acc_copyin(b, n * sizeof(real_t));\n\n        for (int x = 0; x < n; ++x){\n            a[x] = 0;\n            b[x] = 0;\n        }\n\n        acc_copyin(a, n * sizeof(real_t));\n        acc_copyin(b, n * sizeof(real_t));\n\n        #pragma acc data copyout(c[0:n])\n        {\n            #pragma acc parallel present(a[0:n], b[0:n])\n            {\n                #pragma acc loop\n                for (int x = 0; x < n; ++x){\n                    c[x] = a[x] + b[x];\n                }\n            }\n        }\n\n        #pragma acc exit data delete(a[0:n], b[0:n])\n        #pragma acc exit data delete(a[0:n], b[0:n])\n\n        for (int x = 0; x < n; ++x){\n            if (fabs(c[x] - (a_copy[x] + b_copy[x])) > PRECISION){\n                err += 1;\n            }\n        }\n    }\n    return err;\n}\n#endif\n#ifndef T7\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x) {\n        failed = failed + test7();\n    }\n    if (failed != 0) {\n        failcode = failcode + (1 << 6);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent",
                            "reference-counting",
                            "devonly"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_copyin_async.c": {
                "num tests": 5,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:async,data,executable-data,runtime,construct-independent,V:2.5-2.7\nint test1(){\n    int err = 0;\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    real_t *a_host = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b_host = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0;\n        a_host[x] = a[x];\n        b_host[x] = b[x];\n    }\n\n    acc_copyin_async(a, n * sizeof(real_t), 1);\n    acc_copyin_async(b, n * sizeof(real_t), 2);\n    #pragma acc data copyout(c[0:n]) present(a[0:n], b[0:n])\n    {\n        #pragma acc parallel async(1)\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                a[x] = a[x] * a[x];\n            }\n        }\n        #pragma acc parallel async(2)\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                b[x] = b[x] * b[x];\n            }\n        }\n        #pragma acc parallel async(2) wait(1)\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                c[x] = a[x] + b[x];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a_host[x] * a_host[x] + b_host[x] * b_host[x])) > PRECISION * 4){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "async",
                            "data",
                            "executable-data",
                            "runtime",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:runtime,data,executable-data,async,construct-independent,V:2.5-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n    real_t * a_copy = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b_copy = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 1;\n    }\n\n    acc_copyin_async(a, n*sizeof(real_t), 1);\n    acc_copyin_async(b, n*sizeof(real_t), 2);\n\n    #pragma acc data copyout(c[0:n])\n    {\n        while (!acc_async_test_all());\n        #pragma acc parallel present(a[0:n], b[0:n])\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x) {\n                c[x] = a[x] + b[x];\n            }\n        }\n    }\n\n    #pragma acc exit data delete(a[0:n], b[0:n])\n\n    for (int x = 0; x < n; ++x) {\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION) {\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "async",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n//T3:runtime,data,executable-data,async,construct-independent,V:2.5-2.7\nint test3(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0;\n    }\n\n    acc_copyin_async(a, n * sizeof(real_t), 1);\n    acc_copyin_async(b, n * sizeof(real_t), 2);\n\n    #pragma acc data copyout(c[0:n])\n    {\n        #pragma acc wait\n        #pragma acc parallel present(a[0:n], b[0:n])\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x) {\n                c[x] = a[x] + b[x];\n            }\n        }\n    }\n\n    #pragma acc exit data delete(a[0:n], b[0:n])\n\n    for (int x = 0; x < n; ++x) {\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION) {\n            err = err + 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T3\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test3();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 2);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "async",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "4": {
                        "content": "#ifndef T4\n//T4:runtime,data,executable-data,async,construct-independent,reference-counting,V:2.5-2.7\nint test4(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n    real_t * d = (real_t *)malloc(n * sizeof(real_t));\n    real_t * e = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0;\n        d[x] = rand() / (real_t)(RAND_MAX / 10);\n        e[x] = 0;\n    }\n\n    #pragma acc enter data create(c[0:n])\n    #pragma acc data copyin(a[0:n], b[0:n], d[0:n]) copyout(e[0:n])\n    {\n        #pragma acc parallel present(c[0:n]) async(1)\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x) {\n                c[x] = a[x] + b[x];\n            }\n        }\n        acc_copyin_async(c, n * sizeof(real_t), 1);\n        #pragma acc exit data delete(c[0:n]) async(1)\n        #pragma acc parallel present(c[0:n]) async(1)\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x) {\n                e[x] = c[x] + d[x];\n            }\n        }\n    }\n    #pragma acc wait\n    #pragma acc exit data copyout(c[0:n])\n\n    for (int x = 0; x < n; ++x) {\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION) {\n            err += 1;\n        }\n        if (fabs(e[x] - (a[x] + b[x] + d[x])) > PRECISION) {\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T4\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test4();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 3);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "async",
                            "construct-independent",
                            "reference-counting"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "5": {
                        "content": "#ifndef T5\n//T5:runtime,data,executable-data,async,construct-independent,reference-counting,V:2.5-2.7\nint test5(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n    real_t * a_copy = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b_copy = (real_t *)malloc(n * sizeof(real_t));\n    int * devtest = (int *)malloc(sizeof(int));\n\n    devtest[0] = 0;\n    #pragma acc enter data copyin(devtest[0:1])\n    #pragma acc parallel present(devtest[0:1])\n    {\n        devtest[0] = 1;\n    }\n\n    if (devtest[0] == 0){\n        for (int x = 0; x < n; ++x){\n            a[x] = rand() / (real_t)(RAND_MAX / 10);\n            b[x] = rand() / (real_t)(RAND_MAX / 10);\n            c[x] = 0;\n            a_copy[x] = a[x];\n            b_copy[x] = b[x];\n        }\n\n        acc_copyin_async(a, n * sizeof(real_t), 1);\n        acc_copyin_async(b, n * sizeof(real_t), 2);\n\n        for (int x = 0; x < n; ++x) {\n            a[x] = 0;\n            b[x] = 0;\n        }\n\n        #pragma acc data copyin(a[0:n], b[0:n]) copyout(c[0:n])\n        {\n            #pragma acc wait\n            #pragma acc parallel\n            {\n                #pragma acc loop\n                for (int x = 0; x < n; ++x) {\n                    c[x] = a[x] + b[x];\n                }\n            }\n        }\n\n        #pragma acc exit data delete(a[0:n], b[0:n])\n\n        for (int x = 0; x < n; ++x) {\n            if (fabs(c[x] - (a_copy[x] + b_copy[x])) > PRECISION) {\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T5\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test5();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 4);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "async",
                            "construct-independent",
                            "reference-counting"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_copyout.c": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0;\n    }\n\n    acc_create(c, n * sizeof(real_t));\n\n    #pragma acc data copyin(a[0:n], b[0:n]) present(c[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                c[x] = a[x] + b[x];\n            }\n        }\n    }\n\n    acc_copyout(c, n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0;\n    }\n\n    #pragma acc enter data create(c[0:n])\n\n    #pragma acc data copyin(a[0:n], b[0:n]) present(c[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                c[x] = a[x] + b[x];\n            }\n        }\n    }\n\n    acc_copyout(c, n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_copyout_async.c": {
                "num tests": 4,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,async,construct-independent,V:2.5-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    real_t *d = (real_t *)malloc(n * sizeof(real_t));\n    real_t *e = (real_t *)malloc(n * sizeof(real_t));\n    real_t *f = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0;\n        d[x] = rand() / (real_t)(RAND_MAX / 10);\n        e[x] = rand() / (real_t)(RAND_MAX / 10);\n        f[x] = 0;\n    }\n\n    #pragma acc enter data create(c[0:n], f[0:n])\n\n    #pragma acc data copyin(a[0:n], b[0:n], d[0:n], e[0:n])\n    {\n        #pragma acc parallel async(1) present(c[0:n])\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                c[x] = a[x] + b[x];\n            }\n        }\n        #pragma acc parallel async(2) present(f[0:n])\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                f[x] = d[x] + e[x];\n            }\n        }\n        acc_copyout_async(c, n * sizeof(real_t), 1);\n        acc_copyout_async(f, n * sizeof(real_t), 2);\n        #pragma acc wait\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION){\n            err += 1;\n        }\n        if (fabs(f[x] - (d[x] + e[x])) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "async",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:runtime,async,data,executable-data,internal-control-values,construct-independent,V:2.5-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n    int def_async_var = acc_get_default_async();\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0;\n    }\n\n    #pragma acc enter data create(c[0:n])\n\n    #pragma acc data copyin(a[0:n], b[0:n])\n    {\n        #pragma acc parallel present(c[0:n]) async\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x) {\n                c[x] = a[x] + b[x];\n            }\n        }\n        acc_copyout_async(c, n * sizeof(real_t), def_async_var);\n        #pragma acc wait\n    }\n\n    for (int x = 0; x < n; ++x) {\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION) {\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "async",
                            "data",
                            "executable-data",
                            "internal-control-values",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n//T3:runtime,async,data,executable-data,internal-control-values,construct-independent,V:2.5-2.7\nint test3(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n    int def_async_var = acc_get_default_async();\n\n    acc_set_default_async(def_async_var + 1);\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0;\n    }\n    \n    #pragma acc enter data create(c[0:n])\n    #pragma acc data copyin(a[0:n], b[0:n])\n    {\n        #pragma acc parallel present(c[0:n]) async\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x) {\n                c[x] = a[x] + b[x];\n            }\n        }\n        acc_copyout_async(c, n * sizeof(real_t), def_async_var + 1);\n        #pragma acc wait\n    }\n\n    for (int x = 0; x < n; ++x) {\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION) {\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T3\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test3();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 2);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "async",
                            "data",
                            "executable-data",
                            "internal-control-values",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "4": {
                        "content": "#ifndef T4\n//T4:runtime,async,data,executable-data,construct-independent,V:2.5-2.7\nint test4(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0;\n    }\n\n    #pragma acc enter data create(c[0:n])\n    #pragma acc data copyin(a[0:n], b[0:n])\n    {\n        #pragma acc parallel present(c[0:n]) async(1)\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x) {\n                c[x] = a[x] + b[x];\n            }\n        }\n        #pragma acc enter data copyin(c[0:n])\n        acc_copyout_async(c, n * sizeof(real_t), 1);\n        #pragma acc parallel present(c[0:n]) async(1)\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x) {\n                c[x] += a[x] + b[x];\n            }\n        }\n        acc_copyout_async(c, n * sizeof(real_t), 1);\n    }\n    \n    for (int x = 0; x < n; ++x) {\n        if (fabs(c[x] - (2 * (a[x] + b[x]))) > PRECISION) {\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T4\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test4();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 3);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "async",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_copyout_finalize.c": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,reference-counting,V:2.5-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0;\n    }\n\n    #pragma acc enter data create(c[0:n])\n    #pragma acc enter data create(c[0:n])\n\n    #pragma acc data copyin(a[0:n], b[0:n]) present(c[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                c[x] = a[x] + b[x];\n            }\n        }\n    }\n    acc_copyout_finalize(c, n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent",
                            "reference-counting"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:runtime,data,executable-data,construct-independent,reference-counting,V:2.5-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0;\n    }\n\n    #pragma acc enter data copyin(c[0:n])\n    #pragma acc data copyin(a[0:n], b[0:n])\n    {\n        #pragma acc parallel present(a[0:n], b[0:n])\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x) {\n                c[x] = a[x] + b[x];\n            }\n        }\n    }\n    acc_copyout_finalize(c, n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x) {\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION) {\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent",
                            "reference-counting"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n//T3:runtime,data,executable-data,construct-independent,reference-counting,V:2.5-2.7\nint test3(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0;\n    }\n\n    #pragma acc enter data copyin(c[0:n])\n    #pragma acc enter data copyin(c[0:n])\n    #pragma acc data copyin(a[0:n], b[0:n])\n    {\n        #pragma acc parallel present(c[0:n])\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x) {\n                c[x] = a[x] + b[x];\n            }\n        }\n        acc_copyout_finalize(c, n * sizeof(real_t));\n        #pragma acc enter data copyin(c[0:n])\n        #pragma acc parallel present(c[0:n])\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x) {\n                c[x] += a[x] + b[x];\n            }\n        }\n    }\n    #pragma acc exit data copyout(c[0:n])\n\n    for (int x = 0; x < n; ++x) {\n        if (fabs(c[x] - (2 * (a[x] + b[x]))) > PRECISION) {\n            err += 1;\n        }\n    }\n    \n\n    return err;\n}\n#endif\n#ifndef T3\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test3();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 2);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent",
                            "reference-counting"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_copyout_finalize_async.c": {
                "num tests": 4,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,async,construct-independent,reference-counting,V:2.5-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    real_t *d = (real_t *)malloc(n * sizeof(real_t));\n    real_t *e = (real_t *)malloc(n * sizeof(real_t));\n    real_t *f = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0;\n        d[x] = rand() / (real_t)(RAND_MAX / 10);\n        e[x] = rand() / (real_t)(RAND_MAX / 10);\n        f[x] = 0;\n    }\n\n    #pragma acc enter data create(c[0:n], f[0:n])\n    #pragma acc enter data create(c[0:n], f[0:n])\n\n    #pragma acc data copyin(a[0:n], b[0:n], d[0:n], e[0:n]) present(c[0:n], f[0:n])\n    {\n        #pragma acc parallel async(1)\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                c[x] = a[x] + b[x];\n            }\n        }\n        #pragma acc parallel async(2)\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                f[x] = d[x] + e[x];\n            }\n        }\n        acc_copyout_finalize_async(c, n * sizeof(real_t), 1);\n        acc_copyout_finalize_async(f, n * sizeof(real_t), 2);\n        #pragma acc wait\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION){\n            err += 1;\n        }\n        if (fabs(f[x] - (d[x] + e[x])) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "async",
                            "construct-independent",
                            "reference-counting"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:runtime,data,executable-data,async,construct-independent,internal-control-values,V:2.5-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n    int def_async_var = acc_get_default_async();\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0;\n    }\n\n    #pragma acc enter data create(c[0:n])\n    #pragma acc enter data create(c[0:n])\n    \n    #pragma acc data copyin(a[0:n], b[0:n])\n    {\n        #pragma acc parallel present(c[0:n])\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x) {\n                c[x] = a[x] + b[x];\n            }\n        }\n        acc_copyout_finalize_async(c, n * sizeof(real_t), def_async_var);\n        #pragma acc wait\n    }\n\n    for (int x = 0; x < n; ++x) {\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION) {\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "async",
                            "construct-independent",
                            "internal-control-values"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n//T3:runtime,data,executable-data,async,construct-independent,internal-control-values,set,V:2.5-2.7\nint test3(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n    int def_async_var = acc_get_default_async();\n\n    acc_set_default_async(def_async_var + 1);\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0;\n    }\n\n    #pragma acc enter data create(c[0:n])\n    #pragma acc enter data create(c[0:n])\n    #pragma acc data copyin(a[0:n], b[0:n])\n    {\n        #pragma acc parallel present(c[0:n]) async\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x) {\n                c[x] = a[x] + b[x];\n            }\n        }\n        acc_copyout_async(c, n * sizeof(real_t), def_async_var + 1);\n        #pragma acc wait\n    }\n\n    for (int x = 0; x < n; ++x) {\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION) {\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T3\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test3();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 2);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "async",
                            "construct-independent",
                            "internal-control-values",
                            "set"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "4": {
                        "content": "#ifndef T4\n//T4:runtime,data,executable-data,async,construct-independent,V:2.5-2.7\nint test4(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0;\n    }\n\n    #pragma acc enter data create(c[0:n])\n    #pragma acc enter data create(c[0:n])\n    #pragma acc data copyin(a[0:n], b[0:n])\n    {\n        #pragma acc parallel present(c[0:n]) async(1)\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x) {\n                c[x] = a[x] + b[x];\n            }\n        }\n        acc_copyout_finalize_async(c, n * sizeof(real_t), 1);\n        #pragma acc enter data copyin(c[0:n]) async(1)\n        #pragma acc parallel present(c[0:n]) async(1)\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x) {\n                c[x] += a[x] + b[x];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x) {\n        if (fabs(c[x] - (2 * (a[x] + b[x]))) > PRECISION) {\n            err += 1;\n        }\n    }\n    \n\n    return err;\n}\n#endif\n#ifndef T4\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test4();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 3);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "async",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_create.c": {
                "num tests": 5,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0.0;\n    }\n\n    acc_create(c, n * sizeof(real_t));\n\n    #pragma acc data copyin(a[0:n], b[0:n])\n    {\n        #pragma acc parallel present(c[0:n])\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                c[x] = a[x] + b[x];\n            }\n        }\n    }\n\n    acc_copyout(c, n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0.0;\n    }\n\n    acc_create(c, n * sizeof(real_t));\n\n    #pragma acc data copyin(a[0:n], b[0:n])\n    {\n        #pragma acc parallel present(c[0:n])\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                c[x] = a[x] + b[x];\n            }\n        }\n    }\n\n    #pragma acc exit data copyout(c[0:n])\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n//T3:runtime,data,executable-data,compatibility-features,construct-independent,V:2.0-2.7\nint test3(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0;\n    }\n\n    acc_pcreate(c, n * sizeof(real_t));\n\n    #pragma acc data copyin(a[0:n], b[0:n]) present(c[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                c[x] = a[x] + b[x];\n            }\n        }\n    }\n\n    #pragma acc exit data copyout(c[0:n])\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T3\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test3();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 2);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "compatibility-features",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "4": {
                        "content": "#ifndef T4\n//T4:runtime,data,executable-data,compatibility-features,construct-independent,V:2.0-2.7\nint test4(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0;\n    }\n\n    acc_present_or_create(c, n * sizeof(real_t));\n\n    #pragma acc data copyin(a[0:n], b[0:n]) present(c[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                c[x] = a[x] + b[x];\n            }\n        }\n    }\n\n    #pragma acc exit data copyout(c[0:n])\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T4\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test4();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 3);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "compatibility-features",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "5": {
                        "content": "#ifndef T5\n//T5:runtime,data,executable-data,devonly,construct-independent,reference-counting,V:2.5-2.7\nint test5(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n    int * dev_test = (int *)malloc(sizeof(int));\n\n    dev_test[0] = 1;\n    #pragma acc enter data copyin(dev_test[0:1])\n    #pragma acc parallel present(dev_test[0:1])\n    {\n        dev_test[0] = 0;\n    }\n    if (dev_test[0] == 1){\n        for (int x = 0; x < n; ++x){\n            a[x] = rand() / (real_t)(RAND_MAX / 10);\n            b[x] = rand() / (real_t)(RAND_MAX / 10);\n            c[x] = 1;\n        }\n\n        #pragma acc enter data copyin(c[0:n])\n        for (int x = 0; x < n; ++x){\n            c[x] = 0;\n        }\n        acc_create(c, n * sizeof(real_t));\n        #pragma acc data copyin(a[0:n], b[0:n])\n        {\n            #pragma acc parallel present(c[0:n])\n            {\n                #pragma acc loop\n                for (int x = 0; x < n; ++x) {\n                    c[x] += a[x] + b[x];\n                }\n            }\n        }\n\n        #pragma acc exit data delete(c[0:n])\n        #pragma acc exit data copyout(c[0:n])\n    \n        for (int x = 0; x < n; ++x) {\n            if (fabs(c[x] - (1 + a[x] + b[x])) > PRECISION) {\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T5\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test5();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 4);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "devonly",
                            "construct-independent",
                            "reference-counting"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_create_async.c": {
                "num tests": 5,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,async,data,executable-data,construct-independent,V:2.5-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    real_t *d = (real_t *)malloc(n * sizeof(real_t));\n    real_t *e = (real_t *)malloc(n * sizeof(real_t));\n    real_t *f = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0;\n        d[x] = rand() / (real_t)(RAND_MAX / 10);\n        e[x] = rand() / (real_t)(RAND_MAX / 10);\n        f[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n], d[0:n], e[0:n])\n    {\n        acc_create_async(c, n * sizeof(real_t), 1);\n        acc_create_async(f, n * sizeof(real_t), 2);\n        #pragma acc data present(c[0:n], f[0:n])\n        {\n            #pragma acc parallel async(1)\n            {\n                #pragma acc loop\n                for (int x = 0; x < n; ++x){\n                    c[x] = a[x] + b[x];\n                }\n            }\n            #pragma acc parallel async(2)\n            {\n                #pragma acc loop\n                for (int x = 0; x < n; ++x){\n                    f[x] = d[x] + e[x];\n                }\n            }\n            #pragma acc wait\n        }\n    }\n\n    #pragma acc exit data copyout(c[0:n], f[0:n])\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION){\n            err += 1;\n        }\n        if (fabs(f[x] - (d[x] + e[x])) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "async",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:runtime,data,executable-data,async,construct-independent,V:2.5-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0;\n    }\n\n    acc_create_async(c, n * sizeof(real_t), 1);\n\n    #pragma acc data copyin(a[0:n], b[0:n])\n    {\n        while (!acc_async_test_all());\n        #pragma acc parallel present(c[0:n])\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x) {\n                c[x] = a[x] + b[x];\n            }\n        }\n    }\n\n    #pragma acc exit data copyout(c[0:n])\n\n    for (int x = 0; x < n; ++x) {\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "async",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n//T3:runtime,data,executable-data,async,construct-independent,V:2.5-2.7\nint test3(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0;\n    }\n\n    acc_create_async(c, n * sizeof(real_t), 1);\n\n    #pragma acc data copyin(a[0:n], b[0:n])\n    {\n        #pragma acc wait\n        #pragma acc parallel present(c[0:n])\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x) {\n                c[x] = a[x] + b[x];\n            }\n        }\n    }\n\n    #pragma acc exit data copyout(c[0:n])\n\n    for (int x = 0; x < n; ++x) {\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION) {\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T3\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test3();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 2);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "async",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "4": {
                        "content": "#ifndef T4\n//T4:runtime,data,executable-data,async,construct-independent,reference-counting,V:2.5-2.7\nint test4(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n    real_t * d = (real_t *)malloc(n * sizeof(real_t));\n    real_t * e = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0;\n        d[x] = rand() / (real_t)(RAND_MAX / 10);\n        e[x] = 0;\n    }\n\n    #pragma acc enter data create(c[0:n])\n    #pragma acc data copyin(a[0:n], b[0:n], d[0:n]) copyout(e[0:n])\n    {\n        #pragma acc parallel present(c[0:n]) async(1)\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x) {\n                c[x] = a[x] + b[x];\n            }\n        }\n        acc_create_async(c, n * sizeof(real_t), 1);\n        #pragma acc exit data delete(c[0:n]) async(1)\n        #pragma acc parallel present(c[0:n]) async(1)\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x) {\n                e[x] = c[x] + d[x];\n            }\n        }\n    }\n    #pragma acc wait\n    #pragma acc exit data copyout(c[0:n])\n\n    for (int x = 0; x < n; ++x) {\n        if (fabs(e[x] - (a[x] + b[x] + d[x])) > PRECISION) {\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T4\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test4();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 3);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "async",
                            "construct-independent",
                            "reference-counting"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "5": {
                        "content": "#ifndef T5\n//T5:runtime,data,executable-data,devonly,async,construct-independent,reference-counting,V:2.5-2.7\nint test5(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n    int * devtest = (int *)malloc(sizeof(int));\n    \n    devtest[0] = 0;\n    #pragma acc enter data copyin(devtest[0:1])\n    #pragma acc parallel present(devtest[0:1])\n    {\n        devtest[0] = 1;\n    }\n\n    if (devtest[0] == 0){\n        for (int x = 0; x < n; ++x){\n            a[x] = rand() / (real_t)(RAND_MAX / 10);\n            b[x] = rand() / (real_t)(RAND_MAX / 10);\n            c[x] = 0;\n        }\n\n        #pragma acc enter data create(c[0:n])\n        #pragma acc data copyin(a[0:n], b[0:n])\n        {\n            #pragma acc parallel present(c[0:n]) async(1)\n            {\n                #pragma acc loop\n                for (int x = 0; x < n; ++x) {\n                    c[x] = a[x] + b[x];\n                }\n            }\n            acc_create_async(c, n * sizeof(real_t), 1);\n            #pragma acc parallel present(c[0:n]) async(1)\n            {\n                #pragma acc loop\n                for (int x = 0; x < n; ++x) {\n                    c[x] += a[x] + b[x];\n                }\n            }\n            #pragma acc exit data copyout(c[0:n]) async(1)\n            #pragma acc wait\n        }\n\n        for (int x = 0; x < n; ++x) {\n            if (fabs(c[x] - (2 * (a[x] + b[x]))) > PRECISION) {\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T5\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test5();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 4);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "devonly",
                            "async",
                            "construct-independent",
                            "reference-counting"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_delete.c": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0.0;\n    }\n\n    #pragma acc enter data copyin(a[0:n], b[0:n])\n\n    #pragma acc data copyout(c[0:n])\n    {\n        #pragma acc parallel present(a[0:n], b[0:n])\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                c[x] = a[x] + b[x];\n            }\n        }\n    }\n\n    acc_delete(a, n * sizeof(real_t));\n    acc_delete(b, n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0.0;\n    }\n\n    acc_copyin(a, n * sizeof(real_t));\n    acc_copyin(b, n * sizeof(real_t));\n\n    #pragma acc data copyout(c[0:n])\n    {\n        #pragma acc parallel present(a[0:n], b[0:n])\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                c[x] = a[x] + b[x];\n            }\n        }\n    }\n\n    acc_delete(a, n * sizeof(real_t));\n    acc_delete(b, n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_delete_async.c": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,async,V:2.5-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    real_t *d = (real_t *)malloc(n * sizeof(real_t));\n    real_t *e = (real_t *)malloc(n * sizeof(real_t));\n    real_t *f = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0;\n        d[x] = rand() / (real_t)(RAND_MAX / 10);\n        e[x] = rand() / (real_t)(RAND_MAX / 10);\n        f[x] = 0;\n    }\n\n    #pragma acc enter data copyin(a[0:n], b[0:n], d[0:n], e[0:n])\n\n    #pragma acc data present(a[0:n], b[0:n], d[0:n], e[0:n]) copyout(c[0:n], f[0:n])\n    {\n        #pragma acc parallel async(1)\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                c[x] = a[x] + b[x];\n            }\n        }\n        #pragma acc parallel async(2)\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                f[x] = d[x] + e[x];\n            }\n        }\n        acc_delete_async(a, n * sizeof(real_t), 1);\n        acc_delete_async(b, n * sizeof(real_t), 1);\n        acc_delete_async(d, n * sizeof(real_t), 2);\n        acc_delete_async(e, n * sizeof(real_t), 2);\n        #pragma acc wait\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION){\n            err += 1;\n        }\n        if (fabs(f[x] - (d[x] + e[x])) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent",
                            "async"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:runtime,data,executable-data,devonly,async,construct-independent,V:2.5-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    real_t *d = (real_t *)malloc(n * sizeof(real_t));\n    real_t *e = (real_t *)malloc(n * sizeof(real_t));\n    real_t *f = (real_t *)malloc(n * sizeof(real_t));\n    int* devtest = (int *)malloc(sizeof(int));\n\n    devtest[0] = 1;\n    #pragma acc enter data copyin(devtest[0:1])\n    #pragma acc parallel present(devtest[0:1])\n    {\n        devtest[0] = 0;\n    }\n\n    if (devtest[0] == 1){\n        for (int x = 0; x < n; ++x){\n            a[x] = rand() / (real_t)(RAND_MAX / 10);\n            b[x] = rand() / (real_t)(RAND_MAX / 10);\n            c[x] = 0;\n        }\n\n        #pragma acc enter data copyin(a[0:n], b[0:n], c[0:n])\n        #pragma acc data present(a[0:n], b[0:n], c[0:n])\n        {\n            #pragma acc parallel async(1)\n            {\n                #pragma acc loop\n                for (int x = 0; x < n; ++x){\n                    c[x] = a[x] * b[x];\n                }\n            }\n        }\n        acc_delete_async(c, n * sizeof(real_t), 1);\n        #pragma acc enter data copyin(c[0:n]) async(1)\n        #pragma acc data present(a[0:n], b[0:n], c[0:n])\n        {\n            #pragma acc parallel async(1)\n            {\n                #pragma acc loop\n                for (int x = 0; x < n; ++x){\n                    c[x] += a[x] + b[x];\n                }\n            }\n        }\n        #pragma acc exit data delete(a[0:n], b[0:n]) copyout(c[0:n])\n\n        for (int x = 0; x < n; ++x){\n            if (fabs(c[x] - (a[x] + b[x])) > PRECISION){\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "devonly",
                            "async",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_delete_finalize.c": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,reference-counting,construct-independent,syntactic,V:2.5-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0.0;\n    }\n\n    #pragma acc enter data copyin(a[0:n], b[0:n])\n    #pragma acc enter data copyin(a[0:n], b[0:n])\n\n    #pragma acc data copyout(c[0:n])\n    {\n        #pragma acc parallel present(a[0:n], b[0:n])\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                c[x] = a[x] + b[x];\n            }\n        }\n    }\n\n    acc_delete_finalize(a, n * sizeof(real_t));\n    acc_delete_finalize(b, n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "reference-counting",
                            "construct-independent",
                            "syntactic"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:runtime,data,executable-data,reference-counting,syntactic,construct-independent,V:2.5-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0.0;\n    }\n\n    acc_copyin(a, n * sizeof(real_t));\n    acc_copyin(a, n * sizeof(real_t));\n    acc_copyin(b, n * sizeof(real_t));\n    acc_copyin(b, n * sizeof(real_t));\n\n    #pragma acc data copyout(c[0:n])\n    {\n        #pragma acc parallel present(a[0:n], b[0:n])\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                c[x] = a[x] + b[x];\n            }\n        }\n    }\n\n    acc_delete_finalize(a, n * sizeof(real_t));\n    acc_delete_finalize(b, n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "reference-counting",
                            "syntactic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_delete_finalize_async.c": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,reference-counting,syntactic,construct-independent,async,V:2.5-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    real_t *d = (real_t *)malloc(n * sizeof(real_t));\n    real_t *e = (real_t *)malloc(n * sizeof(real_t));\n    real_t *f = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0;\n        d[x] = rand() / (real_t)(RAND_MAX / 10);\n        e[x] = rand() / (real_t)(RAND_MAX / 10);\n        f[x] = 0;\n    }\n\n    #pragma acc enter data copyin(a[0:n], b[0:n], d[0:n], e[0:n])\n    #pragma acc enter data copyin(a[0:n], b[0:n], d[0:n], e[0:n])\n\n    #pragma acc data present(a[0:n], b[0:n], d[0:n], e[0:n]) copyout(c[0:n], f[0:n])\n    {\n        #pragma acc parallel async(1)\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                c[x] = a[x] + b[x];\n            }\n        }\n        #pragma acc parallel async(2)\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                f[x] = d[x] + e[x];\n            }\n        }\n        acc_delete_finalize_async(a, n * sizeof(real_t), 1);\n        acc_delete_finalize_async(b, n * sizeof(real_t), 1);\n        acc_delete_finalize_async(d, n * sizeof(real_t), 2);\n        acc_delete_finalize_async(e, n * sizeof(real_t), 2);\n        #pragma acc wait\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION){\n            err += 1;\n        }\n        if (fabs(f[x] - (d[x] + e[x])) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "reference-counting",
                            "syntactic",
                            "construct-independent",
                            "async"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:runtime,data,executable-data,reference-counting,devonly,async,construct-independent,V:2.5-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    real_t *d = (real_t *)malloc(n * sizeof(real_t));\n    real_t *e = (real_t *)malloc(n * sizeof(real_t));\n    real_t *f = (real_t *)malloc(n * sizeof(real_t));\n    int* devtest = (int *)malloc(sizeof(int));\n\n    devtest[0] = 1;\n    #pragma acc enter data copyin(devtest[0:1])\n    #pragma acc parallel present(devtest[0:1])\n    {\n        devtest[0] = 0;\n    }\n\n    if (devtest[0] == 1){\n        for (int x = 0; x < n; ++x){\n            a[x] = rand() / (real_t)(RAND_MAX / 10);\n            b[x] = rand() / (real_t)(RAND_MAX / 10);\n            c[x] = 0;\n        }\n\n        #pragma acc enter data copyin(a[0:n], b[0:n], c[0:n])\n        #pragma acc enter data copyin(c[0:n])\n        #pragma acc data present(a[0:n], b[0:n], c[0:n])\n        {\n            #pragma acc parallel async(1)\n            {\n                #pragma acc loop\n                for (int x = 0; x < n; ++x){\n                    c[x] = a[x] * b[x];\n                }\n            }\n        }\n        acc_delete_finalize_async(c, n * sizeof(real_t), 1);\n        #pragma acc enter data copyin(c[0:n]) async(1)\n        #pragma acc data present(a[0:n], b[0:n], c[0:n])\n        {\n            #pragma acc parallel async(1)\n            {\n                #pragma acc loop\n                for (int x = 0; x < n; ++x){\n                    c[x] += a[x] + b[x];\n                }\n            }\n        }\n        #pragma acc exit data delete(a[0:n], b[0:n]) copyout(c[0:n])\n\n        for (int x = 0; x < n; ++x){\n            if (fabs(c[x] - (a[x] + b[x])) > PRECISION){\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "reference-counting",
                            "devonly",
                            "async",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_deviceptr.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    real_t *a_ptr;\n    real_t *b_ptr;\n    real_t *c_ptr;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0;\n    }\n\n    #pragma acc enter data copyin(a[0:n], b[0:n]) create(c[0:n])\n\n    a_ptr = acc_deviceptr(a);\n    b_ptr = acc_deviceptr(b);\n    c_ptr = acc_deviceptr(c);\n\n    #pragma acc data deviceptr(a_ptr, b_ptr, c_ptr)\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                c_ptr[x] = a_ptr[x] + b_ptr[x];\n            }\n        }\n    }\n\n    #pragma acc exit data copyout(c[0:n]) delete(a[0:n], b[0:n])\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_free.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,V:2.6-2.7\nint test1(){\n    int err = 0;\n    int *a = (int *)acc_malloc(n * sizeof(int));\n    size_t initial_memory = acc_get_property(acc_get_device_num(acc_get_device_type()), acc_get_device_type(), acc_property_free_memory);\n\n    acc_free(a);\n    size_t final_memory = acc_get_property(acc_get_device_num(acc_get_device_type()), acc_get_device_type(), acc_property_free_memory);\n    if (final_memory < initial_memory + n * sizeof(int)){\n        err += 1;\n    }\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_get_default_async.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,async,construct-independent,internal-control-values,V:2.5-2.7\nint test1(){\n    int err = 0;\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    int holder = acc_get_default_async();\n\n    for(int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copyout(c[0:n])\n    {\n        #pragma acc parallel async\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                c[x] = a[x] + b[x];\n            }\n        }\n        #pragma acc wait(holder)\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION){\n            err += 1;\n        }\n    }\n    if (acc_get_default_async() < 0){\n        err += 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "async",
                            "construct-independent",
                            "internal-control-values"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_get_device_num.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,devonly,internal-control-values,syntactic,V:1.0-2.7\nint test1(){\n    int err = 0;\n\n    if (acc_get_device_type() != acc_device_none){\n        for (int x = 0; x < acc_get_num_devices(acc_get_device_type()); ++x){\n            acc_set_device_num(x, acc_get_device_type());\n            if (acc_get_device_num(acc_get_device_type()) != x){\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "devonly",
                            "internal-control-values",
                            "syntactic"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_get_device_type.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:,V:1.0-3.2\nint test1(){\n\tint err = 0;\n\n\tint device_type = acc_get_device_type();\n\n\tif (acc_get_device_type() != device_type){\n\t\terr += 1;\n\t}\n\n\treturn err;\n}\n#endif\n#ifndef T1\n    \tfailed = 0;\n    \tfor (int x = 0; x < NUM_TEST_CALLS; ++x){\n        \tfailed = failed + test1();\n    \t}\n    \tif (failed != 0){\n        \tfailcode = failcode + (1 << 0);\n    \t}\n#endif\n",
                        "tags": [
                            ""
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_get_num_devices.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,devonly,internal-control-values,syntactic,V:1.0-2.7\nint test1(){\n    int err = 0;\n\n    if(acc_get_device_type() != acc_device_none && acc_get_num_devices(acc_get_device_type()) == 0){ //Can't have zero of current device type\n          err += 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "devonly",
                            "internal-control-values",
                            "syntactic"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_get_property.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,devonly,syntactic,V:2.6-2.7\nint test1(){\n    int err = 0;\n\n    if (acc_get_device_type() != acc_device_none){\n        const char* returned_string1;\n        const char* returned_string2;\n        const char* returned_string3;\n        int returned_int;\n        returned_int = acc_get_property(acc_get_device_num(acc_get_device_type()), acc_get_device_type(), acc_property_memory);\n        returned_int = acc_get_property(acc_get_device_num(acc_get_device_type()), acc_get_device_type(), acc_property_free_memory);\n        returned_string1 = acc_get_property_string(acc_get_device_num(acc_get_device_type()), acc_get_device_type(), acc_property_name);\n        returned_string2 = acc_get_property_string(acc_get_device_num(acc_get_device_type()), acc_get_device_type(), acc_property_vendor);\n        returned_string3 = acc_get_property_string(acc_get_device_num(acc_get_device_type()), acc_get_device_type(), acc_property_driver);\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "devonly",
                            "syntactic"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_hostptr.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,V:2.0-2.7\nint test1(){\n    int err = 0;\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *a_ptr;\n\n    a_ptr = acc_create(a, n * sizeof(real_t));\n\n    if (a != acc_hostptr(acc_deviceptr(a))){\n        err += 1;\n    }\n\n    acc_delete(a, n * sizeof(real_t));\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_init.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,init,syntactic,V:2.5-2.7\nint test1(){\n    int err = 0;\n\n    if (acc_get_device_type() != acc_device_none){\n        acc_init(acc_get_device_type());\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "init",
                            "syntactic"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_is_present.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,devonly,V:2.0-2.7\nint test1(){\n    int err = 0;\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    int *devtest = (int *)malloc(sizeof(int));\n\n    devtest[0] = 1;\n    #pragma acc enter data copyin(devtest[0:1])\n    #pragma acc parallel present(devtest[0:1])\n    {\n        devtest[0] = 0;\n    }\n\n    #pragma acc enter data create(a[0:n])\n    if (acc_is_present(a, n * sizeof(real_t)) == 0){\n        err += 1;\n    }\n    #pragma acc exit data delete(a[0:n])\n\n    if (devtest[0] == 1){\n        if (acc_is_present(a, n * sizeof(real_t)) != 0){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "devonly"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_malloc.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,V:1.0-2.7\nint test1(){\n    int err = 0;\n    size_t initial_memory = acc_get_property(acc_get_device_num(acc_get_device_type()), acc_get_device_type(), acc_property_free_memory);\n    int *a = (int *)acc_malloc(n * sizeof(int));\n\n    if (initial_memory == 0){\n        return err;\n    }\n    size_t final_memory = acc_get_property(acc_get_device_num(acc_get_device_type()), acc_get_device_type(), acc_property_free_memory);\n    if (final_memory + n * sizeof(int) > initial_memory){\n        err += 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_map_data.c": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    real_t *d;\n    real_t *e = (real_t *)malloc(n * sizeof(real_t));\n\n    d = (real_t *)acc_malloc(n * sizeof(real_t));\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n\n    acc_map_data(c, d, n * sizeof(real_t));\n\n    #pragma acc data copyin(a[0:n], b[0:n]) present(c[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                c[x] = a[x] + b[x];\n            }\n        }\n    }\n\n    #pragma acc update host(c[0:n])\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a[x] + b[x]))> PRECISION){\n            err += 1;\n        }\n    }\n\n    acc_unmap_data(c);\n    acc_free(d);\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test2(){\n    int err = 0;\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    real_t *d;\n    real_t *e = (real_t *)malloc(n * sizeof(real_t));\n\n    d = (real_t *)acc_malloc(2 * n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    acc_map_data(c, d, n * sizeof(real_t));\n    acc_map_data(e, &(d[n]), n * sizeof(real_t));\n\n    #pragma acc data copyin(a[0:n], b[0:n]) present(c[0:n], e[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                c[x] = a[x] + b[x];\n            }\n        }\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                e[x] = a[x] * b[x];\n            }\n        }\n    }\n\n    #pragma acc update host(c[0:n])\n    #pragma acc update host(e[0:n])\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION){\n            err += 1;\n        }\n        if (fabs(e[x] - (a[x] * b[x])) > PRECISION){\n            err += 1;\n        }\n    }\n    acc_unmap_data(c);\n    acc_unmap_data(e);\n    acc_free(d);\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n//T3:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test3(){\n    int err = 0;\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    real_t *d;\n    real_t *e = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    d = (real_t *)acc_malloc(n * sizeof(real_t));\n\n    #pragma acc data copyin(a[0:n], b[0:n]) deviceptr(d)\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                d[x] = a[x] + b[x];\n            }\n        }\n    }\n\n    acc_map_data(c, d, n * sizeof(real_t));\n    #pragma acc data copyin(a[0:n], b[0:n]) present(c[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                c[x] += a[x] + b[x];\n            }\n        }\n    }\n\n    #pragma acc update host(c[0:n])\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - 2 * (a[x] + b[x])) > 2 * PRECISION){\n            err += 1;\n        }\n    }\n\n    acc_unmap_data(c);\n    acc_free(d);\n\n    return err;\n}\n#endif\n#ifndef T3\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test3();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 2);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_memcpy_device.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.5-2.7\nint test1(){\n    int err = 0;\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    real_t *hostdata = (real_t *)malloc(3 * n * sizeof(real_t));\n    real_t *devdata;\n\n    for (int x = 0; x < n; ++x){\n        hostdata[x] = rand() / (real_t)(RAND_MAX / 10);\n        hostdata[n + x] = rand() / (real_t)(RAND_MAX / 10);\n        hostdata[2*n + x] = 1;\n    }\n\n    devdata = acc_copyin(hostdata, 3 * n * sizeof(real_t));\n    #pragma acc enter data create(a[0:n], b[0:n], c[0:n])\n    acc_memcpy_device(acc_deviceptr(a), devdata, n * sizeof(real_t));\n    acc_memcpy_device(acc_deviceptr(b), devdata+n, n * sizeof(real_t));\n    acc_memcpy_device(acc_deviceptr(c), devdata+2*n, n * sizeof(real_t));\n\n    #pragma acc data present(a[0:n], b[0:n], c[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                c[x] += a[x] + b[x];\n            }\n        }\n    }\n\n    #pragma acc exit data copyout(a[0:n], b[0:n], c[0:n])\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(a[x] - hostdata[x]) > PRECISION){\n            err += 1;\n        }\n        if (fabs(b[x] - hostdata[n + x]) > PRECISION){\n            err += 1;\n        }\n        if (fabs(c[x] - (1 + a[x] + b[x])) > PRECISION){\n            err += 1;\n        }\n    }\n\n    #pragma acc exit data delete(hostdata[0:3*n])\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_memcpy_from_device.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    real_t *hostdata = (real_t *)malloc(3 * n * sizeof(real_t));\n    real_t *devdata;\n\n    for (int x = 0; x < n; ++x){\n        hostdata[x] = rand() / (real_t)(RAND_MAX / 10);\n        hostdata[n + x] = rand() / (real_t)(RAND_MAX / 10);\n        hostdata[2*n + x] = 1;\n    }\n\n    devdata = acc_copyin(hostdata, 3 * n * sizeof(real_t));\n\n    #pragma acc data deviceptr(devdata)\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                devdata[2*n + x] += devdata[x] + devdata[n + x];\n            }\n        }\n    }\n\n    acc_memcpy_from_device(a, devdata, n * sizeof(real_t));\n    acc_memcpy_from_device(b, &(devdata[n]), n * sizeof(real_t));\n    acc_memcpy_from_device(c, &(devdata[2*n]), n * sizeof(real_t));\n\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(a[x] - hostdata[x]) > PRECISION){\n            err += 1;\n        }\n        if (fabs(b[x] - hostdata[n + x]) > PRECISION){\n            err += 1;\n        }\n        if (fabs(c[x] - (1 + a[x] + b[x])) > PRECISION){\n            err += 1;\n        }\n    }\n\n    #pragma acc exit data delete(hostdata[0:3*n])\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_memcpy_from_device_async.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,async,construct-independent,V:2.5-2.7\nint test1(){\n    int err = 0;\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    real_t *d = (real_t *)malloc(n * sizeof(real_t));\n    real_t *e = (real_t *)malloc(n * sizeof(real_t));\n    real_t *f = (real_t *)malloc(n * sizeof(real_t));\n    real_t *hostdata = (real_t *)malloc(6 * n * sizeof(real_t));\n    real_t *hostdata_copy = (real_t *)malloc(6 * n * sizeof(real_t));\n\n    real_t *devdata;\n\n    for (int x = 0; x < n; ++x){\n        hostdata[x] = rand() / (real_t)(RAND_MAX / 10);\n        hostdata[n + x] = rand() / (real_t)(RAND_MAX / 10);\n        hostdata[2*n + x] = 1;\n        hostdata[3*n + x] = rand() / (real_t)(RAND_MAX / 10);\n        hostdata[4*n + x] = rand() / (real_t)(RAND_MAX / 10);\n        hostdata[5*n + x] = 2;\n    }\n\n    for (int x = 0; x < 6*n; ++x){\n        hostdata_copy[x] = hostdata[x];\n    }\n\n    devdata = acc_copyin(hostdata, 6 * n * sizeof(real_t));\n\n    #pragma acc data deviceptr(devdata)\n    {\n        #pragma acc parallel async(1)\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                devdata[x] = devdata[x] * devdata[x];\n            }\n        }\n        acc_memcpy_from_device_async(a, devdata, n * sizeof(real_t), 1);\n        #pragma acc parallel async(2)\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                devdata[n + x] = devdata[n + x] * devdata[n + x];\n            }\n        }\n        acc_memcpy_from_device_async(b, &(devdata[n]), n * sizeof(real_t), 2);\n        #pragma acc parallel async(4)\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                devdata[3*n + x] = devdata[3*n + x] * devdata[3*n + x];\n            }\n        }\n        acc_memcpy_from_device_async(d, &(devdata[3*n]), n * sizeof(real_t), 4);\n        #pragma acc parallel async(5)\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                devdata[4*n + x] = devdata[4*n + x] * devdata[4*n + x];\n            }\n        }\n        acc_memcpy_from_device_async(e, &(devdata[4*n]), n * sizeof(real_t), 5);\n        #pragma acc parallel async(3) wait(1, 2)\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                devdata[2*n + x] += devdata[x] + devdata[n + x];\n            }\n        }\n        acc_memcpy_from_device_async(c, &(devdata[2*n]), n * sizeof(real_t), 3);\n        #pragma acc parallel async(6) wait(4, 5)\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                devdata[5*n + x] += devdata[3*n + x] + devdata[4*n + x];\n            }\n        }\n        acc_memcpy_from_device_async(f, &(devdata[5*n]), n * sizeof(real_t), 6);\n    }\n\n    #pragma acc wait(1)\n    for (int x = 0; x < n; ++x){\n        if (fabs(a[x] - hostdata_copy[x] * hostdata_copy[x]) > PRECISION){\n            err += 1;\n        }\n    }\n    #pragma acc wait(2)\n    for (int x = 0; x < n; ++x){\n        if (fabs(b[x] - hostdata_copy[n + x] * hostdata_copy[n + x]) > PRECISION){\n            err += 1;\n        }\n    }\n    #pragma acc wait(4)\n    for (int x = 0; x < n; ++x){\n        if (fabs(d[x] - hostdata_copy[3*n + x] * hostdata_copy[3*n + x]) > PRECISION){\n            err += 1;\n        }\n    }\n    #pragma acc wait(5)\n    for (int x = 0; x < n; ++x){\n        if (fabs(e[x] - hostdata_copy[4*n + x] * hostdata_copy[4*n + x]) > PRECISION){\n            err += 1;\n        }\n    }\n    #pragma acc wait(3)\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (1 + a[x] + b[x])) > PRECISION){\n            err += 1;\n        }\n    }\n    #pragma acc wait(6)\n    for (int x = 0; x < n; ++x){\n        if (fabs(f[x] - (2 + d[x] + e[x])) > PRECISION){\n            err += 1;\n        }\n    }\n\n    #pragma acc exit data delete(hostdata[0:6*n])\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "async",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_memcpy_to_device.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    real_t *hostdata = (real_t *)malloc(3 * n * sizeof(real_t));\n    real_t *devdata;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 1;\n    }\n\n    devdata = acc_create(hostdata, 3 * n * sizeof(real_t));\n\n    acc_memcpy_to_device(devdata, a, n * sizeof(real_t));\n    acc_memcpy_to_device(&(devdata[n]), b, n * sizeof(real_t));\n    acc_memcpy_to_device(&(devdata[2*n]), c, n * sizeof(real_t));\n\n    #pragma acc data deviceptr(devdata)\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                devdata[2*n + x] += devdata[x] + devdata[n + x];\n            }\n        }\n    }\n    #pragma acc exit data copyout(hostdata[0:3*n])\n    for (int x = 0; x < n; ++x){\n        if (fabs(hostdata[2 * n + x] - (1 + hostdata[n + x] + hostdata[x])) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_memcpy_to_device_async.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,async,construct-independent,V:2.5-2.7\nint test1(){\n    int err = 0;\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    real_t *d = (real_t *)malloc(n * sizeof(real_t));\n    real_t *e = (real_t *)malloc(n * sizeof(real_t));\n    real_t *f = (real_t *)malloc(n * sizeof(real_t));\n\n    real_t *a_host = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b_host = (real_t *)malloc(n * sizeof(real_t));\n    real_t *d_host = (real_t *)malloc(n * sizeof(real_t));\n    real_t *e_host = (real_t *)malloc(n * sizeof(real_t));\n\n    real_t *hostdata = (real_t *)malloc(6 * n * sizeof(real_t));\n    real_t *devdata;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 1;\n        d[x] = rand() / (real_t)(RAND_MAX / 10);\n        e[x] = rand() / (real_t)(RAND_MAX / 10);\n        f[x] = 2;\n\n        a_host[x] = a[x];\n        b_host[x] = b[x];\n        d_host[x] = d[x];\n        e_host[x] = e[x];\n    }\n\n    devdata = acc_create(hostdata, 6 * n * sizeof(real_t));\n\n    acc_memcpy_to_device_async(devdata, a, n * sizeof(real_t), 1);\n    acc_memcpy_to_device_async(&(devdata[n]), b, n * sizeof(real_t), 2);\n    acc_memcpy_to_device_async(&(devdata[2*n]), c, n * sizeof(real_t), 3);\n    acc_memcpy_to_device_async(&(devdata[3*n]), d, n * sizeof(real_t), 4);\n    acc_memcpy_to_device_async(&(devdata[4*n]), e, n * sizeof(real_t), 5);\n    acc_memcpy_to_device_async(&(devdata[5*n]), f, n * sizeof(real_t), 6);\n\n    #pragma acc data deviceptr(devdata)\n    {\n        #pragma acc parallel async(1)\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                devdata[x] = devdata[x] * devdata[x];\n            }\n        }\n        #pragma acc parallel async(2)\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                devdata[n + x] = devdata[n + x] * devdata[n + x];\n            }\n        }\n        #pragma acc parallel async(4)\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                devdata[3*n + x] = devdata[3*n + x] * devdata[3*n + x];\n            }\n        }\n        #pragma acc parallel async(5)\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                devdata[4*n + x] = devdata[4*n + x] * devdata[4*n + x];\n            }\n        }\n        #pragma acc parallel async(3) wait(1, 2)\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                devdata[2*n + x] += devdata[x] + devdata[n + x];\n            }\n        }\n        #pragma acc parallel async(6) wait(4, 5)\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                devdata[5*n + x] += devdata[3*n + x] + devdata[4*n + x];\n            }\n        }\n    }\n\n    #pragma acc update host(hostdata[2*n:n]) async(3)\n    #pragma acc update host(hostdata[5*n:n]) async(6)\n\n    #pragma acc wait(3)\n    for (int x = 0; x < n; ++x){\n        if (fabs(hostdata[2*n + x] - (1 + a_host[x] * a_host[x] + b_host[x] * b_host[x])) > 4 * PRECISION){\n            err += 1;\n        }\n    }\n\n    #pragma acc wait(6)\n    for (int x = 0; x < n; ++x){\n        if (fabs(hostdata[5*n + x] - (2 + d_host[x] * d_host[x] + e_host[x] * e_host[x])) > PRECISION){\n            err += 1;\n        }\n    }\n\n    #pragma acc exit data delete(hostdata[0:6*n])\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "async",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_on_device.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,construct-independent,V:1.0-2.7\nint test1(){\n    int err = 0;\n    int device_type = acc_get_device_type();\n\n    if (device_type != acc_device_none){\n        #pragma acc data copy(err)\n        {\n            #pragma acc parallel\n            {\n                if (acc_on_device(device_type) == 0){\n                    err += 1;\n                }\n            }\n        }\n    }\n    else{\n        #pragma acc parallel\n        {\n            if (acc_on_device(acc_device_host) == 0){\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "construct-independent"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_set_default_async.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,async,construct-independent,set,V:2.5-2.7\nint test1(){\n    int err = 0;\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    real_t *a_host = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b_host = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0;\n        a_host[x] = a[x];\n        b_host[x] = b[x];\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copyout(c[0:n])\n    {\n        acc_set_default_async(1);\n        #pragma acc parallel async\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                a[x] = a[x] * a[x];\n            }\n        }\n        acc_set_default_async(2);\n        #pragma acc parallel async\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                b[x] = b[x] * b[x];\n            }\n        }\n        #pragma acc parallel async(1) wait(2)\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                c[x] = a[x] + b[x];\n            }\n        }\n        #pragma acc wait(1)\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a_host[x] * a_host[x] + b_host[x] * b_host[x])) > 4*PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "async",
                            "construct-independent",
                            "set"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_set_device_num.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,devonly,construct-independent,set,V:2.0-2.7\nint test1(){\n    int err = 0;\n\n    if (acc_get_device_type() != acc_device_none){\n        real_t **host_copy = (real_t **)malloc(acc_get_num_devices(acc_get_device_type()) * sizeof(real_t *));\n        for (int x = 0; x < acc_get_num_devices(acc_get_device_type()); ++x){\n            host_copy[x] = (real_t *)malloc(n * sizeof(real_t));\n        }\n        real_t *a = (real_t *)malloc(n * sizeof(real_t));\n        for (int x = 0; x < acc_get_num_devices(acc_get_device_type()); ++x){\n            for (int y = 0; y < n; ++y){\n                a[y] = rand() / (real_t)(RAND_MAX / 10);\n                host_copy[x][y] = a[y];\n            }\n            acc_set_device_num(x, acc_get_device_type());\n            #pragma acc enter data copyin(a[0:n])\n        }\n        for (int x = 0; x < acc_get_num_devices(acc_get_device_type()); ++x){\n            acc_set_device_num(x, acc_get_device_type());\n            #pragma acc data present(a[0:n])\n            {\n                #pragma acc parallel\n                {\n                    #pragma acc loop\n                    for (int y = 0; y < n; ++y){\n                        a[y] = a[y] + 1;\n                    }\n                }\n            }\n        }\n        for (int x = 0; x < acc_get_num_devices(acc_get_device_type()); ++x){\n            acc_set_device_num(x, acc_get_device_type());\n            #pragma acc exit data copyout(a[0:n])\n            for (int y = 0; y < n; ++y){\n                if (fabs(a[y] - (host_copy[x][y] + 1)) > PRECISION){\n                    err += 1;\n                }\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "devonly",
                            "construct-independent",
                            "set"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_set_device_type.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,internal-control-values,syntactic,V:2.0-2.7\nint test1(){\n    int err = 0;\n\n    int device_type = acc_get_device_type();\n\n    acc_set_device_type(device_type);\n    if (acc_get_device_type() != device_type){\n        err += 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "internal-control-values",
                            "syntactic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_shutdown.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,devonly,shutdown,V:2.0-2.7\nint test1(){\n    int err = 0;\n\n    if (acc_get_device_type() != acc_device_none){\n        acc_shutdown(acc_get_device_type());\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "devonly",
                            "shutdown"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_unmap_data.c": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    real_t *d;\n    real_t *e = (real_t *)malloc(n * sizeof(real_t));\n\n    d = (real_t *)acc_malloc(n * sizeof(real_t));\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n\n    acc_map_data(c, d, n * sizeof(real_t));\n\n    #pragma acc data copyin(a[0:n], b[0:n]) present(c[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                c[x] = a[x] + b[x];\n            }\n        }\n    }\n\n    #pragma acc update host(c[0:n])\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a[x] + b[x]))> PRECISION){\n            err += 1;\n        }\n    }\n\n    acc_unmap_data(c);\n    acc_free(d);\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test2(){\n    int err = 0;\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    real_t *d;\n    real_t *e = (real_t *)malloc(n * sizeof(real_t));\n\n    d = (real_t *)acc_malloc(2 * n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    acc_map_data(c, d, n * sizeof(real_t));\n    acc_map_data(e, &(d[n]), n * sizeof(real_t));\n\n    #pragma acc data copyin(a[0:n], b[0:n]) present(c[0:n], e[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                c[x] = a[x] + b[x];\n            }\n        }\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                e[x] = a[x] * b[x];\n            }\n        }\n    }\n\n    #pragma acc update host(c[0:n])\n    #pragma acc update host(e[0:n])\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION){\n            err += 1;\n        }\n        if (fabs(e[x] - (a[x] * b[x])) > PRECISION){\n            err += 1;\n        }\n    }\n    acc_unmap_data(c);\n    acc_unmap_data(e);\n    acc_free(d);\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n//T3:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test3(){\n    int err = 0;\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    real_t *d;\n    real_t *e = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    d = (real_t *)acc_malloc(n * sizeof(real_t));\n\n    #pragma acc data copyin(a[0:n], b[0:n]) deviceptr(d)\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                d[x] = a[x] + b[x];\n            }\n        }\n    }\n\n    acc_map_data(c, d, n * sizeof(real_t));\n    #pragma acc data copyin(a[0:n], b[0:n]) present(c[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                c[x] += a[x] + b[x];\n            }\n        }\n    }\n\n    #pragma acc update host(c[0:n])\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - 2 * (a[x] + b[x])) > 2 * PRECISION){\n            err += 1;\n        }\n    }\n\n    acc_unmap_data(c);\n    acc_free(d);\n\n    return err;\n}\n#endif\n#ifndef T3\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test3();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 2);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_update_device.c": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    int *devtest = (int *)malloc(sizeof(int));\n\n    devtest[0] = 1;\n    #pragma acc enter data copyin(devtest[0:1])\n    #pragma acc parallel\n    {\n        devtest[0] = 0;\n    }\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0;\n    }\n\n    #pragma acc data copyout(c[0:n]) create(a[0:n], b[0:n])\n    {\n        acc_update_device(a, n * sizeof(real_t));\n        acc_update_device(b, n * sizeof(real_t));\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                c[x] = a[x] + b[x];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test2(){\n    int err = 0;\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    int *devtest = (int *)malloc(sizeof(int));\n\n    devtest[0] = 1;\n    #pragma acc enter data copyin(devtest[0:1])\n    #pragma acc parallel\n    {\n        devtest[0] = 0;\n    }\n\n    if (devtest[0] == 1){\n        for (int x = 0; x < n; ++x){\n            a[x] = rand() / (real_t)(RAND_MAX / 10);\n            b[x] = rand() / (real_t)(RAND_MAX / 10);\n            c[x] = 0;\n        }\n\n        #pragma acc data copyout(c[0:n]) copyin(a[0:n], b[0:n])\n        {\n            #pragma acc parallel\n            {\n                #pragma acc loop\n                for (int x = 0; x < n; ++x){\n                    a[x] = a[x] * a[x];\n                }\n            }\n            acc_update_device(a, n * sizeof(real_t));\n            #pragma acc parallel\n            {\n                #pragma acc loop\n                for (int x = 0; x < n; ++x){\n                    b[x] = b[x] * b[x];\n                }\n            }\n            acc_update_device(b, n * sizeof(real_t));\n            #pragma acc parallel\n            {\n                #pragma acc loop\n                for (int x = 0; x < n; ++x){\n                    c[x] = a[x] + b[x];\n                }\n            }\n        }\n\n\n        for (int x = 0; x < n; ++x){\n            if (fabs(c[x] - (a[x] + b[x])) > PRECISION){\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_update_device_async.c": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,async,construct-independent,V:2.5-2.7\nint test1(){\n    int err = 0;\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    real_t *a_host = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b_host = (real_t *)malloc(n * sizeof(real_t));\n\n    int *devtest = (int *)malloc(sizeof(int));\n\n    devtest[0] = 1;\n    #pragma acc enter data copyin(devtest[0:1])\n    #pragma acc parallel\n    {\n        devtest[0] = 0;\n    }\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0;\n        a_host[x] = a[x];\n        b_host[x] = b[x];\n    }\n\n\n\n    #pragma acc data copyout(c[0:n]) create(a[0:n], b[0:n])\n    {\n        acc_update_device_async(a, n * sizeof(real_t), 1);\n        #pragma acc parallel async(1)\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                a[x] = a[x] * a[x];\n            }\n        }\n        acc_update_device_async(b, n * sizeof(real_t), 2);\n        #pragma acc parallel async(2)\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                b[x] = b[x] * b[x];\n            }\n        }\n        #pragma acc parallel async(1) wait(2)\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                c[x] = a[x] + b[x];\n            }\n        }\n        #pragma acc wait(1)\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a_host[x] * a_host[x] + b_host[x] * b_host[x])) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "async",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:runtime,data,executable-data,async,devonly,construct-independent,V:2.5-2.7\nint test2(){\n    int err = 0;\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    real_t *a_host = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b_host = (real_t *)malloc(n * sizeof(real_t));\n\n    int *devtest = (int *)malloc(sizeof(int));\n\n    devtest[0] = 1;\n    #pragma acc enter data copyin(devtest[0:1])\n    #pragma acc parallel\n    {\n        devtest[0] = 0;\n    }\n\n    if (devtest[0] == 1){\n        for (int x = 0; x < n; ++x){\n            a[x] = rand() / (real_t)(RAND_MAX / 10);\n            b[x] = rand() / (real_t)(RAND_MAX / 10);\n            c[x] = 0;\n        }\n\n        #pragma acc data copyout(c[0:n]) copyin(a[0:n], b[0:n])\n        {\n            #pragma acc parallel async(1)\n            {\n                #pragma acc loop\n                for (int x = 0; x < n; ++x){\n                    a[x] = a[x] * a[x];\n                }\n            }\n            acc_update_device_async(a, n * sizeof(real_t), 1);\n            #pragma acc parallel async(2)\n            {\n                #pragma acc loop\n                for (int x = 0; x < n; ++x){\n                    b[x] = b[x] * b[x];\n                }\n            }\n            acc_update_device_async(b, n * sizeof(real_t), 2);\n            #pragma acc parallel async(1) wait(2)\n            {\n                #pragma acc loop\n                for (int x = 0; x < n; ++x){\n                    c[x] = a[x] + b[x];\n                }\n            }\n            #pragma acc wait(1)\n        }\n\n\n        for (int x = 0; x < n; ++x){\n            if (fabs(c[x] - (a[x] + b[x])) > PRECISION){\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "async",
                            "devonly",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_update_self.c": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0;\n    }\n\n    #pragma acc data create(c[0:n]) copyin(a[0:n], b[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                c[x] = a[x] + b[x];\n            }\n        }\n        acc_update_self(c, n * sizeof(real_t));\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:runtime,data,executable-data,construct-independent,V:2.0-2.7\nint test2(){\n    int err = 0;\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0;\n    }\n\n    #pragma acc data copyout(c[0:n]) copyin(a[0:n], b[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                a[x] = a[x] * a[x];\n            }\n        }\n        acc_update_self(a, n * sizeof(real_t));\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                b[x] = b[x] * b[x];\n            }\n        }\n        acc_update_self(b, n * sizeof(real_t));\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                c[x] = a[x] + b[x];\n            }\n        }\n    }\n\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_update_self_async.c": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,data,executable-data,async,construct-independent,V:2.5-2.7\nint test1(){\n    int err = 0;\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    real_t *d = (real_t *)malloc(n * sizeof(real_t));\n\n    int *devtest = (int *)malloc(sizeof(int));\n\n    devtest[0] = 1;\n    #pragma acc enter data copyin(devtest[0:1])\n    #pragma acc parallel\n    {\n        devtest[0] = 0;\n    }\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0;\n        d[x] = 0;\n    }\n\n\n\n    #pragma acc data create(c[0:n], d[0:n]) copyin(a[0:n], b[0:n])\n    {\n        #pragma acc parallel async(1)\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                c[x] = a[x] + b[x];\n            }\n        }\n        #pragma acc parallel async(2)\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                d[x] = a[x] * b[x];\n            }\n        }\n        acc_update_self_async(c, n * sizeof(real_t), 1);\n        acc_update_self_async(d, n * sizeof(real_t), 2);\n        #pragma acc wait\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION){\n            err += 1;\n        }\n        if (fabs(d[x] - (a[x] * b[x])) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "async",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:runtime,data,executable-data,devonly,async,construct-independent,V:2.5-2.7\nint test2(){\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    real_t *d = (real_t *)malloc(n * sizeof(real_t));\n\n    int *devtest = (int *)malloc(sizeof(int));\n    int err = 0;\n\n    devtest[0] = 1;\n    #pragma acc enter data copyin(devtest[0:1])\n    #pragma acc parallel\n    {\n        devtest[0] = 0;\n    }\n\n    if (devtest[0] == 1){\n        for (int x = 0; x < n; ++x){\n            a[x] = rand() / (real_t)(RAND_MAX / 10);\n            b[x] = rand() / (real_t)(RAND_MAX / 10);\n            c[x] = 0;\n        }\n\n        #pragma acc data copyout(c[0:n]) copyin(a[0:n], b[0:n])\n        {\n            #pragma acc parallel async(1)\n            {\n                #pragma acc loop\n                for (int x = 0; x < n; ++x){\n                    a[x] = a[x] * a[x];\n                }\n            }\n            acc_update_self_async(a, n * sizeof(real_t), 1);\n            #pragma acc parallel async(2)\n            {\n                #pragma acc loop\n                for (int x = 0; x < n; ++x){\n                    b[x] = b[x] * b[x];\n                }\n            }\n            acc_update_self_async(b, n * sizeof(real_t), 2);\n            #pragma acc parallel async(1)\n            {\n                #pragma acc loop\n                for (int x = 0; x < n; ++x){\n                    a[x] = a[x] + 1;\n                }\n            }\n            #pragma acc parallel async(2)\n            {\n                #pragma acc loop\n                for (int x = 0; x < n; ++x){\n                    b[x] = b[x] + 1;\n                }\n            }\n            #pragma acc parallel async(1) wait(2)\n            {\n                #pragma acc loop\n                for (int x = 0; x < n; ++x){\n                    c[x] = a[x] * b[x];\n                }\n            }\n            #pragma acc wait(1)\n        }\n\n\n        for (int x = 0; x < n; ++x){\n            if (fabs(c[x] - ((a[x] + 1) * (b[x] + 1))) > 4 * PRECISION){\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "devonly",
                            "async",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_wait.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,async,construct-independent,wait,V:2.0-2.7\nint test1(){\n    int err = 0;\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    real_t *d = (real_t *)malloc(n * sizeof(real_t));\n    real_t *e = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0;\n        d[x] = rand() / (real_t)(RAND_MAX / 10);\n        e[x] = 0;\n    }\n\n    #pragma acc enter data copyin(a[0:n], b[0:n]) create(c[0:n]) async(1)\n    #pragma acc enter data copyin(d[0:n]) create(e[0:n]) async(2)\n    #pragma acc parallel present(a[0:n], b[0:n], c[0:n]) async(1)\n    {\n        #pragma acc loop\n        for (int x = 0; x < n; ++x){\n            c[x] = a[x] + b[x];\n        }\n    }\n    #pragma acc parallel present(c[0:n], d[0:n], e[0:n]) async(1) wait(2)\n    {\n        #pragma acc loop\n        for (int x = 0; x < n; ++x){\n            e[x] = c[x] + d[x];\n        }\n    }\n    #pragma acc exit data copyout(e[0:n]) async(1)\n\n    acc_wait(1);\n    for (int x = 0; x < n; ++x){\n        if (fabs(e[x] - (a[x] + b[x] + d[x])) > PRECISION){\n            err += 1;\n        }\n    }\n\n    #pragma acc exit data delete(a[0:n], b[0:n], c[0:n], d[0:n])\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "async",
                            "construct-independent",
                            "wait"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_wait_all.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,async,construct-independent,wait,V:2.0-2.7\nint test1(){\n    int err = 0;\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    real_t *d = (real_t *)malloc(n * sizeof(real_t));\n    real_t *a_host = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b_host = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c_host = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = rand() / (real_t)(RAND_MAX / 10);\n        d[x] = 0;\n        a_host[x] = a[x];\n        b_host[x] = b[x];\n        c_host[x] = c[x];\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n], c[0:n]) copyout(d[0:n])\n    {\n        #pragma acc parallel async(1)\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                a[x] = a[x] * a[x];\n            }\n        }\n        #pragma acc parallel async(2)\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                b[x] = b[x] * b[x];\n            }\n        }\n        #pragma acc parallel async(3)\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                c[x] = c[x] * c[x];\n            }\n        }\n        acc_wait_all();\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                d[x] = a[x] + b[x] + c[x];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(d[x] - (a_host[x] * a_host[x] + b_host[x] * b_host[x] + c_host[x] * c_host[x])) > PRECISION) {\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "async",
                            "construct-independent",
                            "wait"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_wait_all_async.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,async,construct-independent,wait,V:2.0-2.7\nint test1(){\n    int err = 0;\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    real_t *d = (real_t *)malloc(n * sizeof(real_t));\n    real_t *e = (real_t *)malloc(n * sizeof(real_t));\n    real_t *f = (real_t *)malloc(n * sizeof(real_t));\n    real_t *g = (real_t *)malloc(n * sizeof(real_t));\n    real_t *h = (real_t *)malloc(n * sizeof(real_t));\n    real_t *i = (real_t *)malloc(n * sizeof(real_t));\n    real_t *j = (real_t *)malloc(n * sizeof(real_t));\n    real_t *k = (real_t *)malloc(n * sizeof(real_t));\n    real_t *a_host = (real_t *)malloc(n * sizeof(real_t));\n    real_t *d_host = (real_t *)malloc(n * sizeof(real_t));\n    real_t *g_host = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0;\n        d[x] = rand() / (real_t)(RAND_MAX / 10);\n        e[x] = rand() / (real_t)(RAND_MAX / 10);\n        f[x] = 0;\n        g[x] = rand() / (real_t)(RAND_MAX / 10);\n        h[x] = rand() / (real_t)(RAND_MAX / 10);\n        i[x] = 0;\n        j[x] = 0;\n        k[x] = 0;\n        a_host[x] = a[x];\n        d_host[x] = d[x];\n        g_host[x] = g[x];\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n], d[0:n], e[0:n], g[0:n], h[0:n]) create(c[0:n], f[0:n], i[0:n], j[0:n]) copyout(k[0:n])\n    {\n        #pragma acc parallel async(1)\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                c[x] = a[x] + b[x];\n            }\n        }\n        #pragma acc parallel async(2)\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                f[x] = d[x] + e[x];\n            }\n        }\n        #pragma acc parallel async(3)\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                i[x] = g[x] + h[x];\n            }\n        }\n        acc_wait_all_async(4);\n        #pragma acc parallel async(4)\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                j[x] = c[x] + f[x] + i[x];\n            }\n        }\n        #pragma acc parallel async(1)\n        {\n            for (int x = 0; x < n; ++x){\n                a[x] = b[x] * c[x];\n            }\n        }\n        #pragma acc parallel async(2)\n        {\n            for (int x = 0; x < n; ++x){\n                d[x] = e[x] * f[x];\n            }\n        }\n        #pragma acc parallel async(3)\n        {\n            for (int x = 0; x < n; ++x){\n                g[x] = h[x] * i[x];\n            }\n        }\n        acc_wait_all_async(4);\n        #pragma acc parallel async(4)\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                k[x] = j[x] + a[x] + d[x] + g[x];\n            }\n        }\n        #pragma acc wait(4)\n    }\n\n    real_t temp;\n    for (int x = 0; x < n; ++x){\n        temp = a_host[x] + b[x] + d_host[x] + e[x] + g_host[x] + h[x];\n        temp += b[x] * (a_host[x] + b[x]) + e[x] * (d_host[x] + e[x]) + h[x] * (g_host[x] + h[x]);\n        if (fabs(k[x] - temp) > PRECISION * 10){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "async",
                            "construct-independent",
                            "wait"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_wait_async.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:runtime,async,construct-independent,wait,V:2.0-2.7\nint test1(){\n    int err = 0;\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    real_t *d = (real_t *)malloc(n * sizeof(real_t));\n    real_t *e = (real_t *)malloc(n * sizeof(real_t));\n    real_t *f = (real_t *)malloc(n * sizeof(real_t));\n    real_t *g = (real_t *)malloc(n * sizeof(real_t));\n    real_t *h = (real_t *)malloc(n * sizeof(real_t));\n    real_t *i = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0;\n        d[x] = rand() / (real_t)(RAND_MAX / 10);\n        e[x] = rand() / (real_t)(RAND_MAX / 10);\n        f[x] = 0;\n        g[x] = rand() / (real_t)(RAND_MAX / 10);\n        h[x] = 0;\n        i[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n], d[0:n], e[0:n], g[0:n]) create(c[0:n], f[0:n], h[0:n]) copyout(i[0:n])\n    {\n        #pragma acc parallel async(1)\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                c[x] = a[x] + b[x];\n            }\n        }\n        acc_wait_async(1, 2);\n        #pragma acc parallel async(2)\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                h[x] = c[x] + g[x];\n            }\n        }\n        #pragma acc parallel async(1)\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                f[x] = d[x] + e[x];\n            }\n        }\n        acc_wait_async(1, 2);\n        #pragma acc parallel async(2)\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                i[x] = h[x] + f[x];\n            }\n        }\n        #pragma acc wait(2)\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(i[x] - (a[x] + b[x] + g[x] + d[x] + e[x])) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "runtime",
                            "async",
                            "construct-independent",
                            "wait"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_bitand_equals.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    int  *a = (int *)malloc(n * sizeof(int));\n    int *totals = (int *)malloc((n/10 + 1) * sizeof(int));\n    int *totals_comparison = (int *)malloc((n/10 + 1) * sizeof(int));\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 8; ++y){\n            if (rand()/(real_t)(RAND_MAX) < .933){ //.933 gets close to a 50/50 distribution for a collescence of 10 values\n                a[x] += 1<<y;\n            }\n        }\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        totals[x] = 0;\n        totals_comparison[x] = 0;\n        for (int y = 0; y < 8; ++y){\n            totals[x] +=  1<<y;\n            totals_comparison[x] += 1<<y;\n        }\n    }\n\n    #pragma acc data copyin(a[0:n]) copy(totals[0:n/10 + 1])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic\n                    totals[x%(n/10 + 1)] &= a[x];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x%(n/10 + 1)] &= a[x];\n    }\n    for (int x = 0; x < 10; ++x){\n        if (totals_comparison[x] != totals[x]) {\n            err += 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_bitor_equals.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    int  *a = (int *)malloc(n * sizeof(int));\n    int *totals = (int *)malloc((n/10 + 1) * sizeof(int));\n    int *totals_comparison = (int *)malloc((n/10 + 1) * sizeof(int));\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 8; ++y){\n            if (rand()/(real_t)(RAND_MAX) > .933){ //.933 gets close to a 50/50 distribution for a collescence of 10 values\n                a[x] += 1<<y;\n            }\n        }\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        totals[x] = 0;\n        totals_comparison[x] = 0;\n        for (int y = 0; y < 8; ++y){\n            totals[x] +=  1<<y;\n            totals_comparison[x] += 1<<y;\n        }\n    }\n\n    #pragma acc data copyin(a[0:n]) copy(totals[0:n/10 + 1])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic\n                    totals[x%(n/10 + 1)] |= a[x];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x%(n/10 + 1)] |= a[x];\n    }\n    for (int x = 0; x < 10; ++x){\n        if (totals_comparison[x] != totals[x]) {\n            err += 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_bitxor_equals.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    int  *a = (int *)malloc(n * sizeof(int));\n    int *totals = (int *)malloc((n/10 + 1) * sizeof(int));\n    int *totals_comparison = (int *)malloc((n/10 + 1) * sizeof(int));\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 8; ++y){\n            if (rand()/(real_t)(RAND_MAX) > .5){\n                a[x] += 1<<y;\n            }\n        }\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        totals[x] = 0;\n        totals_comparison[x] = 0;\n        for (int y = 0; y < 8; ++y){\n            totals[x] +=  1<<y;\n            totals_comparison[x] += 1<<y;\n        }\n    }\n\n    #pragma acc data copyin(a[0:n]) copy(totals[0:n/10 + 1])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic\n                    totals[x%(n/10 + 1)] ^= a[x];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x%(n/10 + 1)] ^= a[x];\n    }\n    for (int x = 0; x < 10; ++x){\n        if (totals_comparison[x] != totals[x]) {\n            err += 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_bitand_equals.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    int *a = (int *)malloc(n * sizeof(int));\n    int *b = (int *)malloc(n * sizeof(int));\n    int *totals = (int *)malloc((n/10 + 1) * sizeof(int));\n    int *totals_comparison = (int *)malloc((n/10 + 1) * sizeof(int));\n    int *temp_a = (int *)malloc(10 * sizeof(int));\n    int *temp_b = (int *)malloc(10 * sizeof(int));\n    int iterator;\n    int iterator2;\n    int init;\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 8; ++y){\n            if (rand()/(real_t)(RAND_MAX) < .933){ //.933 gets close to a 50/50 distribution for a collescence of 10 values\n                a[x] += 1<<y;\n            }\n        }\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n\t    totals[x] = 0;\n        totals_comparison[x] = 0;\n        for (int y = 0; y < 8; ++y){\n            totals[x] +=  1<<y;\n            totals_comparison[x] += 1<<y;\n        }\n    }\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 8; ++y){\n            b[x] += 1<<y;\n        }\n    }\n    #pragma acc data copyin(a[0:n]) copy(totals[0:n/10 + 1]) copyout(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic capture\n                    b[x] = totals[x%(n/10 + 1)] &= a[x];\n            }\n        }\n    }\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x%(n/10 + 1)] &= a[x];\n    }\n    for (int x = 0; x < (n/10 + 1); ++x){\n        if (totals_comparison[x] != totals[x]){\n            err += 1;\n            break;\n        }\n    }\n\n    for (int x = 0; x < 8; ++x){\n        init += 1<<x;\n    }\n    for (int x = 0; x < (n/10 + 1); ++x){\n        for (iterator = x, iterator2 = 0; iterator < n; iterator += n/10 + 1, iterator2++){\n            temp_a[iterator2] = a[iterator];\n            temp_b[iterator2] = b[iterator];\n        }\n        if (!is_possible(temp_a, temp_b, iterator2, init)){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_bitor_equals.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    int *a = (int *)malloc(n * sizeof(int));\n    int *b = (int *)malloc(n * sizeof(int));\n    int *totals = (int *)malloc((n/10 + 1) * sizeof(int));\n    int *totals_comparison = (int *)malloc((n/10 + 1) * sizeof(int));\n    int *temp_a = (int *)malloc(10 * sizeof(int));\n    int *temp_b = (int *)malloc(10 * sizeof(int));\n    int temp_indexer = 0;\n    int absolute_indexer = 0;\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 8; ++y){\n            if (rand()/(real_t)(RAND_MAX) > .933){ //.933 gets close to a 50/50 distribution for a collescence of 10 values\n                a[x] += 1<<y;\n            }\n        }\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        totals[x] = 0;\n        totals_comparison[x] = 0;\n    }\n    for (int x = 0; x < n; ++x){\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n]) copy(totals[0:n/10 + 1]) copyout(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic capture\n                    b[x] = totals[x%(n/10 + 1)] |= a[x];\n            }\n        }\n    }\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x%(n/10 + 1)] |= a[x];\n    }\n    for (int x = 0; x < 10; ++x){\n        if (totals_comparison[x] != totals[x]) {\n            err += 1;\n            break;\n        }\n    }\n\n    for (int x = 0; x < (n/10 + 1); ++x){\n        for (absolute_indexer = x, temp_indexer = 0; absolute_indexer < n; absolute_indexer += n/10 + 1, temp_indexer++){\n            temp_a[temp_indexer] = a[absolute_indexer];\n            temp_b[temp_indexer] = b[absolute_indexer];\n        }\n        if (!(is_possible(temp_a, temp_b, temp_indexer, 0))){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_bitxor_equals.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    int *a = (int *)malloc(n * sizeof(int));\n    int *b = (int *)malloc(n * sizeof(int));\n    int *totals = (int *)malloc((n/10 + 1) * sizeof(int));\n    int *totals_comparison = (int *)malloc((n/10 + 1) * sizeof(int));\n    int * temp_a = (int *)malloc(10 * sizeof(int));\n    int * temp_b = (int *)malloc(10 * sizeof(int));\n    int temp_iterator;\n    int ab_iterator;\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 8; ++y){\n            if (rand()/(real_t)(RAND_MAX) > .5){\n                a[x] += 1<<y;\n            }\n        }\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        totals[x] = 0;\n        totals_comparison[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n]) copy(totals[0:n/10 + 1]) copyout(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic capture\n                    b[x] = totals[x%(n/10 + 1)] ^= a[x];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x%(n/10 + 1)] ^= a[x];\n    }\n    for (int x = 0; x < 10; ++x){\n        if (totals_comparison[x] != totals[x]) {\n            err += 1;\n            break;\n        }\n    }\n\n    for (int x = 0; x < n/10 + 1; ++x){\n        for (temp_iterator = 0, ab_iterator = x; ab_iterator < n; temp_iterator++, ab_iterator += n/10 + 1){\n            temp_a[temp_iterator] = a[ab_iterator];\n            temp_b[temp_iterator] = b[ab_iterator];\n        }\n        if (!(is_possible(temp_a, temp_b, temp_iterator, 0))){\n            err++;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_divided_equals.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    real_t *totals = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n    real_t *totals_comparison = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n    real_t *temp_a = (real_t *)malloc(10 * sizeof(real_t));\n    real_t *temp_b = (real_t *)malloc(10 * sizeof(real_t));\n    real_t *temp_c = (real_t *)malloc(10 * sizeof(real_t));\n    int temp_iterator;\n    int ab_iterator;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0;\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        totals[x] = 1;\n        totals_comparison[x] = 1;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(totals[0:n/10 + 1]) copyout(c[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic capture\n                    c[x] = totals[x%(n/10 + 1)] /= (a[x] + b[x]);\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x%(n/10 + 1)] /= a[x] + b[x];\n    }\n    for (int x = 0; x < 10; ++x){\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            err += 1;\n            break;\n        }\n    }\n\n    for (int x = 0; x < (n/10 + 1); ++x){\n        temp_iterator = 0;\n        for (ab_iterator = x; ab_iterator < n;  ab_iterator+=((n/10) + 1)){\n            temp_a[temp_iterator] = a[ab_iterator];\n            temp_b[temp_iterator] = b[ab_iterator];\n            temp_c[temp_iterator] = c[ab_iterator];\n            temp_iterator++;\n        }\n        if (!(is_possible(temp_a, temp_b, temp_c, temp_iterator, 1))){\n            err++;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_expr_bitand_x.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    int *a = (int *)malloc(n * sizeof(int));\n    int *b = (int *)malloc(n * sizeof(int));\n    int *totals = (int *)malloc((n/10 + 1) * sizeof(int));\n    int *totals_comparison = (int *)malloc((n/10 + 1) * sizeof(int));\n    int *passed_a = (int *)malloc(10 * sizeof(int));\n    int *passed_b = (int *)malloc(10 * sizeof(int));\n    int passed_total = 0;\n    int absolute_indexer;\n    int passed_indexer;\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 8; ++y){\n            if (rand()/(real_t)(RAND_MAX) < .933){ //.933 gets close to a 50/50 distribution for a collescence of 10 values\n                a[x] += 1<<y;\n            }\n        }\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        totals[x] = 0;\n        totals_comparison[x] = 0;\n\t    for (int y = 0; y < 8; ++y){\n            totals[x] +=  1<<y;\n            totals_comparison[x] += 1<<y;\n        }\n    }\n\n    #pragma acc data copyin(a[0:n]) copy(totals[0:n/10 + 1]) copyout(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic capture\n                     b[x] = totals[x%(n/10 + 1)] = a[x] & totals[x%(n/10 + 1)];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x%(n/10 + 1)] &= a[x];\n    }\n\n    for (int x = 0; x < 10; ++x){\n        if (totals_comparison[x] != totals[x]) {\n            err += 1;\n            break;\n        }\n    }\n\n    for (int x = 0; x < 8; ++x){\n        passed_total += 1<<x;\n    }\n    for (int x = 0; x < (n/10 + 1); ++x){\n        for (absolute_indexer = x, passed_indexer = 0; absolute_indexer < n; absolute_indexer += (n/10 + 1), passed_indexer++){\n            passed_a[passed_indexer] = a[absolute_indexer];\n            passed_b[passed_indexer] = b[absolute_indexer];\n        }\n        if (!is_possible(passed_a, passed_b, passed_indexer, passed_total)){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_expr_bitor_x.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    int *a = (int *)malloc(n * sizeof(int));\n    int *b = (int *)malloc(n * sizeof(int));\n    int *totals = (int *)malloc((n/10 + 1) * sizeof(int));\n    int *totals_comparison = (int *)malloc((n/10 + 1) * sizeof(int));\n    int *passed_a = (int *)malloc(10 * sizeof(int));\n    int *passed_b = (int *)malloc(10 * sizeof(int));\n    int passed_indexer;\n    int absolute_indexer;\n\n    for (int x = 0; x < n; ++x){\n\ta[x] = 0;\n        for (int y = 0; y < 8; ++y){\n            if (rand()/(real_t)(RAND_MAX) > .933){ //.933 gets close to a 50/50 distribution for a collescence of 10 values\n                a[x] += 1<<y;\n            }\n        }\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        totals[x] = 0;\n\t    totals_comparison[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n]) copy(totals[0:n/10 + 1], b[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic capture\n                    b[x] = totals[x%(n/10 + 1)] = totals[x%(n/10 + 1)] | a[x];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x%(n/10 + 1)] |= a[x];\n    }\n    for (int x = 0; x < 10; ++x){\n        if (totals_comparison[x] != totals[x]) {\n            err += 1;\n            break;\n        }\n    }\n    for (int x = 0; x < (n/10 + 1); ++x){\n        for (passed_indexer = 0, absolute_indexer = x; absolute_indexer < n; passed_indexer++, absolute_indexer += n/10 + 1){\n            passed_a[passed_indexer] = a[absolute_indexer];\n            passed_b[passed_indexer] = b[absolute_indexer];\n        }\n        if (!is_possible(passed_a, passed_b, passed_indexer, 0)){\n            err++;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_expr_bitxor_x.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    int *a = (int *)malloc(n * sizeof(int));\n    int *b = (int *)malloc(n * sizeof(int));\n    int *totals = (int *)malloc((n/10 + 1) * sizeof(int));\n    int *totals_comparison = (int *)malloc((n/10 + 1) * sizeof(int));\n    int *passed_a = (int *)malloc(10 * sizeof(int));\n    int *passed_b = (int *)malloc(10 * sizeof(int));\n    int passed_indexer;\n    int absolute_indexer;\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 8; ++y){\n            if (rand()/(real_t)(RAND_MAX) > .5){\n                a[x] += 1<<y;\n            }\n        }\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        totals[x] = 0;\n        totals_comparison[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n]) copy(totals[0:n/10 + 1]) copyout(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic capture\n                    b[x] = totals[x%(n/10 + 1)] = a[x] ^ totals[x%(n/10 + 1)];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x%(n/10 + 1)] ^= a[x];\n    }\n    for (int x = 0; x < 10; ++x){\n        if (totals_comparison[x] != totals[x]) {\n            err += 1;\n            break;\n        }\n    }\n\n    for (int x = 0; x < n/10 + 1; ++x){\n        for (passed_indexer = 0, absolute_indexer = x; absolute_indexer < n; passed_indexer++, absolute_indexer += n/10 + 1){\n            passed_a[passed_indexer] = a[absolute_indexer];\n            passed_b[passed_indexer] = b[absolute_indexer];\n        }\n        if (!(is_possible(passed_a, passed_b, passed_indexer, 0))){\n            err++;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_expr_divided_x.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    real_t *totals = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n    real_t *passed_ab = (real_t *)malloc(10 * sizeof(real_t));\n    real_t *passed_c = (real_t *)malloc(10 * sizeof(real_t));\n    int passed_indexer;\n    int absolute_indexer;\n    real_t * passed = (real_t *)malloc(10 * sizeof(real_t));\n    int indexer;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        totals[x] = 1;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(totals[0:n/10 + 1]) copyout(c[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic capture\n                    c[x] = totals[x%(n/10 + 1)] = (a[x] + b[x]) / totals[x%(n/10 + 1)];\n            }\n        }\n    }\n\n\n    for (int x = 0; x < (n/10 + 1); ++x){\n        indexer = x;\n        while (indexer < n){\n            passed[indexer/(n/10 + 1)] = (a[x] + b[x]);\n            indexer += (n/10 + 1);\n        }\n        if (!(possible_result(passed, 10, 1, totals[x]))){\n            err += 1;\n        }\n    }\n\n    for (int x = 0; x < (n/10 + 1); ++x){\n        for (passed_indexer = 0, absolute_indexer = x; absolute_indexer < n; passed_indexer++, absolute_indexer += n/10 + 1){\n            passed_ab[passed_indexer] = a[absolute_indexer] + b[absolute_indexer];\n            passed_c[passed_indexer] = c[absolute_indexer];\n        }\n        if (!is_possible(passed_ab, passed_c, passed_indexer, 1)){\n            err++;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_expr_lshift_x.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    unsigned int *a = (unsigned int *)malloc(3 * n * sizeof(int));\n    unsigned int *b = (unsigned int *)malloc(n * sizeof(int));\n    unsigned int *c = (unsigned int *)malloc(3 * n * sizeof(int));\n    int orders[18] = {1, 2, 0, 1, 0, 2, 2, 1, 0, 2, 0, 1, 0, 1, 2, 0, 2, 1};\n    int result;\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 3; ++y){\n            a[x * 3 + y] = (int) (rand() / (unsigned int) (RAND_MAX / 4));\n        }\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:3 * n]) copy(b[0:n]) copyout(c[0:3*n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc loop\n                for (int y = 0; y < 3; ++y){\n                    #pragma acc atomic capture\n                        c[x * 3 + y] = b[x] = a[x * 3 + y] << b[x];\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 6; ++y){\n            result = 0;\n            for (int z = 0; z < 3; ++z){\n                result = a[x * 3 + orders[y * 3 + z]] << result;\n            }\n            if (result == b[x]){\n                break;\n            }\n        }\n        if (result != b[x]){\n            err += 1;\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (!(is_possible(&(a[x*3]), &(c[x*3]), 3, 0))){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_expr_minus_x.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *totals = (real_t *)malloc(((n/10) + 1) * sizeof(real_t));\n    int indexer = 0;\n    real_t * passed = (real_t *)malloc(10 * sizeof(real_t));\n    real_t *passed_a = (real_t *)malloc(10 * sizeof(real_t));\n    real_t *passed_b = (real_t *)malloc(10 * sizeof(real_t));\n    int passed_indexer;\n    int absolute_indexer;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    for (int x = 0; x < (n/10) + 1; ++x){\n        totals[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n]) copy(totals[0:(n/10) + 1]) copyout(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic capture\n                    b[x] = totals[x%((int) (n/10) + 1)] = a[x] - totals[x%((int) (n/10) + 1)];\n            }\n        }\n    }\n    for (int x = 0; x < (n/10) + 1; ++x){\n        indexer = x;\n        while (indexer < n){\n            passed[indexer/((int) (n/10) + 1)] = a[indexer];\n            indexer += (n/10) + 1;\n        }\n        if (!(possible_result(passed, 10, 0, totals[x]))){\n            err += 1;\n        }\n    }\n\n    for (int x = 0; x < n/10 + 1; ++x){\n        for (passed_indexer = 0, absolute_indexer = x; absolute_indexer < n; passed_indexer++, absolute_indexer += n/10 + 1){\n            passed_a[passed_indexer] = a[absolute_indexer];\n            passed_b[passed_indexer] = b[absolute_indexer];\n        }\n        if (!is_possible(passed_a, passed_b, passed_indexer, 0)){\n            err += 1;\n        }\n        break;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_expr_multiply_x.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    real_t *totals = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n    real_t *totals_comparison = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n    real_t *passed_ab = (real_t *)malloc(10 * sizeof(real_t));\n    real_t *passed_c = (real_t *)malloc(10 * sizeof(real_t));\n    int passed_indexer;\n    int absolute_indexer;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        totals[x] = 1;\n        totals_comparison[x] = 1;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(totals[0:n/10 + 1]) copyout(c[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic capture\n                    c[x] = totals[x%(n/10 + 1)] = (a[x] + b[x]) * totals[x%(n/10 + 1)];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x%(n/10 + 1)] *= a[x] + b[x];\n    }\n    for (int x = 0; x < 10; ++x){\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION * totals_comparison[x]){\n            err += 1;\n            break;\n        }\n    }\n\n    for (int x = 0; x < n/10 + 1; ++x){\n        for (passed_indexer = 0, absolute_indexer = x; absolute_indexer < n; passed_indexer++, absolute_indexer += n/10 + 1){\n            passed_ab[passed_indexer] = a[absolute_indexer] + b[absolute_indexer];\n            passed_c[passed_indexer] = c[absolute_indexer];\n        }\n        if (!is_possible(passed_ab, passed_c, passed_indexer, 1)){\n            err++;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_expr_plus_x.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    real_t *totals = (real_t *)malloc((int)(n/10 + 1) * sizeof(real_t));\n    real_t *totals_comparison = (real_t *)malloc((int)(n/10 + 1) * sizeof(real_t));\n    real_t *passed_ab = (real_t *)malloc(10 * sizeof(real_t));\n    real_t *passed_c = (real_t *)malloc(10 * sizeof(real_t));\n    int passed_indexer;\n    int absolute_indexer;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        totals[x] = 0;\n        totals_comparison[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(totals[0:10]) copyout(c[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic capture\n                    c[x] = totals[x%((int)(n/10 + 1))] = (a[x] + b[x]) + totals[x%((int)(n/10 + 1))];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x%((int)(n/10 + 1))] += (a[x] + b[x]);\n    }\n    for (int x = 0; x < 10; ++x){\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            err += 1;\n            break;\n        }\n    }\n\n    for (int x = 0; x < n/10 + 1; ++x){\n        for (passed_indexer = 0, absolute_indexer = x; absolute_indexer < n; passed_indexer++, absolute_indexer += n/10 + 1){\n            passed_ab[passed_indexer] = a[absolute_indexer] + b[absolute_indexer];\n            passed_c[passed_indexer] = c[absolute_indexer];\n        }\n        if (!is_possible(passed_ab, passed_c, passed_indexer, 0)){\n            err++;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_expr_rshift_x.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    unsigned int *a = (unsigned int *)malloc(3 * n * sizeof(int));\n    unsigned int *b = (unsigned int *)malloc(n * sizeof(int));\n    unsigned int *c = (unsigned int *)malloc(3 * n * sizeof(int));\n    int orders[18] = {1, 2, 0, 1, 0, 2, 2, 1, 0, 2, 0, 1, 0, 1, 2, 0, 2, 1};\n    int result;\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 3; ++y){\n            a[x * 3 + y] = (int) (rand() / (unsigned int) (RAND_MAX / 4));\n        }\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:3 * n]) copy(b[0:n]) copyout(c[0:3*n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc loop independent\n                for (int y = 0; y < 3; ++y){\n                    #pragma acc atomic capture\n                        c[x * 3 + y] = b[x] = a[x * 3 + y] >> b[x];\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 6; ++y){\n            result = 0;\n            for (int z = 0; z < 3; ++z){\n                result = a[x * 3 + orders[y * 3 + z]] >> result;\n            }\n            if (result == b[x]){\n                break;\n            }\n        }\n        if (result != b[x]){\n            err += 1;\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (!is_possible(&(a[3*x]), &(c[3*x]), 3, 0)){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_lshift_equals.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    unsigned int *a = (unsigned int *)malloc(n * sizeof(int));\n    unsigned int *b = (unsigned int *)malloc(n * sizeof(int));\n    unsigned int *c = (unsigned int *)malloc(7 * n * sizeof(int));\n    unsigned int passed = 1;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = 1;\n        for (int y = 0; y < 7; ++y){\n            if ((rand()/(real_t) (RAND_MAX)) > .5){\n                b[x] += 1<<y;\n            }\n        }\n    }\n\n    #pragma acc data copyin(b[0:n]) copy(a[0:n]) copyout(c[0:7*n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc loop\n                for (int y = 0; y < 7; ++y){\n                    c[x * 7 + y] = a[x];\n                    if ((b[x]>>y)%2 == 1){\n                        #pragma acc atomic capture\n                            c[x * 7 + y] = a[x] <<= 1;\n                    }\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 7; ++y){\n            if ((b[x]>>y)%2 == 1){\n                a[x] >>= 1;\n            }\n        }\n        if (a[x] != 1){\n            err += 1;\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (!is_possible(b[x], &(c[x * 7]), 7, passed)){\n            err++;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_minus_equals.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    real_t *totals = (real_t *)malloc(10 * sizeof(real_t));\n    real_t *totals_host = (real_t *)malloc(10 * sizeof(real_t));\n    real_t * passed_ab = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n    real_t * passed_c = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n    int passed_indexer;\n    int absolute_indexer;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    for (int x = 0; x < 10; ++x){\n        totals[x] = 0;\n\ttotals_host[x] = 0;\n\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(totals[0:10], c[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic capture\n                    c[x] = totals[x%10] -= (a[x] + b[x]);\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_host[x%10] = totals_host[x%10] - (a[x] + b[x]);\n    }\n    for (int x = 0; x < 10; ++x){\n        if (fabs(totals_host[x] - totals[x]) > PRECISION){\n            err += 1;\n        }\n    }\n\n    for (int x = 0; x < 10; ++x){\n        for (passed_indexer = 0, absolute_indexer = x; absolute_indexer < n; passed_indexer++, absolute_indexer+= 10){\n            passed_ab[passed_indexer] = a[absolute_indexer] + b[absolute_indexer];\n            passed_c[passed_indexer] = c[absolute_indexer];\n        }\n        if (!is_possible(passed_ab, passed_c, passed_indexer, 0)){\n            err++;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_multiply_equals.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    real_t *totals = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n    real_t *totals_comparison = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n    real_t * passed_ab = (real_t *)malloc(10 * sizeof(real_t));\n    real_t * passed_c = (real_t *)malloc(10 * sizeof(real_t));\n    int passed_indexer;\n    int absolute_indexer;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        totals[x] = 1;\n        totals_comparison[x] = 1;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(totals[0:n/10 + 1]) copyout(c[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic capture\n                    c[x] = totals[x%(n/10 + 1)] *= a[x] + b[x];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x%(n/10 + 1)] *= a[x] + b[x];\n    }\n    for (int x = 0; x < 10; ++x){\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION * totals_comparison[x]){\n            err += 1;\n            break;\n        }\n    }\n\n    for (int x = 0; x < n/10 + 1; ++x){\n        for (passed_indexer = 0, absolute_indexer = x; absolute_indexer < n; passed_indexer++, absolute_indexer += n/10 + 1){\n            passed_ab[passed_indexer] = a[absolute_indexer] + b[absolute_indexer];\n            passed_c[passed_indexer] = c[absolute_indexer];\n        }\n        if (!is_possible(passed_ab, passed_c, passed_indexer, 1)){\n            err++;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_plus_equals.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    real_t *totals = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n    real_t *totals_comparison = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n    real_t *passed_ab = (real_t *)malloc(10 * sizeof(real_t));\n    real_t *passed_c = (real_t *)malloc(10 * sizeof(real_t));\n    int passed_indexer;\n    int absolute_indexer;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        totals[x] = 0;\n        totals_comparison[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(totals[0:n/10 + 1]) copyout(c[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic capture\n                    c[x] = totals[x%(n/10 + 1)] += a[x] * b[x];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x%(n/10 + 1)] += a[x] * b[x];\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            err += 1;\n            break;\n        }\n    }\n\n    for (int x = 0; x < n/10 + 1; ++x){\n        for (passed_indexer = 0, absolute_indexer = x; absolute_indexer < n; passed_indexer++, absolute_indexer+= (n/10 + 1)){\n            passed_ab[passed_indexer] = a[absolute_indexer] * b[absolute_indexer];\n            passed_c[passed_indexer] = c[absolute_indexer];\n        }\n        if (!is_possible(passed_ab, passed_c, passed_indexer, 0)){\n            err++;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_postdecrement.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    int *c = (int *)malloc(n * sizeof(int));\n    int *distribution = (int *)malloc(10 * sizeof(int));\n    int *distribution_comparison = (int *)malloc(10 * sizeof(int));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    for (int x = 0; x < 10; ++x){\n        distribution[x] = 0;\n        distribution_comparison[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(distribution[0:10]) copyout(c[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic capture\n                    c[x] = (distribution[(int) (a[x]*b[x]/10)])--;\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        distribution_comparison[(int) (a[x]*b[x]/10)]--;\n    }\n    for (int x = 0; x < 10; ++x){\n        if (distribution_comparison[x] != distribution[x]){\n            err += 1;\n            break;\n        }\n    }\n\n    bool found = false;\n    for (int x = 0; x < 10; ++x){\n        for (int y = 0; y > -distribution_comparison[x]; --y){\n            for (int z = 0; z < n; ++z){\n                if (y == c[z] && x == (int) (a[x] * b[x] / 10)){\n                    found = true;\n                    break;\n                }\n            }\n            if (!found){\n                err++;\n            }\n            found = false;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_postincrement.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    int *c = (int *)malloc(n * sizeof(int));\n    int *distribution = (int *)malloc(10 * sizeof(int));\n    int *distribution_comparison = (int *)malloc(10 * sizeof(int));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    for (int x = 0; x < 10; ++x){\n        distribution[x] = 0;\n        distribution_comparison[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(distribution[0:10]) copyout(c[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic capture\n                    c[x] = distribution[(int) (a[x]*b[x]/10)]++;\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        distribution_comparison[(int) (a[x]*b[x]/10)]++;\n    }\n    for (int x = 0; x < 10; ++x){\n        if (distribution_comparison[x] != distribution[x]){\n            err += 1;\n            break;\n        }\n    }\n\n    bool found = false;\n    for (int x = 0; x < 10; ++x){\n        for (int y = 0; y < distribution_comparison[x]; ++y){\n            for (int z = 0; z < n; ++z){\n                if (c[z] == y && (int) (a[z]*b[z]/10) == x){\n                    found = true;\n                    break;\n                }\n            }\n            if (!found){\n                err++;\n            }\n            found = false;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_predecrement.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    int *c = (int *)malloc(n * sizeof(int));\n    int *distribution = (int *)malloc(10 * sizeof(int));\n    int *distribution_comparison = (int *)malloc(10 * sizeof(int));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    for (int x = 0; x < 10; ++x){\n        distribution[x] = 0;\n        distribution_comparison[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(distribution[0:10]) copyout(c[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic capture\n                    c[x] = --distribution[(int) (a[x]*b[x]/10)];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        distribution_comparison[(int) (a[x]*b[x]/10)]--;\n    }\n    for (int x = 0; x < 10; ++x){\n        if (distribution_comparison[x] != distribution[x]){\n            err += 1;\n            break;\n        }\n    }\n\n    bool found = false;\n    for (int x = 0; x < 10; ++x){\n        for (int y = 0; y > distribution[x]; --y){\n            for (int z = 0; z < n; ++z){\n                if (c[z] == y - 1 && x == (int) (a[z] * b[z] / 10)){\n                    found = true;\n                    break;\n                }\n            }\n            if (!found){\n                err++;\n            }\n            found = false;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_preincrement.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    int *c = (int *)malloc(n * sizeof(int));\n    int *distribution = (int *)malloc(10 * sizeof(int));\n    int *distribution_comparison = (int *)malloc(10 * sizeof(int));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    for (int x = 0; x < 10; ++x){\n        distribution[x] = 0;\n        distribution_comparison[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(distribution[0:10]) copyout(c[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic capture\n                    c[x] = ++distribution[(int) (a[x]*b[x]/10)];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        distribution_comparison[(int) (a[x]*b[x]/10)]++;\n    }\n    for (int x = 0; x < 10; ++x){\n        if (distribution_comparison[x] != distribution[x]){\n            err += 1;\n            break;\n        }\n    }\n\n    bool found = false;\n    for (int x = 0; x < 10; ++x){\n        for (int y = 0; y < distribution[x]; ++y){\n            for (int z = 0; z < n; ++z){\n                if (c[z] == y + 1 && x == (int) (a[z] * b[z] / 10)){\n                    found = true;\n                    break;\n                }\n            }\n            if (!found){\n                err++;\n            }\n            found = false;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_rshift_equals.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    unsigned int *a = (unsigned int *)malloc(n * sizeof(int));\n    unsigned int *b = (unsigned int *)malloc(n * sizeof(int));\n    unsigned int *c = (unsigned int *)malloc(7 * n * sizeof(int));\n    unsigned int passed = 1<<8;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = 1<<8;\n        for (int y = 0; y < 7; ++y){\n            if ((rand()/(real_t) (RAND_MAX)) > .5){\n                b[x] += 1<<y;\n            }\n        }\n    }\n\n    #pragma acc data copyin(b[0:n]) copy(a[0:n]) copyout(c[0:7*n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc loop\n                for (int y = 0; y < 7; ++y){\n                    c[x * 7 + y] = a[x];\n                    if ((b[x]>>y)%2 == 1){\n                        #pragma acc atomic capture\n                            c[x * 7 + y] = a[x] >>= 1;\n                    }\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 7; ++y){\n            if ((b[x]>>y)%2 == 1){\n                a[x] <<= 1;\n            }\n        }\n        if (a[x] != 1<<8){\n            err += 1;\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (!is_possible(b[x], &(c[x * 7]), 7, passed)){\n            err++;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_divided_equals.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *totals = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n    real_t *totals_comparison = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        totals[x] = 1;\n        totals_comparison[x] = 1;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(totals[0:n/10 + 1])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic\n                    totals[x%(n/10 + 1)] /= (a[x] + b[x]);\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x%(n/10 + 1)] /= a[x] + b[x];\n    }\n    for (int x = 0; x < 10; ++x){\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            err += 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_expr_bitand_x.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    int  *a = (int *)malloc(n * sizeof(int));\n    int *totals = (int *)malloc((n/10 + 1) * sizeof(int));\n    int *totals_comparison = (int *)malloc((n/10 + 1) * sizeof(int));\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 8; ++y){\n            if (rand()/(real_t)(RAND_MAX) < .933){ //.933 gets close to a 50/50 distribution for a collescence of 10 values\n                a[x] += 1<<y;\n            }\n        }\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        totals[x] = 0;\n        totals_comparison[x] = 0;\n        for (int y = 0; y < 8; ++y){\n            totals[x] +=  1<<y;\n            totals_comparison[x] += 1<<y;\n        }\n    }\n\n    #pragma acc data copyin(a[0:n]) copy(totals[0:n/10 + 1])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic\n                    totals[x%(n/10 + 1)] = a[x] & totals[x%(n/10 + 1)];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x%(n/10 + 1)] &= a[x];\n    }\n    for (int x = 0; x < 10; ++x){\n        if (totals_comparison[x] != totals[x]) {\n            err += 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_expr_bitor_x.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    int  *a = (int *)malloc(n * sizeof(int));\n    int *totals = (int *)malloc((n/10 + 1) * sizeof(int));\n    int *totals_comparison = (int *)malloc((n/10 + 1) * sizeof(int));\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 8; ++y){\n            if (rand()/(real_t)(RAND_MAX) > .933){ //.933 gets close to a 50/50 distribution for a collescence of 10 values\n                a[x] += 1<<y;\n            }\n        }\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        totals[x] = 0;\n        totals_comparison[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n]) copy(totals[0:n/10 + 1])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic\n                    totals[x%(n/10 + 1)] = totals[x%(n/10 + 1)] | a[x];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x%(n/10 + 1)] |= a[x];\n    }\n    for (int x = 0; x < 10; ++x){\n        if (totals_comparison[x] != totals[x]) {\n            err += 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_expr_bitxor_x.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    int  *a = (int *)malloc(n * sizeof(int));\n    int *totals = (int *)malloc((n/10 + 1) * sizeof(int));\n    int *totals_comparison = (int *)malloc((n/10 + 1) * sizeof(int));\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 8; ++y){\n            if (rand()/(real_t)(RAND_MAX) > .5){\n                a[x] += 1<<y;\n            }\n        }\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        totals[x] = 0;\n        totals_comparison[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n]) copy(totals[0:n/10 + 1])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic\n                    totals[x%(n/10 + 1)] = a[x] ^ totals[x%(n/10 + 1)];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x%(n/10 + 1)] ^= a[x];\n    }\n    for (int x = 0; x < 10; ++x){\n        if (totals_comparison[x] != totals[x]) {\n            err += 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_expr_divided_x.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *totals = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n    real_t * passed = (real_t *)malloc(10 * sizeof(real_t));\n    int indexer;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        totals[x] = 1;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(totals[0:n/10 + 1])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic\n                    totals[x%(n/10 + 1)] = (a[x] + b[x]) / totals[x%(n/10 + 1)];\n            }\n        }\n    }\n\n\n    for (int x = 0; x < (n/10 + 1); ++x){\n        indexer = x;\n        while (indexer < n){\n            passed[indexer/(n/10 + 1)] = (a[x] + b[x]);\n            indexer += (n/10 + 1);\n        }\n        if (!(possible_result(passed, 10, 1, totals[x]))){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_expr_lshift_x.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    unsigned int *a = (unsigned int *)malloc(3 * n * sizeof(int));\n    unsigned int *b = (unsigned int *)malloc(n * sizeof(int));\n    int orders[18] = {1, 2, 0, 1, 0, 2, 2, 1, 0, 2, 0, 1, 0, 1, 2, 0, 2, 1};\n    int result;\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 3; ++y){\n            a[x * 3 + y] = (int) (rand() / (unsigned int) (RAND_MAX / 4));\n        }\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:3 * n]) copy(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc loop\n                for (int y = 0; y < 3; ++y){\n                    #pragma acc atomic\n                        b[x] = a[x * 3 + y] << b[x];\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 6; ++y){\n            result = 0;\n            for (int z = 0; z < 3; ++z){\n                result = a[x * 3 + orders[y * 3 + z]] << result;\n            }\n            if (result == b[x]){\n                break;\n            }\n        }\n        if (result != b[x]){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_expr_minus_x.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *totals = (real_t *)malloc(((n/10) + 1) * sizeof(real_t));\n    int indexer = 0;\n    real_t * passed = (real_t *)malloc(10 * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    for (int x = 0; x < (n/10) + 1; ++x){\n        totals[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n]) copy(totals[0:(n/10) + 1])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic\n                    totals[x%((int) (n/10) + 1)] = a[x] - totals[x%((int) (n/10) + 1)];\n            }\n        }\n    }\n    for (int x = 0; x < (n/10) + 1; ++x){\n        indexer = x;\n        while (indexer < n){\n            passed[indexer/((int) (n/10) + 1)] = a[indexer];\n            indexer += (n/10) + 1;\n        }\n        if (!(possible_result(passed, 10, 0, totals[x]))){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_expr_multiply_x.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *totals = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n    real_t *totals_comparison = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        totals[x] = 1;\n        totals_comparison[x] = 1;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(totals[0:n/10 + 1])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic\n                    totals[x%(n/10 + 1)] = (a[x] + b[x]) * totals[x%(n/10 + 1)];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x%(n/10 + 1)] *= a[x] + b[x];\n    }\n    for (int x = 0; x < 10; ++x){\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION * totals_comparison[x]){\n            err += 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_expr_plus_x.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *totals = (real_t *)malloc(10 * sizeof(real_t));\n    real_t *totals_comparison = (real_t *)malloc(10 * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    for (int x = 0; x < 10; ++x){\n        totals[x] = 0;\n        totals_comparison[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(totals[0:10])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc loop\n                for (int y = 0; y < n; ++y){\n                    #pragma acc atomic\n                        totals[(int) ((a[x] + b[x])/2)] = a[x] * b[x] + totals[(int) ((a[x] + b[x])/2)];\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < n; ++y){\n            totals_comparison[(int) ((a[x] + b[x])/2)] += a[x] * b[x];\n        }\n    }\n    for (int x = 0; x < 10; ++x){\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            err += 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_expr_rshift_x.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    unsigned int *a = (unsigned int *)malloc(3 * n * sizeof(int));\n    unsigned int *b = (unsigned int *)malloc(n * sizeof(int));\n    int orders[18] = {1, 2, 0, 1, 0, 2, 2, 1, 0, 2, 0, 1, 0, 1, 2, 0, 2, 1};\n    int result;\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 3; ++y){\n            a[x * 3 + y] = (int) (rand() / (unsigned int) (RAND_MAX / 4));\n        }\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:3 * n]) copy(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc loop independent\n                for (int y = 0; y < 3; ++y){\n                    #pragma acc atomic\n                        b[x] = a[x * 3 + y] >> b[x];\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 6; ++y){\n            result = 0;\n            for (int z = 0; z < 3; ++z){\n                result = a[x * 3 + orders[y * 3 + z]] >> result;\n            }\n            if (result == b[x]){\n                break;\n            }\n        }\n        if (result != b[x]){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_lshift_equals.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    unsigned int *a = (unsigned int *)malloc(n * sizeof(int));\n    unsigned int *b = (unsigned int *)malloc(n * sizeof(int));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = 1;\n        for (int y = 0; y < 7; ++y){\n            if ((rand()/(unsigned int) (RAND_MAX)) > .5){\n                b[x] += 1<<y;\n            }\n        }\n    }\n\n    #pragma acc data copyin(b[0:n]) copy(a[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc loop\n                for (int y = 0; y < 7; ++y){\n                    if ((b[x]>>y)%2 == 1){\n                        #pragma acc atomic\n                            a[x] <<= 1;\n                    }\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 7; ++y){\n            if ((b[x]>>y)%2 == 1){\n                a[x] >>= 1;\n            }\n        }\n        if (a[x] != 1){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_minus_equals.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *totals = (real_t *)malloc(10 * sizeof(real_t));\n    real_t *totals_host = (real_t *)malloc(10 * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    for (int x = 0; x < 10; ++x){\n        totals[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(totals[0:10])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic\n                    totals[x%10] -= (a[x] + b[x]);\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_host[x%10] = totals_host[x%10] - (a[x] + b[x]);\n    }\n    for (int x = 0; x < 10; ++x){\n        if (fabs(totals_host[x] - totals[x]) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_multiply_equals.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *totals = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n    real_t *totals_comparison = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        totals[x] = 1;\n        totals_comparison[x] = 1;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(totals[0:n/10 + 1])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic\n                    totals[x%(n/10 + 1)] *= a[x] + b[x];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x%(n/10 + 1)] *= a[x] + b[x];\n    }\n    for (int x = 0; x < 10; ++x){\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION * totals_comparison[x]){\n            err += 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_plus_equals.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *totals = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n    real_t *totals_comparison = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        totals[x] = 0;\n        totals_comparison[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(totals[0:n/10 + 1])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic\n                    totals[x%(n/10 + 1)] += a[x] * b[x];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x%(n/10 + 1)] += a[x] * b[x];\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        if (fabs(totals_comparison[x] - totals[x]) > (n/10 + 1) * PRECISION){\n            err += 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_postdecrement.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    int *distribution = (int *)malloc(10 * sizeof(int));\n    int *distribution_comparison = (int *)malloc(10 * sizeof(int));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    for (int x = 0; x < 10; ++x){\n        distribution[x] = 0;\n        distribution_comparison[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(distribution[0:10])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic\n                    distribution[(int) (a[x] * b[x] / 10)]--;\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        distribution_comparison[(int) (a[x]*b[x]/10)]--;\n    }\n    for (int x = 0; x < 10; ++x){\n        if (distribution_comparison[x] != distribution[x]){\n            err += 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_postincrement.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    int *distribution = (int *)malloc(10 * sizeof(int));\n    int *distribution_comparison = (int *)malloc(10 * sizeof(int));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    for (int x = 0; x < 10; ++x){\n        distribution[x] = 0;\n        distribution_comparison[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(distribution[0:10])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc loop\n                for (int y = 0; y < n; ++y){\n                    #pragma acc atomic\n                        distribution[(int) (a[x]*b[y]/10)]++;\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < n; ++y){\n            distribution_comparison[(int) (a[x]*b[y]/10)]++;\n        }\n    }\n    for (int x = 0; x < 10; ++x){\n        if (distribution_comparison[x] != distribution[x]){\n            err += 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_predecrement.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    int *distribution = (int *)malloc(10 * sizeof(int));\n    int *distribution_comparison = (int *)malloc(10 * sizeof(int));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    for (int x = 0; x < 10; ++x){\n        distribution[x] = 0;\n        distribution_comparison[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(distribution[0:10])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc loop\n                for (int y = 0; y < n; ++y){\n                    #pragma acc atomic\n                        --distribution[(int) (a[x]*b[y]/10)];\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < n; ++y){\n            distribution_comparison[(int) (a[x]*b[y]/10)]--;\n        }\n    }\n    for (int x = 0; x < 10; ++x){\n        if (distribution_comparison[x] != distribution[x]){\n            err += 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_preincrement.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    int *distribution = (int *)malloc(10 * sizeof(int));\n    int *distribution_comparison = (int *)malloc(10 * sizeof(int));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    for (int x = 0; x < 10; ++x){\n        distribution[x] = 0;\n        distribution_comparison[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(distribution[0:10])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc loop\n                for (int y = 0; y < n; ++y){\n                    #pragma acc atomic\n                        ++distribution[(int) (a[x]*b[y]/10)];\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < n; ++y){\n            distribution_comparison[(int) (a[x]*b[y]/10)]++;\n        }\n    }\n    for (int x = 0; x < 10; ++x){\n        if (distribution_comparison[x] != distribution[x]){\n            err += 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_rshift_equals.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    unsigned int *a = (unsigned int *)malloc(n * sizeof(int));\n    unsigned int *b = (unsigned int *)malloc(n * sizeof(int));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = 1<<7;\n        for (int y = 0; y < 7; ++y){\n            if ((rand()/(unsigned int) (RAND_MAX)) > .5){\n                b[x] += 1<<y;\n            }\n        }\n    }\n\n    #pragma acc data copyin(b[0:n]) copy(a[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc loop\n                for (int y = 0; y < 7; ++y){\n                    if ((b[x]>>y)%2 == 1){\n                        #pragma acc atomic\n                            a[x] >>= 1;\n                    }\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 7; ++y){\n            if ((b[x]>>y)%2 == 1){\n                a[x] <<= 1;\n            }\n        }\n        if (a[x] != 1<<7){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_structured_assign_assign.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b_copy = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        b_copy[x] = b[x];\n    }\n\n    #pragma acc data copyin(a[0:n]) copy(b[0:n]) copyout(c[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic capture\n                {\n                    c[x] = b[x];\n                    b[x] = a[x];\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - b_copy[x]) > PRECISION){\n            err++;\n        }\n        if (fabs(b[x] - a[x]) > PRECISION){\n            err++;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_structured_assign_bitand_equals.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    int *a = (int *)malloc(n * sizeof(int));\n    int *b = (int *)malloc(n * sizeof(int));\n    int *totals = (int *)malloc((n/10 + 1) * sizeof(int));\n    int *totals_comparison = (int *)malloc((n/10 + 1) * sizeof(int));\n    int *temp_a = (int *)malloc(10 * sizeof(int));\n    int *temp_b = (int *)malloc(10 * sizeof(int));\n    int temp_iterator;\n    int ab_iterator;\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 8; ++y){\n            if (rand()/(real_t)(RAND_MAX) < .933){ //.933 gets close to a 50/50 distribution for a collescence of 10 values\n                a[x] += 1<<y;\n            }\n        }\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        for (int y = 0; y < 8; ++y){\n            totals[x] =  1<<y;\n            totals_comparison[x] = 1<<y;\n        }\n    }\n    for (int x = 0; x < n; ++x){\n        b[x] = 0;\n    }\n    #pragma acc data copyin(a[0:n]) copy(totals[0:n/10 + 1]) copyout(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic capture\n                    {\n                        b[x] = totals[x/10];\n                        totals[x/10] &= a[x];\n                    }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x/10] &= a[x];\n    }\n    for (int x = 0; x < (n/10 + 1); ++x){\n        if (totals_comparison[x] != totals[x]){\n            err += 1;\n            break;\n        }\n    }\n\n    for (int x = 0; x < n; x = x + 10){\n        temp_iterator = 0;\n        for (ab_iterator = x; ab_iterator < n && ab_iterator < x + 10; ab_iterator+= 1){\n            temp_a[temp_iterator] = a[ab_iterator];\n            temp_b[temp_iterator] = b[ab_iterator];\n        }\n        if (!is_possible(temp_a, temp_b, temp_iterator, 1)){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_structured_assign_bitor_equals.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    int *a = (int *)malloc(n * sizeof(int));\n    int *b = (int *)malloc(n * sizeof(int));\n    int *totals = (int *)malloc((n/10 + 1) * sizeof(int));\n    int *totals_comparison = (int *)malloc((n/10 + 1) * sizeof(int));\n    int *temp_a = (int *)malloc(10 * sizeof(int));\n    int *temp_b = (int *)malloc(10 * sizeof(int));\n    int temp_iterator;\n    int ab_iterator;\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 8; ++y){\n            if (rand()/(real_t)(RAND_MAX) < .933){ //.933 gets close to a 50/50 distribution for a collescence of 10 values\n                a[x] += 1<<y;\n            }\n        }\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        for (int y = 0; y < 8; ++y){\n            totals[x] =  1<<y;\n            totals_comparison[x] = 1<<y;\n        }\n    }\n    for (int x = 0; x < n; ++x){\n        b[x] = 0;\n    }\n    #pragma acc data copyin(a[0:n]) copy(totals[0:n/10 + 1]) copyout(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic capture\n                    {\n                        b[x] = totals[x/10];\n                        totals[x/10] |= a[x];\n                    }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x/10] |= a[x];\n    }\n    for (int x = 0; x < (n/10 + 1); ++x){\n        if (totals_comparison[x] != totals[x]){\n            err += 1;\n            break;\n        }\n    }\n    for (int x = 0; x < n; x = x + 10){\n        temp_iterator = 0;\n        for (ab_iterator = x; ab_iterator < n && ab_iterator < x + 10; ab_iterator+= 1){\n            temp_a[temp_iterator] = a[ab_iterator];\n            temp_b[temp_iterator] = b[ab_iterator];\n        }\n        if (!is_possible(temp_a, temp_b, temp_iterator, 1)){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_structured_assign_bitxor_equals.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    int *a = (int *)malloc(n * sizeof(int));\n    int *b = (int *)malloc(n * sizeof(int));\n    int *totals = (int *)malloc((n/10 + 1) * sizeof(int));\n    int *totals_comparison = (int *)malloc((n/10 + 1) * sizeof(int));\n    int *temp_a = (int *)malloc(10 * sizeof(int));\n    int *temp_b = (int *)malloc(10 * sizeof(int));\n    int temp_iterator;\n    int ab_iterator;\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 8; ++y){\n            if (rand()/(real_t)(RAND_MAX) < .933){ //.933 gets close to a 50/50 distribution for a collescence of 10 values\n                a[x] += 1<<y;\n            }\n        }\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        for (int y = 0; y < 8; ++y){\n            totals[x] =  1<<y;\n            totals_comparison[x] = 1<<y;\n        }\n    }\n    for (int x = 0; x < n; ++x){\n        b[x] = 0;\n    }\n    #pragma acc data copyin(a[0:n]) copy(totals[0:n/10 + 1]) copyout(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic capture\n                    {\n                        b[x] = totals[x/10];\n                        totals[x/10] ^= a[x];\n                    }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x/10] ^= a[x];\n    }\n    for (int x = 0; x < (n/10 + 1); ++x){\n        if (totals_comparison[x] != totals[x]){\n            err += 1;\n            break;\n        }\n    }\n    for (int x = 0; x < n; x = x + 10){\n        temp_iterator = 0;\n        for (ab_iterator = x; ab_iterator < n && ab_iterator < x + 10; ab_iterator+= 1){\n            temp_a[temp_iterator] = a[ab_iterator];\n            temp_b[temp_iterator] = b[ab_iterator];\n        }\n        if (!is_possible(temp_a, temp_b, temp_iterator, 1)){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_structured_assign_divided_equals.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    real_t *totals = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n    real_t *totals_comparison = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n    real_t *temp_a = (real_t *)malloc(10 * sizeof(real_t));\n    real_t *temp_b = (real_t *)malloc(10 * sizeof(real_t));\n    real_t *temp_c = (real_t *)malloc(10 * sizeof(real_t));\n    int temp_iterator;\n    int ab_iterator;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0;\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        totals[x] = 1;\n        totals_comparison[x] = 1;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(totals[0:n/10 + 1]) copyout(c[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic capture\n                {\n                    c[x] = totals[x/10];\n                    totals[x/10] /= (a[x] + b[x]);\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x/10] /= a[x] + b[x];\n    }\n    for (int x = 0; x < 10; ++x){\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            err += 1;\n            break;\n        }\n    }\n\n    for (int x = 0; x < n; x = x + 10){\n        temp_iterator = 0;\n        for (ab_iterator = x; ab_iterator < n && ab_iterator < x + 10;  ab_iterator+= 1){\n            temp_a[temp_iterator] = a[ab_iterator];\n            temp_b[temp_iterator] = b[ab_iterator];\n            temp_c[temp_iterator] = c[ab_iterator];\n            temp_iterator++;\n        }\n        if (!(is_possible(temp_a, temp_b, temp_c, temp_iterator, 1))){\n            err++;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_structured_assign_expr_bitand_x.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    int *a = (int *)malloc(n * sizeof(int));\n    int *b = (int *)malloc(n * sizeof(int));\n    int *totals = (int *)malloc((n/10 + 1) * sizeof(int));\n    int *totals_comparison = (int *)malloc((n/10 + 1) * sizeof(int));\n    int *temp_a = (int *)malloc(10 * sizeof(int));\n    int *temp_b = (int *)malloc(10 * sizeof(int));\n    int temp_iterator;\n    int ab_iterator;\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 8; ++y){\n            if (rand()/(real_t)(RAND_MAX) < .933){ //.933 gets close to a 50/50 distribution for a collescence of 10 values\n                a[x] += 1<<y;\n            }\n        }\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        for (int y = 0; y < 8; ++y){\n            totals[x] =  1<<y;\n            totals_comparison[x] = 1<<y;\n        }\n    }\n    for (int x = 0; x < n; ++x){\n        b[x] = 0;\n    }\n    #pragma acc data copyin(a[0:n]) copy(totals[0:n/10 + 1]) copyout(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic capture\n                    {\n                        b[x] = totals[x/10];\n                        totals[x/10] = a[x] & totals[x/10];\n                    }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x/10] &= a[x];\n    }\n    for (int x = 0; x < (n/10 + 1); ++x){\n        if (totals_comparison[x] != totals[x]){\n            err += 1;\n            break;\n        }\n    }\n\n    for (int x = 0; x < n; x = x + 10){\n        temp_iterator = 0;\n        for (ab_iterator = x; ab_iterator < n && ab_iterator < x + 10; ab_iterator+= 1){\n            temp_a[temp_iterator] = a[ab_iterator];\n            temp_b[temp_iterator] = b[ab_iterator];\n        }\n        if (!is_possible(temp_a, temp_b, temp_iterator, 1)){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_structured_assign_expr_bitor_x.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    int *a = (int *)malloc(n * sizeof(int));\n    int *b = (int *)malloc(n * sizeof(int));\n    int *totals = (int *)malloc((n/10 + 1) * sizeof(int));\n    int *totals_comparison = (int *)malloc((n/10 + 1) * sizeof(int));\n    int *temp_a = (int *)malloc(10 * sizeof(int));\n    int *temp_b = (int *)malloc(10 * sizeof(int));\n    int temp_iterator;\n    int ab_iterator;\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 8; ++y){\n            if (rand()/(real_t)(RAND_MAX) < .933){ //.933 gets close to a 50/50 distribution for a collescence of 10 values\n                a[x] += 1<<y;\n            }\n        }\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        for (int y = 0; y < 8; ++y){\n            totals[x] =  1<<y;\n            totals_comparison[x] = 1<<y;\n        }\n    }\n    for (int x = 0; x < n; ++x){\n        b[x] = 0;\n    }\n    #pragma acc data copyin(a[0:n]) copy(totals[0:n/10 + 1]) copyout(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic capture\n                    {\n                        b[x] = totals[x/10];\n                        totals[x/10] = a[x] | totals[x/10];\n                    }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x/10] |= a[x];\n    }\n    for (int x = 0; x < (n/10 + 1); ++x){\n        if (totals_comparison[x] != totals[x]){\n            err += 1;\n            break;\n        }\n    }\n    for (int x = 0; x < n; x = x + 10){\n        temp_iterator = 0;\n        for (ab_iterator = x; ab_iterator < n && ab_iterator < x + 10; ab_iterator+= 1){\n            temp_a[temp_iterator] = a[ab_iterator];\n            temp_b[temp_iterator] = b[ab_iterator];\n        }\n        if (!is_possible(temp_a, temp_b, temp_iterator, 1)){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_structured_assign_expr_bitxor_x.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    int *a = (int *)malloc(n * sizeof(int));\n    int *b = (int *)malloc(n * sizeof(int));\n    int *totals = (int *)malloc((n/10 + 1) * sizeof(int));\n    int *totals_comparison = (int *)malloc((n/10 + 1) * sizeof(int));\n    int *temp_a = (int *)malloc(10 * sizeof(int));\n    int *temp_b = (int *)malloc(10 * sizeof(int));\n    int temp_iterator;\n    int ab_iterator;\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 8; ++y){\n            if (rand()/(real_t)(RAND_MAX) < .933){ //.933 gets close to a 50/50 distribution for a collescence of 10 values\n                a[x] += 1<<y;\n            }\n        }\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        for (int y = 0; y < 8; ++y){\n            totals[x] =  1<<y;\n            totals_comparison[x] = 1<<y;\n        }\n    }\n    for (int x = 0; x < n; ++x){\n        b[x] = 0;\n    }\n    #pragma acc data copyin(a[0:n]) copy(totals[0:n/10 + 1]) copyout(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic capture\n                    {\n                        b[x] = totals[x/10];\n                        totals[x/10] = a[x] ^ totals[x/10];\n                    }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x/10] ^= a[x];\n    }\n    for (int x = 0; x < (n/10 + 1); ++x){\n        if (totals_comparison[x] != totals[x]){\n            err += 1;\n            break;\n        }\n    }\n    for (int x = 0; x < n; x = x + 10){\n        temp_iterator = 0;\n        for (ab_iterator = x; ab_iterator < n && ab_iterator < x + 10; ab_iterator+= 1){\n            temp_a[temp_iterator] = a[ab_iterator];\n            temp_b[temp_iterator] = b[ab_iterator];\n        }\n        if (!is_possible(temp_a, temp_b, temp_iterator, 1)){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_structured_assign_expr_divided_x.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    real_t *totals = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n    real_t* passed_a = (real_t *)malloc(10 * sizeof(real_t));\n    real_t* passed_b = (real_t *)malloc(10 * sizeof(real_t));\n    real_t *temp_a = (real_t *)malloc(10 * sizeof(real_t));\n    real_t *temp_b = (real_t *)malloc(10 * sizeof(real_t));\n    real_t *temp_c = (real_t *)malloc(10 * sizeof(real_t));\n    int temp_iterator;\n    int ab_iterator;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0;\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        totals[x] = 1;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(totals[0:n/10 + 1]) copyout(c[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic capture\n                {\n                    c[x] = totals[x/10];\n                    totals[x/10] = (a[x] + b[x]) / totals[x/10];\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; x = x + 10){\n        for (int y = 0; y < 10 && (x + y) < n; ++y){\n            passed_a[y] = a[x + y];\n            passed_b[y] = b[x + y];\n        }\n        if (!(is_possible_2(passed_a, passed_b, 10, 1, totals[x/10]))){\n            err += 1;\n            break;\n        }\n    }\n\n    for (int x = 0; x < n; x = x + 10){\n        temp_iterator = 0;\n        for (ab_iterator = x; ab_iterator < n && ab_iterator < x + 10;  ab_iterator+= 1){\n            temp_a[temp_iterator] = a[ab_iterator];\n            temp_b[temp_iterator] = b[ab_iterator];\n            temp_c[temp_iterator] = c[ab_iterator];\n            temp_iterator++;\n        }\n        if (!(is_possible(temp_a, temp_b, temp_c, temp_iterator, 1))){\n            err++;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_structured_assign_expr_multiply_x.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    real_t *totals = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n    real_t *totals_comparison = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n    real_t * passed_ab = (real_t *)malloc(10 * sizeof(real_t));\n    real_t * passed_c = (real_t *)malloc(10 * sizeof(real_t));\n    int passed_indexer;\n    int absolute_indexer;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        totals[x] = 1;\n        totals_comparison[x] = 1;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(totals[0:n/10 + 1]) copyout(c[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic capture\n                {\n                    c[x] = totals[x%(n/10 + 1)];\n                    totals[x%(n/10 + 1)] = (a[x] + b[x]) * totals[x%(n/10 + 1)];\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x%(n/10 + 1)] *= a[x] + b[x];\n    }\n    for (int x = 0; x < 10; ++x){\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION * totals_comparison[x]){\n            err += 1;\n            break;\n        }\n    }\n\n    for (int x = 0; x < n/10 + 1; ++x){\n        for (passed_indexer = 0, absolute_indexer = x; absolute_indexer < n; passed_indexer++, absolute_indexer += n/10 + 1){\n            passed_ab[passed_indexer] = a[absolute_indexer] + b[absolute_indexer];\n            passed_c[passed_indexer] = c[absolute_indexer];\n        }\n        if (!is_possible(passed_ab, passed_c, passed_indexer, 1)){\n            err++;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_structured_assign_expr_plus_x.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    real_t *totals = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n    real_t *totals_comparison = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n    real_t *passed_ab = (real_t *)malloc(10 * sizeof(real_t));\n    real_t *passed_c = (real_t *)malloc(10 * sizeof(real_t));\n    int passed_indexer;\n    int absolute_indexer;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        totals[x] = 0;\n        totals_comparison[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(totals[0:n/10 + 1]) copyout(c[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic capture\n                {\n                    c[x] = totals[x%(n/10 + 1)];\n                    totals[x%(n/10 + 1)] = (a[x] * b[x]) + totals[x%(n/10 + 1)];\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x%(n/10 + 1)] += a[x] * b[x];\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            err += 1;\n            break;\n        }\n    }\n\n    for (int x = 0; x < n/10 + 1; ++x){\n        for (passed_indexer = 0, absolute_indexer = x; absolute_indexer < n; passed_indexer++, absolute_indexer+= (n/10 + 1)){\n            passed_ab[passed_indexer] = a[absolute_indexer] * b[absolute_indexer];\n            passed_c[passed_indexer] = c[absolute_indexer];\n        }\n        if (!is_possible(passed_ab, passed_c, passed_indexer, 0)){\n            err++;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_structured_assign_lshift_equals.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    unsigned int *a = (unsigned int *)malloc(n * sizeof(int));\n    unsigned int *b = (unsigned int *)malloc(n * sizeof(int));\n    unsigned int *c = (unsigned int *)malloc(7 * n * sizeof(int));\n    unsigned int passed = 1;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = 1;\n        for (int y = 0; y < 7; ++y){\n            if ((rand()/(real_t) (RAND_MAX)) > .5){\n                b[x] += 1<<y;\n            }\n        }\n    }\n\n    #pragma acc data copyin(b[0:n]) copy(a[0:n]) copyout(c[0:7*n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc loop\n                for (int y = 0; y < 7; ++y){\n                    c[x * 7 + y] = a[x];\n                    if ((b[x]>>y)%2 == 1){\n                        #pragma acc atomic capture\n                        {\n                            c[x * 7 + y] = a[x];\n                            a[x] <<= 1;\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 7; ++y){\n            if ((b[x]>>y)%2 == 1){\n                a[x] >>= 1;\n            }\n        }\n        if (a[x] != 1){\n            err += 1;\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (!is_possible(b[x], &(c[x * 7]), 7, passed)){\n            err++;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_structured_assign_minus_equals.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    real_t *totals = (real_t *)malloc(10 * sizeof(real_t));\n    real_t *totals_host = (real_t *)malloc(10 * sizeof(real_t));\n    real_t * passed_ab = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n    real_t * passed_c = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n    int passed_indexer;\n    int absolute_indexer;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    for (int x = 0; x < 10; ++x){\n        totals[x] = 0;\n\ttotals_host[x] =0;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(totals[0:10], c[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic capture\n                {\n                    c[x] = totals[x%10];\n                    totals[x%10] -= (a[x] + b[x]);\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_host[x%10] = totals_host[x%10] - (a[x] + b[x]);\n    }\n    for (int x = 0; x < 10; ++x){\n        if (fabs(totals_host[x] - totals[x]) > PRECISION){\n            err += 1;\n        }\n    }\n\n    for (int x = 0; x < 10; ++x){\n        for (passed_indexer = 0, absolute_indexer = x; absolute_indexer < n; passed_indexer++, absolute_indexer+= 10){\n            passed_ab[passed_indexer] = a[absolute_indexer] + b[absolute_indexer];\n            passed_c[passed_indexer] = c[absolute_indexer];\n        }\n        if (!is_possible(passed_ab, passed_c, passed_indexer, 0)){\n            err++;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_structured_assign_multiply_equals.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    real_t *totals = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n    real_t *totals_comparison = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n    real_t * passed_ab = (real_t *)malloc(10 * sizeof(real_t));\n    real_t * passed_c = (real_t *)malloc(10 * sizeof(real_t));\n    int passed_indexer;\n    int absolute_indexer;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        totals[x] = 1;\n        totals_comparison[x] = 1;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(totals[0:n/10 + 1]) copyout(c[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic capture\n                {\n                    c[x] = totals[x%(n/10 + 1)];\n                    totals[x%(n/10 + 1)] *= a[x] + b[x];\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x%(n/10 + 1)] *= a[x] + b[x];\n    }\n    for (int x = 0; x < 10; ++x){\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION * totals_comparison[x]){\n            err += 1;\n            break;\n        }\n    }\n\n    for (int x = 0; x < n/10 + 1; ++x){\n        for (passed_indexer = 0, absolute_indexer = x; absolute_indexer < n; passed_indexer++, absolute_indexer += n/10 + 1){\n            passed_ab[passed_indexer] = a[absolute_indexer] + b[absolute_indexer];\n            passed_c[passed_indexer] = c[absolute_indexer];\n        }\n        if (!is_possible(passed_ab, passed_c, passed_indexer, 1)){\n            err++;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_structured_assign_plus_equals.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    real_t *totals = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n    real_t *totals_comparison = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n    real_t *passed_ab = (real_t *)malloc(10 * sizeof(real_t));\n    real_t *passed_c = (real_t *)malloc(10 * sizeof(real_t));\n    int passed_indexer;\n    int absolute_indexer;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        totals[x] = 0;\n        totals_comparison[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(totals[0:n/10 + 1]) copyout(c[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic capture\n                {\n                    c[x] = totals[x%(n/10 + 1)];\n                    totals[x%(n/10 + 1)] += a[x] * b[x];\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x%(n/10 + 1)] += a[x] * b[x];\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            err += 1;\n            break;\n        }\n    }\n\n    for (int x = 0; x < n/10 + 1; ++x){\n        for (passed_indexer = 0, absolute_indexer = x; absolute_indexer < n; passed_indexer++, absolute_indexer+= (n/10 + 1)){\n            passed_ab[passed_indexer] = a[absolute_indexer] * b[absolute_indexer];\n            passed_c[passed_indexer] = c[absolute_indexer];\n        }\n        if (!is_possible(passed_ab, passed_c, passed_indexer, 0)){\n            err++;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_structured_assign_postdecrement.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    int *c = (int *)malloc(n * sizeof(int));\n    int *distribution = (int *)malloc(10 * sizeof(int));\n    int *distribution_comparison = (int *)malloc(10 * sizeof(int));\n    bool found = false;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    for (int x = 0; x < 10; ++x){\n        distribution[x] = 0;\n        distribution_comparison[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(distribution[0:10]) copyout(c[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic capture\n                {\n                    c[x] = distribution[(int) (a[x]*b[x]/10)];\n                    (distribution[(int) (a[x]*b[x]/10)])--;\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        distribution_comparison[(int) (a[x]*b[x]/10)]--;\n    }\n    for (int x = 0; x < 10; ++x){\n        if (distribution_comparison[x] != distribution[x]){\n            err += 1;\n            break;\n        }\n    }\n\n    for (int x = 0; x < 10; ++x){\n        for (int y = 0; y > -distribution_comparison[x]; --y){\n            for (int z = 0; z < n; ++z){\n                if (y == c[z] && x == (int) (a[x] * b[x] / 10)){\n                    found = true;\n                    break;\n                }\n            }\n            if (!found){\n                err++;\n            }\n            found = false;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_structured_assign_postincrement.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    int *c = (int *)malloc(n * sizeof(int));\n    int *distribution = (int *)malloc(10 * sizeof(int));\n    int *distribution_comparison = (int *)malloc(10 * sizeof(int));\n    bool found = false;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    for (int x = 0; x < 10; ++x){\n        distribution[x] = 0;\n        distribution_comparison[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(distribution[0:10]) copyout(c[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic capture\n                {\n                    c[x] = distribution[(int) (a[x]*b[x]/10)];\n                    distribution[(int) (a[x]*b[x]/10)]++;\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        distribution_comparison[(int) (a[x]*b[x]/10)]++;\n    }\n    for (int x = 0; x < 10; ++x){\n        if (distribution_comparison[x] != distribution[x]){\n            err += 1;\n            break;\n        }\n    }\n\n    for (int x = 0; x < 10; ++x){\n        for (int y = 0; y < distribution_comparison[x]; ++y){\n            for (int z = 0; z < n; ++z){\n                if (c[z] == y && (int) (a[z]*b[z]/10) == x){\n                    found = true;\n                    break;\n                }\n            }\n            if (!found){\n                err++;\n            }\n            found = false;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_structured_assign_predecrement.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    int *c = (int *)malloc(n * sizeof(int));\n    int *distribution = (int *)malloc(10 * sizeof(int));\n    int *distribution_comparison = (int *)malloc(10 * sizeof(int));\n    bool found = false;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    for (int x = 0; x < 10; ++x){\n        distribution[x] = 0;\n        distribution_comparison[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(distribution[0:10]) copyout(c[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic capture\n                {\n                    c[x] = distribution[(int) (a[x]*b[x]/10)];\n                    --distribution[(int) (a[x]*b[x]/10)];\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        distribution_comparison[(int) (a[x]*b[x]/10)]--;\n    }\n    for (int x = 0; x < 10; ++x){\n        if (distribution_comparison[x] != distribution[x]){\n            err += 1;\n            break;\n        }\n    }\n\n    for (int x = 0; x < 10; ++x){\n        for (int y = 0; y > distribution[x]; --y){\n            for (int z = 0; z < n; ++z){\n                if (c[z] == y && x == (int) (a[z] * b[z] / 10)){\n                    found = true;\n                    break;\n                }\n            }\n            if (!found){\n                err++;\n            }\n            found = false;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_structured_assign_preincrement.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    int *c = (int *)malloc(n * sizeof(int));\n    int *distribution = (int *)malloc(10 * sizeof(int));\n    int *distribution_comparison = (int *)malloc(10 * sizeof(int));\n    bool found = false;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    for (int x = 0; x < 10; ++x){\n        distribution[x] = 0;\n        distribution_comparison[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(distribution[0:10]) copyout(c[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic capture\n                {\n                    c[x] = distribution[(int) (a[x]*b[x]/10)];\n                    ++distribution[(int) (a[x]*b[x]/10)];\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        distribution_comparison[(int) (a[x]*b[x]/10)]++;\n    }\n    for (int x = 0; x < 10; ++x){\n        if (distribution_comparison[x] != distribution[x]){\n            err += 1;\n            break;\n        }\n    }\n\n    for (int x = 0; x < 10; ++x){\n        for (int y = 0; y < distribution[x]; ++y){\n            for (int z = 0; z < n; ++z){\n                if (c[z] == y && x == (int) (a[z] * b[z] / 10)){\n                    found = true;\n                    break;\n                }\n            }\n            if (!found){\n                err++;\n            }\n            found = false;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_structured_assign_rshift_equals.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    unsigned int *a = (unsigned int *)malloc(n * sizeof(int));\n    unsigned int *b = (unsigned int *)malloc(n * sizeof(int));\n    unsigned int *c = (unsigned int *)malloc(7 * n * sizeof(int));\n    unsigned int passed = 1<<8;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = 1<<8;\n        for (int y = 0; y < 7; ++y){\n            if ((rand()/(real_t) (RAND_MAX)) > .5){\n                b[x] += 1<<y;\n            }\n        }\n    }\n\n    #pragma acc data copyin(b[0:n]) copy(a[0:n]) copyout(c[0:7*n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc loop\n                for (int y = 0; y < 7; ++y){\n                    c[x * 7 + y] = a[x];\n                    if ((b[x]>>y)%2 == 1){\n                        #pragma acc atomic capture\n                        {\n                            c[x * 7 + y] = a[x];\n                            a[x] >>= 1;\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 7; ++y){\n            if ((b[x]>>y)%2 == 1){\n                a[x] <<= 1;\n            }\n        }\n        if (a[x] != 1<<8){\n            err += 1;\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (!is_possible(b[x], &(c[x * 7]), 7, passed)){\n            err++;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_structured_assign_x_bitand_expr.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    int *a = (int *)malloc(n * sizeof(int));\n    int *b = (int *)malloc(n * sizeof(int));\n    int *totals = (int *)malloc((n/10 + 1) * sizeof(int));\n    int *totals_comparison = (int *)malloc((n/10 + 1) * sizeof(int));\n    int *temp_a = (int *)malloc(10 * sizeof(int));\n    int *temp_b = (int *)malloc(10 * sizeof(int));\n    int temp_iterator;\n    int ab_iterator;\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 8; ++y){\n            if (rand()/(real_t)(RAND_MAX) < .933){ //.933 gets close to a 50/50 distribution for a collescence of 10 values\n                a[x] += 1<<y;\n            }\n        }\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        totals[x] = 0;\n        totals_comparison[x] = 0;\n        for (int y = 0; y < 8; ++y){\n            totals[x] +=  1<<y;\n            totals_comparison[x] += 1<<y;\n        }\n    }\n    for (int x = 0; x < n; ++x){\n        b[x] = 0;\n    }\n    #pragma acc data copyin(a[0:n]) copy(totals[0:n/10 + 1]) copyout(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic capture\n                    {\n                        b[x] = totals[x/10];\n                        totals[x/10] = totals[x/10] & a[x];\n                    }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x/10] &= a[x];\n    }\n    for (int x = 0; x < (n/10 + 1); ++x){\n        if (totals_comparison[x] != totals[x]){\n            err += 1;\n            break;\n        }\n    }\n    for (int x = 0; x < n; x = x + 10){\n        temp_iterator = 0;\n        for (ab_iterator = x; ab_iterator < n && ab_iterator < x + 10; ab_iterator+= 1){\n            temp_a[temp_iterator] = a[ab_iterator];\n            temp_b[temp_iterator] = b[ab_iterator];\n        }\n        if (!is_possible(temp_a, temp_b, temp_iterator, 1)){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_structured_assign_x_bitor_expr.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    int *a = (int *)malloc(n * sizeof(int));\n    int *b = (int *)malloc(n * sizeof(int));\n    int *totals = (int *)malloc((n/10 + 1) * sizeof(int));\n    int *totals_comparison = (int *)malloc((n/10 + 1) * sizeof(int));\n    int *temp_a = (int *)malloc(10 * sizeof(int));\n    int *temp_b = (int *)malloc(10 * sizeof(int));\n    int temp_iterator;\n    int ab_iterator;\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 8; ++y){\n            if (rand()/(real_t)(RAND_MAX) < .933){ //.933 gets close to a 50/50 distribution for a collescence of 10 values\n                a[x] += 1<<y;\n            }\n        }\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        totals[x] = 0;\n        totals_comparison[x] = 0;\n        for (int y = 0; y < 8; ++y){\n            totals[x] +=  1<<y;\n            totals_comparison[x] += 1<<y;\n        }\n    }\n    for (int x = 0; x < n; ++x){\n        b[x] = 0;\n    }\n    #pragma acc data copyin(a[0:n]) copy(totals[0:n/10 + 1]) copyout(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic capture\n                    {\n                        b[x] = totals[x/10];\n                        totals[x/10] = totals[x/10] | a[x];\n                    }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x/10] |= a[x];\n    }\n    for (int x = 0; x < (n/10 + 1); ++x){\n        if (totals_comparison[x] != totals[x]){\n            err += 1;\n            break;\n        }\n    }\n    for (int x = 0; x < n; x = x + 10){\n        temp_iterator = 0;\n        for (ab_iterator = x; ab_iterator < n && ab_iterator < x + 10; ab_iterator+= 1){\n            temp_a[temp_iterator] = a[ab_iterator];\n            temp_b[temp_iterator] = b[ab_iterator];\n        }\n        if (!is_possible(temp_a, temp_b, temp_iterator, 1)){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_structured_assign_x_bitxor_expr.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    int *a = (int *)malloc(n * sizeof(int));\n    int *b = (int *)malloc(n * sizeof(int));\n    int *totals = (int *)malloc((n/10 + 1) * sizeof(int));\n    int *totals_comparison = (int *)malloc((n/10 + 1) * sizeof(int));\n    int *temp_a = (int *)malloc(10 * sizeof(int));\n    int *temp_b = (int *)malloc(10 * sizeof(int));\n    int temp_iterator;\n    int ab_iterator;\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 8; ++y){\n            if (rand()/(real_t)(RAND_MAX) < .933){ //.933 gets close to a 50/50 distribution for a collescence of 10 values\n                a[x] += 1<<y;\n            }\n        }\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        totals[x] = 0;\n        totals_comparison[x] = 0;\n        for (int y = 0; y < 8; ++y){\n            totals[x] +=  1<<y;\n            totals_comparison[x] += 1<<y;\n        }\n    }\n    for (int x = 0; x < n; ++x){\n        b[x] = 0;\n    }\n    #pragma acc data copyin(a[0:n]) copy(totals[0:n/10 + 1]) copyout(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic capture\n                    {\n                        b[x] = totals[x/10];\n                        totals[x/10] = totals[x/10] ^ a[x];\n                    }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x/10] ^= a[x];\n    }\n    for (int x = 0; x < (n/10 + 1); ++x){\n        if (totals_comparison[x] != totals[x]){\n            err += 1;\n            break;\n        }\n    }\n    for (int x = 0; x < n; x = x + 10){\n        temp_iterator = 0;\n        for (ab_iterator = x; ab_iterator < n && ab_iterator < x + 10; ab_iterator+= 1){\n            temp_a[temp_iterator] = a[ab_iterator];\n            temp_b[temp_iterator] = b[ab_iterator];\n        }\n        if (!is_possible(temp_a, temp_b, temp_iterator, 1)){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_structured_assign_x_divided_expr.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    real_t *totals = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n    real_t *totals_comparison = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n    real_t *temp_a = (real_t *)malloc(10 * sizeof(real_t));\n    real_t *temp_b = (real_t *)malloc(10 * sizeof(real_t));\n    real_t *temp_c = (real_t *)malloc(10 * sizeof(real_t));\n    int temp_iterator;\n    int ab_iterator;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0;\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        totals[x] = 1;\n        totals_comparison[x] = 1;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(totals[0:n/10 + 1]) copyout(c[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic capture\n                {\n                    c[x] = totals[x/10];\n                    totals[x/10] = totals[x/10] / (a[x] + b[x]);\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x/10] /= a[x] + b[x];\n    }\n    for (int x = 0; x < 10; ++x){\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            err += 1;\n            break;\n        }\n    }\n\n    for (int x = 0; x < n; x = x + 10){\n        temp_iterator = 0;\n        for (ab_iterator = x; ab_iterator < n && ab_iterator < x + 10;  ab_iterator+= 1){\n            temp_a[temp_iterator] = a[ab_iterator];\n            temp_b[temp_iterator] = b[ab_iterator];\n            temp_c[temp_iterator] = c[ab_iterator];\n            temp_iterator++;\n        }\n        if (!(is_possible(temp_a, temp_b, temp_c, temp_iterator, 1))){\n            err++;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_structured_assign_x_lshift_expr.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    unsigned int *a = (unsigned int *)malloc(n * sizeof(int));\n    unsigned int *b = (unsigned int *)malloc(n * sizeof(int));\n    unsigned int *c = (unsigned int *)malloc(7 * n * sizeof(int));\n    unsigned int passed = 1;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = 1;\n        for (int y = 0; y < 7; ++y){\n            if ((rand()/(real_t) (RAND_MAX)) > .5){\n                b[x] += 1<<y;\n            }\n        }\n    }\n\n    #pragma acc data copyin(b[0:n]) copy(a[0:n]) copyout(c[0:7*n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc loop\n                for (int y = 0; y < 7; ++y){\n                    c[x * 7 + y] = a[x];\n                    if ((b[x]>>y)%2 == 1){\n                        #pragma acc atomic capture\n                        {\n                            c[x * 7 + y] = a[x];\n                            a[x] = a[x] << 1;\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 7; ++y){\n            if ((b[x]>>y)%2 == 1){\n                a[x] >>= 1;\n            }\n        }\n        if (a[x] != 1){\n            err += 1;\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (!is_possible(b[x], &(c[x * 7]), 7, passed)){\n            err++;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_structured_assign_x_minus_expr.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    real_t *totals = (real_t *)malloc(10 * sizeof(real_t));\n    real_t *totals_host = (real_t *)malloc(10 * sizeof(real_t));\n    real_t * passed_ab = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n    real_t * passed_c = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n    int passed_indexer;\n    int absolute_indexer;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    for (int x = 0; x < 10; ++x){\n        totals[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(totals[0:10], c[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic capture\n                {\n                    c[x] = totals[x%10]; totals[x%10] = totals[x%10] - (a[x] + b[x]);\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_host[x%10] = totals_host[x%10] - (a[x] + b[x]);\n    }\n    for (int x = 0; x < 10; ++x){\n        if (fabs(totals_host[x] - totals[x]) > PRECISION){\n            err += 1;\n        }\n    }\n\n    for (int x = 0; x < 10; ++x){\n        for (passed_indexer = 0, absolute_indexer = x; absolute_indexer < n; passed_indexer++, absolute_indexer+= 10){\n            passed_ab[passed_indexer] = a[absolute_indexer] + b[absolute_indexer];\n            passed_c[passed_indexer] = c[absolute_indexer];\n        }\n        if (!is_possible(passed_ab, passed_c, passed_indexer, 0)){\n            err++;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_structured_assign_x_multiply_expr.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    real_t *totals = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n    real_t *totals_comparison = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n    real_t * passed_ab = (real_t *)malloc(10 * sizeof(real_t));\n    real_t * passed_c = (real_t *)malloc(10 * sizeof(real_t));\n    int passed_indexer;\n    int absolute_indexer;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        totals[x] = 1;\n        totals_comparison[x] = 1;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(totals[0:n/10 + 1]) copyout(c[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic capture\n                {\n                    c[x] = totals[x%(n/10 + 1)];\n                    totals[x%(n/10 + 1)] = totals[x%(n/10 + 1)] * (a[x] + b[x]);\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x%(n/10 + 1)] *= a[x] + b[x];\n    }\n    for (int x = 0; x < 10; ++x){\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION * totals_comparison[x]){\n            err += 1;\n            break;\n        }\n    }\n\n    for (int x = 0; x < n/10 + 1; ++x){\n        for (passed_indexer = 0, absolute_indexer = x; absolute_indexer < n; passed_indexer++, absolute_indexer += n/10 + 1){\n            passed_ab[passed_indexer] = a[absolute_indexer] + b[absolute_indexer];\n            passed_c[passed_indexer] = c[absolute_indexer];\n        }\n        if (!is_possible(passed_ab, passed_c, passed_indexer, 1)){\n            err++;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_structured_assign_x_plus_expr.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    real_t *totals = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n    real_t *totals_comparison = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n    real_t *passed_ab = (real_t *)malloc(10 * sizeof(real_t));\n    real_t *passed_c = (real_t *)malloc(10 * sizeof(real_t));\n    int passed_indexer;\n    int absolute_indexer;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        totals[x] = 0;\n        totals_comparison[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(totals[0:n/10 + 1]) copyout(c[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic capture\n                {\n                    c[x] = totals[x%(n/10 + 1)];\n                    totals[x%(n/10 + 1)] = totals[x%(n/10 + 1)] + (a[x] * b[x]);\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x%(n/10 + 1)] += a[x] * b[x];\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            err += 1;\n            break;\n        }\n    }\n\n    for (int x = 0; x < n/10 + 1; ++x){\n        for (passed_indexer = 0, absolute_indexer = x; absolute_indexer < n; passed_indexer++, absolute_indexer+= (n/10 + 1)){\n            passed_ab[passed_indexer] = a[absolute_indexer] * b[absolute_indexer];\n            passed_c[passed_indexer] = c[absolute_indexer];\n        }\n        if (!is_possible(passed_ab, passed_c, passed_indexer, 0)){\n            err++;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_structured_assign_x_rshift_expr.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    unsigned int *a = (unsigned int *)malloc(n * sizeof(int));\n    unsigned int *b = (unsigned int *)malloc(n * sizeof(int));\n    unsigned int *c = (unsigned int *)malloc(7 * n * sizeof(int));\n    unsigned int passed = 1<<8;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = 1<<8;\n        for (int y = 0; y < 7; ++y){\n            if ((rand()/(real_t) (RAND_MAX)) > .5){\n                b[x] += 1<<y;\n            }\n        }\n    }\n\n    #pragma acc data copyin(b[0:n]) copy(a[0:n]) copyout(c[0:7*n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc loop\n                for (int y = 0; y < 7; ++y){\n                    c[x * 7 + y] = a[x];\n                    if ((b[x]>>y)%2 == 1){\n                        #pragma acc atomic capture\n                        {\n                            c[x * 7 + y] = a[x];\n                            a[x] = a[x] >> 1;\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 7; ++y){\n            if ((b[x]>>y)%2 == 1){\n                a[x] <<= 1;\n            }\n        }\n        if (a[x] != 1<<8){\n            err += 1;\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (!is_possible(b[x], &(c[x * 7]), 7, passed)){\n            err++;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_structured_bitand_equals_assign.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    int *a = (int *)malloc(n * sizeof(int));\n    int *b = (int *)malloc(n * sizeof(int));\n    int *totals = (int *)malloc((n/10 + 1) * sizeof(int));\n    int *totals_comparison = (int *)malloc((n/10 + 1) * sizeof(int));\n    int *temp_a = (int *)malloc(10 * sizeof(int));\n    int *temp_b = (int *)malloc(10 * sizeof(int));\n    int temp_iterator;\n    int ab_iterator;\n\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 8; ++y){\n            if (rand()/(real_t)(RAND_MAX) < .933){ //.933 gets close to a 50/50 distribution for a collescence of 10 values\n                a[x] += 1<<y;\n            }\n        }\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        totals[x] = 0;\n        totals_comparison[x] = 0;\n        for (int y = 0; y < 8; ++y){\n            totals[x] +=  1<<y;\n            totals_comparison[x] += 1<<y;\n        }\n    }\n    for (int x = 0; x < n; ++x){\n        b[x] = 0;\n    }\n    #pragma acc data copyin(a[0:n]) copy(totals[0:n/10 + 1]) copyout(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic capture\n                    {\n                        totals[x/10] &= a[x];\n                        b[x] = totals[x/10];\n                    }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x/10] &= a[x];\n    }\n    for (int x = 0; x < (n/10 + 1); ++x){\n        if (totals_comparison[x] != totals[x]){\n            err += 1;\n            break;\n        }\n    }\n\n    for (int x = 0; x < n; x = x + 10){\n        temp_iterator = 0;\n        for (ab_iterator = x; ab_iterator < n && ab_iterator < x + 10; ab_iterator+= 1){\n            temp_a[temp_iterator] = a[ab_iterator];\n            temp_b[temp_iterator] = b[ab_iterator];\n        }\n        if (!is_possible(temp_a, temp_b, temp_iterator, 1)){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_structured_bitor_equals_assign.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    int *a = (int *)malloc(n * sizeof(int));\n    int *b = (int *)malloc(n * sizeof(int));\n    int *totals = (int *)malloc((n/10 + 1) * sizeof(int));\n    int *totals_comparison = (int *)malloc((n/10 + 1) * sizeof(int));\n    int *temp_a = (int *)malloc(10 * sizeof(int));\n    int *temp_b = (int *)malloc(10 * sizeof(int));\n    int temp_iterator;\n    int ab_iterator;\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 8; ++y){\n            if (rand()/(real_t)(RAND_MAX) < .933){ //.933 gets close to a 50/50 distribution for a collescence of 10 values\n                a[x] += 1<<y;\n            }\n        }\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        totals[x] = 0;\n        totals_comparison[x] = 0;\n        for (int y = 0; y < 8; ++y){\n            totals[x] +=  1<<y;\n            totals_comparison[x] += 1<<y;\n        }\n    }\n    for (int x = 0; x < n; ++x){\n        b[x] = 0;\n    }\n    #pragma acc data copyin(a[0:n]) copy(totals[0:n/10 + 1]) copyout(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic capture\n                    {\n                        totals[x/10] |= a[x];\n                        b[x] = totals[x/10];\n                    }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x/10] |= a[x];\n    }\n    for (int x = 0; x < (n/10 + 1); ++x){\n        if (totals_comparison[x] != totals[x]){\n            err += 1;\n            break;\n        }\n    }\n    for (int x = 0; x < n; x = x + 10){\n        temp_iterator = 0;\n        for (ab_iterator = x; ab_iterator < n && ab_iterator < x + 10; ab_iterator+= 1){\n            temp_a[temp_iterator] = a[ab_iterator];\n            temp_b[temp_iterator] = b[ab_iterator];\n        }\n        if (!is_possible(temp_a, temp_b, temp_iterator, 1)){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_structured_bitxor_equals_assign.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    int *a = (int *)malloc(n * sizeof(int));\n    int *b = (int *)malloc(n * sizeof(int));\n    int *totals = (int *)malloc((n/10 + 1) * sizeof(int));\n    int *totals_comparison = (int *)malloc((n/10 + 1) * sizeof(int));\n    int *temp_a = (int *)malloc(10 * sizeof(int));\n    int *temp_b = (int *)malloc(10 * sizeof(int));\n    int temp_iterator;\n    int ab_iterator;\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 8; ++y){\n            if (rand()/(real_t)(RAND_MAX) < .933){ //.933 gets close to a 50/50 distribution for a collescence of 10 values\n                a[x] += 1<<y;\n            }\n        }\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        totals[x] = 0;\n        totals_comparison[x] = 0;\n        for (int y = 0; y < 8; ++y){\n            totals[x] +=  1<<y;\n            totals_comparison[x] += 1<<y;\n        }\n    }\n    for (int x = 0; x < n; ++x){\n        b[x] = 0;\n    }\n    #pragma acc data copyin(a[0:n]) copy(totals[0:n/10 + 1]) copyout(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic capture\n                    {\n                        totals[x/10] ^= a[x];\n                        b[x] = totals[x/10];\n                    }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x/10] ^= a[x];\n    }\n    for (int x = 0; x < (n/10 + 1); ++x){\n        if (totals_comparison[x] != totals[x]){\n            err += 1;\n            break;\n        }\n    }\n    for (int x = 0; x < n; x = x + 10){\n        temp_iterator = 0;\n        for (ab_iterator = x; ab_iterator < n && ab_iterator < x + 10; ab_iterator+= 1){\n            temp_a[temp_iterator] = a[ab_iterator];\n            temp_b[temp_iterator] = b[ab_iterator];\n        }\n        if (!is_possible(temp_a, temp_b, temp_iterator, 1)){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_structured_divided_equals_assign.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    real_t *totals = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n    real_t *totals_comparison = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n    real_t *temp_a = (real_t *)malloc(10 * sizeof(real_t));\n    real_t *temp_b = (real_t *)malloc(10 * sizeof(real_t));\n    real_t *temp_c = (real_t *)malloc(10 * sizeof(real_t));\n    int temp_iterator;\n    int ab_iterator;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0;\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        totals[x] = 1;\n        totals_comparison[x] = 1;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(totals[0:n/10 + 1]) copyout(c[0:n])\n    {\n      #pragma acc parallel\n      {\n          #pragma acc loop\n          for (int x = 0; x < n; ++x){\n              #pragma acc atomic capture\n              {\n                  totals[x/10] /= (a[x] + b[x]);\n                  c[x] = totals[x/10];\n              }\n          }\n      }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x/10] /= a[x] + b[x];\n    }\n    for (int x = 0; x < 10; ++x){\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            err += 1;\n            break;\n        }\n    }\n\n    for (int x = 0; x < n; x = x + 10){\n        temp_iterator = 0;\n        for (ab_iterator = x; ab_iterator < n && ab_iterator < x + 10;  ab_iterator+= 1){\n            temp_a[temp_iterator] = a[ab_iterator];\n            temp_b[temp_iterator] = b[ab_iterator];\n            temp_c[temp_iterator] = c[ab_iterator];\n            temp_iterator++;\n        }\n        if (!(is_possible(temp_a, temp_b, temp_c, temp_iterator, 1))){\n            err++;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_structured_expr_bitand_x_assign.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    int *a = (int *)malloc(n * sizeof(int));\n    int *b = (int *)malloc(n * sizeof(int));\n    int *totals = (int *)malloc((n/10 + 1) * sizeof(int));\n    int *totals_comparison = (int *)malloc((n/10 + 1) * sizeof(int));\n    int *temp_a = (int *)malloc(10 * sizeof(int));\n    int *temp_b = (int *)malloc(10 * sizeof(int));\n    int temp_iterator;\n    int ab_iterator;\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 8; ++y){\n            if (rand()/(real_t)(RAND_MAX) < .933){ //.933 gets close to a 50/50 distribution for a collescence of 10 values\n                a[x] += 1<<y;\n            }\n        }\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        totals[x] = 0;\n        totals_comparison[x] = 0;\n        for (int y = 0; y < 8; ++y){\n            totals[x] +=  1<<y;\n            totals_comparison[x] += 1<<y;\n        }\n    }\n    for (int x = 0; x < n; ++x){\n        b[x] = 0;\n    }\n    #pragma acc data copyin(a[0:n]) copy(totals[0:n/10 + 1]) copyout(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic capture\n                    {\n                        totals[x/10] = a[x] & totals[x/10];\n                        b[x] = totals[x/10];\n                    }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x/10] &= a[x];\n    }\n    for (int x = 0; x < (n/10 + 1); ++x){\n        if (totals_comparison[x] != totals[x]){\n            err += 1;\n            break;\n        }\n    }\n    for (int x = 0; x < n; x = x + 10){\n        temp_iterator = 0;\n        for (ab_iterator = x; ab_iterator < n && ab_iterator < x + 10; ab_iterator+= 1){\n            temp_a[temp_iterator] = a[ab_iterator];\n            temp_b[temp_iterator] = b[ab_iterator];\n        }\n        if (!is_possible(temp_a, temp_b, temp_iterator, 1)){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_structured_expr_bitor_x_assign.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    int *a = (int *)malloc(n * sizeof(int));\n    int *b = (int *)malloc(n * sizeof(int));\n    int *totals = (int *)malloc((n/10 + 1) * sizeof(int));\n    int *totals_comparison = (int *)malloc((n/10 + 1) * sizeof(int));\n    int *temp_a = (int *)malloc(10 * sizeof(int));\n    int *temp_b = (int *)malloc(10 * sizeof(int));\n    int temp_iterator;\n    int ab_iterator;\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 8; ++y){\n            if (rand()/(real_t)(RAND_MAX) < .933){ //.933 gets close to a 50/50 distribution for a collescence of 10 values\n                a[x] += 1<<y;\n            }\n        }\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        totals[x] = 0;\n        totals_comparison[x] = 0;\n        for (int y = 0; y < 8; ++y){\n            totals[x] +=  1<<y;\n            totals_comparison[x] += 1<<y;\n        }\n    }\n    for (int x = 0; x < n; ++x){\n        b[x] = 0;\n    }\n    #pragma acc data copyin(a[0:n]) copy(totals[0:n/10 + 1]) copyout(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic capture\n                    {\n                        totals[x/10] = a[x] | totals[x/10];\n                        b[x] = totals[x/10];\n                    }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x/10] |= a[x];\n    }\n    for (int x = 0; x < (n/10 + 1); ++x){\n        if (totals_comparison[x] != totals[x]){\n            err += 1;\n            break;\n        }\n    }\n    for (int x = 0; x < n; x = x + 10){\n        temp_iterator = 0;\n        for (ab_iterator = x; ab_iterator < n && ab_iterator < x + 10; ab_iterator+= 1){\n            temp_a[temp_iterator] = a[ab_iterator];\n            temp_b[temp_iterator] = b[ab_iterator];\n        }\n        if (!is_possible(temp_a, temp_b, temp_iterator, 1)){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_structured_expr_bitxor_x_assign.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    int *a = (int *)malloc(n * sizeof(int));\n    int *b = (int *)malloc(n * sizeof(int));\n    int *totals = (int *)malloc((n/10 + 1) * sizeof(int));\n    int *totals_comparison = (int *)malloc((n/10 + 1) * sizeof(int));\n    int *temp_a = (int *)malloc(10 * sizeof(int));\n    int *temp_b = (int *)malloc(10 * sizeof(int));\n    int temp_iterator;\n    int ab_iterator;\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 8; ++y){\n            if (rand()/(real_t)(RAND_MAX) < .933){ //.933 gets close to a 50/50 distribution for a collescence of 10 values\n                a[x] += 1<<y;\n            }\n        }\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        totals[x] = 0;\n        totals_comparison[x] = 0;\n        for (int y = 0; y < 8; ++y){\n            totals[x] +=  1<<y;\n            totals_comparison[x] += 1<<y;\n        }\n    }\n    for (int x = 0; x < n; ++x){\n        b[x] = 0;\n    }\n    #pragma acc data copyin(a[0:n]) copy(totals[0:n/10 + 1]) copyout(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic capture\n                    {\n                        totals[x/10] = a[x] ^ totals[x/10];\n                        b[x] = totals[x/10];\n                    }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x/10] ^= a[x];\n    }\n    for (int x = 0; x < (n/10 + 1); ++x){\n        if (totals_comparison[x] != totals[x]){\n            err += 1;\n            break;\n        }\n    }\n    for (int x = 0; x < n; x = x + 10){\n        temp_iterator = 0;\n        for (ab_iterator = x; ab_iterator < n && ab_iterator < x + 10; ab_iterator+= 1){\n            temp_a[temp_iterator] = a[ab_iterator];\n            temp_b[temp_iterator] = b[ab_iterator];\n        }\n        if (!is_possible(temp_a, temp_b, temp_iterator, 1)){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_structured_expr_multiply_x_assign.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    real_t *totals = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n    real_t *totals_comparison = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n    real_t * passed_ab = (real_t *)malloc(10 * sizeof(real_t));\n    real_t * passed_c = (real_t *)malloc(10 * sizeof(real_t));\n    int passed_indexer;\n    int absolute_indexer;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        totals[x] = 1;\n        totals_comparison[x] = 1;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(totals[0:n/10 + 1]) copyout(c[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic capture\n                {\n                    totals[x%(n/10 + 1)] = (a[x] + b[x]) * totals[x%(n/10 + 1)];\n                    c[x] = totals[x%(n/10 + 1)];\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x%(n/10 + 1)] *= a[x] + b[x];\n    }\n    for (int x = 0; x < 10; ++x){\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION * totals_comparison[x]){\n            err += 1;\n            break;\n        }\n    }\n\n    for (int x = 0; x < n/10 + 1; ++x){\n        for (passed_indexer = 0, absolute_indexer = x; absolute_indexer < n; passed_indexer++, absolute_indexer += n/10 + 1){\n            passed_ab[passed_indexer] = a[absolute_indexer] + b[absolute_indexer];\n            passed_c[passed_indexer] = c[absolute_indexer];\n        }\n        if (!is_possible(passed_ab, passed_c, passed_indexer, 1)){\n            err++;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_structured_expr_plus_x_assign.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    real_t *totals = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n    real_t *totals_comparison = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n    real_t *passed_ab = (real_t *)malloc(10 * sizeof(real_t));\n    real_t *passed_c = (real_t *)malloc(10 * sizeof(real_t));\n    int passed_indexer;\n    int absolute_indexer;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        totals[x] = 0;\n        totals_comparison[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(totals[0:n/10 + 1]) copyout(c[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic capture\n                {\n                    totals[x%(n/10 + 1)] = (a[x] * b[x]) + totals[x%(n/10 + 1)];\n                    c[x] = totals[x%(n/10 + 1)];\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x%(n/10 + 1)] += a[x] * b[x];\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            err += 1;\n            break;\n        }\n    }\n\n    for (int x = 0; x < n/10 + 1; ++x){\n        for (passed_indexer = 0, absolute_indexer = x; absolute_indexer < n; passed_indexer++, absolute_indexer+= (n/10 + 1)){\n            passed_ab[passed_indexer] = a[absolute_indexer] * b[absolute_indexer];\n            passed_c[passed_indexer] = c[absolute_indexer];\n        }\n        if (!is_possible(passed_ab, passed_c, passed_indexer, 0)){\n            err++;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n    printf(\"FAIL CODE: %d\\n\",failcode);\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_structured_lshift_equals_assign.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    unsigned int *a = (unsigned int *)malloc(n * sizeof(int));\n    unsigned int *b = (unsigned int *)malloc(n * sizeof(int));\n    unsigned int *c = (unsigned int *)malloc(7 * n * sizeof(int));\n    unsigned int passed = 1;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = 1;\n        for (int y = 0; y < 7; ++y){\n            if ((rand()/(real_t) (RAND_MAX)) > .5){\n                b[x] += 1<<y;\n            }\n        }\n    }\n\n    #pragma acc data copyin(b[0:n]) copy(a[0:n]) copyout(c[0:7*n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc loop\n                for (int y = 0; y < 7; ++y){\n                    c[x * 7 + y] = a[x];\n                    if ((b[x]>>y)%2 == 1){\n                        #pragma acc atomic capture\n                        {\n                            a[x] <<= 1;\n                            c[x * 7 + y] = a[x];\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 7; ++y){\n            if ((b[x]>>y)%2 == 1){\n                a[x] >>= 1;\n            }\n        }\n        if (a[x] != 1){\n            err += 1;\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (!is_possible(b[x], &(c[x * 7]), 7, passed)){\n            err++;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_structured_minus_equals_assign.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    real_t *totals = (real_t *)malloc(10 * sizeof(real_t));\n    real_t *totals_host = (real_t *)malloc(10 * sizeof(real_t));\n    real_t * passed_ab = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n    real_t * passed_c = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n    int passed_indexer;\n    int absolute_indexer;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    for (int x = 0; x < 10; ++x){\n        totals[x] = 0;\n\ttotals_host[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(totals[0:10], c[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic capture\n                {\n                    totals[x%10] -= (a[x] + b[x]);\n                    c[x] = totals[x%10];\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_host[x%10] = totals_host[x%10] - (a[x] + b[x]);\n    }\n    for (int x = 0; x < 10; ++x){\n        if (fabs(totals_host[x] - totals[x]) > PRECISION){\n            err += 1;\n        }\n    }\n\n    for (int x = 0; x < 10; ++x){\n        for (passed_indexer = 0, absolute_indexer = x; absolute_indexer < n; passed_indexer++, absolute_indexer+= 10){\n            passed_ab[passed_indexer] = a[absolute_indexer] + b[absolute_indexer];\n            passed_c[passed_indexer] = c[absolute_indexer];\n        }\n        if (!is_possible(passed_ab, passed_c, passed_indexer, 0)){\n            err++;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_structured_multiply_equals_assign.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    real_t *totals = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n    real_t *totals_comparison = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n    real_t * passed_ab = (real_t *)malloc(10 * sizeof(real_t));\n    real_t * passed_c = (real_t *)malloc(10 * sizeof(real_t));\n    int passed_indexer;\n    int absolute_indexer;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        totals[x] = 1;\n        totals_comparison[x] = 1;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(totals[0:n/10 + 1]) copyout(c[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic capture\n                {\n                    totals[x%(n/10 + 1)] *= a[x] + b[x];\n                    c[x] = totals[x%(n/10 + 1)];\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x%(n/10 + 1)] *= a[x] + b[x];\n    }\n    for (int x = 0; x < 10; ++x){\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION * totals_comparison[x]){\n            err += 1;\n            break;\n        }\n    }\n\n    for (int x = 0; x < n/10 + 1; ++x){\n        for (passed_indexer = 0, absolute_indexer = x; absolute_indexer < n; passed_indexer++, absolute_indexer += n/10 + 1){\n            passed_ab[passed_indexer] = a[absolute_indexer] + b[absolute_indexer];\n            passed_c[passed_indexer] = c[absolute_indexer];\n        }\n        if (!is_possible(passed_ab, passed_c, passed_indexer, 1)){\n            err++;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_structured_plus_equals_assign.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    real_t *totals = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n    real_t *totals_comparison = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n    real_t *passed_ab = (real_t *)malloc(10 * sizeof(real_t));\n    real_t *passed_c = (real_t *)malloc(10 * sizeof(real_t));\n    int passed_indexer;\n    int absolute_indexer;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        totals[x] = 0;\n        totals_comparison[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(totals[0:n/10 + 1]) copyout(c[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic capture\n                {\n                    totals[x%(n/10 + 1)] += a[x] * b[x];\n                    c[x] = totals[x%(n/10 + 1)];\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x%(n/10 + 1)] += a[x] * b[x];\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            err += 1;\n            break;\n        }\n    }\n\n    for (int x = 0; x < n/10 + 1; ++x){\n        for (passed_indexer = 0, absolute_indexer = x; absolute_indexer < n; passed_indexer++, absolute_indexer+= (n/10 + 1)){\n            passed_ab[passed_indexer] = a[absolute_indexer] * b[absolute_indexer];\n            passed_c[passed_indexer] = c[absolute_indexer];\n        }\n        if (!is_possible(passed_ab, passed_c, passed_indexer, 0)){\n            err++;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_structured_postdecrement_assign.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    int *c = (int *)malloc(n * sizeof(int));\n    int *distribution = (int *)malloc(10 * sizeof(int));\n    int *distribution_comparison = (int *)malloc(10 * sizeof(int));\n    bool found = false;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    for (int x = 0; x < 10; ++x){\n        distribution[x] = 0;\n        distribution_comparison[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(distribution[0:10]) copyout(c[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic capture\n                {\n                    (distribution[(int) (a[x]*b[x]/10)])--;\n                    c[x] = distribution[(int) (a[x]*b[x]/10)];\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        distribution_comparison[(int) (a[x]*b[x]/10)]--;\n    }\n    for (int x = 0; x < 10; ++x){\n        if (distribution_comparison[x] != distribution[x]){\n            err += 1;\n            break;\n        }\n    }\n\n    for (int x = 0; x < 10; ++x){\n        for (int y = 0; y > -distribution_comparison[x]; --y){\n            for (int z = 0; z < n; ++z){\n                if (y - 1 == c[z] && x == (int) (a[x] * b[x] / 10)){\n                    found = true;\n                    break;\n                }\n            }\n            if (!found){\n                err++;\n            }\n            found = false;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_structured_postincrement_assign.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    int *c = (int *)malloc(n * sizeof(int));\n    int *distribution = (int *)malloc(10 * sizeof(int));\n    int *distribution_comparison = (int *)malloc(10 * sizeof(int));\n    bool found = false;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    for (int x = 0; x < 10; ++x){\n        distribution[x] = 0;\n        distribution_comparison[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(distribution[0:10]) copyout(c[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic capture\n                {\n                    distribution[(int) (a[x]*b[x]/10)]++;\n                    c[x] = distribution[(int) (a[x]*b[x]/10)];\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        distribution_comparison[(int) (a[x]*b[x]/10)]++;\n    }\n    for (int x = 0; x < 10; ++x){\n        if (distribution_comparison[x] != distribution[x]){\n            err += 1;\n            break;\n        }\n    }\n\n    for (int x = 0; x < 10; ++x){\n        for (int y = 0; y < distribution_comparison[x]; ++y){\n            for (int z = 0; z < n; ++z){\n                if (c[z] == y + 1 && (int) (a[z]*b[z]/10) == x){\n                    found = true;\n                    break;\n                }\n            }\n            if (!found){\n                err++;\n            }\n            found = false;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_structured_predecrement_assign.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    int *c = (int *)malloc(n * sizeof(int));\n    int *distribution = (int *)malloc(10 * sizeof(int));\n    int *distribution_comparison = (int *)malloc(10 * sizeof(int));\n    bool found = false;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    for (int x = 0; x < 10; ++x){\n        distribution[x] = 0;\n        distribution_comparison[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(distribution[0:10]) copyout(c[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic capture\n                {\n                    --distribution[(int) (a[x]*b[x]/10)];\n                    c[x] = distribution[(int) (a[x]*b[x]/10)];\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        distribution_comparison[(int) (a[x]*b[x]/10)]--;\n    }\n    for (int x = 0; x < 10; ++x){\n        if (distribution_comparison[x] != distribution[x]){\n            err += 1;\n            break;\n        }\n    }\n\n    for (int x = 0; x < 10; ++x){\n        for (int y = 0; y > distribution[x]; --y){\n            for (int z = 0; z < n; ++z){\n                if (c[z] == y - 1 && x == (int) (a[z] * b[z] / 10)){\n                    found = true;\n                    break;\n                }\n            }\n            if (!found){\n                err++;\n            }\n            found = false;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_structured_preincrement_assign.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    int *c = (int *)malloc(n * sizeof(int));\n    int *distribution = (int *)malloc(10 * sizeof(int));\n    int *distribution_comparison = (int *)malloc(10 * sizeof(int));\n    bool found = false;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    for (int x = 0; x < 10; ++x){\n        distribution[x] = 0;\n        distribution_comparison[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(distribution[0:10]) copyout(c[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic capture\n                {\n                    ++distribution[(int) (a[x]*b[x]/10)];\n                    c[x] = distribution[(int) (a[x]*b[x]/10)];\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        distribution_comparison[(int) (a[x]*b[x]/10)]++;\n    }\n    for (int x = 0; x < 10; ++x){\n        if (distribution_comparison[x] != distribution[x]){\n            err += 1;\n            break;\n        }\n    }\n\n    for (int x = 0; x < 10; ++x){\n        for (int y = 0; y < distribution[x]; ++y){\n            for (int z = 0; z < n; ++z){\n                if (c[z] == y + 1 && x == (int) (a[z] * b[z] / 10)){\n                    found = true;\n                    break;\n                }\n            }\n            if (!found){\n                err++;\n            }\n            found = false;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_structured_rshift_equals_assign.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    unsigned int *a = (unsigned int *)malloc(n * sizeof(int));\n    unsigned int *b = (unsigned int *)malloc(n * sizeof(int));\n    unsigned int *c = (unsigned int *)malloc(7 * n * sizeof(int));\n    unsigned int passed = 1<<8;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = 1<<8;\n        for (int y = 0; y < 7; ++y){\n            if ((rand()/(real_t) (RAND_MAX)) > .5){\n                b[x] += 1<<y;\n            }\n        }\n    }\n\n    #pragma acc data copyin(b[0:n]) copy(a[0:n]) copyout(c[0:7*n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc loop\n                for (int y = 0; y < 7; ++y){\n                    c[x * 7 + y] = a[x];\n                    if ((b[x]>>y)%2 == 1){\n                        #pragma acc atomic capture\n                        {\n                            a[x] >>= 1;\n                            c[x * 7 + y] = a[x];\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 7; ++y){\n            if ((b[x]>>y)%2 == 1){\n                a[x] <<= 1;\n            }\n        }\n        if (a[x] != 1<<8){\n            err += 1;\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (!is_possible(b[x], &(c[x * 7]), 7, passed)){\n            err++;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_structured_x_bitand_expr_assign.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    int *a = (int *)malloc(n * sizeof(int));\n    int *b = (int *)malloc(n * sizeof(int));\n    int *totals = (int *)malloc((n/10 + 1) * sizeof(int));\n    int *totals_comparison = (int *)malloc((n/10 + 1) * sizeof(int));\n    int *temp_a = (int *)malloc(10 * sizeof(int));\n    int *temp_b = (int *)malloc(10 * sizeof(int));\n    int temp_iterator;\n    int ab_iterator;\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 8; ++y){\n            if (rand()/(real_t)(RAND_MAX) < .933){ //.933 gets close to a 50/50 distribution for a collescence of 10 values\n                a[x] += 1<<y;\n            }\n        }\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        totals[x] = 0;\n        totals_comparison[x] = 0;\n        for (int y = 0; y < 8; ++y){\n            totals[x] +=  1<<y;\n            totals_comparison[x] += 1<<y;\n        }\n    }\n    for (int x = 0; x < n; ++x){\n        b[x] = 0;\n    }\n    #pragma acc data copyin(a[0:n]) copy(totals[0:n/10 + 1]) copyout(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic capture\n                    {\n                        totals[x/10] = totals[x/10] & a[x];\n                        b[x] = totals[x/10];\n                    }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x/10] &= a[x];\n    }\n    for (int x = 0; x < (n/10 + 1); ++x){\n        if (totals_comparison[x] != totals[x]){\n            err += 1;\n            break;\n        }\n    }\n    for (int x = 0; x < n; x = x + 10){\n        temp_iterator = 0;\n        for (ab_iterator = x; ab_iterator < n && ab_iterator < x + 10; ab_iterator+= 1){\n            temp_a[temp_iterator] = a[ab_iterator];\n            temp_b[temp_iterator] = b[ab_iterator];\n        }\n        if (!is_possible(temp_a, temp_b, temp_iterator, 1)){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_structured_x_bitor_expr_assign.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    int *a = (int *)malloc(n * sizeof(int));\n    int *b = (int *)malloc(n * sizeof(int));\n    int *totals = (int *)malloc((n/10 + 1) * sizeof(int));\n    int *totals_comparison = (int *)malloc((n/10 + 1) * sizeof(int));\n    int *temp_a = (int *)malloc(10 * sizeof(int));\n    int *temp_b = (int *)malloc(10 * sizeof(int));\n    int temp_iterator;\n    int ab_iterator;\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 8; ++y){\n            if (rand()/(real_t)(RAND_MAX) < .933){ //.933 gets close to a 50/50 distribution for a collescence of 10 values\n                a[x] += 1<<y;\n            }\n        }\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        totals[x] = 0;\n        totals_comparison[x] = 0;\n        for (int y = 0; y < 8; ++y){\n            totals[x] +=  1<<y;\n            totals_comparison[x] += 1<<y;\n        }\n    }\n    for (int x = 0; x < n; ++x){\n        b[x] = 0;\n    }\n    #pragma acc data copyin(a[0:n]) copy(totals[0:n/10 + 1]) copyout(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic capture\n                    {\n                        totals[x/10] = totals[x/10] | a[x];\n                        b[x] = totals[x/10];\n                    }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x/10] |= a[x];\n    }\n    for (int x = 0; x < (n/10 + 1); ++x){\n        if (totals_comparison[x] != totals[x]){\n            err += 1;\n            break;\n        }\n    }\n    for (int x = 0; x < n; x = x + 10){\n        temp_iterator = 0;\n        for (ab_iterator = x; ab_iterator < n && ab_iterator < x + 10; ab_iterator+= 1){\n            temp_a[temp_iterator] = a[ab_iterator];\n            temp_b[temp_iterator] = b[ab_iterator];\n        }\n        if (!is_possible(temp_a, temp_b, temp_iterator, 1)){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_structured_x_bitxor_expr_assign.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    int *a = (int *)malloc(n * sizeof(int));\n    int *b = (int *)malloc(n * sizeof(int));\n    int *totals = (int *)malloc((n/10 + 1) * sizeof(int));\n    int *totals_comparison = (int *)malloc((n/10 + 1) * sizeof(int));\n    int *temp_a = (int *)malloc(10 * sizeof(int));\n    int *temp_b = (int *)malloc(10 * sizeof(int));\n    int temp_iterator;\n    int ab_iterator;\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 8; ++y){\n            if (rand()/(real_t)(RAND_MAX) < .933){ //.933 gets close to a 50/50 distribution for a collescence of 10 values\n                a[x] += 1<<y;\n            }\n        }\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        totals[x] = 0;\n        totals_comparison[x] = 0;\n        for (int y = 0; y < 8; ++y){\n            totals[x] +=  1<<y;\n            totals_comparison[x] += 1<<y;\n        }\n    }\n    for (int x = 0; x < n; ++x){\n        b[x] = 0;\n    }\n    #pragma acc data copyin(a[0:n]) copy(totals[0:n/10 + 1]) copyout(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic capture\n                    {\n                        totals[x/10] = totals[x/10] ^ a[x];\n                        b[x] = totals[x/10];\n                    }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x/10] ^= a[x];\n    }\n    for (int x = 0; x < (n/10 + 1); ++x){\n        if (totals_comparison[x] != totals[x]){\n            err += 1;\n            break;\n        }\n    }\n    for (int x = 0; x < n; x = x + 10){\n        temp_iterator = 0;\n        for (ab_iterator = x; ab_iterator < n && ab_iterator < x + 10; ab_iterator+= 1){\n            temp_a[temp_iterator] = a[ab_iterator];\n            temp_b[temp_iterator] = b[ab_iterator];\n        }\n        if (!is_possible(temp_a, temp_b, temp_iterator, 1)){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_structured_x_divided_expr_assign.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    real_t *totals = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n    real_t *totals_comparison = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n    real_t *temp_a = (real_t *)malloc(10 * sizeof(real_t));\n    real_t *temp_b = (real_t *)malloc(10 * sizeof(real_t));\n    real_t *temp_c = (real_t *)malloc(10 * sizeof(real_t));\n    int temp_iterator;\n    int ab_iterator;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0;\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        totals[x] = 1;\n        totals_comparison[x] = 1;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(totals[0:n/10 + 1]) copyout(c[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic capture\n                {\n                    totals[x/10] = totals[x/10] / (a[x] + b[x]);\n                    c[x] = totals[x/10];\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x/10] /= a[x] + b[x];\n    }\n    for (int x = 0; x < 10; ++x){\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            err += 1;\n            break;\n        }\n    }\n\n    for (int x = 0; x < n; x = x + 10){\n        temp_iterator = 0;\n        for (ab_iterator = x; ab_iterator < n && ab_iterator < x + 10;  ab_iterator+= 1){\n            temp_a[temp_iterator] = a[ab_iterator];\n            temp_b[temp_iterator] = b[ab_iterator];\n            temp_c[temp_iterator] = c[ab_iterator];\n            temp_iterator++;\n        }\n        if (!(is_possible(temp_a, temp_b, temp_c, temp_iterator, 1))){\n            err++;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_structured_x_lshift_expr_assign.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    unsigned int *a = (unsigned int *)malloc(n * sizeof(int));\n    unsigned int *b = (unsigned int *)malloc(n * sizeof(int));\n    unsigned int *c = (unsigned int *)malloc(7 * n * sizeof(int));\n    unsigned int passed = 1;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = 1;\n        for (int y = 0; y < 7; ++y){\n            if ((rand()/(real_t) (RAND_MAX)) > .5){\n                b[x] += 1<<y;\n            }\n        }\n    }\n\n    #pragma acc data copyin(b[0:n]) copy(a[0:n]) copyout(c[0:7*n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc loop\n                for (int y = 0; y < 7; ++y){\n                    c[x * 7 + y] = a[x];\n                    if ((b[x]>>y)%2 == 1){\n                        #pragma acc atomic capture\n                        {\n                            a[x] = a[x] << 1;\n                            c[x * 7 + y] = a[x];\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 7; ++y){\n            if ((b[x]>>y)%2 == 1){\n                a[x] >>= 1;\n            }\n        }\n        if (a[x] != 1){\n            err += 1;\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (!is_possible(b[x], &(c[x * 7]), 7, passed)){\n            err++;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_structured_x_minus_expr_assign.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    real_t *totals = (real_t *)malloc(10 * sizeof(real_t));\n    real_t *totals_host = (real_t *)malloc(10 * sizeof(real_t));\n    real_t * passed_ab = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n    real_t * passed_c = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n    int passed_indexer;\n    int absolute_indexer;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    for (int x = 0; x < 10; ++x){\n        totals[x] = 0;\n\ttotals_host[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(totals[0:10], c[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic capture\n                {\n                    totals[x%10] = totals[x%10] - (a[x] + b[x]);\n                    c[x] = totals[x%10];\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_host[x%10] = totals_host[x%10] - (a[x] + b[x]);\n    }\n    for (int x = 0; x < 10; ++x){\n        if (fabs(totals_host[x] - totals[x]) > PRECISION){\n            err += 1;\n        }\n    }\n\n    for (int x = 0; x < 10; ++x){\n        for (passed_indexer = 0, absolute_indexer = x; absolute_indexer < n; passed_indexer++, absolute_indexer+= 10){\n            passed_ab[passed_indexer] = a[absolute_indexer] + b[absolute_indexer];\n            passed_c[passed_indexer] = c[absolute_indexer];\n        }\n        if (!is_possible(passed_ab, passed_c, passed_indexer, 0)){\n            err++;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_structured_x_multiply_expr_assign.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    real_t *totals = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n    real_t *totals_comparison = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n    real_t * passed_ab = (real_t *)malloc(10 * sizeof(real_t));\n    real_t * passed_c = (real_t *)malloc(10 * sizeof(real_t));\n    int passed_indexer;\n    int absolute_indexer;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        totals[x] = 1;\n        totals_comparison[x] = 1;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(totals[0:n/10 + 1]) copyout(c[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic capture\n                {\n                    totals[x%(n/10 + 1)] = totals[x%(n/10 + 1)] * (a[x] + b[x]);\n                    c[x] = totals[x%(n/10 + 1)];\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x%(n/10 + 1)] *= a[x] + b[x];\n    }\n    for (int x = 0; x < 10; ++x){\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION * totals_comparison[x]){\n            err += 1;\n            break;\n        }\n    }\n\n    for (int x = 0; x < n/10 + 1; ++x){\n        for (passed_indexer = 0, absolute_indexer = x; absolute_indexer < n; passed_indexer++, absolute_indexer += n/10 + 1){\n            passed_ab[passed_indexer] = a[absolute_indexer] + b[absolute_indexer];\n            passed_c[passed_indexer] = c[absolute_indexer];\n        }\n        if (!is_possible(passed_ab, passed_c, passed_indexer, 1)){\n            err++;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_structured_x_plus_expr_assign.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    real_t *totals = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n    real_t *totals_comparison = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n    real_t *passed_ab = (real_t *)malloc(10 * sizeof(real_t));\n    real_t *passed_c = (real_t *)malloc(10 * sizeof(real_t));\n    int passed_indexer;\n    int absolute_indexer;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        totals[x] = 0;\n        totals_comparison[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(totals[0:n/10 + 1]) copyout(c[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic capture\n                {\n                    totals[x%(n/10 + 1)] = totals[x%(n/10 + 1)] + (a[x] * b[x]);\n                    c[x] = totals[x%(n/10 + 1)];\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x%(n/10 + 1)] += a[x] * b[x];\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            err += 1;\n            break;\n        }\n    }\n\n    for (int x = 0; x < n/10 + 1; ++x){\n        for (passed_indexer = 0, absolute_indexer = x; absolute_indexer < n; passed_indexer++, absolute_indexer+= (n/10 + 1)){\n            passed_ab[passed_indexer] = a[absolute_indexer] * b[absolute_indexer];\n            passed_c[passed_indexer] = c[absolute_indexer];\n        }\n        if (!is_possible(passed_ab, passed_c, passed_indexer, 0)){\n            err++;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_structured_x_rshift_expr_assign.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    unsigned int *a = (unsigned int *)malloc(n * sizeof(int));\n    unsigned int *b = (unsigned int *)malloc(n * sizeof(int));\n    unsigned int *c = (unsigned int *)malloc(7 * n * sizeof(int));\n    unsigned int passed = 1<<8;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = 1<<8;\n        for (int y = 0; y < 7; ++y){\n            if ((rand()/(real_t) (RAND_MAX)) > .5){\n                b[x] += 1<<y;\n            }\n        }\n    }\n\n    #pragma acc data copyin(b[0:n]) copy(a[0:n]) copyout(c[0:7*n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc loop\n                for (int y = 0; y < 7; ++y){\n                    c[x * 7 + y] = a[x];\n                    if ((b[x]>>y)%2 == 1){\n                        #pragma acc atomic capture\n                        {\n                            a[x] = a[x] >> 1;\n                            c[x * 7 + y] = a[x];\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 7; ++y){\n            if ((b[x]>>y)%2 == 1){\n                a[x] <<= 1;\n            }\n        }\n        if (a[x] != 1<<8){\n            err += 1;\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (!is_possible(b[x], &(c[x * 7]), 7, passed)){\n            err++;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_bitand_equals.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    int  *a = (int *)malloc(n * sizeof(int));\n    int *totals = (int *)malloc((n/10 + 1) * sizeof(int));\n    int *totals_comparison = (int *)malloc((n/10 + 1) * sizeof(int));\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 8; ++y){\n            if (rand()/(real_t)(RAND_MAX) < .933){ //.933 gets close to a 50/50 distribution for a collescence of 10 values\n                a[x] += 1<<y;\n            }\n        }\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        totals[x] = 0;\n        totals_comparison[x] = 0;\n        for (int y = 0; y < 8; ++y){\n            totals[x] +=  1<<y;\n            totals_comparison[x] += 1<<y;\n        }\n\n    }\n\n    #pragma acc data copyin(a[0:n]) copy(totals[0:n/10 + 1])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic update\n                    totals[x%(n/10 + 1)] &= a[x];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x%(n/10 + 1)] &= a[x];\n    }\n    for (int x = 0; x < 10; ++x){\n        if (totals_comparison[x] != totals[x]) {\n            err += 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_bitor_equals.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    int  *a = (int *)malloc(n * sizeof(int));\n    int *totals = (int *)malloc((n/10 + 1) * sizeof(int));\n    int *totals_comparison = (int *)malloc((n/10 + 1) * sizeof(int));\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 8; ++y){\n            if (rand()/(real_t)(RAND_MAX) > .933){ //.933 gets close to a 50/50 distribution for a collescence of 10 values\n                a[x] += 1<<y;\n            }\n        }\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        totals[x] = 0;\n        totals_comparison[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n]) copy(totals[0:n/10 + 1])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic update\n                    totals[x%(n/10 + 1)] |= a[x];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x%(n/10 + 1)] |= a[x];\n    }\n    for (int x = 0; x < 10; ++x){\n        if (totals_comparison[x] != totals[x]) {\n            err += 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_bitxor_equals.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    int  *a = (int *)malloc(n * sizeof(int));\n    int *totals = (int *)malloc((n/10 + 1) * sizeof(int));\n    int *totals_comparison = (int *)malloc((n/10 + 1) * sizeof(int));\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 8; ++y){\n            if (rand()/(real_t)(RAND_MAX) > .5){\n                a[x] += 1<<y;\n            }\n        }\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        totals[x] = 0;\n        totals_comparison[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n]) copy(totals[0:n/10 + 1])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic update\n                    totals[x%(n/10 + 1)] ^= a[x];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x%(n/10 + 1)] ^= a[x];\n    }\n    for (int x = 0; x < 10; ++x){\n        if (totals_comparison[x] != totals[x]) {\n            err += 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_divided_equals.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *totals = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n    real_t *totals_comparison = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        totals[x] = 1;\n        totals_comparison[x] = 1;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(totals[0:n/10 + 1])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic update\n                    totals[x%(n/10 + 1)] /= (a[x] + b[x]);\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x%(n/10 + 1)] /= a[x] + b[x];\n    }\n    for (int x = 0; x < 10; ++x){\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            err += 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_expr_bitand_x.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    int  *a = (int *)malloc(n * sizeof(int));\n    int *totals = (int *)malloc((n/10 + 1) * sizeof(int));\n    int *totals_comparison = (int *)malloc((n/10 + 1) * sizeof(int));\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 8; ++y){\n            if (rand()/(real_t)(RAND_MAX) < .933){ //.933 gets close to a 50/50 distribution for a collescence of 10 values\n                a[x] += 1<<y;\n            }\n        }\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        totals[x] = 0;\n        totals_comparison[x] = 0;\n        for (int y = 0; y < 8; ++y){\n            totals[x] +=  1<<y;\n            totals_comparison[x] += 1<<y;\n        }\n    }\n\n    #pragma acc data copyin(a[0:n]) copy(totals[0:n/10 + 1])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic update\n                    totals[x%(n/10 + 1)] = a[x] & totals[x%(n/10 + 1)];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x%(n/10 + 1)] &= a[x];\n    }\n    for (int x = 0; x < 10; ++x){\n        if (totals_comparison[x] != totals[x]) {\n            err += 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_expr_bitor_x.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    int  *a = (int *)malloc(n * sizeof(int));\n    int *totals = (int *)malloc((n/10 + 1) * sizeof(int));\n    int *totals_comparison = (int *)malloc((n/10 + 1) * sizeof(int));\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 8; ++y){\n            if (rand()/(real_t)(RAND_MAX) > .933){ //.933 gets close to a 50/50 distribution for a collescence of 10 values\n                a[x] += 1<<y;\n            }\n        }\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        totals[x] = 0;\n        totals_comparison[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n]) copy(totals[0:n/10 + 1])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic update\n                    totals[x%(n/10 + 1)] = totals[x%(n/10 + 1)] | a[x];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x%(n/10 + 1)] |= a[x];\n    }\n    for (int x = 0; x < 10; ++x){\n        if (totals_comparison[x] != totals[x]) {\n            err += 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_expr_bitxor_x.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    int  *a = (int *)malloc(n * sizeof(int));\n    int *totals = (int *)malloc((n/10 + 1) * sizeof(int));\n    int *totals_comparison = (int *)malloc((n/10 + 1) * sizeof(int));\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 8; ++y){\n            if (rand()/(real_t)(RAND_MAX) > .5){\n                a[x] += 1<<y;\n            }\n        }\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        totals[x] = 0;\n        totals_comparison[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n]) copy(totals[0:n/10 + 1])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic update\n                    totals[x%(n/10 + 1)] = a[x] ^ totals[x%(n/10 + 1)];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x%(n/10 + 1)] ^= a[x];\n    }\n    for (int x = 0; x < 10; ++x){\n        if (totals_comparison[x] != totals[x]) {\n            err += 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_expr_divided_x.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *totals = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n    real_t * passed = (real_t *)malloc(10 * sizeof(real_t));\n    int indexer;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        totals[x] = 1;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(totals[0:n/10 + 1])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic update\n                    totals[x%(n/10 + 1)] = (a[x] + b[x]) / totals[x%(n/10 + 1)];\n            }\n        }\n    }\n\n\n    for (int x = 0; x < (n/10 + 1); ++x){\n        indexer = x;\n        while (indexer < n){\n            passed[indexer/(n/10 + 1)] = (a[x] + b[x]);\n            indexer += (n/10 + 1);\n        }\n        if (!(possible_result(passed, 10, 1, totals[x]))){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_expr_lshift_x.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    unsigned int *a = (unsigned int *)malloc(3 * n * sizeof(int));\n    unsigned int *b = (unsigned int *)malloc(n * sizeof(int));\n    int orders[18] = {1, 2, 0, 1, 0, 2, 2, 1, 0, 2, 0, 1, 0, 1, 2, 0, 2, 1};\n    int result;\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 3; ++y){\n            a[x * 3 + y] = (int) (rand() / (unsigned int) (RAND_MAX / 4));\n        }\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:3 * n]) copy(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc loop\n                for (int y = 0; y < 3; ++y){\n                    #pragma acc atomic update\n                        b[x] = a[x * 3 + y] << b[x];\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 6; ++y){\n            result = 0;\n            for (int z = 0; z < 3; ++z){\n                result = a[x * 3 + orders[y * 3 + z]] << result;\n            }\n            if (result == b[x]){\n                break;\n            }\n        }\n        if (result != b[x]){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_expr_minus_x.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *totals = (real_t *)malloc(((n/10) + 1) * sizeof(real_t));\n    int indexer = 0;\n    real_t * passed = (real_t *)malloc(10 * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    for (int x = 0; x < (n/10) + 1; ++x){\n        totals[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n]) copy(totals[0:(n/10) + 1])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic update\n                    totals[x%((int) (n/10) + 1)] = a[x] - totals[x%((int) (n/10) + 1)];\n            }\n        }\n    }\n    for (int x = 0; x < (n/10) + 1; ++x){\n        indexer = x;\n        while (indexer < n){\n            passed[indexer/((int) (n/10) + 1)] = a[indexer];\n            indexer += (n/10) + 1;\n        }\n        if (!(possible_result(passed, 10, 0, totals[x]))){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_expr_multiply_x.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *totals = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n    real_t *totals_comparison = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        totals[x] = 1;\n        totals_comparison[x] = 1;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(totals[0:n/10 + 1])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic update\n                    totals[x%(n/10 + 1)] = (a[x] + b[x]) * totals[x%(n/10 + 1)];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x%(n/10 + 1)] *= a[x] + b[x];\n    }\n    for (int x = 0; x < 10; ++x){\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION * totals_comparison[x]){\n            err += 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_expr_plus_x.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *totals = (real_t *)malloc(10 * sizeof(real_t));\n    real_t *totals_comparison = (real_t *)malloc(10 * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    for (int x = 0; x < 10; ++x){\n        totals[x] = 0;\n        totals_comparison[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(totals[0:10])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc loop\n                for (int y = 0; y < n; ++y){\n                    #pragma acc atomic update\n                        totals[(int) ((a[x] + b[x])/2)] = a[x] * b[x] + totals[(int) ((a[x] + b[x])/2)];\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < n; ++y){\n            totals_comparison[(int) ((a[x] + b[x])/2)] += a[x] * b[x];\n        }\n    }\n    for (int x = 0; x < 10; ++x){\n        if (fabs(totals_comparison[x] - totals[x]) > 10 * PRECISION){\n            err += 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_expr_rshift_x.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    unsigned int *a = (unsigned int *)malloc(3 * n * sizeof(int));\n    unsigned int *b = (unsigned int *)malloc(n * sizeof(int));\n    int orders[18] = {1, 2, 0, 1, 0, 2, 2, 1, 0, 2, 0, 1, 0, 1, 2, 0, 2, 1};\n    int result;\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 3; ++y){\n            a[x * 3 + y] = (int) (rand() / (unsigned int) (RAND_MAX / 4));\n        }\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:3 * n]) copy(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc loop independent\n                for (int y = 0; y < 3; ++y){\n                    #pragma acc atomic update\n                        b[x] = a[x * 3 + y] >> b[x];\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 6; ++y){\n            result = 0;\n            for (int z = 0; z < 3; ++z){\n                result = a[x * 3 + orders[y * 3 + z]] >> result;\n            }\n            if (result == b[x]){\n                break;\n            }\n        }\n        if (result != b[x]){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_lshift_equals.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    unsigned int *a = (unsigned int *)malloc(n * sizeof(int));\n    unsigned int *b = (unsigned int *)malloc(n * sizeof(int));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = 1;\n        for (int y = 0; y < 7; ++y){\n            if ((rand()/(unsigned int) (RAND_MAX)) > .5){\n                b[x] += 1<<y;\n            }\n        }\n    }\n\n    #pragma acc data copyin(b[0:n]) copy(a[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc loop\n                for (int y = 0; y < 7; ++y){\n                    if ((b[x]>>y)%2 == 1){\n                        #pragma acc atomic update\n                            a[x] <<= 1;\n                    }\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 7; ++y){\n            if ((b[x]>>y)%2 == 1){\n                a[x] >>= 1;\n            }\n        }\n        if (a[x] != 1){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_minus_equals.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *totals = (real_t *)malloc(10 * sizeof(real_t));\n    real_t *totals_host = (real_t *)malloc(10 * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    for (int x = 0; x < 10; ++x){\n        totals[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(totals[0:10])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic update\n                    totals[x%10] -= (a[x] + b[x]);\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_host[x%10] = totals_host[x%10] - (a[x] + b[x]);\n    }\n    for (int x = 0; x < 10; ++x){\n        if (fabs(totals_host[x] - totals[x]) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_multiply_equals.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *totals = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n    real_t *totals_comparison = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        totals[x] = 1;\n        totals_comparison[x] = 1;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(totals[0:n/10 + 1])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic update\n                    totals[x%(n/10 + 1)] *= a[x] + b[x];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x%(n/10 + 1)] *= a[x] + b[x];\n    }\n    for (int x = 0; x < 10; ++x){\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION * totals_comparison[x]){\n            err += 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_plus_equals.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *totals = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n    real_t *totals_comparison = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        totals[x] = 0;\n        totals_comparison[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(totals[0:n/10 + 1])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic update\n                    totals[x%(n/10 + 1)] += a[x] * b[x];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x%(n/10 + 1)] += a[x] * b[x];\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        if (fabs(totals_comparison[x] - totals[x]) > (n/10 + 1) * PRECISION){\n            err += 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_postdecrement.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    int *distribution = (int *)malloc(10 * sizeof(int));\n    int *distribution_comparison = (int *)malloc(10 * sizeof(int));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    for (int x = 0; x < 10; ++x){\n        distribution[x] = 0;\n        distribution_comparison[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(distribution[0:10])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic update\n                    distribution[(int) (a[x] * b[x] / 10)]--;\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        distribution_comparison[(int) (a[x]*b[x]/10)]--;\n    }\n    for (int x = 0; x < 10; ++x){\n        if (distribution_comparison[x] != distribution[x]){\n            err += 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_postincrement.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    int *distribution = (int *)malloc(10 * sizeof(int));\n    int *distribution_comparison = (int *)malloc(10 * sizeof(int));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    for (int x = 0; x < 10; ++x){\n        distribution[x] = 0;\n        distribution_comparison[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(distribution[0:10])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc loop\n                for (int y = 0; y < n; ++y){\n                    #pragma acc atomic update\n                        distribution[(int) (a[x]*b[y]/10)]++;\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < n; ++y){\n            distribution_comparison[(int) (a[x]*b[y]/10)]++;\n        }\n    }\n    for (int x = 0; x < 10; ++x){\n        if (distribution_comparison[x] != distribution[x]){\n            err += 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_predecrement.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    int *distribution = (int *)malloc(10 * sizeof(int));\n    int *distribution_comparison = (int *)malloc(10 * sizeof(int));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    for (int x = 0; x < 10; ++x){\n        distribution[x] = 0;\n        distribution_comparison[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(distribution[0:10])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc loop\n                for (int y = 0; y < n; ++y){\n                    #pragma acc atomic update\n                        --distribution[(int) (a[x]*b[y]/10)];\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < n; ++y){\n            distribution_comparison[(int) (a[x]*b[y]/10)]--;\n        }\n    }\n    for (int x = 0; x < 10; ++x){\n        if (distribution_comparison[x] != distribution[x]){\n            err += 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_preincrement.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    int *distribution = (int *)malloc(10 * sizeof(int));\n    int *distribution_comparison = (int *)malloc(10 * sizeof(int));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    for (int x = 0; x < 10; ++x){\n        distribution[x] = 0;\n        distribution_comparison[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(distribution[0:10])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc loop\n                for (int y = 0; y < n; ++y){\n                    #pragma acc atomic update\n                        ++distribution[(int) (a[x]*b[y]/10)];\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < n; ++y){\n            distribution_comparison[(int) (a[x]*b[y]/10)]++;\n        }\n    }\n    for (int x = 0; x < 10; ++x){\n        if (distribution_comparison[x] != distribution[x]){\n            err += 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_rshift_equals.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    unsigned int *a = (unsigned int *)malloc(n * sizeof(int));\n    unsigned int *b = (unsigned int *)malloc(n * sizeof(int));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = 1<<7;\n        for (int y = 0; y < 7; ++y){\n            if ((rand()/(unsigned int) (RAND_MAX)) > .5){\n                b[x] += 1<<y;\n            }\n        }\n    }\n\n    #pragma acc data copyin(b[0:n]) copy(a[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc loop\n                for (int y = 0; y < 7; ++y){\n                    if ((b[x]>>y)%2 == 1){\n                        #pragma acc atomic update\n                            a[x] >>= 1;\n                    }\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 7; ++y){\n            if ((b[x]>>y)%2 == 1){\n                a[x] <<= 1;\n            }\n        }\n        if (a[x] != 1<<7){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_x_bitand_expr.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    int  *a = (int *)malloc(n * sizeof(int));\n    int *totals = (int *)malloc((n/10 + 1) * sizeof(int));\n    int *totals_comparison = (int *)malloc((n/10 + 1) * sizeof(int));\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 8; ++y){\n            if (rand()/(real_t)(RAND_MAX) < .933){ //.933 gets close to a 50/50 distribution for a collescence of 10 values\n                a[x] += 1<<y;\n            }\n        }\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        totals[x] = 0;\n        totals_comparison[x] = 0;\n\t    for (int y = 0; y < 8; ++y){\n            totals[x] +=  1<<y;\n            totals_comparison[x] += 1<<y;\n        }\n    }\n\n    #pragma acc data copyin(a[0:n]) copy(totals[0:n/10 + 1])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic update\n                    totals[x%(n/10 + 1)] = totals[x%(n/10 + 1)] & a[x];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x%(n/10 + 1)] &= a[x];\n    }\n    for (int x = 0; x < 10; ++x){\n        if (totals_comparison[x] != totals[x]) {\n            err += 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_x_bitor_expr.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    int  *a = (int *)malloc(n * sizeof(int));\n    int *totals = (int *)malloc((n/10 + 1) * sizeof(int));\n    int *totals_comparison = (int *)malloc((n/10 + 1) * sizeof(int));\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 8; ++y){\n            if (rand()/(real_t)(RAND_MAX) > .933){ //.933 gets close to a 50/50 distribution for a collescence of 10 values\n                a[x] += 1<<y;\n            }\n        }\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        totals[x] = 0;\n        totals_comparison[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n]) copy(totals[0:n/10 + 1])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic update\n                    totals[x%(n/10 + 1)] = totals[x%(n/10 + 1)] | a[x];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x%(n/10 + 1)] |= a[x];\n    }\n    for (int x = 0; x < 10; ++x){\n        if (totals_comparison[x] != totals[x]) {\n            err += 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_x_bitxor_expr.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    int  *a = (int *)malloc(n * sizeof(int));\n    int *totals = (int *)malloc((n/10 + 1) * sizeof(int));\n    int *totals_comparison = (int *)malloc((n/10 + 1) * sizeof(int));\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 8; ++y){\n            if (rand()/(real_t)(RAND_MAX) > .5){\n                a[x] += 1<<y;\n            }\n        }\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        totals[x] = 0;\n        totals_comparison[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n]) copy(totals[0:n/10 + 1])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic update\n                    totals[x%(n/10 + 1)] =  totals[x%(n/10 + 1)] ^ a[x];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x%(n/10 + 1)] ^= a[x];\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        if (totals_comparison[x] != totals[x]) {\n            err += 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_x_divided_expr.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *totals = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n    real_t *totals_comparison = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        totals[x] = 1;\n        totals_comparison[x] = 1;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(totals[0:n/10 + 1])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic update\n                    totals[x%(n/10 + 1)] = totals[x%(n/10 + 1)] / (a[x] + b[x]);\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x%(n/10 + 1)] /= a[x] + b[x];\n    }\n    for (int x = 0; x < 10; ++x){\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            err += 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_x_lshift_expr.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    unsigned int *a = (unsigned int *)malloc(n * sizeof(int));\n    unsigned int *b = (unsigned int *)malloc(n * sizeof(int));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = 1;\n        for (int y = 0; y < 7; ++y){\n            if ((rand()/(unsigned int) (RAND_MAX)) > .5){\n                b[x] += 1<<y;\n            }\n        }\n    }\n\n    #pragma acc data copyin(b[0:n]) copy(a[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc loop\n                for (int y = 0; y < 7; ++y){\n                    if ((b[x]>>y)%2 == 1){\n                        #pragma acc atomic update\n                            a[x] = a[x] << 1;\n                    }\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 7; ++y){\n            if ((b[x]>>y)%2 == 1){\n                a[x] >>= 1;\n            }\n        }\n        if (a[x] != 1){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_x_minus_expr.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *totals = (real_t *)malloc(10 * sizeof(real_t));\n    real_t *totals_host = (real_t *)malloc(10 * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    for (int x = 0; x < 10; ++x){\n        totals[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(totals[0:10])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic update\n                    totals[x%10] = totals[x%10] - (a[x] + b[x]);\n            }\n        }\n    }\n\n\n    for (int x = 0; x < n; ++x){\n        totals_host[x%10] = totals_host[x%10] - (a[x] + b[x]);\n    }\n    for (int x = 0; x < 10; ++x){\n        if (fabs(totals_host[x] - totals[x]) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_x_multiply_expr.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *totals = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n    real_t *totals_comparison = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        totals[x] = 1;\n        totals_comparison[x] = 1;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(totals[0:n/10 + 1])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic update\n                    totals[x%(n/10 + 1)] = totals[x%(n/10 + 1)] * (a[x] + b[x]);\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x%(n/10 + 1)] *= a[x] + b[x];\n    }\n    for (int x = 0; x < 10; ++x){\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION * totals_comparison[x]){\n            err += 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_x_plus_expr.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *totals = (real_t *)malloc(10 * sizeof(real_t));\n    real_t *totals_comparison = (real_t *)malloc(10 * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    for (int x = 0; x < 10; ++x){\n        totals[x] = 0;\n        totals_comparison[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(totals[0:10])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc loop\n                for (int y = 0; y < n; ++y){\n                    #pragma acc atomic update\n                        totals[(int) ((a[x] + b[x])/2)] = totals[(int) ((a[x] + b[x])/2)] + a[x] * b[x];\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < n; ++y){\n            totals_comparison[(int) ((a[x] + b[x])/2)] += a[x] * b[x];\n        }\n    }\n    for (int x = 0; x < 10; ++x){\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            err += 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_x_rshift_expr.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    unsigned int *a = (unsigned int *)malloc(n * sizeof(int));\n    unsigned int *b = (unsigned int *)malloc(n * sizeof(int));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = 1<<7;\n        for (int y = 0; y < 7; ++y){\n            if ((rand()/(unsigned int) (RAND_MAX)) > .5){\n                b[x] += 1<<y;\n            }\n        }\n    }\n\n    #pragma acc data copyin(b[0:n]) copy(a[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc loop\n                for (int y = 0; y < 7; ++y){\n                    if ((b[x]>>y)%2 == 1){\n                        #pragma acc atomic update\n                            a[x] = a[x] >> 1;\n                    }\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 7; ++y){\n            if ((b[x]>>y)%2 == 1){\n                a[x] <<= 1;\n            }\n        }\n        if (a[x] != 1<<7){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_x_bitand_expr.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    int  *a = (int *)malloc(n * sizeof(int));\n    int *totals = (int *)malloc((n/10 + 1) * sizeof(int));\n    int *totals_comparison = (int *)malloc((n/10 + 1) * sizeof(int));\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 8; ++y){\n            if (rand()/(real_t)(RAND_MAX) < .933){ //.933 gets close to a 50/50 distribution for a collescence of 10 values\n                a[x] += 1<<y;\n            }\n        }\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        totals[x] = 0;\n        totals_comparison[x] = 0;\n        for (int y = 0; y < 8; ++y){\n            totals[x] +=  1<<y;\n            totals_comparison[x] += 1<<y;\n        }\n    }\n\n    #pragma acc data copyin(a[0:n]) copy(totals[0:n/10 + 1])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic\n                    totals[x%(n/10 + 1)] = totals[x%(n/10 + 1)] & a[x];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x%(n/10 + 1)] &= a[x];\n    }\n    for (int x = 0; x < 10; ++x){\n        if (totals_comparison[x] != totals[x]) {\n            err += 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_x_bitor_expr.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    int  *a = (int *)malloc(n * sizeof(int));\n    int *totals = (int *)malloc((n/10 + 1) * sizeof(int));\n    int *totals_comparison = (int *)malloc((n/10 + 1) * sizeof(int));\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 8; ++y){\n            if (rand()/(real_t)(RAND_MAX) > .933){ //.933 gets close to a 50/50 distribution for a collescence of 10 values\n                a[x] += 1<<y;\n            }\n        }\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        totals[x] = 0;\n        totals_comparison[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n]) copy(totals[0:n/10 + 1])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic\n                    totals[x%(n/10 + 1)] = totals[x%(n/10 + 1)] | a[x];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x%(n/10 + 1)] |= a[x];\n    }\n    for (int x = 0; x < 10; ++x){\n        if (totals_comparison[x] != totals[x]) {\n            err += 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_x_bitxor_expr.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    int  *a = (int *)malloc(n * sizeof(int));\n    int *totals = (int *)malloc((n/10 + 1) * sizeof(int));\n    int *totals_comparison = (int *)malloc((n/10 + 1) * sizeof(int));\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 8; ++y){\n            if (rand()/(real_t)(RAND_MAX) > .5){\n                a[x] += 1<<y;\n            }\n        }\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        totals[x] = 0;\n        totals_comparison[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n]) copy(totals[0:n/10 + 1])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic\n                    totals[x%(n/10 + 1)] =  totals[x%(n/10 + 1)] ^ a[x];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x%(n/10 + 1)] ^= a[x];\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        if (totals_comparison[x] != totals[x]) {\n            err += 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_x_divided_expr.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *totals = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n    real_t *totals_comparison = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        totals[x] = 1;\n        totals_comparison[x] = 1;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(totals[0:n/10 + 1])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic\n                    totals[x%(n/10 + 1)] = totals[x%(n/10 + 1)] / (a[x] + b[x]);\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x%(n/10 + 1)] /= a[x] + b[x];\n    }\n    for (int x = 0; x < 10; ++x){\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            err += 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_x_lshift_expr.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    unsigned int *a = (unsigned int *)malloc(n * sizeof(int));\n    unsigned int *b = (unsigned int *)malloc(n * sizeof(int));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = 1;\n        for (int y = 0; y < 7; ++y){\n            if ((rand()/(unsigned int) (RAND_MAX)) > .5){\n                b[x] += 1<<y;\n            }\n        }\n    }\n\n    #pragma acc data copyin(b[0:n]) copy(a[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc loop\n                for (int y = 0; y < 7; ++y){\n                    if ((b[x]>>y)%2 == 1){\n                        #pragma acc atomic\n                            a[x] = a[x] << 1;\n                    }\n                }\n            }\n        }\n    }\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 7; ++y){\n            if ((b[x]>>y)%2 == 1){\n                a[x] >>= 1;\n            }\n        }\n        if (a[x] != 1){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_x_minus_expr.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *totals = (real_t *)malloc(10 * sizeof(real_t));\n    real_t *totals_host = (real_t *)malloc(10 * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    for (int x = 0; x < 10; ++x){\n        totals[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(totals[0:10])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic\n                    totals[x%10] = totals[x%10] - (a[x] + b[x]);\n            }\n        }\n    }\n\n\n    for (int x = 0; x < n; ++x){\n        totals_host[x%10] = totals_host[x%10] - (a[x] + b[x]);\n    }\n    for (int x = 0; x < 10; ++x){\n        if (fabs(totals_host[x] - totals[x]) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_x_multiply_expr.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *totals = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n    real_t *totals_comparison = (real_t *)malloc((n/10 + 1) * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    for (int x = 0; x < n/10 + 1; ++x){\n        totals[x] = 1;\n        totals_comparison[x] = 1;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(totals[0:n/10 + 1])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic\n                    totals[x%(n/10 + 1)] = totals[x%(n/10 + 1)] * (a[x] + b[x]);\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        totals_comparison[x%(n/10 + 1)] *= a[x] + b[x];\n    }\n    for (int x = 0; x < 10; ++x){\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION * totals_comparison[x]){\n            err += 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_x_plus_expr.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *totals = (real_t *)malloc(10 * sizeof(real_t));\n    real_t *totals_comparison = (real_t *)malloc(10 * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    for (int x = 0; x < 10; ++x){\n        totals[x] = 0;\n        totals_comparison[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(totals[0:10])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc loop\n                for (int y = 0; y < n; ++y){\n                    #pragma acc atomic\n                        totals[(int) ((a[x] + b[x])/2)] = totals[(int) ((a[x] + b[x])/2)] + a[x] * b[x];\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < n; ++y){\n            totals_comparison[(int) ((a[x] + b[x])/2)] += a[x] * b[x];\n        }\n    }\n    for (int x = 0; x < 10; ++x){\n        if (fabs(totals_comparison[x] - totals[x]) > PRECISION){\n            err += 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_x_rshift_expr.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    unsigned int *a = (unsigned int *)malloc(n * sizeof(int));\n    unsigned int *b = (unsigned int *)malloc(n * sizeof(int));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = 1<<7;\n        for (int y = 0; y < 7; ++y){\n            if ((rand()/(unsigned int) (RAND_MAX)) > .5){\n                b[x] += 1<<y;\n            }\n        }\n    }\n\n    #pragma acc data copyin(b[0:n]) copy(a[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                #pragma acc loop\n                for (int y = 0; y < 7; ++y){\n                    if ((b[x]>>y)%2 == 1){\n                        #pragma acc atomic\n                            a[x] = a[x] >> 1;\n                    }\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 7; ++y){\n            if ((b[x]>>y)%2 == 1){\n                a[x] <<= 1;\n            }\n        }\n        if (a[x] != 1<<7){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "copy_copyout.c": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\nint test1(){\n    int err = 0;\n    real_t test = 0;\n    #pragma acc parallel loop copy(test) copyout(test) reduction(+:test)\n    for( int x = 0; x <n; ++x){\n        test += 1;\n    }\n\n    if(fabs(test - n) > PRECISION){\n        err++;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for( int x = 0; x < NUM_TEST_CALLS; ++x){\n\tfailed += test1();\n    }\n    if(failed){\n\tfailcode += (1 << 0);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    },
                    "2": {
                        "content": "#ifndef T2\nint test2(){\n    int err = 0;\n    real_t *test = (real_t *)malloc(n * sizeof(real_t));\n\n    for(int x = 0; x < n; ++x){\n        test[x] = 1.0;\n    }\n\n   #pragma acc parallel loop copy(test[0:n]) copyout(test[0:n])\n   for(int x = 0; x < n; ++x){\n        test[x] += 1.0;\n   }\n\n   for(int x = 0; x < n; ++x){\n        if(fabs(test[x] - 2.0) > PRECISION){\n            err++;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for( int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed += test2();\n    }\n    if(failed){\n        failcode += (1 << 1);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    }
                }
            },
            "copyin_copyout.c": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\nint test1(){\n    int err = 0;\n    real_t test = 0;\n    #pragma acc parallel loop copyin(test) copyout(test) reduction(+:test)\n    for( int x = 0; x <n; ++x){\n        test += 1;\n    }\n\n    if(fabs(test - n) > PRECISION){\n        err++;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for( int x = 0; x < NUM_TEST_CALLS; ++x){\n\tfailed += test1();\n    }\n    if(failed){\n\tfailcode += (1 << 0);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    },
                    "2": {
                        "content": "#ifndef T2\nint test2(){\n    int err = 0;\n    real_t *test = (real_t *)malloc(n * sizeof(real_t));\n\n    for(int x = 0; x < n; ++x){\n        test[x] = 1.0;\n    }\n\n   #pragma acc parallel loop copyin(test[0:n]) copyout(test[0:n])\n   for(int x = 0; x < n; ++x){\n        test[x] += 1.0;\n   }\n\n   for(int x = 0; x < n; ++x){\n        if(fabs(test[x] - 2.0) > PRECISION){\n            err++;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for( int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed += test2();\n    }\n    if(failed){\n        failcode += (1 << 1);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    }
                }
            },
            "data_async.c": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0.0;\n    }\n\n    #pragma acc data copy(a[0:n], b[0:n], c[0:n]) async(1)\n    {\n        #pragma acc parallel \n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                c[x] += a[x] + b[x];\n            }\n        }\n    }\n\n    #pragma acc data copy(a[0:n], b[0:n], c[0:n]) async(1)\n    {\n        #pragma acc parallel \n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                c[x] += a[x] + b[x];\n            }\n        }\n    }\n\n    #pragma acc wait(1)\n    \n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (2 * (a[x] + b[x]))) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    },
                    "2": {
                        "content": "#ifndef T2\nint test2(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0.0;\n    }\n\n    #pragma acc data copy(a[0:n], b[0:n], c[0:n]) async(0)\n    {\n        #pragma acc parallel loop async(1) wait(0)\n            for (int x = 0; x < n; ++x){\n                c[x] += a[x] + b[x];\n            }\n\n    #pragma acc wait(1) async(0)\n    }\n\n    #pragma acc wait(0)\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    }
                }
            },
            "data_copy_no_lower_bound.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:data,data-region,construct-independent,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(c[:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                c[x] += a[x] + b[x];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "data",
                            "data-region",
                            "construct-independent"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "data_copyin_no_lower_bound.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:data,data-region,construct-independent,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a[:n], b[:n]) copyout(c[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                c[x] = a[x] + b[x];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "data",
                            "data-region",
                            "construct-independent"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "data_copyout_no_lower_bound.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:data,data-region,construct-independent,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copyout(c[:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                c[x] = a[x] + b[x];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "data",
                            "data-region",
                            "construct-independent"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "data_copyout_reference_counts.c": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:data,data-region,reference-counting,devonly,construct-independent,V:2.5-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n    int * devtest = (int *)malloc(sizeof(int));\n    devtest[0] = 1;\n    #pragma acc enter data copyin(devtest[0:1])\n    #pragma acc parallel present(devtest[0:1])\n    {\n      devtest[0] = 0;\n    }\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0.0;\n    }\n\n\n    if (devtest[0] == 1) {\n        #pragma acc data copyin(c[0:n])\n        {\n            #pragma acc data copyin(a[0:n], b[0:n]) copyout(c[0:n])\n            {\n                #pragma acc parallel\n                {\n                    #pragma acc loop\n                    for (int x = 0; x < n; ++x){\n                        c[x] += a[x] + b[x];\n                    }\n                }\n            }\n            for (int x = 0; x < n; ++x){\n                if (fabs(c[x]) > PRECISION){\n                    err += 1;\n                    break;\n                }\n            }\n        }\n        for (int x = 0; x < n; ++x){\n            if (fabs(c[x]) > PRECISION){\n                err += 1;\n                break;\n            }\n        }\n\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "data",
                            "data-region",
                            "reference-counting",
                            "devonly",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:data,data-region,reference-counting,construct-independent,V:2.5-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n    int * devtest = (int *)malloc(sizeof(int));\n    devtest[0] = 1;\n    #pragma acc enter data copyin(devtest[0:1])\n    #pragma acc parallel present(devtest[0:1])\n    {\n      devtest[0] = 0;\n    }\n\n    for (int x = 0; x < n; ++x){\n      a[x] = rand() / (real_t)(RAND_MAX / 10);\n      b[x] = rand() / (real_t)(RAND_MAX / 10);\n      c[x] = 0.0;\n    }\n\n    #pragma acc enter data copyin(c[0:n])\n    #pragma acc data copyin(a[0:n], b[0:n]) copyout(c[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                c[x] += a[x] + b[x];\n            }\n        }\n    }\n    if (devtest[0] == 1){\n        for (int x = 0; x < n; ++x){\n            if (fabs(c[x]) > PRECISION){\n                err += 1;\n                break;\n            }\n        }\n    }\n    #pragma acc exit data copyout(c[0:n])\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION){\n            err += 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "data",
                            "data-region",
                            "reference-counting",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n//T3:data,data-region,construct-independent,V:2.5-2.7\nint test3(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n    int * devtest = (int *)malloc(sizeof(int));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0.0;\n    }\n\n    #pragma acc enter data copyin(c[0:n])\n    #pragma acc data copyin(a[0:n], b[0:n]) copyout(c[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                c[x] += a[x] + b[x];\n            }\n        }\n        #pragma acc exit data delete(c[0:n])\n    }\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION){\n            err += 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T3\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test3();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 2);\n    }\n#endif\n",
                        "tags": [
                            "data",
                            "data-region",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "data_copyout_zero.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:data,executable-data,data-region,V:3.0-3.2\nint test1(){\n\n    int err = 0;\n    srand(SEED);\n\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n]) copyout(zero: b[0:n])\n    {\n      #pragma acc parallel\n      {\n        #pragma acc loop\n        {\n          for (int x = 0; x < n; ++x){\n            b[x] += a[x];\n          }\n        }\n      }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if(fabs(a[x] - b[x]) > PRECISION){\n                err += 1;\n                break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "data",
                            "executable-data",
                            "data-region"
                        ],
                        "versions": []
                    }
                }
            },
            "data_create.c": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:data,data-region,construct-independent,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = 0.0;\n        c[x] = 0.0;\n    }\n\n    #pragma acc data create(b[0:n])\n    {\n        #pragma acc data copyin(a[0:n])\n        {\n            #pragma acc parallel\n            {\n                #pragma acc loop\n                for (int x = 0; x < n; ++x){\n                    b[x] = a[x];\n                }\n            }\n        }\n        #pragma acc data copyout(c[0:n])\n        {\n            #pragma acc parallel\n            {\n                #pragma acc loop\n                for (int x = 0; x < n; ++x){\n                    c[x] = b[x];\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - a[x]) > PRECISION) {\n            err += 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "data",
                            "data-region",
                            "construct-independent"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:data,data-region,construct-independent,compatibility-features,V:1.0-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = 0.0;\n        c[x] = 0.0;\n    }\n\n    #pragma acc data present_or_create(b[0:n])\n    {\n        #pragma acc data copyin(a[0:n])\n        {\n            #pragma acc parallel\n            {\n                #pragma acc loop\n                for (int x = 0; x < n; ++x){\n                    b[x] = a[x];\n                }\n            }\n        }\n        #pragma acc data copyout(c[0:n])\n        {\n            #pragma acc parallel\n            {\n                #pragma acc loop\n                for (int x = 0; x < n; ++x){\n                    c[x] = a[x];\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - a[x]) > PRECISION) {\n            err += 2;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "data",
                            "data-region",
                            "construct-independent",
                            "compatibility-features"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n//T3:data,data-region,construct-independent,compatibility-features,V:1.0-2.7\nint test3(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = 0.0;\n        c[x] = 0.0;\n    }\n\n    #pragma acc data pcreate(b[0:n])\n    {\n        #pragma acc data copyin(a[0:n])\n        {\n            #pragma acc parallel\n            {\n                #pragma acc loop\n                for (int x = 0; x < n; ++x){\n                    b[x] = a[x];\n                }\n            }\n        }\n        #pragma acc data copyout(c[0:n])\n        {\n            #pragma acc parallel\n            {\n                #pragma acc loop\n                for (int x = 0; x < n; ++x){\n                    c[x] = b[x];\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - a[x]) > PRECISION){\n            err += 4;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T3\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test3();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 2);\n    }\n#endif\n",
                        "tags": [
                            "data",
                            "data-region",
                            "construct-independent",
                            "compatibility-features"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "data_create_no_lower_bound.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:data,data-region,construct-independent,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n    real_t * d = (real_t *)malloc(n * sizeof(real_t));\n    real_t * e = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0.0;\n        d[x] = rand() / (real_t)(RAND_MAX / 10);\n        e[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n], d[0:n]) create(c[:n]) copyout(e[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                c[x] = a[x] + b[x];\n            }\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                e[x] = c[x] + d[x];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(e[x] - (a[x] + b[x] + d[x])) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "data",
                            "data-region",
                            "construct-independent"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "data_create_zero.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:data,executable-data,data-region,V:3.0-3.2\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = 1;\n    }\n\n    #pragma acc data copyin(a[0:n]) create(zero: b[0:n]) copyout(b[0:n])\n    {\n      #pragma acc parallel\n      {\n        #pragma acc loop\n        {\n          for (int x = 0; x < n; ++x){\n            b[x] += a[x];\n          }\n        }\n      }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(a[x] - b[x]) > PRECISION){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "data",
                            "executable-data",
                            "data-region"
                        ],
                        "versions": []
                    }
                }
            },
            "data_present_no_lower_bound.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:data,data-region,construct-independent,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0.0;\n    }\n\n    #pragma acc enter data copyin(c[0:n])\n    #pragma acc data copyin(a[0:n], b[0:n]) present(c[:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                c[x] += a[x] + b[x];\n            }\n        }\n    }\n    #pragma acc exit data copyout(c[0:n])\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "data",
                            "data-region",
                            "construct-independent"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "data_wait.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0.0;\n    }\n\n    #pragma acc data copy(a[0:n], b[0:n], c[0:n]) async(0)\n    {\n        #pragma acc parallel loop async(1) wait(0)\n        for (int x = 0; x < n; ++x){\n            c[x] = a[x] + b[x];\n        }\n\n    #pragma acc wait(1) async(0)\n    }\n\n    #pragma acc data copy(a[0:n], b[0:n], c[0:n]) wait(0)\n    {\n        #pragma acc parallel loop\n        for (int x = 0; x < n; ++x){\n            c[x] += c[x];\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (2 * (a[x] + b[x]))) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1 \n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    }
                }
            },
            "data_with_changing_subscript.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:data,data-region,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    int length = n;\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a[0:length], b[0:length]) copyout(c[0:length])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < length; ++x){\n                c[x] = a[x] + b[x];\n            }\n        }\n        length = 1;\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "data",
                            "data-region",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "data_with_structs.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:data,data-region,construct-independent,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    multi_item * a = (multi_item *)malloc(n * sizeof(multi_item));\n\n    for (int x = 0; x < n; ++x){\n        a[x].a = rand() / (real_t)(RAND_MAX / 10);\n        a[x].b = rand() / (real_t)(RAND_MAX / 10);\n        a[x].c = rand() / (real_t)(RAND_MAX / 10);\n    }\n\n    #pragma acc data copy(a[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                a[x].c = a[x].a + a[x].b;\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(a[x].c - (a[x].a + a[x].b)) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "data",
                            "data-region",
                            "construct-independent"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "declare_copyin.c": {
                "num tests": 5,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:declare,construct-independent,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    int mult = 2;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = 0;\n    }\n    #pragma acc data copyin(a[0:n]) copyout(b[0:n]) present(fixed_size_array)\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                b[x] = a[x] + fixed_size_array[x%10];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(b[x] - (a[x] + fixed_size_array[x%10])) > PRECISION){\n            err += 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "declare",
                            "construct-independent"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:declare,construct-independent,V:1.0-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    int mult = 2;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n]) copyout(b[0:n]) present(scalar)\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                b[x] = a[x] + scalar;\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(b[x] - (a[x] + scalar)) > PRECISION){\n            err += 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "declare",
                            "construct-independent"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n//T3:declare,construct-independent,V:2.0-2.7\nint test3(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    int mult = 2;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = a[x];\n    }\n\n    #pragma acc data copy(a[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < 1; ++x){\n                extern_multiplyData_copyin(a, n);\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(a[x] - (b[x] * 2)) > PRECISION){\n            err += 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T3\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test3();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 2);\n    }\n#endif\n",
                        "tags": [
                            "declare",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "4": {
                        "content": "#ifndef T4\n//T4:declare,construct-independent,V:2.0-2.7\nint test4(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    int mult = 2;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = a[x];\n    }\n\n    #pragma acc data copy(a[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < 1; ++x){\n                multiplyData(a);\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(a[x] - (b[x] * 2)) > PRECISION){\n            err += 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T4\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test4();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 3);\n    }\n#endif\n",
                        "tags": [
                            "declare",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "5": {
                        "content": "#ifndef T5\n//T5:declare,construct-independent,attach,V:2.6-2.7\nint test5(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    int mult = 2;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = a[x];\n    }\n\n    datapointer = a;\n    #pragma acc enter data copyin(a[0:n]) attach(datapointer)\n    #pragma acc data present(datapointer[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                datapointer[x] = datapointer[x] * 2;\n            }\n        }\n    }\n    #pragma acc exit data copyout(a[0:n])\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(a[x] - (b[x] * 2)) > PRECISION){\n            err += 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T5\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test5();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 4);\n    }\n#endif\n",
                        "tags": [
                            "declare",
                            "construct-independent",
                            "attach"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "declare_create.c": {
                "num tests": 5,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:declare,construct-independent,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    int mult = 2;\n    #pragma acc update device(n)\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n]) copyout(b[0:n]) present(fixed_size_array)\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < 10; ++x){\n                fixed_size_array[x] = x*x;\n            }\n        }\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                b[x] = a[x] + fixed_size_array[x%10];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(b[x] - (a[x] + (x%10) * (x%10))) > PRECISION){\n            err += 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "declare",
                            "construct-independent"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:declare,construct-independent,V:1.0-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    int mult = 2;\n    #pragma acc update device(n)\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = 0;\n    }\n\n    scalar = 10;\n    #pragma acc update device(scalar)\n    #pragma acc data copyin(a[0:n]) copyout(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                b[x] = a[x] + scalar;\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(b[x] - (a[x] + 10)) > PRECISION){\n            err += 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "declare",
                            "construct-independent"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n//T3:declare,construct-independent,V:1.0-2.7\nint test3(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    int mult = 2;\n    #pragma acc update device(n)\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = a[x];\n    }\n\n    #pragma acc update device(mult_create)\n    #pragma acc data copy(a[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < 1; ++x){\n                extern_multiplyData_create(a, n);\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(a[x] - (b[x] * 2)) > PRECISION){\n            err += 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T3\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test3();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 2);\n    }\n#endif\n",
                        "tags": [
                            "declare",
                            "construct-independent"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "4": {
                        "content": "#ifndef T4\n//T4:declare,construct-independent,V:2.0-2.7\nint test4(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    int mult = 2;\n    #pragma acc update device(n)\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = a[x];\n    }\n    #pragma acc data copy(a[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < 1; ++x){\n                multiplyData(a);\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(a[x] - (b[x] * 2)) > PRECISION){\n            err += 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T4\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test4();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 3);\n    }\n#endif\n",
                        "tags": [
                            "declare",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "5": {
                        "content": "#ifndef T5\n//T5:declare,construct-independent,V:2.6-2.7\nint test5(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    int mult = 2;\n    #pragma acc update device(n)\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = a[x];\n    }\n    datapointer = a;\n\n    #pragma acc data copyin(a[0:n]) attach(datapointer)\n    {\n        #pragma acc parallel present(datapointer[0:n])\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                datapointer[x] = datapointer[x] * 2;\n            }\n        }\n    }\n\n    #pragma acc exit data copyout(a[0:n])\n    for (int x = 0; x < n; ++x){\n        if (fabs(a[x] - (b[x] * 2)) > PRECISION){\n            err += 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T5\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test5();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 4);\n    }\n#endif\n",
                        "tags": [
                            "declare",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "declare_device_resident.c": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:declare,construct-independent,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    int mult = 2;\n\n    #pragma acc parallel\n    {\n      mult_device_resident = 2;\n      scalar = 10;\n      for (int x = 0; x < 10; ++x){\n        fixed_size_array[x] = x*x;\n      }\n    }\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n]) copyout(b[0:n]) present(fixed_size_array)\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < 10; ++x){\n                fixed_size_array[x] = x*x;\n            }\n        }\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                b[x] = a[x] + fixed_size_array[x%10];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(b[x] - (a[x] + (x%10) * (x%10))) > PRECISION){\n            err += 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "declare",
                            "construct-independent"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:declare,construct-independent,V:1.0-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    int mult = 2;\n\n    #pragma acc parallel\n    {\n      mult_device_resident = 2;\n      scalar = 10;\n      for (int x = 0; x < 10; ++x){\n        fixed_size_array[x] = x*x;\n      }\n    }\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n]) copyout(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                b[x] = a[x] + scalar;\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(b[x] - (a[x] + 10)) > PRECISION){\n            err += 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "declare",
                            "construct-independent"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n//T3:declare,construct-independent,V:2.0-2.7\nint test3(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    int mult = 2;\n\n    #pragma acc parallel\n    {\n      mult_device_resident = 2;\n      scalar = 10;\n      for (int x = 0; x < 10; ++x){\n        fixed_size_array[x] = x*x;\n      }\n    }\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = a[x];\n    }\n\n    #pragma acc data copy(a[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < 1; ++x){\n                extern_multiplyData_device_resident(a, n);\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(a[x] - (b[x] * 2)) > PRECISION){\n            err += 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T3\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test3();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 2);\n    }\n#endif\n",
                        "tags": [
                            "declare",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "declare_function_scope_copy.c": {
                "num tests": 4,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:declare,construct-independent,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t ** a = (real_t **)malloc(n * sizeof(real_t));\n    real_t ** b = (real_t **)malloc(n * sizeof(real_t));\n    real_t ** c = (real_t **)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = (real_t *)malloc(n * sizeof(real_t));\n        b[x] = (real_t *)malloc(n * sizeof(real_t));\n        c[x] = (real_t *)malloc(n * sizeof(real_t));\n        for (int y = 0; y < n; ++y){\n            a[x][y] = rand() / (real_t)(RAND_MAX / 10);\n            b[x][y] = rand() / (real_t)(RAND_MAX / 10);\n            c[x][y] = 1;\n        }\n    }\n    #pragma acc data copyin(a[0:n][0:n], b[0:n][0:n])\n    {\n        for (int x = 0; x < n; ++x){\n            copyin_copyout_test(a[x], b[x], c[x]);\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < n; ++y){\n            if (fabs(c[x][y] - (1 + a[x][y] + b[x][y])) > PRECISION){\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "declare",
                            "construct-independent"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:declare,construct-independent,reference-counting,V:2.5-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    real_t ** a = (real_t **)malloc(n * sizeof(real_t));\n    real_t ** b = (real_t **)malloc(n * sizeof(real_t));\n    real_t ** c = (real_t **)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < n; ++y){\n            a[x][y] = rand() / (real_t)(RAND_MAX / 10);\n            b[x][y] = rand() / (real_t)(RAND_MAX / 10);\n            c[x][y] = 2;\n        }\n    }\n\n    #pragma acc data copyin(a[0:n][0:n], b[0:n][0:n])\n    {\n        for (int x = 0; x < n; ++x){\n            #pragma acc data copy(c[x:1][0:n])\n            {\n                copyin_copyout_test(a[x], b[x], c[x]);\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < n; ++y){\n            if (fabs(c[x][y] - (2 + a[x][y] + b[x][y])) > PRECISION){\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "declare",
                            "construct-independent",
                            "reference-counting"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n//T3:declare,construct-independent,devonly,reference-counting,V:2.5-2.7\nint test3(){\n    int err = 0;\n    srand(SEED);\n    real_t ** a = (real_t **)malloc(n * sizeof(real_t));\n    real_t ** b = (real_t **)malloc(n * sizeof(real_t));\n    real_t ** c = (real_t **)malloc(n * sizeof(real_t));\n    int *devtest = (int *)malloc(sizeof(int));\n\n    devtest[0] = 1;\n    #pragma acc enter data copyin(devtest[0:1])\n    #pragma acc parallel present(devtest[0:1])\n    {\n        devtest[0] = 0;\n    }\n\n    if (devtest[0] == 1){\n        for (int x = 0; x < n; ++x){\n            for (int y = 0; y < n; ++y){\n                a[x][y] = rand() / (real_t)(RAND_MAX / 10);\n                b[x][y] = rand() / (real_t)(RAND_MAX / 10);\n                c[x][y] = 3;\n            }\n        }\n\n        #pragma acc data copyin(a[0:n][0:n], b[0:n][0:n])\n        {\n            for (int x = 0; x < n; ++x){\n                #pragma acc data copyin(c[x:1][0:n])\n                {\n                    copyin_copyout_test(a[x], b[x], c[x]);\n                    for (int y = 0; y < n; ++y){\n                        if (fabs(c[x][y] - 3) > PRECISION){\n                            err += 1;\n                        }\n                    }\n                }\n                for (int y = 0; y < n; ++y){\n                    if (fabs(c[x][y] - 3) > PRECISION){\n                        err += 1;\n                    }\n                }\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T3\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test3();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 2);\n    }\n#endif\n",
                        "tags": [
                            "declare",
                            "construct-independent",
                            "devonly",
                            "reference-counting"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "4": {
                        "content": "#ifndef T4\n//T4:declare,construct-independent,devonly,reference-counting,V:2.5-2.7\nint test4(){\n    int err = 0;\n    srand(SEED);\n    real_t ** a = (real_t **)malloc(n * sizeof(real_t));\n    real_t ** b = (real_t **)malloc(n * sizeof(real_t));\n    real_t ** c = (real_t **)malloc(n * sizeof(real_t));\n    int *devtest = (int *)malloc(sizeof(int));\n\n    devtest[0] = 1;\n    #pragma acc enter data copyin(devtest[0:1])\n    #pragma acc parallel present(devtest[0:1])\n    {\n        devtest[0] = 0;\n    }\n\n    if (devtest[1] == 1){\n        for (int x = 0; x < n; ++x){\n            for (int y = 0; y < n; ++y){\n                a[x][y] = rand() / (real_t)(RAND_MAX / 10);\n                b[x][y] = rand() / (real_t)(RAND_MAX / 10);\n                c[x][y] = 4;\n            }\n        }\n\n        #pragma acc data copyin(a[0:n][0:n], b[0:n][0:n])\n        {\n            for (int x = 0; x < n; ++x){\n                #pragma acc data copy(c[x:1][0:n])\n                {\n                    copyin_copyout_test(a[x], b[x], c[x]);\n                    for (int y = 0; y < n; ++y){\n                        if (fabs(c[x][y] - 4) > PRECISION){\n                            err += 1;\n                        }\n                    }\n                }\n                for (int y = 0; y < n; ++y){\n                    if (fabs(c[x][y] - (4 + a[x][y] + b[x][y])) > PRECISION){\n                        err += 1;\n                    }\n                }\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T4\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test4();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 3);\n    }\n#endif\n",
                        "tags": [
                            "declare",
                            "construct-independent",
                            "devonly",
                            "reference-counting"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "declare_function_scope_copyin.c": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:declare,construct-independent,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t ** a = (real_t **)malloc(n * sizeof(real_t));\n    real_t ** b = (real_t **)malloc(n * sizeof(real_t));\n    real_t ** c = (real_t **)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = (real_t *)malloc(n * sizeof(real_t));\n        b[x] = (real_t *)malloc(n * sizeof(real_t));\n        c[x] = (real_t *)malloc(n * sizeof(real_t));\n        for (int y = 0; y < n; ++y){\n            a[x][y] = rand() / (real_t)(RAND_MAX / 10);\n            b[x][y] = rand() / (real_t)(RAND_MAX / 10);\n            c[x][y] = 1;\n        }\n    }\n\n    #pragma acc data copy(c[0:n][0:n])\n    {\n        for (int x = 0; x < n; ++x){\n            function_test(a[x], b[x], c[x]);\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < n; ++y){\n            if (fabs(c[x][y] - (1 + a[x][y] + b[x][y])) > PRECISION){\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "declare",
                            "construct-independent"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:declare,construct-independent,devonly,reference-counting,V:2.5-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    real_t ** a = (real_t **)malloc(n * sizeof(real_t));\n    real_t ** b = (real_t **)malloc(n * sizeof(real_t));\n    real_t ** c = (real_t **)malloc(n * sizeof(real_t));\n    int * devtest = (int *)malloc(sizeof(int));\n    real_t ** a_host = (real_t **)malloc(n * sizeof(real_t *));\n    real_t ** b_host = (real_t **)malloc(n * sizeof(real_t *));\n\n    devtest[0] = 1;\n    #pragma acc enter data copyin(devtest[0:1])\n    #pragma acc parallel present(devtest[0:1])\n    {\n        devtest[0] = 0;\n    }\n\n    if (devtest[0] == 1){\n        for (int x = 0; x < n; ++x){\n            a_host[x] = (real_t *)malloc(n * sizeof(real_t));\n            b_host[x] = (real_t *)malloc(n * sizeof(real_t));\n            for (int y = 0; y < n; ++y){\n                a[x][y] = rand() / (real_t)(RAND_MAX / 10);\n                a_host[x][y] = a[x][y];\n                b[x][y] = rand() / (real_t)(RAND_MAX / 10);\n                b_host[x][y] = b[x][y];\n                c[x][y] = 0;\n            }\n        }\n\n        #pragma acc data copy(a[0:n][0:n], b[0:n][0:n], c[0:n][0:n])\n        {\n            for (int x = 0; x < n; ++x){\n                function_test_dev_only(a[x], b[x], c[x]);\n            }\n        }\n\n        for (int x = 0; x < n; ++x){\n            for (int y = 0; y < n; ++y){\n                if (fabs(a[x][y] + 1) > PRECISION){\n                    err += 1;\n                }\n                if (fabs(b[x][y] + 1) > PRECISION){\n                    err += 1;\n                }\n                if (fabs(c[x][y] - (a_host[x][y] + b_host[x][y])) > PRECISION){\n                    err += 1;\n                }\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "declare",
                            "construct-independent",
                            "devonly",
                            "reference-counting"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n//T3:declare,construct-independent,devonly,V:2.0-2.7\nint test3(){\n    int err = 0;\n    srand(SEED);\n    real_t ** a = (real_t **)malloc(n * sizeof(real_t));\n    real_t ** b = (real_t **)malloc(n * sizeof(real_t));\n    real_t ** c = (real_t **)malloc(n * sizeof(real_t));\n    int * devtest = (int *)malloc(sizeof(int));\n    real_t ** a_host = (real_t **)malloc(n * sizeof(real_t *));\n    real_t ** b_host = (real_t **)malloc(n * sizeof(real_t *));\n\n    devtest[0] = 1;\n    #pragma acc enter data copyin(devtest[0:1])\n    #pragma acc parallel present(devtest[0:1])\n    {\n        devtest[0] = 0;\n    }\n\n    if (devtest[0] == 1){\n        for (int x = 0; x < n; ++x){\n            for (int y = 0; y < n; ++y){\n                a[x][y] = rand() / (real_t)(RAND_MAX / 10);\n                a_host[x][y] = a[x][y];\n                b[x][y] = rand() / (real_t)(RAND_MAX / 10);\n                b_host[x][y] = b[x][y];\n                c[x][y] = 1;\n            }\n        }\n\n        #pragma acc data copy(c[0:n][0:n])\n        {\n            for (int x = 0; x < n; ++x){\n                function_test_dev_only(a[x], b[x], c[x]);\n            }\n        }\n\n        for (int x = 0; x < n; ++x){\n            for (int y = 0; y < n; ++y){\n                if (fabs(a[x][y] - a_host[x][y]) > PRECISION){\n                    err += 1;\n                }\n                if (fabs(b[x][y] - b_host[x][y]) > PRECISION){\n                    err += 1;\n                }\n                if (fabs(c[x][y] - (1 + a[x][y] + b[x][y])) > PRECISION){\n                    err += 1;\n                }\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T3\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test3();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 2);\n    }\n#endif\n",
                        "tags": [
                            "declare",
                            "construct-independent",
                            "devonly"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "declare_function_scope_copyout.c": {
                "num tests": 4,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:declare,construct-independent,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t ** a = (real_t **)malloc(n * sizeof(real_t));\n    real_t ** b = (real_t **)malloc(n * sizeof(real_t));\n    real_t ** c = (real_t **)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = (real_t *)malloc(n * sizeof(real_t));\n        b[x] = (real_t *)malloc(n * sizeof(real_t));\n        c[x] = (real_t *)malloc(n * sizeof(real_t));\n        for (int y = 0; y < n; ++y){\n            a[x][y] = rand() / (real_t)(RAND_MAX / 10);\n            b[x][y] = rand() / (real_t)(RAND_MAX / 10);\n            c[x][y] = 1;\n        }\n    }\n    #pragma acc data copyin(a[0:n][0:n], b[0:n][0:n])\n    {\n        for (int x = 0; x < n; ++x){\n            copyout_test(a[x], b[x], c[x]);\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < n; ++y){\n            if (fabs(c[x][y] - (a[x][y] + b[x][y])) > PRECISION){\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "declare",
                            "construct-independent"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:declare,construct-independent,reference-counting,V:2.5-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    real_t ** a = (real_t **)malloc(n * sizeof(real_t));\n    real_t ** b = (real_t **)malloc(n * sizeof(real_t));\n    real_t ** c = (real_t **)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < n; ++y){\n            a[x][y] = rand() / (real_t)(RAND_MAX / 10);\n            b[x][y] = rand() / (real_t)(RAND_MAX / 10);\n            c[x][y] = 2;\n        }\n    }\n\n    #pragma acc data copyin(a[0:n][0:n], b[0:n][0:n])\n    {\n        for (int x = 0; x < n; ++x){\n            #pragma acc data copy(c[x:1][0:n])\n            {\n                copyout_test(a[x], b[x], c[x]);\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < n; ++y){\n            if (fabs(c[x][y] - (a[x][y] + b[x][y])) > PRECISION){\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "declare",
                            "construct-independent",
                            "reference-counting"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n//T3:declare,construct-independent,devonly,reference-counting,V:2.5-2.7\nint test3(){\n    int err = 0;\n    srand(SEED);\n    real_t ** a = (real_t **)malloc(n * sizeof(real_t));\n    real_t ** b = (real_t **)malloc(n * sizeof(real_t));\n    real_t ** c = (real_t **)malloc(n * sizeof(real_t));\n    int *devtest = (int *)malloc(sizeof(int));\n\n    devtest[0] = 1;\n    #pragma acc enter data copyin(devtest[0:1])\n    #pragma acc parallel present(devtest[0:1])\n    {\n        devtest[0] = 0;\n    }\n\n    if (devtest[0] == 1){\n        for (int x = 0; x < n; ++x){\n            for (int y = 0; y < n; ++y){\n                a[x][y] = rand() / (real_t)(RAND_MAX / 10);\n                b[x][y] = rand() / (real_t)(RAND_MAX / 10);\n                c[x][y] = 3;\n            }\n        }\n\n        #pragma acc data copyin(a[0:n][0:n], b[0:n][0:n])\n        {\n            for (int x = 0; x < n; ++x){\n                #pragma acc data copyin(c[x:1][0:n])\n                {\n                    copyout_test(a[x], b[x], c[x]);\n                    for (int y = 0; y < n; ++y){\n                        if (fabs(c[x][y] - 3) > PRECISION){\n                            err += 1;\n                        }\n                    }\n                }\n                for (int y = 0; y < n; ++y){\n                    if (fabs(c[x][y] - 3) > PRECISION){\n                        err += 1;\n                    }\n                }\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T3\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test3();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 2);\n    }\n#endif\n",
                        "tags": [
                            "declare",
                            "construct-independent",
                            "devonly",
                            "reference-counting"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "4": {
                        "content": "#ifndef T4\n//T4:declare,construct-independent,devonly,reference-counting,V:2.5-2.7\nint test4(){\n    int err = 0;\n    srand(SEED);\n    real_t ** a = (real_t **)malloc(n * sizeof(real_t));\n    real_t ** b = (real_t **)malloc(n * sizeof(real_t));\n    real_t ** c = (real_t **)malloc(n * sizeof(real_t));\n    int *devtest = (int *)malloc(sizeof(int));\n\n    devtest[0] = 1;\n    #pragma acc enter data copyin(devtest[0:1])\n    #pragma acc parallel present(devtest[0:1])\n    {\n        devtest[0] = 0;\n    }\n\n    if (devtest[0] == 1){\n        for (int x = 0; x < n; ++x){\n            for (int y = 0; y < n; ++y){\n                a[x][y] = rand() / (real_t)(RAND_MAX / 10);\n                b[x][y] = rand() / (real_t)(RAND_MAX / 10);\n                c[x][y] = 4;\n            }\n        }\n\n        #pragma acc data copyin(a[0:n][0:n], b[0:n][0:n])\n        {\n            for (int x = 0; x < n; ++x){\n                #pragma acc data copy(c[x:1][0:n])\n                {\n                    copyout_test(a[x], b[x], c[x]);\n                    for (int y = 0; y < n; ++y){\n                        if (fabs(c[x][y] - 4) > PRECISION){\n                            err += 1;\n                        }\n                    }\n                }\n                for (int y = 0; y < n; ++y){\n                    if (fabs(c[x][y] - (a[x][y] + b[x][y])) > PRECISION){\n                        err += 1;\n                    }\n                }\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T4\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test4();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 3);\n    }\n#endif\n",
                        "tags": [
                            "declare",
                            "construct-independent",
                            "devonly",
                            "reference-counting"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "declare_function_scope_create.c": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:declare,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t ** a = (real_t **)malloc(n * sizeof(real_t));\n    real_t ** b = (real_t **)malloc(n * sizeof(real_t));\n    real_t ** c = (real_t **)malloc(n * sizeof(real_t));\n    real_t ** d = (real_t **)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = (real_t *)malloc(n * sizeof(real_t));\n        b[x] = (real_t *)malloc(n * sizeof(real_t));\n        c[x] = (real_t *)malloc(n * sizeof(real_t));\n        d[x] = (real_t *)malloc(n * sizeof(real_t));\n        for (int y = 0; y < n; ++y){\n            a[x][y] = rand() / (real_t)(RAND_MAX / 10);\n            b[x][y] = rand() / (real_t)(RAND_MAX / 10);\n            c[x][y] = 1;\n            d[x][y] = 0;\n        }\n    }\n    #pragma acc data copyin(a[0:n][0:n], b[0:n][0:n]) copyout(d[0:n][0:n])\n    {\n        for (int x = 0; x < n; ++x){\n            create_test(a[x], b[x], c[x], d[x]);\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < n; ++y){\n            if (fabs(d[x][y] - (a[x][y] * (a[x][y] + b[x][y]))) > PRECISION){\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "declare",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:declare,construct-independent,V:2.0-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    real_t ** a = (real_t **)malloc(n * sizeof(real_t));\n    real_t ** b = (real_t **)malloc(n * sizeof(real_t));\n    real_t ** c = (real_t **)malloc(n * sizeof(real_t));\n    real_t ** d = (real_t **)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < n; ++y){\n            a[x][y] = rand() / (real_t)(RAND_MAX / 10);\n            b[x][y] = rand() / (real_t)(RAND_MAX / 10);\n            c[x][y] = 2;\n            d[x][y] = 0;\n        }\n    }\n\n    #pragma acc data copyin(a[0:n][0:n], b[0:n][0:n]) copy(c[0:n][0:n]) copyout(d[0:n][0:n])\n    {\n        for (int x = 0; x < n; ++x){\n            create_as_present(a[x], b[x], c[x], d[x]);\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < n; ++y){\n            if (fabs(c[x][y] - (2 + a[x][y] + b[x][y])) > PRECISION){\n                err += 1;\n            }\n            if (fabs(d[x][y] - (a[x][y] * c[x][y])) > PRECISION * 2){\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "declare",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n//T3:declare,construct-independent,devonly,V:2.0-2.7\nint test3(){\n    int err = 0;\n    srand(SEED);\n    real_t ** a = (real_t **)malloc(n * sizeof(real_t));\n    real_t ** b = (real_t **)malloc(n * sizeof(real_t));\n    real_t ** c = (real_t **)malloc(n * sizeof(real_t));\n    real_t ** d = (real_t **)malloc(n * sizeof(real_t));\n    int *devtest = (int *)malloc(sizeof(int));\n\n    devtest[0] = 1;\n    #pragma acc enter data copyin(devtest[0:1])\n    #pragma acc parallel present(devtest[0:1])\n    {\n        devtest[0] = 0;\n    }\n\n    if (devtest[0] == 1){\n        for (int x = 0; x < n; ++x){\n            for (int y = 0; y < n; ++y){\n                a[x][y] = rand() / (real_t)(RAND_MAX / 10);\n                b[x][y] = rand() / (real_t)(RAND_MAX / 10);\n                c[x][y] = 3;\n            }\n        }\n\n        #pragma acc data copyin(a[0:n][0:n], b[0:n][0:n])\n        {\n            for (int x = 0; x < n; ++x){\n                #pragma acc data copyin(c[x:1][0:n]) copyout(d[x:1][0:n])\n                {\n                    create_as_present(a[x], b[x], c[x], d[x]);\n                }\n                for (int y = 0; y < n; ++y){\n                    if (fabs(c[x][y] - 3) > PRECISION){\n                        err += 1;\n                    }\n                }\n                for (int y = 0; y < n; ++y){\n                    if (fabs(d[x][y] - (a[x][y] * (3 + a[x][y] + b[x][y]))) > PRECISION * 2){\n                        err += 1;\n                    }\n                }\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T3\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test3();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 2);\n    }\n#endif\n",
                        "tags": [
                            "declare",
                            "construct-independent",
                            "devonly"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "declare_function_scope_deviceptr.c": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:declare,runtime,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t ** a = (real_t **)malloc(n * sizeof(real_t *));\n    real_t ** b = (real_t **)malloc(n * sizeof(real_t *));\n    real_t ** c = (real_t **)malloc(n * sizeof(real_t *));\n    real_t ** d = (real_t **)malloc(n * sizeof(real_t *));\n    real_t ** devpointer_c = (real_t **)malloc(n * sizeof(real_t *));\n    int *devtest = (int *)malloc(sizeof(int));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = (real_t *)malloc(n * sizeof(real_t));\n        b[x] = (real_t *)malloc(n * sizeof(real_t));\n        c[x] = (real_t *)malloc(n * sizeof(real_t));\n        d[x] = (real_t *)malloc(n * sizeof(real_t));\n        for (int y = 0; y < n; ++y){\n            a[x][y] = rand() / (real_t)(RAND_MAX / 10);\n            b[x][y] = rand() / (real_t)(RAND_MAX / 10);\n            c[x][y] = 1;\n            d[x][y] = 0;\n        }\n    }\n\n    #pragma acc data copyin(a[0:n][0:n], b[0:n][0:n]) copy(c[0:n][0:n]) copyout(d[0:n][0:n])\n    {\n        for (int x = 0; x < n; ++x){\n            devpointer_c[x] = acc_deviceptr(c[x]);\n            declare_deviceptr(a[x], b[x], devpointer_c[x], d[x]);\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < n; ++y){\n            if (fabs(c[x][y] - (1 + a[x][y] + b[x][y])) > PRECISION){\n                err += 1;\n            }\n            if (fabs(d[x][y] - (a[x][y] * c[x][y])) > PRECISION * 2){\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "declare",
                            "runtime",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:declare,runtime,construct-independent,devonly,V:2.0-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    real_t ** a = (real_t **)malloc(n * sizeof(real_t *));\n    real_t ** b = (real_t **)malloc(n * sizeof(real_t *));\n    real_t ** c = (real_t **)malloc(n * sizeof(real_t *));\n    real_t ** d = (real_t **)malloc(n * sizeof(real_t *));\n    real_t ** devpointer_c = (real_t **)malloc(n * sizeof(real_t *));\n    int *devtest = (int *)malloc(sizeof(int));\n\n    devtest[0] = 1;\n    #pragma acc enter data copyin(devtest[0:1])\n    #pragma acc parallel present(devtest[0:1])\n    {\n        devtest[0] = 0;\n    }\n\n    if (devtest[0] == 1){\n        for (int x = 0; x < n; ++x){\n            for (int y = 0; y < n; ++y){\n                a[x][y] = rand() / (real_t)(RAND_MAX / 10);\n                b[x][y] = rand() / (real_t)(RAND_MAX / 10);\n                c[x][y] = 3;\n            }\n        }\n\n        #pragma acc data copyin(a[0:n][0:n], b[0:n][0:n])\n        {\n            for (int x = 0; x < n; ++x){\n                #pragma acc data copyout(d[x:1][0:n])\n                {\n                    devpointer_c[x] = acc_copyin(c[x], n * sizeof(real_t));\n                    declare_deviceptr(a[x], b[x], devpointer_c[x], d[x]);\n                }\n                for (int y = 0; y < n; ++y){\n                    if (fabs(c[x][y] - 3) > PRECISION){\n                        err += 1;\n                    }\n                }\n                for (int y = 0; y < n; ++y){\n                    if (fabs(d[x][y] - (a[x][y] * (3 + a[x][y] + b[x][y]))) > PRECISION * 10){\n                        err += 1;\n                    }\n                }\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "declare",
                            "runtime",
                            "construct-independent",
                            "devonly"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "declare_function_scope_present.c": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:declare,present,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t ** a = (real_t **)malloc(n * sizeof(real_t));\n    real_t ** b = (real_t **)malloc(n * sizeof(real_t));\n    real_t ** c = (real_t **)malloc(n * sizeof(real_t));\n    real_t ** d = (real_t **)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = (real_t *)malloc(n * sizeof(real_t));\n        b[x] = (real_t *)malloc(n * sizeof(real_t));\n        c[x] = (real_t *)malloc(n * sizeof(real_t));\n        d[x] = (real_t *)malloc(n * sizeof(real_t));\n        for (int y = 0; y < n; ++y){\n            a[x][y] = rand() / (real_t)(RAND_MAX / 10);\n            b[x][y] = rand() / (real_t)(RAND_MAX / 10);\n            c[x][y] = 1;\n            d[x][y] = 0;\n        }\n    }\n\n    #pragma acc data copyin(a[0:n][0:n], b[0:n][0:n]) copyout(d[0:n][0:n])\n    {\n        for (int x = 0; x < n; ++x){\n            #pragma acc data copy(c[x:1][0:n])\n            {\n                present(a[x], b[x], c[x], d[x]);\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < n; ++y){\n            if (fabs(c[x][y] - (1 + a[x][y] + b[x][y])) > PRECISION){\n                err += 1;\n            }\n            if (fabs(d[x][y] - (a[x][y] * c[x][y])) > PRECISION * 2){\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "declare",
                            "present",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:declare,present,devonly,construct-independent,V:2.0-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    real_t ** a = (real_t **)malloc(n * sizeof(real_t));\n    real_t ** b = (real_t **)malloc(n * sizeof(real_t));\n    real_t ** c = (real_t **)malloc(n * sizeof(real_t));\n    real_t ** d = (real_t **)malloc(n * sizeof(real_t));\n    int *devtest = (int *)malloc(sizeof(int));\n\n    devtest[0] = 1;\n    #pragma acc enter data copyin(devtest[0:1])\n    #pragma acc parallel present(devtest[0:1])\n    {\n        devtest[0] = 0;\n    }\n\n    if (devtest[0] == 1){\n        for (int x = 0; x < n; ++x){\n            for (int y = 0; y < n; ++y){\n                a[x][y] = rand() / (real_t)(RAND_MAX / 10);\n                b[x][y] = rand() / (real_t)(RAND_MAX / 10);\n                c[x][y] = 3;\n            }\n        }\n\n        #pragma acc data copyin(a[0:n][0:n], b[0:n][0:n])\n        {\n            for (int x = 0; x < n; ++x){\n                #pragma acc data copyin(c[x:1][0:n]) copyout(d[x:1][0:n])\n                {\n                    present(a[x], b[x], c[x], d[x]);\n                }\n                for (int y = 0; y < n; ++y){\n                    if (fabs(c[x][y] - 3) > PRECISION){\n                        err += 1;\n                    }\n                }\n                for (int y = 0; y < n; ++y){\n                    if (fabs(d[x][y] - (a[x][y] * (3 + a[x][y] + b[x][y]))) > PRECISION * 2){\n                        err += 1;\n                    }\n                }\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "declare",
                            "present",
                            "devonly",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "enter_data_copyin_no_lower_bound.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:data,executable-data,syntactic,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0.0;\n    }\n\n    #pragma acc enter data copyin(a[:n], b[:n]) create(c[0:n])\n    #pragma acc parallel present(a[0:n], b[0:n], c[0:n])\n    {\n        #pragma acc loop\n        for (int x = 0; x < n; ++x){\n            c[x] = a[x] + b[x];\n        }\n    }\n    #pragma acc exit data copyout(c[0:n]) delete(a[0:n], b[0:n])\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION) {\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "data",
                            "executable-data",
                            "syntactic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "enter_data_create.c": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:data,executable-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = 0.0;\n        c[x] = 0.0;\n    }\n\n    #pragma acc enter data create(b[0:n])\n    #pragma acc data copyin(a[0:n])\n    {\n        #pragma acc parallel present(b[0:n])\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                b[x] = a[x];\n            }\n        }\n    }\n    #pragma acc data copyout(c[0:n])\n    {\n        #pragma acc parallel present(b[0:n])\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                c[x] = b[x];\n            }\n        }\n    }\n    #pragma acc exit data delete(b[0:n])\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - a[x]) > PRECISION) {\n            err += 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:data,executable-data,construct-independent,compatibility-features,V:2.0-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = 0.0;\n        c[x] = 0.0;\n    }\n\n    #pragma acc enter data present_or_create(b[0:n])\n    #pragma acc data copyin(a[0:n])\n    {\n        #pragma acc parallel present(b[0:n])\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                b[x] = a[x];\n            }\n        }\n    }\n    #pragma acc data copyout(c[0:n])\n    {\n        #pragma acc parallel present(b[0:n])\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                c[x] = b[x];\n            }\n        }\n    }\n    #pragma acc exit data delete(b[0:n])\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - a[x]) > PRECISION) {\n            err += 2;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "data",
                            "executable-data",
                            "construct-independent",
                            "compatibility-features"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n//T3:data,executable-data,construct-independent,compatibility-features,V:2.0-2.7\nint test3(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = 0.0;\n        c[x] = 0.0;\n    }\n\n    #pragma acc enter data pcreate(b[0:n])\n    #pragma acc data copyin(a[0:n])\n    {\n        #pragma acc parallel present(b[0:n])\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                b[x] = a[x];\n            }\n        }\n    }\n    #pragma acc data copyout(c[0:n])\n    {\n        #pragma acc parallel present(b[0:n])\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                c[x] = b[x];\n            }\n        }\n    }\n    #pragma acc exit data delete(b[0:n])\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - a[x]) > PRECISION){\n            err += 4;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T3\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test3();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 2);\n    }\n#endif\n",
                        "tags": [
                            "data",
                            "executable-data",
                            "construct-independent",
                            "compatibility-features"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "enter_data_create_no_lower_bound.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:data,executable-data,syntactic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0.0;\n    }\n\n    #pragma acc enter data copyin(a[0:n], b[0:n]) create(c[:n])\n    #pragma acc parallel present(a[0:n], b[0:n], c[0:n])\n    {\n        #pragma acc loop\n        for (int x = 0; x < n; ++x){\n            c[x] = a[x] + b[x];\n        }\n    }\n    #pragma acc exit data delete(a[0:n], b[0:n]) copyout(c[0:n])\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "data",
                            "executable-data",
                            "syntactic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "enter_exit_data_if.c": {
                "num tests": 5,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:data,executable-data,construct-independent,if,reference-counting,V:2.5-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n    int dev = 1;\n    int host = 0;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0.0;\n    }\n\n    #pragma acc enter data copyin(a[0:n], b[0:n]) if(dev)\n    #pragma acc data create(a[0:n], b[0:n]) copyout(c[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                c[x] = a[x] + b[x];\n            }\n        }\n    }\n    #pragma acc exit data delete(a[0:n], b[0:n]) if(dev)\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "data",
                            "executable-data",
                            "construct-independent",
                            "if",
                            "reference-counting"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:data,executable-data,construct-independent,if,V:2.0-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n    int dev = 1;\n    int host = 0;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0;\n    }\n\n    #pragma acc enter data create(a[0:n], b[0:n]) if(host)\n    #pragma acc data copyin(a[0:n], b[0:n]) copyout(c[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                c[x] = a[x] + b[x];\n            }\n        }\n    }\n    #pragma acc exit data delete(a[0:n], b[0:n]) if(host)\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "data",
                            "executable-data",
                            "construct-independent",
                            "if"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n//T3:data,executable-data,construct-independent,devonly,if,reference-counting,V:2.5-2.7\nint test3(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * a_copy = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b_copy = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n    int dev = 1;\n    int host = 0;\n    int * devtest = (int *)malloc(sizeof(int));\n\n    devtest[0] = 1;\n    #pragma acc enter data copyin(devtest[0:1])\n    #pragma acc parallel\n    {\n        devtest[0] = 0;\n    }\n\n    if (devtest[0] == 1){\n        for (int x = 0; x < n; ++x){\n            a[x] = rand() / (real_t)(RAND_MAX / 10);\n            a_copy[x] = a[x];\n            b[x] = rand() / (real_t)(RAND_MAX / 10);\n            b_copy[x] = b[x];\n            c[x] = 0.0;\n        }\n\n        #pragma acc enter data copyin(a[0:n], b[0:n]) if(dev)\n        for (int x = 0; x < n; ++x){\n            a[x] = 0;\n            b[x] = 0;\n        }\n        #pragma acc data create(a[0:n], b[0:n]) copyout(c[0:n])\n        {\n            #pragma acc parallel\n            {\n                #pragma acc loop\n                for (int x = 0; x < n; ++x){\n                    c[x] = a[x] + b[x];\n                }\n            }\n        }\n        #pragma acc exit data copyout(a[0:n], b[0:n]) if(dev)\n\n        for (int x = 0; x < n; ++x){\n            if (fabs(c[x] - (a_copy[x] + b_copy[x])) > PRECISION){\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T3\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test3();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 2);\n    }\n#endif\n",
                        "tags": [
                            "data",
                            "executable-data",
                            "construct-independent",
                            "devonly",
                            "if",
                            "reference-counting"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "4": {
                        "content": "#ifndef T4\n//T4:data,executable-data,if,construct-independent,devonly,V:2.0-2.7\nint test4(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * a_copy = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b_copy = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n    int dev = 1;\n    int host = 0;\n    int * devtest = (int *)malloc(sizeof(int));\n\n    devtest[0] = 1;\n    #pragma acc enter data copyin(devtest[0:1])\n    #pragma acc parallel\n    {\n        devtest[0] = 0;\n    }\n\n    if (devtest[0] == 1){\n        for (int x = 0; x < n; ++x){\n            a[x] = rand() / (real_t)(RAND_MAX / 10);\n            b[x] = rand() / (real_t)(RAND_MAX / 10);\n            c[x] = 0.0;\n        }\n\n        #pragma acc enter data copyin(a[0:n], b[0:n]) if(host)\n        for (int x = 0; x < n; ++x){\n            a[x] = rand() / (real_t)(RAND_MAX / 10);\n            a_copy[x] = a[x];\n            b[x] = rand() / (real_t)(RAND_MAX / 10);\n            b_copy[x] = b[x];\n        }\n        #pragma acc data copyin(a[0:n], b[0:n]) copyout(c[0:n])\n        {\n            #pragma acc parallel\n            {\n                #pragma acc loop\n                for (int x = 0; x < n; ++x){\n                    c[x] = a[x] + b[x];\n                }\n            }\n        }\n        #pragma acc exit data copyout(a[0:n], b[0:n]) if(host)\n\n        for (int x = 0; x < n; ++x){\n            if (fabs(c[x] - (a_copy[x] + b_copy[x])) > PRECISION){\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T4\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test4();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 3);\n    }\n#endif\n",
                        "tags": [
                            "data",
                            "executable-data",
                            "if",
                            "construct-independent",
                            "devonly"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "5": {
                        "content": "#ifndef T5\n//T5:data,executable-data,if,construct-independent,devonly,V:2.0-2.7\nint test5(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * a_copy = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b_copy = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n    int dev = 1;\n    int host = 0;\n    int * devtest = (int *)malloc(sizeof(int));\n\n    devtest[0] = 1;\n    #pragma acc enter data copyin(devtest[0:1])\n    #pragma acc parallel\n    {\n        devtest[0] = 0;\n    }\n\n    if (devtest[0] == 1){\n        for (int x = 0; x < n; ++x){\n            a[x] = rand() / (real_t)(RAND_MAX / 10);\n            b[x] = rand() / (real_t)(RAND_MAX / 10);\n            c[x] = 0.0;\n        }\n\n        #pragma acc enter data create(a[0:n], b[0:n]) if(host)\n        #pragma acc data copyin(a[0:n], b[0:n]) copyout(c[0:n])\n        {\n            #pragma acc parallel\n            {\n                #pragma acc loop\n                for (int x = 0; x < n; ++x){\n                    c[x] = a[x] + b[x];\n                }\n            }\n        }\n        #pragma acc exit data copyout(a[0:n], b[0:n]) if(host)\n\n        for (int x = 0; x < n; ++x){\n            if (fabs(c[x] - (a[x] + b[x])) > PRECISION){\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T5\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test5();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 4);\n    }\n#endif\n",
                        "tags": [
                            "data",
                            "executable-data",
                            "if",
                            "construct-independent",
                            "devonly"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "exit_data.c": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:data,executable-data,devonly,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * a_copy = (real_t *)malloc(n * sizeof(real_t));\n    int * devtest = (int *)malloc(sizeof(int));\n\n    devtest[0] = 1;\n    #pragma acc enter data copyin(devtest[0:1])\n    #pragma acc parallel present(devtest[0:1])\n    {\n        devtest[0] = 0;\n    }\n\n    if (devtest[0] == 1){\n        for (int x = 0; x < n; ++x){\n            a[x] = rand() / (real_t)(RAND_MAX / 10);\n            a_copy[x] = a[x];\n        }\n\n        #pragma acc enter data copyin(a[0:n])\n        #pragma acc parallel present(a[0:n])\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                a[x] = a[x] + 1;\n            }\n        }\n        #pragma acc exit data delete(a[0:n])\n\n        for (int x = 0; x < n; ++x){\n            if (fabs(a[x] - a_copy[x]) > PRECISION){\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "data",
                            "executable-data",
                            "devonly",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:data,executable-data,V:2.0-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * a_copy = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        a_copy[x] = a[x];\n    }\n\n    #pragma acc enter data copyin(a[0:n])\n    #pragma acc parallel present(a[0:n])\n    {\n        #pragma acc loop\n        for (int x = 0; x < n; ++x){\n            a[x] = a[x] + 1;\n        }\n    }\n    #pragma acc exit data copyout(a[0:n])\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(a[x] - (a_copy[x] + 1)) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "data",
                            "executable-data"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "exit_data_copyout_no_lower_bound.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:data,executable-data,syntactic,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0.0;\n    }\n\n    #pragma acc enter data copyin(a[0:n], b[0:n]) create(c[0:n])\n    #pragma acc parallel present(a[0:n], b[0:n], c[0:n])\n    {\n        #pragma acc loop\n        for (int x = 0; x < n; ++x){\n            c[x] = a[x] + b[x];\n        }\n    }\n    #pragma acc exit data delete(a[0:n], b[0:n]) copyout(c[:n])\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION) {\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "data",
                            "executable-data",
                            "syntactic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "exit_data_copyout_reference_counts.c": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:data,executable-data,devonly,construct-independent,reference-counting,V:2.5-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n    int * devtest = (int *)malloc(sizeof(int));\n\n    devtest[0] = 1;\n    #pragma acc enter data copyin(devtest[0:1])\n    #pragma acc parallel present(devtest[0:1])\n    {\n        devtest[0] = 0;\n    }\n\n    if (devtest[0] == 1){\n        for (int x = 0; x < n; ++x){\n          a[x] = rand() / (real_t)(RAND_MAX / 10);\n          b[x] = rand() / (real_t)(RAND_MAX / 10);\n          c[x] = 0.0;\n        }\n\n        #pragma acc enter data copyin(a[0:n], b[0:n], c[0:n])\n        #pragma acc data copyin(c[0:n])\n        {\n            #pragma acc parallel\n            {\n                #pragma acc loop\n                for (int x = 0; x < n; ++x){\n                    c[x] += a[x] + b[x];\n                }\n            }\n            #pragma acc exit data copyout(c[0:n]) delete(a[0:n], b[0:n])\n        }\n        for (int x = 0; x < n; ++x){\n            if (fabs(c[x]) > PRECISION){\n                err += 1;\n            }\n        }\n\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "data",
                            "executable-data",
                            "devonly",
                            "construct-independent",
                            "reference-counting"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:data,executable-data,reference-counting,construct-independent,V:2.5-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n      a[x] = rand() / (real_t)(RAND_MAX / 10);\n      b[x] = rand() / (real_t)(RAND_MAX / 10);\n      c[x] = 0.0;\n    }\n\n    #pragma acc enter data copyin(a[0:n], b[0:n], c[0:n])\n    #pragma acc data copyin(c[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                c[x] += a[x] + b[x];\n            }\n        }\n    }\n    #pragma acc exit data copyout(c[0:n]) delete(a[0:n], b[0:n])\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION){\n            err += 2;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "data",
                            "executable-data",
                            "reference-counting",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n//T3:data,executable-data,reference-counting,construct-independent,V:2.5-2.7\nint test3(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0.0;\n    }\n\n    #pragma acc enter data copyin(a[0:n], b[0:n], c[0:n])\n    #pragma acc enter data create(c[0:n])\n    #pragma acc parallel\n    {\n        #pragma acc loop\n        for (int x = 0; x < n; ++x){\n            c[x] += a[x] + b[x];\n        }\n    }\n    #pragma acc exit data delete(c[0:n])\n    #pragma acc exit data delete(a[0:n], b[0:n]) copyout(c[0:n])\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION){\n            err += 4;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T3\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test3();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 2);\n    }\n#endif\n",
                        "tags": [
                            "data",
                            "executable-data",
                            "reference-counting",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "exit_data_delete_no_lower_bound.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:data,executable-data,construct-independent,syntactic,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0.0;\n    }\n\n    #pragma acc enter data copyin(a[0:n], b[0:n]) create(c[0:n])\n    #pragma acc parallel present(a[0:n], b[0:n], c[0:n])\n    {\n        #pragma acc loop\n        for (int x = 0; x < n; ++x){\n            c[x] = a[x] + b[x];\n        }\n    }\n    #pragma acc exit data delete(a[:n], b[:n]) copyout(c[0:n])\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "data",
                            "executable-data",
                            "construct-independent",
                            "syntactic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "exit_data_finalize.c": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:data,executable-data,reference-counting,construct-independent,V:2.5-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n    int * devtest = (int *)malloc(sizeof(int));\n\n    devtest[0] = 1;\n    #pragma acc enter data copyin(devtest[0:1])\n    #pragma acc parallel\n    {\n        devtest[0] = 0;\n    }\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0;\n    }\n\n    #pragma acc enter data copyin(a[0:n], b[0:n], c[0:n])\n    #pragma acc enter data create(a[0:n], b[0:n], c[0:n])\n    #pragma acc parallel present(a[0:n], b[0:n], c[0:n])\n    {\n        #pragma acc loop\n        for (int x = 0; x < n; ++x){\n            c[x] = a[x] + b[x];\n        }\n    }\n    #pragma acc exit data copyout(a[0:n], b[0:n], c[0:n])\n    if (devtest[0] == 1){\n        for (int x = 0; x < n; ++x){\n            if (fabs(c[x]) > PRECISION) {\n                err += 1;\n            }\n        }\n    }\n    #pragma acc exit data copyout(c[0:n]) delete(a[0:n], b[0:n])\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "data",
                            "executable-data",
                            "reference-counting",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:data,executable-data,reference-counting,construct-independent,V:2.5-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0.0;\n    }\n\n    #pragma acc enter data copyin(a[0:n], b[0:n], c[0:n])\n    #pragma acc enter data copyin(a[0:n], b[0:n], c[0:n])\n    #pragma acc parallel present(a[0:n], b[0:n], c[0:n])\n    {\n        #pragma acc loop\n        for (int x = 0; x < n; ++x){\n            c[x] = a[x] + b[x];\n        }\n    }\n    #pragma acc exit data delete(a[0:n], b[0:n]) copyout(c[0:n]) finalize\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION) {\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "data",
                            "executable-data",
                            "reference-counting",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "host_data.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:data,data-region,host-data,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    int * high = (int *)malloc(n * sizeof(int));\n    int high_current_index = 0;\n    size_t * a_points = (size_t *)malloc(n * sizeof(void *));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        if (a[x] > 5) {\n            high[high_current_index] = x;\n            high_current_index += 1;\n        }\n    }\n\n    #pragma acc enter data copyin(a[0:n])\n\n    #pragma acc host_data use_device(a)\n    {\n        int x = 0;\n        for (x = 0; x < high_current_index; ++x){\n            a_points[x] = (size_t) a + (high[x]*sizeof(real_t*));\n        }\n        for (; x < n; ++x){\n            a_points[x] = 0;\n        }\n    }\n    #pragma acc enter data copyin(a_points[0:n])\n    #pragma acc parallel present(a[0:n], a_points[0:n])\n    {\n        #pragma acc loop\n        for (int x = 0; x < n; ++x){\n            if (a_points[x] != 0){\n                *((real_t *) a_points[x]) -= 5;\n            }\n        }\n    }\n    #pragma acc exit data delete(a_points[0:n]) copyout(a[0:n])\n    for (int x = 0; x < n; ++x){\n        if (a[x] < 0 || a[x] > 5) {\n            err += 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "data",
                            "data-region",
                            "host-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "id": 1,
            "init.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:init,V:2.5-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    #pragma acc init\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "init"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "init_device_num.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:init,runtime,V:2.5-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    int device_num = acc_get_device_num(acc_get_device_type());\n\n    #pragma acc init device_num(device_num)\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "init",
                            "runtime"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "init_device_type.c": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:init,runtime,V:2.5-3.2\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    #pragma acc init device_type(host)\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed += test1();\n    }\n    if (failed){\n        failcode += (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "init",
                            "runtime",
                            "init",
                            "runtime",
                            "init",
                            "runtime"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7",
                            "2.5",
                            "2.6",
                            "2.7",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T1:init,runtime,V:2.5-3.2\nint test2(){\n    int err = 0;\n    srand(SEED);\n\n    #pragma acc init device_type(multicore)\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed += test2();\n    }\n    if (failed){\n        failcode += (1 << 1);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    },
                    "3": {
                        "content": "#ifndef T3\n//T1:init,runtime,V:2.5-3.2\nint test3(){\n    int err = 0;\n    srand(SEED);\n\n    #pragma acc init device_type(default)\n\n    return err;\n}\n#endif\n#ifndef T3\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed += test3();\n    }\n    if (failed){\n        failcode += (1 << 2);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    }
                }
            },
            "init_device_type_num.c": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:init,runtime,V:2.5-3.2\nint test1(){\n    int err = 0;\n    srand(SEED);\n    int device_num = acc_get_device_num(acc_get_device_type());\n\n    #pragma acc init device_type(host) device_num(device_num)\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed += test1();\n    }\n    if (failed){\n        failcode += (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "init",
                            "runtime",
                            "init",
                            "runtime",
                            "init",
                            "runtime"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7",
                            "2.5",
                            "2.6",
                            "2.7",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T1:init,runtime,V:2.5-3.2\nint test2(){\n    int err = 0;\n    srand(SEED);\n    int device_num = acc_get_device_num(acc_get_device_type());\n\n    #pragma acc init device_type(multicore) device_num(device_num)\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed += test2();\n    }\n    if (failed){\n        failcode += (1 << 1);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    },
                    "3": {
                        "content": "#ifndef T3\n//T1:init,runtime,V:2.5-3.2\nint test3(){\n    int err = 0;\n    srand(SEED);\n    int device_num = acc_get_device_num(acc_get_device_type());\n\n    #pragma acc init device_type(default) device_num(device_num)\n\n    return err;\n}\n#endif\n#ifndef T3\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed += test3();\n    }\n    if (failed){\n        failcode += (1 << 2);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    }
                }
            },
            "init_device_type_num_nvidia.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:init,runtime,V:2.5-3.2\nint test1(){\n    int err = 0;\n    srand(SEED);\n    int device_num = acc_get_device_num(acc_get_device_type());\n\n    #pragma acc init device_type(nvidia) device_num(device_num)\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed += test1();\n    }\n    if (failed){\n        failcode += (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "init",
                            "runtime"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "init_device_type_nvidia.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:init,runtime,V:2.5-3.2\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    #pragma acc init device_type(nvidia)\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed += test1();\n    }\n    if (failed){\n        failcode += (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "init",
                            "runtime"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "init_if.c": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:,V:2.7-3.0\nint test1(){\n\tint err = 0;\n\tsrand(SEED);\n\t\n\tint device_num = acc_get_device_num(acc_get_device_type());\n\n\t#pragma acc init if(device_num == device_num)\n\t//#pragma acc init if(true)\n\n\treturn err;\n}\n#endif\n#ifndef T1\n\tfailed = 0;\n\tfor (int x = 0; x < NUM_TEST_CALLS; ++x){\n\t\tfailed = failed + test1();\n\t}\n\tif (failed != 0){\n\t\tfailcode = failcode + (1 << 0);\n\t}\n#endif\n",
                        "tags": [
                            ""
                        ],
                        "versions": [
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:,V:2.7-3.0\nint test2(){\n\tint err = 0;\n\tsrand(SEED);\n\n\tint device_num = acc_get_device_num(acc_get_device_type());\n\n\t#pragma acc init if(device_num != device_num)\n\t//#pragma acc init if(false)\n\n\treturn err;\n}\n#endif\n#ifndef T2\n\tfailed = 0;\n\tfor (int x = 0; x < NUM_TEST_CALLS; ++x){\n\t\tfailed = failed + test2();\n\t}\n\tif (failed != 0){\n\t\tfailcode = failcode + (1 << 1);\n\t}\n#endif\n",
                        "tags": [
                            ""
                        ],
                        "versions": [
                            "2.7"
                        ]
                    }
                }
            },
            "kernel_implicit_data_attributes.c": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\nint test1(){\n\tint err = 0;\n\tsrand(SEED);\n\tint temp = rand()/ (real_t)(RAND_MAX / 10);\n\n\t#pragma acc kernels\n\tfor ( int x = 0; x < n; ++x){\n\t\ttemp += temp;\n\t}\n\n\tif(temp > PRECISION){\n\t\terr = 1;\n\t}\n\treturn err;\n}\n#endif\n#ifndef T1\n\tfailed = 0;\n\tfor(int x = 0; x < NUM_TEST_CALLS; ++x){\n\t\tfailed += test1();\n\t}\n\tif(failed){\n\t\tfailcode += ( 1 << 0);\n\t}\n#endif\n",
                        "tags": [],
                        "versions": []
                    },
                    "2": {
                        "content": "#ifndef T2\nint test2(){\n\tint err = 0;\n\tsrand(SEED);\n\n\treal_t *test_array = (real_t *)malloc(n *sizeof(real_t));\n\treal_t *host_array = (real_t *)malloc(n *sizeof(real_t));\n\n\tfor( int x = 0; x < n; ++x){\n\t\ttest_array[x] = rand()/(real_t)(RAND_MAX/ 10);\n\t\thost_array[x] = test_array[x];\n\t}\n\n\t#pragma acc kernels\n\tfor(int x = 0; x < n; ++x){\n\t\ttest_array[x] += test_array[x];\n\t}\n\n\tfor(int x = 0; x < n; ++x){\n                if(fabs(host_array[x]*2 - test_array[x]) > PRECISION){\n\t\t\terr = 1;\n                }\n        }\n\n\treturn err;\n}\n#endif\n#ifndef T2\n        failed = 0;\n        for(int x = 0; x < NUM_TEST_CALLS; ++x){\n                failed += test2();\n        }\n        if(failed != 0){\n                failcode += ( 1 << 1);\n        }\n#endif\n",
                        "tags": [],
                        "versions": []
                    }
                }
            },
            "kernels_async.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:kernels,async,wait,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * restrict a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * restrict b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * restrict c = (real_t *)malloc(n * sizeof(real_t));\n    real_t * restrict d = (real_t *)malloc(n * sizeof(real_t));\n    real_t * restrict e = (real_t *)malloc(n * sizeof(real_t));\n    real_t * restrict f = (real_t *)malloc(n * sizeof(real_t));\n    real_t * restrict g = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n      \tb[x] = rand() / (real_t)(RAND_MAX / 10);\n      \tc[x] = 0.0;\n      \td[x] = rand() / (real_t)(RAND_MAX / 10);\n      \te[x] = rand() / (real_t)(RAND_MAX / 10);\n      \tf[x] = 0.0;\n      \tg[x] = 0.0;\n    }\n    #pragma acc enter data create(g[0:n], c[0:n], f[0:n])\n    #pragma acc data copyin(a[0:n], b[0:n], d[0:n], e[0:n])\n    {\n        #pragma acc kernels async(1)\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                c[x] = a[x] + b[x];\n            }\n        }\n        #pragma acc kernels async(2)\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                f[x] = d[x] + e[x];\n            }\n        }\n        #pragma acc kernels wait(1, 2) async(3)\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                g[x] = c[x] + f[x];\n            }\n        }\n    }\n    #pragma acc wait(1, 2)\n    #pragma acc update host(c[0:n], f[0:n])\n    #pragma acc exit data copyout(g[0:n]) async(3)\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION){\n            err += 1;\n      \t}\n        if (fabs(f[x] - (d[x] + e[x])) > PRECISION){\n            err += 1;\n        }\n    }\n    #pragma acc wait(3)\n    for (int x = 0; x < n; ++x){\n        if (fabs(g[x] - (c[x] + f[x])) > PRECISION){\n            err += 1;\n        }\n    }\n    #pragma acc exit data delete(c[0:n], f[0:n])\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "kernels",
                            "async",
                            "wait"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_copy.c": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:kernels,data,data-region,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 1;\n    }\n    #pragma acc data copyin(a[0:n], b[0:n])\n    {\n        #pragma acc kernels copy(c[0:n])\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                c[x] += a[x] + b[x];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (1 + a[x] + b[x])) > PRECISION) {\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "kernels",
                            "data",
                            "data-region"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:kernels,data,data-region,devonly,reference-counting,V:2.5-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    int * devtest = (int *)malloc(sizeof(int));\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n    devtest[0] = 1;\n    #pragma acc enter data copyin(devtest[0:1])\n    #pragma acc kernels present(devtest[0:1])\n    {\n      devtest[0] = 0;\n    }\n\n    if (devtest[0] == 1){\n        for (int x = 0; x < n; ++x){\n          a[x] = rand() / (real_t)(RAND_MAX / 10);\n          b[x] = rand() / (real_t)(RAND_MAX / 10);\n          c[x] = 1;\n        }\n        #pragma acc data copyin(a[0:n], b[0:n], c[0:n])\n        {\n            #pragma acc kernels copy(c[0:n])\n            {\n                #pragma acc loop\n                for (int x = 0; x < n; ++x){\n                    c[x] += a[x] + b[x];\n                }\n            }\n        }\n\n        for (int x = 0; x < n; ++x){\n            if (fabs(c[x] - 1) > PRECISION && (a[x] + b[x]) > PRECISION) {\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "kernels",
                            "data",
                            "data-region",
                            "devonly",
                            "reference-counting"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n//T3:kernels,data,data-region,devonly,reference-counting,V:2.5-2.7\nint test3(){\n    int err = 0;\n    srand(SEED);\n    int * devtest = (int *)malloc(sizeof(int));\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n    devtest[0] = 1;\n    #pragma acc enter data copyin(devtest[0:1])\n    #pragma acc kernels present(devtest[0:1])\n    {\n      devtest[0] = 0;\n    }\n\n    if (devtest[0] == 1){\n        for (int x = 0; x < n; ++ x){\n            a[x] = rand() / (real_t)(RAND_MAX / 10);\n            b[x] = rand() / (real_t)(RAND_MAX / 10);\n            c[x] = 1;\n        }\n\n        #pragma acc data copyin(a[0:n], b[0:n]) copy(c[0:n])\n        {\n            for (int x = 0; x < n; ++x){\n                c[x] = 0;\n            }\n            #pragma acc kernels copy(c[0:n])\n            {\n                #pragma acc loop\n                for (int x = 0; x < n; ++x){\n                    c[x] += a[x] + b[x];\n                }\n            }\n            for (int x = 0; x < n; ++x){\n                if (fabs(c[x]) > PRECISION) {\n                    err += 1;\n                }\n            }\n        }\n\n        for (int x = 0; x < n; ++x){\n            if (fabs(c[x] - (a[x] + b[x] + 1)) > PRECISION){\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T3\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test3();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 2);\n    }\n#endif\n",
                        "tags": [
                            "kernels",
                            "data",
                            "data-region",
                            "devonly",
                            "reference-counting"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_copyin.c": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:kernels,data,data-region,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = 0.0;\n    }\n\n\n    #pragma acc data copy(b[0:n])\n    {\n        #pragma acc kernels copyin(a[0:n])\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                b[x] += a[x];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(b[x] - a[x]) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "kernels",
                            "data",
                            "data-region"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:kernels,data,data-region,devonly,reference-counting,V:2.5-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    int * devtest = (int *)malloc(sizeof(int));\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    devtest[0] = 1;\n    #pragma acc enter data copyin(devtest[0:1])\n    #pragma acc kernels present(devtest[0:1])\n    {\n      devtest[0] = 0;\n    }\n\n    if (devtest[0] == 1){\n        for (int x = 0; x < n; ++x){\n            a[x] = rand() / (real_t)(RAND_MAX / 10);\n            b[x] = 0.0;\n        }\n\n        #pragma acc data copy(a[0:n], b[0:n])\n        {\n            for (int x = 0; x < n; ++x){\n                a[x] = -1;\n            }\n            #pragma acc kernels copyin(a[0:n])\n            {\n                #pragma acc loop\n                for (int x = 0; x < n; ++x){\n                    b[x] = a[x];\n                }\n            }\n        }\n\n        for (int x = 0; x < n; ++x){\n            if (fabs(b[x] - a[x]) > PRECISION){\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "kernels",
                            "data",
                            "data-region",
                            "devonly",
                            "reference-counting"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n//T3:kernels,data,data-region,devonly,V:1.0-2.7\nint test3(){\n    int err = 0;\n    srand(SEED);\n    int * devtest = (int *)malloc(sizeof(int));\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    devtest[0] = 1;\n    #pragma acc enter data copyin(devtest[0:1])\n    #pragma acc kernels present(devtest[0:1])\n    {\n      devtest[0] = 0;\n    }\n    \n    if (devtest[0] == 1){\n        for (int x = 0; x < n; ++x){\n            a[x] = rand() / (real_t)(RAND_MAX / 10);\n            b[x] = 0;\n        }\n        #pragma acc kernels copyin(a[0:n], b[0:n])\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                b[x] = a[x];\n            }\n        }\n\n        for (int x = 0; x < n; ++x){\n            if (fabs(b[x]) > PRECISION){\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T3\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test3();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 2);\n    }\n#endif\n",
                        "tags": [
                            "kernels",
                            "data",
                            "data-region",
                            "devonly"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_copyout.c": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:kernels,data,data-region,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n])\n    {\n        #pragma acc kernels copyout(b[0:n])\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                b[x] = a[x];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(b[x] - a[x]) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "kernels",
                            "data",
                            "data-region"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:kernels,data,data-region,devonly,reference-counting,V:2.5-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    int * devtest = (int *)malloc(sizeof(int));\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    devtest[0] = 1;\n    #pragma acc enter data copyin(devtest[0:1])\n    #pragma acc kernels present(devtest[0:1])\n    {\n      devtest[0] = 0;\n    }\n\n    if (devtest[0] == 1){\n        for (int x = 0; x < n; ++x){\n            a[x] = rand() / (real_t)(RAND_MAX / 10);\n            b[x] = 0;\n        }\n\n        #pragma acc data copyin(a[0:n], b[0:n])\n        {\n            #pragma acc kernels copyout(b[0:n])\n            {\n                #pragma acc loop\n                for (int x = 0; x < n; ++x){\n                    b[x] = a[x];\n                }\n            }\n        }\n\n        for (int x = 0; x < n; ++x){\n            if (fabs(b[x]) > PRECISION){\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "kernels",
                            "data",
                            "data-region",
                            "devonly",
                            "reference-counting"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_copyout_zero.c": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:kernels,data,data-region,V:3.0-3.2\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n])\n    {\n        #pragma acc kernels copyout(zero: b[0:n])\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                b[x] += a[x];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(a[x] - b[x]) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "kernels",
                            "data",
                            "data-region"
                        ],
                        "versions": []
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:kernels,data,data-region,devonly,V:3.0-3.1\nint test2(){\n    int err = 0;\n    srand(SEED);\n    int * devtest = (int *)malloc(sizeof(int));\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    devtest[0] = 1;\n    #pragma acc enter data copyin(devtest[0:1])\n    #pragma acc kernels present(devtest[0:1])\n    {\n      devtest[0] = 0;\n    }\n\n    if (devtest[0] == 1){\n        for (int x = 0; x < n; ++x){\n            a[x] = rand() / (real_t)(RAND_MAX / 10);\n            b[x] = 0;\n        }\n\n        #pragma acc data copyin(a[0:n])\n        {\n            #pragma acc kernels copyout(zero: b[0:n])\n            {\n                #pragma acc loop\n                for (int x = 0; x < n; ++x){\n                    b[x] += a[x];\n                }\n            }\n        }\n\n        for (int x = 0; x < n; ++x){\n            if (fabs(a[x] - b[x]) > PRECISION){\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "kernels",
                            "data",
                            "data-region",
                            "devonly"
                        ],
                        "versions": []
                    }
                }
            },
            "kernels_create.c": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:kernels,data,data-region,devonly,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    int * devtest = (int *)malloc(sizeof(int));\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    devtest[0] = 1;\n    #pragma acc enter data copyin(devtest[0:1])\n    #pragma acc parallel present(devtest[0:1])\n    {\n      devtest[0] = 0;\n    }\n\n    if (devtest[0] == 1){\n        for (int x = 0; x < n; ++x){\n          a[x] = rand() / (real_t)(RAND_MAX / 10);\n          b[x] = 0.0;\n        }\n\n        #pragma acc data copyin(a[0:n])\n        {\n            #pragma acc kernels create(b[0:n])\n            {\n                #pragma acc loop\n                for (int x = 0; x < n; ++x){\n                    b[x] = a[x];\n                }\n            }\n        }\n\n        for (int x = 0; x < n; ++x){\n            if (fabs(b[x]) > PRECISION){\n                err += 1;\n            }\n        }\n\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "kernels",
                            "data",
                            "data-region",
                            "devonly"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:kernels,data,data-region,reference-counting,V:2.5-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n      a[x] = rand() / (real_t)(RAND_MAX / 10);\n      b[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a[0:n]) copyout(b[0:n])\n    {\n        #pragma acc kernels create(b[0:n])\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                b[x] = a[x];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(a[x] - b[x]) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "kernels",
                            "data",
                            "data-region",
                            "reference-counting"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n//T3:kernels,data,data-region,V:1.0-2.7\nint test3(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a[0:n]) copyout(c[0:n])\n    {\n        #pragma acc kernels create(b[0:n])\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                b[x] = a[x];\n            }\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                c[x] = b[x];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - a[x]) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T3\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test3();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 2);\n    }\n#endif\n",
                        "tags": [
                            "kernels",
                            "data",
                            "data-region"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_create_zero.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:kernels,data,data-region,V:3.0-3.2\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n      a[x] = rand() / (real_t)(RAND_MAX / 10);\n      b[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a[0:n]) copyout(b[0:n])\n    {\n        #pragma acc kernels create(zero: b[0:n])\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                b[x] += a[x];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(a[x] - b[x]) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "kernels",
                            "data",
                            "data-region"
                        ],
                        "versions": []
                    }
                }
            },
            "kernels_default_copy.c": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:kernels,data-region,default-mapping,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t c[n];\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n])\n    {\n        #pragma acc kernels\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                c[x] += a[x] + b[x];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "kernels",
                            "data-region",
                            "default-mapping"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:kernels,data-region,default-mapping,reference-counting,devonly,V:2.5-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t c[n];\n    int * devtest = (int *)malloc(sizeof(real_t));\n\n    devtest[0] = 1;\n    #pragma acc enter data copyin(devtest[0:1])\n    #pragma acc kernels present(devtest[0:1])\n    {\n        devtest[0] = 0;\n    }\n\n    if (devtest[0] == 1){\n        for (int x = 0; x < n; ++x){\n            a[x] = rand() / (real_t)(RAND_MAX / 10);\n            b[x] = rand() / (real_t)(RAND_MAX / 10);\n            c[x] = 1;\n        }\n\n        #pragma acc enter data copyin(c[0:n])\n        for (int x = 0; x < n; ++x){\n            c[x] = 0.0;\n        }\n        #pragma acc data copyin(a[0:n], b[0:n])\n        {\n            #pragma acc kernels\n            {\n                #pragma acc loop\n                for (int x = 0; x < n; ++x){\n                    c[x] += a[x] + b[x];\n                }\n            }\n        }\n\n        for (int x = 0; x < n; ++x){\n            if (fabs(c[x]) > PRECISION){\n                err += 1;\n            }\n        }\n\n        #pragma acc exit data copyout(c[0:n])\n\n        for (int x = 0; x < n; ++x){\n            if (fabs(c[x] - (a[x] + b[x] + 1)) > PRECISION){\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "kernels",
                            "data-region",
                            "default-mapping",
                            "reference-counting",
                            "devonly"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_default_present.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:kernels,data,data-region,default,V:2.5-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = 0;\n    }\n\n    #pragma acc enter data copyin(a[0:n]), create(b[0:n])\n    #pragma acc kernels default(present)\n    {\n        #pragma acc loop\n        for (int x = 0; x < n; ++x){\n            b[x] = a[x];\n        }\n    }\n    #pragma acc exit data delete(a[0:n]), copyout(b[0:n])\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(a[x] - b[x]) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "kernels",
                            "data",
                            "data-region",
                            "default"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_if.c": {
                "num tests": 4,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:kernels,if,V:1.0-3.2\nint test1(){\n    int err = 0;\n    srand(SEED);\n    int data_on_device = 0;\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = 0;\n    }\n\n    #pragma acc kernels if(data_on_device) present(a[0:n], b[0:n])\n    {\n        #pragma acc loop\n        for (int x = 0; x < n; ++x){\n            b[x] = a[x];\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(b[x] - a[x]) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "kernels",
                            "if"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:kernels,if,V:2.0-3.2\nint test2(){\n    int err = 0;\n    srand(SEED);\n    int data_on_device = 0;\n    int * devtest = (int *)malloc(sizeof(int));\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = 0;\n    }\n\n    #pragma acc enter data copyin(a[0:n]) create(b[0:n])\n    data_on_device = 1;\n\n    #pragma acc kernels if(data_on_device) present(a[0:n], b[0:n])\n    {\n        #pragma acc loop\n        for (int x = 0; x < n; ++x){\n            b[x] = a[x];\n        }\n    }\n    #pragma acc exit data copyout(b[0:n]) delete(a[0:n])\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(b[x] - a[x]) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "kernels",
                            "if"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n//T3:kernels,if,devonly,V:2.0-3.2\nint test3(){\n    int err = 0;\n    srand(SEED);\n    int data_on_device = 0;\n    int * devtest = (int *)malloc(sizeof(int));\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    devtest[0] = 1;\n\n    #pragma acc enter data copyin(devtest[0:1])\n    #pragma acc parallel present(devtest[0:1])\n    {\n\tdevtest[0] = 0;\n\n    }\n\n    if (devtest[0] == 1){\n        for (int x = 0; x < n; ++x){\n            a[x] = rand() / (real_t)(RAND_MAX / 10);\n            b[x] = 0;\n        }\n\n        #pragma acc enter data copyin(a[0:n]) create(b[0:n])\n        for (int x = 0; x < n; ++x){\n            a[x] = -1;\n        }\n\n        #pragma acc kernels if(data_on_device) present(a[0:n], b[0:n])\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                b[x] = a[x];\n            }\n        }\n        for (int x = 0; x < n; ++x){\n            if (fabs(a[x] + 1) > PRECISION){\n                err += 1;\n            }\n            if (fabs(b[x] + 1) > PRECISION){\n                err += 1;\n            }\n        }\n        #pragma acc exit data copyout(a[0:n], b[0:n])\n        data_on_device = 0;\n        for (int x = 0; x < n; ++x){\n            if (fabs(a[x] - b[x]) > PRECISION){\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T3\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test3();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 2);\n    }\n#endif\n",
                        "tags": [
                            "kernels",
                            "if",
                            "devonly"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "4": {
                        "content": "#ifndef T4\n//T4:kernels,if,devonly,V:2.0-3.2\nint test4(){\n    int err = 0;\n    srand(SEED);\n    int data_on_device = 0;\n    int * devtest = (int *)malloc(sizeof(int));\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    devtest[0] = 1;\n    #pragma acc enter data copyin(devtest[0:1])\n    #pragma acc parallel present(devtest[0:1])\n    {\n      devtest[0] = 0;\n    }\n\n    if (devtest[0] == 1){\n        for (int x = 0; x < n; ++x){\n            a[x] = rand() / (real_t)(RAND_MAX / 10);\n            b[x] = 0;\n        }\n\n        #pragma acc enter data copyin(a[0:n], b[0:n])\n        #pragma acc kernels if(data_on_device) present(a[0:n], b[0:n])\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                b[x] = a[x];\n            }\n        }\n        for (int x = 0; x < n; ++x){\n            if (fabs(a[x] - b[x]) > PRECISION) {\n                err += 1;\n            }\n        }\n        #pragma acc exit data copyout(a[0:n], b[0:n])\n        for (int x = 0; x < n; ++x){\n            if (fabs(b[x]) > PRECISION && b[x] != a[x]){\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T4\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test4();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 3);\n    }\n#endif\n",
                        "tags": [
                            "kernels",
                            "if",
                            "devonly"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:kernels,loop,combined-constructs,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    real_t * a = (real_t *)malloc(1024 * sizeof(real_t));\n    real_t * b = (real_t *)malloc(1024 * sizeof(real_t));\n\n    for (int x = 0; x < 1024; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = 0.0;\n    }\n\n    #pragma acc kernels loop copy(a[0:1024]) copyout(b[0:1024])\n    for (int _0 = 0; _0 < 2; ++_0){\n        #pragma acc loop\n        for (int _1 = 0; _1 < 2; ++_1){\n            #pragma acc loop\n            for (int _2 = 0; _2 < 2; ++_2){\n                #pragma acc loop\n                for (int _3 = 0; _3 < 2; ++_3){\n                    #pragma acc loop\n                    for (int _4 = 0; _4 < 2; ++_4){\n                        #pragma acc loop\n                        for (int _5 = 0; _5 < 2; ++_5){\n                            #pragma acc loop\n                            for (int _6 = 0; _6 < 2; ++_6){\n                                #pragma acc loop\n                                for (int _7 = 0; _7 < 2; ++_7){\n                                    #pragma acc loop\n                                    for (int _8 = 0; _8 < 2; ++_8){\n                                        #pragma acc loop\n                                        for (int _9 = 0; _9 < 2; ++_9){\n                                            b[_0 * 512 + _1 * 256 + _2 * 128 + _3 * 64 + _4 * 32 + _5 * 16 + _6 * 8 + _7 * 4 + _8 * 2 + _9] = a[_0 * 512 + _1 * 256 + _2 * 128 + _3 * 64 + _4 * 32 + _5 * 16 + _6 * 8 + _7 * 4 + _8 * 2 + _9];\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < 1024; ++x){\n        if (fabs(a[x] - b[x]) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "kernels",
                            "loop",
                            "combined-constructs"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_independent.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:kernels,loop,combined-constructs,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n\n    #pragma acc data copyin(a[0:n]) copyout(b[0:n])\n    {\n        #pragma acc kernels loop independent\n        for (int x = 0; x < n; ++x){\n            b[x] = a[x];\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(a[x] - b[x]) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "kernels",
                            "loop",
                            "combined-constructs"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_add_general.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:kernels,loop,reduction,combined-constructs,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n\n    real_t total = 10; //Should be innitialized to 0 anyway.\n    #pragma acc data copyin(a[0:n], b[0:n])\n    {\n        #pragma acc kernels loop reduction(+:total)\n        for (int x = 0; x < n; ++x){\n            total += a[x] + b[x];\n        }\n    }\n    for (int x = 0; x < n; ++x){\n        total -= a[x] + b[x];\n    }\n    if (fabs(total - 10) > PRECISION * (2 * n - 1)){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "kernels",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_add_loop.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:kernels,loop,combined-constructs,reduction,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * d = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t avg = 0.0;\n\n    for (int x = 0; x < 10 * n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n\n    #pragma acc data copyin(a[0:10*n], b[0:10*n]) create(c[0:10*n]) copyout(d[0:10*n])\n    {\n        #pragma acc kernels loop gang private(avg)\n        for (int x = 0; x < 10; ++x){\n            avg = 0;\n            #pragma acc loop worker reduction(+:avg)\n            for (int y = 0; y < n; ++y){\n                avg += c[x * n + y] = a[x * n + y] + b[x * n + y];\n            }\n            avg = avg / n;\n            #pragma acc loop worker\n            for (int y = 0; y < n; ++y){\n                d[x * n + y] = c[x * n + y] - avg;\n            }\n        }\n    }\n\n    real_t rolling_total = 0;\n\n    for (int x = 0; x < 10; ++x){\n        rolling_total = 0;\n        for (int y = 0; y < n; ++y){\n            rolling_total += a[x * n + y] + b[x * n + y];\n        }\n        rolling_total = rolling_total / n;\n        for (int y = 0; y < n; ++y){\n            if (fabs(d[x * n + y] - ((a[x * n + y] + b[x * n + y]) - rolling_total)) > PRECISION){\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "kernels",
                            "loop",
                            "combined-constructs",
                            "reduction"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_add_vector_loop.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:kernels,loop,reduction,combined-constructs,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(10 * sizeof(real_t));\n    real_t temp = 0.0;\n\n    for(int x = 0; x < 10 * n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    #pragma acc data copyin(a[0:10*n], b[0:10*n]) copyout(c[0:10])\n    {\n        #pragma acc kernels loop private(temp)\n        for (int x = 0; x < 10; ++x){\n            temp = 0.0;\n            #pragma acc loop vector reduction(+:temp)\n            for (int y = 0; y < n; ++y){\n                temp += a[(x * n) + y] + b[(x * n) + y];\n            }\n            c[x] = temp;\n        }\n    }\n    for (int x = 0; x < 10; ++x){\n        for (int y = 0; y < n; ++y){\n            c[x] -= a[(x * n) + y] + b[(x * n) + y];\n        }\n        if (fabs(c[x]) > PRECISION * (2 * n - 1)){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "kernels",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_and_general.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:kernels,loop,reduction,combined-constructs,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    char * a = (char *)malloc(n * sizeof(char));\n    real_t false_margin = pow(exp(1), log(.5)/n);\n    char result = 1;\n\n    for (int x = 0; x < n; ++x){\n        if(rand() / (real_t)(RAND_MAX) < false_margin){\n            a[x] = 1;\n        }\n        else{\n            a[x] = 0;\n        }\n    }\n\n\n    #pragma acc data copyin(a[0:n])\n    {\n        #pragma acc kernels loop reduction(&&:result)\n        for (int x = 0; x < n; ++x){\n            result = result && a[x];\n        }\n    }\n\n    char found = 0;\n    for (int x = 0; x < n; ++x){\n        if (a[x] == 0){\n            found = 1;\n            break;\n        }\n    }\n    if (found == result){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "kernels",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_and_loop.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:kernels,loop,reduction,combined-constructs,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    char * a = (char *)malloc(10 * n * sizeof(char));\n    char * a_copy = (char *)malloc(10 * n * sizeof(char));\n    char * has_false = (char *)malloc(10 * sizeof(char));\n    real_t false_margin = pow(exp(1), log(.5)/n);\n\n    for (int x = 0; x < 10; ++x){\n        has_false[x] = 0;\n    }\n\n    for (int x = 0; x < 10; ++x){\n        for (int y = 0; y < n; ++y){\n            if (rand() / (real_t)(RAND_MAX) < false_margin){\n                a[x * n + y] = 1;\n                a_copy[x * n + y] = 1;\n            }\n            else {\n                a[x * n + y] = 0;\n                a_copy[x * n + y] = 0;\n                has_false[x] = 1;\n            }\n        }\n    }\n\n    char temp = 1;\n    #pragma acc data copy(a[0:10*n])\n    {\n        #pragma acc kernels loop gang private(temp)\n        for (int x = 0; x < 10; ++x){\n            temp = 1;\n            #pragma acc loop worker reduction(&&:temp)\n            for (int y = 0; y < n; ++y){\n                temp = temp && a[x * n + y];\n            }\n            #pragma acc loop worker\n            for (int y = 0; y < n; ++y){\n                if(temp == 1){\n                    if  (a[x * n + y] == 1){\n                        a[x * n + y] = 0;\n                    }\n                    else {\n                        a[x * n + y] = 1;\n                    }\n                }\n            }\n        }\n    }\n\n\n    for (int x = 0; x < 10; ++x){\n        for (int y = 0; y < n; ++y){\n            if (has_false[x] == 1 && a[x * n + y] != a_copy[x * n + y]){\n                err = 1;\n            }\n            else if (has_false[x] == 0 && a[x * n + y] == a_copy[x * n + y]){\n                err = 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "kernels",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_and_vector_loop.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:kernels,loop,reduction,combined-constructs,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    char * a = (char *)malloc(10 * n * sizeof(char));\n    char * b = (char *)malloc(10 * sizeof(char));\n    char * has_false = (char *)malloc(10 * sizeof(char));\n    real_t false_margin = pow(exp(1), log(.5)/n);\n\n    for (int x = 0; x < 10; ++x){\n        has_false[x] = 0;\n    }\n    for (int x = 0; x < 10 * n; ++x){\n        if(rand() / (real_t)(RAND_MAX) < false_margin){\n            a[x] = 1;\n        }\n        else{\n            a[x] = 0;\n            has_false[x/n] = 1;\n        }\n    }\n    char temp = 1;\n    #pragma acc data copyin(a[0:10*n]) copy(b[0:10])\n    {\n        #pragma acc kernels loop private(temp)\n        for (int x = 0; x < 10; ++x){\n            temp = 1;\n            #pragma acc loop vector reduction(&&:temp)\n            for (int y = 0; y < n; ++y){\n                temp = temp && a[x * n + y];\n            }\n            b[x] = temp;\n        }\n    }\n    for (int x = 0; x < 10; ++x){\n        if (has_false[x] == b[x]){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "kernels",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_bitand_general.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:kernels,loop,reduction,combined-constructs,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    n = 10;\n    unsigned int * a = (unsigned int *)malloc(n * sizeof(unsigned int));\n    real_t false_margin = pow(exp(1), log(.5)/n);\n    unsigned int temp = 1;\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 16; ++y){\n            if (rand() / (real_t) RAND_MAX < false_margin){\n                for (int z = 0; z < y; ++z){\n                    temp *= 2;\n                }\n                a[x] += temp;\n                temp = 1;\n            }\n        }\n    }\n    unsigned int b = 0;\n    for (int x = 0; x < 16; ++x){\n        temp = 1;\n        for (int y = 0; y < x; ++y){\n            temp *= 2;\n        }\n        b += temp;\n    }\n    #pragma acc data copyin(a[0:n])\n    {\n        #pragma acc kernels loop reduction(&:b)\n        for (int x = 0; x < n; ++x){\n            b = b & a[x];\n        }\n    }\n    unsigned int host_b = a[0];\n\n    for (int x = 1; x < n; ++x){\n        host_b = host_b & a[x];\n    }\n    if (b != host_b){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "kernels",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_bitand_loop.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:kernels,loop,reduction,combined-constructs,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    unsigned int * a = (unsigned int *)malloc(10 * n * sizeof(unsigned int));\n    unsigned int * b = (unsigned int *)malloc(10 * n * sizeof(unsigned int));\n    unsigned int * b_copy = (unsigned int *)malloc(10 * n * sizeof(unsigned int));\n    unsigned int * c = (unsigned int *)malloc(10 * sizeof(unsigned int));\n\n    real_t false_margin = pow(exp(1), log(.5)/n);\n    unsigned int temp = 1;\n\n    for (int x = 0; x < 10 * n; ++x){\n        b[x] = (unsigned int) rand() / (real_t)(RAND_MAX / 1000);\n        b_copy[x] = b[x];\n        for (int y = 0; y < 16; ++y){\n            if (rand() / (real_t) RAND_MAX < false_margin){\n                for (int z = 0; z < y; ++z){\n                    temp *= 2;\n                }\n                a[x] += temp;\n                temp = 1;\n            }\n        }\n    }\n    #pragma acc data copyin(a[0:10 * n]) copy(b[0:10 * n], c[0:10])\n    {\n        #pragma acc kernels loop gang private(temp)\n        for (int y = 0; y < 10; ++y){\n            temp = a[y * n];\n            #pragma acc loop worker reduction(&:temp)\n            for (int x = 1; x < n; ++x){\n                temp = temp & a[y * n + x];\n            }\n            c[y] = temp;\n            #pragma acc loop worker\n            for (int x = 0; x < n; ++x){\n                b[y * n + x] = b[y * n + x] + c[y];\n            }\n        }\n    }\n    unsigned int* host_c = (unsigned int *)malloc(10 * sizeof(unsigned int));\n    for (int x = 0; x < 10; ++x){\n        host_c[x] = a[x * n];\n        for (int y = 1; y < n; ++y){\n            host_c[x] = host_c[x] & a[x * n + y];\n        }\n        if (host_c[x] != c[x]){\n          err += 1;\n        }\n    }\n\n    for (int x = 0; x < 10; ++x){\n        for (int y = 0; y < n; ++y){\n            if (b[x * n + y] != b_copy[x * n + y] + c[x]){\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "kernels",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_bitand_vector_loop.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:kernels,loop,reduction,combined-constructs,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    unsigned int* a = (unsigned int *)malloc(10 * n * sizeof(unsigned int));\n    unsigned int* b = (unsigned int *)malloc(10 * sizeof(unsigned int));\n\n    real_t false_margin = pow(exp(1), log(.5)/n);\n    unsigned int temp = 1;\n    unsigned int c = 0;\n    unsigned int b_host;\n\n    for (int x = 0; x < 10 * n; ++x){\n        for (int y = 0; y < 16; ++y){\n            if (rand() / (real_t) RAND_MAX < false_margin){\n                for (int z = 0; z < y; ++z){\n                    temp *= 2;\n                }\n                a[x] += temp;\n                temp = 1;\n            }\n        }\n    }\n\n    #pragma acc data copyin(a[0:10*n]) copy(b[0:10])\n    {\n        #pragma acc kernels loop private(c)\n        for (int x = 0; x < 10; ++x){\n            c = a[x * n];\n            #pragma acc loop vector reduction(&:c)\n            for (int y = 1; y < n; ++y){\n                c = c & a[x * n + y];\n            }\n            b[x] = c;\n        }\n    }\n    for (int x = 0; x < 10; ++x){\n        b_host = a[x * n];\n        for (int y = 1; y < n; ++y){\n            b_host = b_host & a[x * n + y];\n        }\n        if (b_host != b[x]){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "kernels",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_bitor_general.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:kernels,loop,reduction,combined-constructs,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    unsigned int * a = (unsigned int *)malloc(n * sizeof(unsigned int));\n    real_t false_margin = pow(exp(1), log(.5)/n);\n    unsigned int temp = 1;\n    unsigned int b = 0;\n    unsigned int host_b = a[0];\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 16; ++y){\n            if (rand() / (real_t) RAND_MAX > false_margin){\n                for (int z = 0; z < y; ++z){\n                    temp *= 2;\n                }\n                a[x] += temp;\n                temp = 1;\n            }\n        }\n    }\n\n    #pragma acc data copyin(a[0:n])\n    {\n        #pragma acc kernels loop reduction(|:b)\n        for (int x = 0; x < n; ++x){\n            b = b | a[x];\n        }\n    }\n\n\n    for (int x = 1; x < n; ++x){\n        host_b = host_b | a[x];\n    }\n    if (b != host_b){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "kernels",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_bitor_loop.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:kernels,loop,reduction,combined-constructs,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    unsigned int * a = (unsigned int *)malloc(10 * n * sizeof(unsigned int));\n    unsigned int * b = (unsigned int *)malloc(10 * n * sizeof(unsigned int));\n    unsigned int * b_copy = (unsigned int *)malloc(10 * n * sizeof(unsigned int));\n    unsigned int * c = (unsigned int *)malloc(10 * sizeof(unsigned int));\n\n    real_t false_margin = pow(exp(1), log(.5)/n);\n    unsigned int temp = 1;\n    unsigned int host_c;\n\n    for (int x = 0; x < 10; ++x){\n        for (int y = 0; y < n; ++y){\n            b[x * n + y] = (unsigned int) rand() / (real_t)(RAND_MAX / 1000);\n            b_copy[x * n + y] = b[x * n + y];\n            for (int z = 0; z < 16; ++z){\n                if (rand() / (real_t) RAND_MAX > false_margin){\n                    temp = 1;\n                    for (int i = 0; i < z; ++i){\n                        temp = temp * 2;\n                    }\n                    a[x * n + y] += temp;\n                }\n            }\n        }\n    }\n\n    #pragma acc data copyin(a[0:10*n]) copy(b[0:10*n], c[0:10])\n    {\n        #pragma acc kernels loop gang private(temp)\n        for (int x = 0; x < 10; ++x){\n            temp = 0;\n            #pragma acc loop worker reduction(|:temp)\n            for (int y = 0; y < n; ++y){\n                temp = temp | a[x * n + y];\n            }\n            c[x] = temp;\n            #pragma acc loop worker\n            for (int y = 0; y < n; ++y){\n                b[x * n + y] = b[x * n + y] + c[x];\n            }\n        }\n    }\n    for (int x = 0; x < 10; ++x){\n        host_c = a[x * n];\n        for (int y = 1; y < n; ++y){\n            host_c = host_c | a[x * n + y];\n        }\n        if (host_c != c[x]){\n            err += 1;\n        }\n        for (int y = 0; y < n; ++y){\n            if (b[x * n + y] != b_copy[x * n + y] + host_c){\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "kernels",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_bitor_vector_loop.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:kernels,loop,reduction,combined-constructs,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    unsigned int* a = (unsigned int *)malloc(10 * n * sizeof(unsigned int));\n    unsigned int* b = (unsigned int *)malloc(10 * sizeof(unsigned int));\n\n    real_t false_margin = pow(exp(1), log(.5)/n);\n    unsigned int temp = 1;\n    unsigned int b_host;\n\n    for (int x = 0; x < 10 * n; ++x){\n        for (int y = 0; y < 16; ++y){\n            if (rand() / (real_t) RAND_MAX > false_margin){\n                for (int z = 0; z < y; ++z){\n                    temp *= 2;\n                }\n                a[x] += temp;\n                temp = 1;\n            }\n        }\n    }\n    temp = 0;\n    #pragma acc data copyin(a[0:10*n]) copy(b[0:10])\n    {\n        #pragma acc kernels loop private(temp)\n        for (int x = 0; x < 10; ++x){\n            temp = 0;\n            #pragma acc loop vector reduction(|:temp)\n            for (int y = 0; y < n; ++y){\n                temp = temp | a[x * n + y];\n            }\n            b[x] = temp;\n        }\n    }\n\n    for (int x = 0; x < 10; ++x){\n        b_host = a[x * n];\n        for (int y = 1; y < n; ++y){\n            b_host = b_host | a[x * n + y];\n        }\n        if (b_host != b[x]){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "kernels",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_bitxor_general.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:kernels,loop,reduction,combined-constructs,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    unsigned int * a = (unsigned int *)malloc(n * sizeof(unsigned int));\n    unsigned int b = 0;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = (unsigned int) rand() / (real_t) (RAND_MAX / 2);\n    }\n    unsigned int host_b = a[0];\n\n    #pragma acc data copyin(a[0:n])\n    {\n        #pragma acc kernels loop reduction(^:b)\n        for (int x = 0; x < n; ++x){\n            b = b ^ a[x];\n        }\n    }\n\n\n    for (int x = 1; x < n; ++x){\n        host_b = host_b ^ a[x];\n    }\n    if (b != host_b){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "kernels",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_bitxor_loop.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:kernels,loop,reduction,combined-constructs,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    unsigned int * a = (unsigned int *)malloc(10 * n * sizeof(unsigned int));\n    unsigned int * b = (unsigned int *)malloc(10 * n * sizeof(unsigned int));\n    unsigned int * b_copy = (unsigned int *)malloc(10 * n * sizeof(unsigned int));\n    unsigned int * c = (unsigned int *)malloc(10 * sizeof(unsigned int));\n    unsigned int temp = 0;\n\n    for (int x = 0; x < 10*n; ++x){\n        b[x] = (unsigned int) rand() / (real_t)(RAND_MAX / 1000);\n        b_copy[x] = b[x];\n        a[x] = (unsigned int) rand() / (real_t)(RAND_MAX / 1000);\n    }\n    for (int x = 0; x < 10; ++x){\n        c[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:10*n]) copy(b[0:10*n], c[0:10])\n    {\n        #pragma acc kernels loop gang private(temp)\n        for (int x = 0; x < 10; ++x){\n            temp = 0;\n            #pragma acc loop worker reduction(^:temp)\n            for (int y = 0; y < n; ++y){\n                temp = temp ^ a[x * n + y];\n            }\n            c[x] = temp;\n            #pragma acc loop worker\n            for (int y = 0; y < n; ++y){\n                b[x * n + y] = b[x * n + y] + c[x];\n            }\n        }\n    }\n\n    for (int x = 0; x < 10; ++x){\n        temp = 0;\n        for (int y = 0; y < n; ++y){\n            temp = temp ^ a[x * n + y];\n        }\n        if (temp != c[x]){\n            err += 1;\n        }\n        for (int y = 0; y < n; ++y){\n            if (b[x * n + y] != b_copy[x * n + y] + c[x]){\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "kernels",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_bitxor_vector_loop.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:kernels,loop,reduction,combined-constructs,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    unsigned int* a = (unsigned int *)malloc(10 * n * sizeof(unsigned int));\n    unsigned int* b = (unsigned int *)malloc(10 * sizeof(unsigned int));\n\n    unsigned int temp = 0;\n    unsigned int b_host;\n\n    for (int x = 0; x < 10 * n; ++x){\n        a[x] = (unsigned int) rand() / (real_t) (RAND_MAX / 2);\n    }\n\n    #pragma acc data copyin(a[0:10*n]) copy(b[0:10])\n    {\n        #pragma acc kernels loop private(temp)\n        for (int x = 0; x < 10; ++x){\n            temp = 0;\n            #pragma acc loop vector reduction(^:temp)\n            for (int y = 0; y < n; ++y){\n                temp = temp ^ a[x * n + y];\n            }\n            b[x] = temp;\n        }\n    }\n\n    for (int x = 0; x < 10; ++x){\n        b_host = a[x * n];\n        for (int y = 1; y < n; ++y){\n            b_host = b_host ^ a[x * n + y];\n        }\n        if (b_host != b[x]){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "kernels",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_max_general.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:kernels,loop,reduction,combined-constructs,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t max = 0.0;\n    int found = 0;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX/10);\n        b[x] = rand() / (real_t)(RAND_MAX/10);\n    }\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(max)\n    {\n        #pragma acc kernels loop reduction(max:max)\n        for (int x = 0; x < n; ++x){\n            max = fmax(a[x] * b[x], max);\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(max - (a[x] * b[x] + PRECISION)) < 0){\n            err = 1;\n        }\n        if (fabs(max - (a[x] * b[x] - PRECISION)) > 0){\n            found = 1;\n        }\n    }\n    if (found == 0){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "kernels",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_max_loop.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:kernels,loop,reduction,combined-constructs,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * maximum = (real_t *)malloc(10 * sizeof(real_t));\n    real_t temp = 0;\n    real_t max = 0.0;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX/10);\n        b[x] = rand() / (real_t)(RAND_MAX/10);\n        c[x] = 0.0;\n    }\n    for (int x = 0; x < 10; ++x){\n        maximum[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:10*n], b[0:10*n]) copy(c[0:10*n], maximum[0:10])\n    {\n        #pragma acc kernels loop gang private(temp)\n        for (int x = 0; x < 10; ++x){\n            temp = 0;\n            #pragma acc loop worker reduction(max:temp)\n            for (int y = 0; y < n; ++y){\n                temp = fmax(a[x * n + y] * b[x * n + y], temp);\n            }\n            maximum[x] = temp;\n            #pragma acc loop worker\n            for (int y = 0; y < n; ++y){\n                c[x * n + y] = (a[x * n + y] * b[x * n + y]) / maximum[x];\n            }\n        }\n    }\n    for (int x = 0; x < 10; ++x){\n        temp = 0;\n        for (int y = 0; y < n; ++y){\n            temp = fmax(temp, a[x * n + y] * b[x * n + y]);\n        }\n        if (fabs(temp - maximum[x]) > PRECISION){\n            err += 1;\n        }\n        for (int y = 0; y < n; ++y){\n            if (c[x * n + y] > 1){\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "kernels",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_max_vector_loop.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:kernels,loop,reduction,combined-constructs,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * max = (real_t *)malloc(10 * sizeof(real_t));\n    real_t temp = 0;\n    real_t temp_max;\n\n    for (int x = 0; x < 10 * n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX/10);\n        b[x] = rand() / (real_t)(RAND_MAX/10);\n    }\n    #pragma acc data copyin(a[0:10*n], b[0:10*n]) copy(max[0:10])\n    {\n        #pragma acc kernels loop private(temp)\n        for (int x = 0; x < 10; ++x){\n            temp = 0;\n            #pragma acc loop vector reduction(max:temp)\n            for (int y = 0; y < n; ++y){\n                temp = fmax(a[x * n + y] * b[x * n + y], temp);\n            }\n            max[x] = temp;\n        }\n    }\n    for (int x = 0; x < 10; ++x){\n        temp_max = 0;\n        for (int y = 0; y < n; ++y){\n            if (temp_max < a[x * n + y] * b[x * n + y]){\n                temp_max = a[x * n + y] * b[x * n + y];\n            }\n        }\n        if (fabs(temp_max - max[x]) > PRECISION){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "kernels",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_min_general.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:kernels,loop,reduction,combined-constructs,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t min = 1000.0;\n    int found = 0;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX/10);\n        b[x] = rand() / (real_t)(RAND_MAX/10);\n    }\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(min)\n    {\n        #pragma acc kernels loop reduction(min:min)\n        for (int x = 0; x < n; ++x){\n            min = fmin(a[x] * b[x], min);\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs((a[x] * b[x]) - (min + PRECISION)) < 0){\n            err = 1;\n        }\n        if (fabs(min - (a[x] * b[x])) < PRECISION){\n            found = 1;\n        }\n    }\n    if (found == 0){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "kernels",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_min_loop.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:kernels,loop,reduction,combined-constructs,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * minimum = (real_t *)malloc(10 * sizeof(real_t));\n    real_t temp = 0;\n\n    for (int x = 0; x < 10 * n; ++x){\n        a[x] = 1 + rand() / (real_t)(RAND_MAX/10);\n        b[x] = 1 + rand() / (real_t)(RAND_MAX/10);\n        c[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a[0:10*n], b[0:10*n]) copy(c[0:10*n], minimum[0:10])\n    {\n        #pragma acc kernels loop gang private(temp)\n        for (int x = 0; x < 10; ++x){\n            temp = 1000;\n            #pragma acc loop reduction(min:temp)\n            for (int y = 0; y < n; ++y){\n                temp = fmin(a[x * n + y] * b[x * n + y], temp);\n            }\n            minimum[x] = temp;\n            #pragma acc loop\n            for (int y = 0; y < n; ++y){\n                c[x * n + y] = (a[x * n + y] * b[x * n + y]) / minimum[x];\n            }\n        }\n    }\n\n    for (int x = 0; x < 10; ++x){\n        temp = 1000;\n        for (int y = 0; y < n; ++y){\n            temp = fmin(temp, a[x * n + y] * b[x * n + y]);\n        }\n        if (fabs(temp - minimum[x]) > PRECISION){\n            err += 1;\n        }\n        for (int y = 0; y < n; ++y){\n            if (fabs(c[x * n + y] - (a[x * n + y] * b[x * n + y] / minimum[x])) > PRECISION){\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "kernels",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_min_vector_loop.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:kernels,loop,reduction,combined-constructs,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * min = (real_t *)malloc(10 * sizeof(real_t));\n    real_t temp = 100;\n    real_t temp_min;\n\n    for (int x = 0; x < 10 * n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX/10);\n        b[x] = rand() / (real_t)(RAND_MAX/10);\n    }\n\n    #pragma acc data copyin(a[0:10*n], b[0:10*n]) copy(min[0:10])\n    {\n        #pragma acc kernels loop gang private(temp)\n        for (int x = 0; x < 10; ++x){\n            temp = 100;\n            #pragma acc loop vector reduction(min:temp)\n            for (int y = 0; y < n; ++y){\n                temp = fmin(a[x * n + y] * b[x * n + y], temp);\n            }\n            min[x] = temp;\n        }\n    }\n    for (int x = 0; x < 10; ++x){\n        temp_min = 100;\n        for (int y = 0; y < n; ++y){\n            if (temp_min > a[x * n + y] * b[x * n + y]){\n                temp_min = a[x * n + y] * b[x * n + y];\n            }\n        }\n        if (fabs(temp_min - min[x]) > PRECISION){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "kernels",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_multiply_general.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:kernels,loop,reduction,combined-constructs,V:1.0-2.7\nint test1(){\n    int err = 0;\n    int multiplicitive_n = 128;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(multiplicitive_n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(multiplicitive_n * sizeof(real_t));\n\n    real_t multiplied_total = 1.0;\n\n    for (int x = 0; x < multiplicitive_n; ++x){\n        a[x] = rand() / (real_t) RAND_MAX;\n        b[x] = rand() / (real_t) RAND_MAX;\n    }\n\n    #pragma acc data copyin(a[0:multiplicitive_n], b[0:multiplicitive_n]) copy(multiplied_total)\n    {\n        #pragma acc kernels loop reduction(*:multiplied_total)\n        for (int x = 0; x < multiplicitive_n; ++x){\n            multiplied_total *= a[x] + b[x];\n        }\n    }\n\n    for (int x = 0; x < multiplicitive_n; ++x){\n        multiplied_total /= (a[x] + b[x]);\n    }\n    if (fabs(multiplied_total - 1) > PRECISION * (2 * multiplicitive_n - 1)){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "kernels",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_multiply_loop.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:kernels,loop,reduction,combined-constructs,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * totals = (real_t *)malloc(10 * sizeof(real_t));\n    real_t temp;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = (999.4 + rand() / (real_t)(RAND_MAX)) / 1000;\n        b[x] = (999.4 + rand() / (real_t)(RAND_MAX)) / 1000;\n        c[x] = 0.0;\n    }\n\n\n    #pragma acc data copyin(a[0:10*n], b[0:10*n]) copyout(c[0:10*n]) copy(totals[0:10])\n    {\n        #pragma acc kernels loop gang private(temp)\n        for (int x = 0; x < 10; ++x){\n            temp = 1;\n            #pragma acc loop worker reduction(*:temp)\n            for (int y = 0; y < n; ++y){\n                temp *= a[x * n + y] + b[x * n + y];\n            }\n            totals[x] = temp;\n            #pragma acc loop worker\n            for (int y = 0; y < n; ++y){\n                c[x * n + y] = (a[x * n + y] + b[x * n + y]) / totals[x];\n            }\n        }\n    }\n\n    for (int x = 0; x < 10; ++x){\n        temp = 1;\n        for (int y = 0; y < n; ++y){\n            temp *= a[x * n + y] + b[x * n + y];\n        }\n        if (fabs(temp - totals[x]) > (temp / 2 + totals[x] / 2) * PRECISION){\n            err += 1;\n        }\n        for (int y = 0; y < n; ++y){\n            if (fabs(c[x * n + y] - ((a[x * n + y] + b[x * n + y]) / totals[x])) > PRECISION){\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "kernels",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_multiply_vector_loop.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:kernels,loop,reduction,combined-constructs,V:1.0-2.7\nint test1(){\n    int err = 0;\n    int multiplicitive_n = 128;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(10 * multiplicitive_n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(10 * multiplicitive_n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(10 * sizeof(real_t));\n    real_t temp;\n\n    for (int x = 0; x < 10 * multiplicitive_n; ++x){\n        a[x] = rand() / (real_t) RAND_MAX;\n        b[x] = rand() / (real_t) RAND_MAX;\n    }\n\n    #pragma acc data copyin(a[0:10*multiplicitive_n], b[0:10*multiplicitive_n]) copyout(c[0:10])\n    {\n        #pragma acc kernels loop private(temp)\n        for (int x = 0; x < 10; ++x){\n            temp = 1.0;\n            #pragma acc loop vector reduction(*:temp)\n            for (int y = 0; y < multiplicitive_n; ++y){\n                temp *= a[(x * multiplicitive_n) + y] + b[(x * multiplicitive_n) + y];\n            }\n            c[x] = temp;\n        }\n    }\n\n    for (int x = 0; x < 10; ++x){\n        for (int y = 0; y < multiplicitive_n; ++y){\n            c[x] /= a[(x * multiplicitive_n) + y] + b[(x * multiplicitive_n) + y];\n        }\n    }\n\n    for (int x = 0; x < 10; ++x){\n        if (fabs(c[x] - 1) > PRECISION * (4 * multiplicitive_n - 1)){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "kernels",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_or_general.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:kernels,loop,reduction,combined-constructs,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    char * a = (char *)malloc(n * sizeof(char));\n    real_t false_margin = pow(exp(1), log(.5)/n);\n    char result = 0;\n    char found = 0;\n\n    for (int x = 0; x < n; ++x){\n        if(a[x] = rand() / (real_t)(RAND_MAX) > false_margin){\n            a[x] = 1;\n        }\n        else{\n            a[x] = 0;\n        }\n    }\n\n\n    #pragma acc data copyin(a[0:n])\n    {\n        #pragma acc kernels loop reduction(||:result)\n        for (int x = 0; x < n; ++x){\n            result = result || a[x];\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (a[x] == 1){\n            found = 1;\n        }\n    }\n    if (found != result){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "kernels",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_or_loop.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:kernels,loop,reduction,combined-constructs,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    char * a = (char *)malloc(10 * n * sizeof(char));\n    char * a_copy = (char *)malloc(10 * n * sizeof(char));\n    char * results = (char *)malloc(10 * sizeof(char));\n    char temp = 0;\n    real_t false_margin = pow(exp(1), log(.5)/n);\n\n    for (int x = 0; x < 10 * n; ++x){\n        if (rand() / (real_t)(RAND_MAX) > false_margin){\n            a[x] = 1;\n            a_copy[x] = 1;\n        }\n        else{\n            a[x] = 0;\n            a_copy[x] = 0;\n        }\n    }\n    #pragma acc data copy(a[0:10*n])\n    {\n        #pragma acc kernels loop gang private(temp)\n        for (int x = 0; x < 10; ++x){\n            temp = 0;\n            #pragma acc loop worker reduction(||:temp)\n            for (int y = 0; y < n; ++y){\n                temp = temp || a[x * n + y];\n            }\n            results[x] = temp;\n            #pragma acc loop worker\n            for (int y = 0; y < n; ++y){\n                if(results[x] == 1){\n                    if (a[x * n + y] == 1){\n                        a[x * n + y] = 0;\n                    }\n                    else{\n                        a[x * n + y] = 1;\n                    }\n                }\n            }\n        }\n    }\n    for (int x = 0; x < 10; ++x){\n        temp = 0;\n        for (int y = 0; y < n; ++y){\n            temp = temp || a_copy[x * n + y];\n        }\n        if (temp != results[x]) {\n            err += 1;\n        }\n        for (int y = 0; y < n; ++y){\n            if (temp == 1){\n                if (a[x * n + y] == a_copy[x * n + y]){\n                    err += 1;\n                }\n            }\n            else {\n                if (a[x * n + y] != a_copy[x * n + y]){\n                    err += 1;\n                }\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "kernels",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_or_vector_loop.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:kernels,loop,reduction,combined-constructs,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    char * a = (char *)malloc(10 * n * sizeof(char));\n    char * b = (char *)malloc(10 * sizeof(char));\n    real_t false_margin = pow(exp(1), log(.5)/n);\n    char temp = 0;\n    char found;\n\n    for (int x = 0; x < 10 * n; ++x){\n        if(rand() / (real_t)(RAND_MAX) > false_margin){\n            a[x] = 1;\n        }\n        else{\n            a[x] = 0;\n        }\n    }\n    #pragma acc data copyin(a[0:10*n]) copy(b[0:10])\n    {\n        #pragma acc kernels loop private(temp)\n        for (int x = 0; x < 10; ++x){\n            temp = 0;\n            #pragma acc loop vector reduction(||:temp)\n            for (int y = 0; y < n; ++y){\n                temp = temp || a[x * n + y];\n            }\n            b[x] = temp;\n        }\n    }\n    for (int x = 0; x < 10; ++x){\n        found = 0;\n        for (int y = 0; y < n; ++y){\n            if (a[x * n + y] &! 0){\n                found = 1;\n            }\n        }\n        if (found != b[x]){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "kernels",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_seq.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:kernels,loop,combined-constructs,V:1.0-2.7\nint test1(){\n  int err = 0;\n  srand(SEED);\n  real_t * a = (real_t *)malloc(n * sizeof(real_t));\n  real_t * b = (real_t *)malloc(n * sizeof(real_t));\n  real_t temp = 0.0;\n\n  for (int x = 0; x < n; ++x){\n      a[x] = rand() / (real_t)(RAND_MAX / 10);\n      b[x] = 0.0;\n  }\n\n  #pragma acc data copyin(a[0:n]) copy(b[0:n])\n  {\n      #pragma acc kernels loop seq\n      for (int x = 1; x < n; ++x){\n          b[x] = b[x-1] + a[x];\n      }\n  }\n\n  for (int x = 1; x < n; ++x){\n      temp += a[x];\n      if (fabs(b[x] - temp) > PRECISION){\n          err = 1;\n      }\n  }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "kernels",
                            "loop",
                            "combined-constructs"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_tile.c": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:kernels,loop,tile,reduction,combined-constructs,V:2.0-2.7\nint test1(){\n  int err = 0;\n  srand(SEED);\n  real_t * a = (real_t *)malloc(n * sizeof(real_t));\n  real_t * b = (real_t *)malloc(n * sizeof(real_t));\n  real_t * c = (real_t *)malloc(n * sizeof(real_t));\n  real_t * d2 = (real_t *)malloc(n * n * sizeof(real_t));\n  real_t * d3 = (real_t *)malloc(n * n * n * sizeof(real_t));\n  real_t temp = 0.0;\n\n  for (int x = 0; x < n; ++x){\n      a[x] = rand() / (real_t)(RAND_MAX / 10);\n      b[x] = rand() / (real_t)(RAND_MAX / 10);\n      c[x] = rand() / (real_t)(RAND_MAX / 10);\n  }\n  #pragma acc data copy(a[0:n], b[0:n], c[0:n], d2[0:n*n])\n  {\n      #pragma acc kernels loop tile(*, *) reduction(+:temp)\n      for (int x = 0; x < n; ++x){\n          for (int y = 0; y < n; ++y){\n              temp = 0;\n              for (int z = 0; z < n; ++z){\n                  temp += a[x] + b[y] + c[z];\n              }\n              d2[x * n + y] = temp;\n          }\n      }\n  }\n  for (int x = 0; x < n; ++x){\n      for (int y = 0; y < n; ++y){\n          temp = 0.0;\n          for (int z = 0; z < n; ++z){\n              temp += a[x] + b[y] + c[z];\n          }\n          if (fabs(temp - d2[x * n + y]) > PRECISION * n){\n              err += 1;\n          }\n      }\n  }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "kernels",
                            "loop",
                            "tile",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:kernels,loop,tile,combined-constructs,V:2.0-2.7\nint test2(){\n  int err = 0;\n  srand(SEED);\n  real_t * a = (real_t *)malloc(n * sizeof(real_t));\n  real_t * b = (real_t *)malloc(n * sizeof(real_t));\n  real_t * c = (real_t *)malloc(n * sizeof(real_t));\n  real_t * d2 = (real_t *)malloc(n * n * sizeof(real_t));\n  real_t * d3 = (real_t *)malloc(n * n * n * sizeof(real_t));\n  real_t temp = 0.0;\n\n  for (int x = 0; x < n; ++x){\n      a[x] = rand() / (real_t)(RAND_MAX / 10);\n      b[x] = rand() / (real_t)(RAND_MAX / 10);\n      c[x] = rand() / (real_t)(RAND_MAX / 10);\n  }\n\n  #pragma acc data copyin(a[0:n], b[0:n], c[0:n]) copyout(d3[0:n*n*n])\n  {\n      #pragma acc kernels loop tile(n/10, n, n*2)\n      for (int x = 0; x < n; ++x){\n          for (int y = 0; y < n; ++y){\n              for (int z = 0; z < n; ++z){\n                  d3[(n * n * x) + (n * y) + z] = a[x] + b[x] + c[x];\n              }\n          }\n      }\n  }\n\n  for (int x = 0; x < n; ++x){\n      for (int y = 0; y < n; ++y){\n          for (int z = 0; z < n; ++z){\n              if (fabs(d3[(n * n * x) + (n * y) + z] - a[x] - b[x] - c[x]) > PRECISION * 2){\n                  err = 1;\n              }\n          }\n      }\n  }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "kernels",
                            "loop",
                            "tile",
                            "combined-constructs"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_vector_blocking.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:kernels,loop,V:1.0-2.7\nint test1(){\n  int err = 0;\n  srand(SEED);\n  real_t * a = (real_t *)malloc(n * sizeof(real_t));\n  real_t * b = (real_t *)malloc(n * sizeof(real_t));\n  real_t * c = (real_t *)malloc(n * sizeof(real_t));\n  real_t multiplyer = 1;\n\n  for (int x = 0; x < n; ++x){\n      a[x] = rand() / (real_t)(RAND_MAX / 10);\n      b[x] = rand() / (real_t)(RAND_MAX / 10);\n      c[x] = 0.0;\n  }\n\n  #pragma acc data copyin(a[0:n], b[0:n]) copyout(c[0:n])\n  {\n    #pragma acc kernels\n    {\n      #pragma acc loop vector\n      for (int x = 0; x < n; ++x){\n        c[x] = (a[x] + b[x]) * multiplyer;\n      }\n      multiplyer += 1;\n      #pragma acc loop vector\n      for (int x = 0; x < n; ++x){\n        c[x] += (a[x] + b[x]) * multiplyer;\n      }\n    }\n  }\n\n  for (int x = 0; x < n; ++x){\n    if (fabs(c[x] - 3 * (a[x] + b[x])) > PRECISION){\n      err + 1;\n      break;\n    }\n  }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "kernels",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_worker_blocking.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:kernels,loop,V:1.0-2.7\nint test1(){\n  int err = 0;\n  srand(SEED);\n  real_t * a = (real_t *)malloc(n * sizeof(real_t));\n  real_t * b = (real_t *)malloc(n * sizeof(real_t));\n  real_t * c = (real_t *)malloc(n * sizeof(real_t));\n  real_t multiplyer = 1;\n\n  for (int x = 0; x < n; ++x){\n      a[x] = rand() / (real_t)(RAND_MAX / 10);\n      b[x] = rand() / (real_t)(RAND_MAX / 10);\n      c[x] = 0.0;\n  }\n\n  #pragma acc data copyin(a[0:n], b[0:n]) copyout(c[0:n])\n  {\n    #pragma acc kernels\n    {\n      #pragma acc loop worker\n      for (int x = 0; x < n; ++x){\n        c[x] = (a[x] + b[x]) * multiplyer;\n      }\n      multiplyer += 1;\n      #pragma acc loop worker\n      for (int x = 0; x < n; ++x){\n        c[x] += (a[x] + b[x]) * multiplyer;\n      }\n    }\n  }\n\n  for (int x = 0; x < n; ++x){\n    if (fabs(c[x] - 3 * (a[x] + b[x])) > PRECISION){\n      err + 1;\n      break;\n    }\n  }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "kernels",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_num_gangs.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:kernels,loop,V:2.5-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * restrict a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * restrict b = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n]) copyout(b[0:n])\n    {\n        #pragma acc kernels loop num_gangs(16)\n        for (int x = 0; x < n; ++x){\n            b[x] = a[x];\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(a[x] - b[x]) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "kernels",
                            "loop"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_num_workers.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:kernels,loop,V:2.5-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * restrict a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * restrict b = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n]) copyout(b[0:n])\n    {\n        #pragma acc kernels loop num_workers(16)\n        for (int x = 0; x < n; ++x){\n            b[x] = a[x];\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(a[x] - b[x]) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "kernels",
                            "loop"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_present.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:kernels,data,structured-data,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = 0.0;\n    }\n\n    #pragma acc enter data copyin(a[0:n]) create(b[0:n])\n    #pragma acc kernels present(a[0:n], b[0:n])\n    {\n        #pragma acc loop\n        for (int x = 0; x < n; ++x){\n            b[x] = a[x];\n        }\n    }\n    #pragma acc exit data copyout(b[0:n]) delete(a[0:n])\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(b[x] - a[x]) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "kernels",
                            "data",
                            "structured-data"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_scalar_default_copy.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:kernels,data,data-region,default-mapping,V:2.5-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t sum = 0.0;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n\n    for (int x = 0; x < n; ++x){\n        sum = sum + a[x];\n    }\n\n    #pragma acc data copyin(b[0:n])\n    {\n        #pragma acc kernels num_gangs(1) vector_length(1)\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                sum = sum + b[x];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        sum = sum - (a[x] + b[x]);\n    }\n\n    if (fabs(sum) > (2 * n - 2) * PRECISION){\n        err += 1;\n        sum = 0.0;\n        for (int x = 0; x < n; ++x){\n            sum = sum + a[x];\n        }\n        sum = 0.0;\n        for (int x = 0; x < n; ++x){\n            sum = sum + b[x];\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "kernels",
                            "data",
                            "data-region",
                            "default-mapping"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_vector_length.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:kernels,V:2.5-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n]) copyout(b[0:n])\n    {\n        #pragma acc kernels vector_length(16)\n        {\n            #pragma acc loop vector\n            for (int x = 0; x < n; ++x){\n                b[x] = a[x];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(a[x] - b[x]) > PRECISION) {\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "kernels"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_wait.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:kernels,wait,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0.0;\n    }\n\n    #pragma acc enter data copyin(a[0:n], b[0:n], c[0:n]) async(1)\n    #pragma acc kernels wait(1)\n    {\n        #pragma acc loop\n        for (int x = 0; x < n; ++x){\n            c[x] += a[x] + b[x];\n        }\n    }\n\n    #pragma acc exit data copyout(c[0:n]) delete(a[0:n], b[0:n])\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION) {\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "kernels",
                            "wait"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "loop_collapse.c": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:loop,construct-independent,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(10 * n * sizeof(real_t));\n\n    for (int x = 0; x < 10 * n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0;\n    }\n    for (int x = 0; x < 10; ++x){\n        c[x * n] = a[x * n] + b[x * n];\n    }\n\n    #pragma acc data copyin(a[0:10*n], b[0:10*n]) copy(c[0:10*n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop independent collapse(1)\n            for (int x = 0; x < 10; ++x){\n                for (int y = 1; y < n; ++y){\n                    c[x * n + y] = c[x * n + y - 1] + a[x * n + y] + b[x * n + y];\n                }\n            }\n        }\n    }\n\n    real_t total;\n    for (int x = 0; x < 10; ++x){\n        total = 0;\n        for (int y = 0; y < n; ++y){\n            total += a[x * n + y] + b[x * n + y];\n            if (fabs(c[x * n + y] - total) > PRECISION){\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "loop",
                            "construct-independent"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:loop,syntactic,construct-independent,V:1.0-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(10 * n * sizeof(real_t));\n\n    for (int x = 0; x < 10 * n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a[0:10*n], b[0:10*n]) copyout(c[0:10*n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop independent collapse(2)\n            for (int x = 0; x < 10; ++x){\n                for (int y = 0; y < n; ++y){\n                    c[x * n + y] = a[x * n + y] + b[x * n + y];\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < 10 * n; ++x){\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "loop",
                            "syntactic",
                            "construct-independent"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "loop_no_collapse_default.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:loop,construct-independent,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t total = 0;\n\n    for (int x = 0; x < 10 * n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    for (int x = 0; x < 10; ++x){\n        c[x * n] = a[x * n] + b[x * n];\n    }\n\n    #pragma acc data copyin(a[0:10*n], b[0:10*n]) copy(c[0:10*n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop independent\n            for (int x = 0; x < 10; ++x){\n                for (int y = 1; y < n; ++y){\n                    c[x * n + y] = c[x * n + y - 1] + a[x * n + y] + b[x * n + y];\n                }\n            }\n        }\n    }\n    for (int x = 0; x < 10; ++x){\n        total = 0;\n        for (int y = 0; y < n; ++y){\n            total += a[x * n + y] + b[x * n +y];\n            if (fabs(total - c[x * n + y]) > PRECISION * y){\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "loop",
                            "construct-independent"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:parallel,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t* a = (real_t *) malloc(1024 * sizeof(real_t));\n    real_t* b = (real_t *) malloc(1024 * sizeof(real_t));\n    real_t* c = (real_t *) malloc(1024 * sizeof(real_t));\n\n    for(int x = 0; x < 1024; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a[0:1024], b[0:1024]) copy(c[0:1024])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int _0 = 0; _0 < 2; ++_0){\n                #pragma acc loop\n                for (int _1 = 0; _1 < 2; ++_1){\n                    #pragma acc loop\n                    for (int _2 = 0; _2 < 2; ++_2){\n                        #pragma acc loop\n                        for (int _3 = 0; _3 < 2; ++_3){\n                            #pragma acc loop\n                            for (int _4 = 0; _4 < 2; ++_4){\n                                #pragma acc loop\n                                for (int _5 = 0; _5 < 2; ++_5){\n                                    #pragma acc loop\n                                    for (int _6 = 0; _6 < 2; ++_6){\n                                        #pragma acc loop\n                                        for (int _7 = 0; _7 < 2; ++_7){\n                                            #pragma acc loop\n                                            for (int _8 = 0; _8 < 2; ++_8){\n                                                #pragma acc loop\n                                                for (int _9 = 0; _9 < 2; ++_9){\n                                                    c[_0*512 + _1*256 + _2*128 + _3*64 + _4*32 + _5*16 + _6*8+ _7*4 + _8*2 + _9] =\n                                                    a[_0*512 + _1*256 + _2*128 + _3*64 + _4*32 + _5*16 + _6*8+ _7*4 + _8*2 + _9] +\n                                                    b[_0*512 + _1*256 + _2*128 + _3*64 + _4*32 + _5*16 + _6*8+ _7*4 + _8*2 + _9];\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < 1024; ++x){\n        if(fabs(c[x] - (a[x] +b[x])) > PRECISION){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "parallel"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_async.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:parallel,async,wait,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n    real_t * d = (real_t *)malloc(n * sizeof(real_t));\n    real_t * e = (real_t *)malloc(n * sizeof(real_t));\n    real_t * f = (real_t *)malloc(n * sizeof(real_t));\n    real_t * g = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0.0;\n        d[x] = rand() / (real_t)(RAND_MAX / 10);\n        e[x] = rand() / (real_t)(RAND_MAX / 10);\n        f[x] = 0.0;\n        g[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n], d[0:n], e[0:n], c[0:n], f[0:n], g[0:n])\n    {\n        #pragma acc parallel async(1)\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                c[x] = a[x] + b[x];\n            }\n        }\n        #pragma acc parallel async(2)\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                f[x] = d[x] + e[x];\n            }\n        }\n        #pragma acc parallel wait(1, 2) async(3)\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                g[x] = c[x] + f[x];\n            }\n        }\n        #pragma acc update host(c[0:n]) async(1)\n        #pragma acc update host(f[0:n]) async(2)\n        #pragma acc update host(g[0:n]) async(3)\n\n        #pragma acc wait(1)\n        for (int x = 0; x < n; ++x){\n            if (fabs(c[x] - (a[x] + b[x])) > PRECISION){\n                err += 1;\n            }\n        }\n        #pragma acc wait(2)\n        for (int x = 0; x < n; ++x){\n            if (fabs(f[x] - (d[x] + e[x])) > PRECISION){\n                err += 1;\n            }\n        }\n        #pragma acc wait(3)\n        for (int x = 0; x < n; ++x){\n            if (fabs(g[x] - (a[x] + b[x] + d[x] + e[x])) > PRECISION){\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "async",
                            "wait"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_copy.c": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:parallel,data,data-region,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * a_host = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        a_host[x] = a[x];\n    }\n\n    #pragma acc parallel copy(a[0:n])\n    {\n        #pragma acc loop\n        for (int x = 0; x < n; ++x){\n            a[x] = 2 * a[x];\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(a[x] - (2 * a_host[x])) > PRECISION){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed += test1();\n    }\n    if(failed){\n        failcode +=  (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "data",
                            "data-region"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\nint test2(){\n    int err = 0;\n    srand(SEED);\n    real_t device = rand() / (real_t)(RAND_MAX / 10);\n    real_t host = device;\n    #pragma acc parallel loop copy(device) reduction(+:device)\n    for(int x = 0; x < n; ++x){\n        device += 1.0;\n    }\n\n    if(fabs(device - host) > PRECISION){\n            err++;\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed += test2();\n    }\n    if(failed){\n        failcode +=  (1 << 1);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    }
                }
            },
            "parallel_copyin.c": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:parallel,data,data-region,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * a_copy = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    int* hasDevice = (int *) malloc(sizeof(int));\n    hasDevice[0] = 1;\n    #pragma acc enter data copyin(hasDevice[0:1])\n    #pragma acc parallel present(hasDevice[0:1])\n    {\n      hasDevice[0] = 0;\n    }\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        a_copy[x] = a[x];\n        b[x] = 0.0;\n    }\n\n    #pragma acc parallel copyin(a[0:n])\n    {\n        #pragma acc loop\n        for (int x = 0; x < n; ++x){\n            a[x] = 0.0;\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (((fabs(a[x] - a_copy[x]) > PRECISION) && (hasDevice[0] == 1)) || ((hasDevice[0] == 0) && (fabs(a[x]) > PRECISION))){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "data",
                            "data-region"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:parallel,data,data-region,V:1.0-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * a_copy = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n\n    #pragma acc data copy(b[0:n])\n    {\n        #pragma acc parallel copyin(a[0:n])\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                b[x] = a[x];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(a[x] - b[x]) > PRECISION){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "data",
                            "data-region"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_copyout.c": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:parallel,data,data-region,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a[0:n])\n    {\n        #pragma acc parallel copyout(b[0:n])\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                b[x] = a[x];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(a[x] - b[x]) > PRECISION){\n            err += 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "data",
                            "data-region"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:parallel,data,data-region,devonly,V:2.0-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n\n    int* hasDevice = (int *) malloc(sizeof(int));\n    hasDevice[0] = 1;\n    #pragma acc enter data copyin(hasDevice[0:1])\n    #pragma acc parallel present(hasDevice[0:1])\n    {\n      hasDevice[0] = 0;\n    }\n\n    if (hasDevice[0] == 1){\n        for (int x = 0; x < n; ++x){\n            a[x] = rand() / (real_t)(RAND_MAX / 10);\n            b[x] = a[x];\n        }\n\n        #pragma acc data copyin(a[0:n], b[0:n])\n        {\n            #pragma acc parallel copyout(b[0:n])\n            {\n                #pragma acc loop\n                for (int x = 0; x < n; ++x){\n                    b[x] = b[x] - a[x];\n                }\n            }\n        }\n        for (int x = 0; x < n; ++x){\n          if (fabs(a[x] - b[x]) > PRECISION){\n            err += 2;\n            break;\n          }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "data",
                            "data-region",
                            "devonly"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n//T3:parallel,data,data-region,V:1.0-2.7\nint test3(){\n    int err = 0;\n    srand(SEED);\n\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = a[x];\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n])\n    {\n        #pragma acc parallel copyout(b[0:n])\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                b[x] = b[x] - a[x];\n            }\n        }\n        #pragma acc update host(b[0:n])\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(b[x]) > 2 * PRECISION){\n            err += 4;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T3\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test3();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 2);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "data",
                            "data-region"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_copyout_zero.c": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:parallel,data,data-region,V:3.0-3.2\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n]) \n    {\n      #pragma acc parallel copyout(zero: b[0:n])\n      {\n        #pragma acc loop\n        {\n          for (int x = 0; x < n; ++x){\n            b[x] += a[x];\n          }\n        }\n      }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if(fabs(a[x] - b[x]) > PRECISION){\n                err += 1;\n                break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "data",
                            "data-region"
                        ],
                        "versions": []
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:parallel,data,data-region,devonly,V:3.0-3.1\nint test2(){\n    //for development; logic test\n    int err = 0;\n    srand(SEED);\n\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n\n    int* hasDevice = (int *) malloc(sizeof(int));\n    hasDevice[0] = 1;\n    #pragma acc enter data copyin(hasDevice[0:1])\n    #pragma acc parallel present(hasDevice[0:1])\n    {\n      hasDevice[0] = 0;\n    }\n\n    if (hasDevice[0] == 1){\n      for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = 1;\n      }\n\n      #pragma acc data copyin(a[0:n])\n      {\n        #pragma acc parallel copyout(zero: b[0:n])\n        {\n          #pragma acc loop\n          {\n            for (int x = 0; x < n; ++x){\n              b[x] += a[x];\n            }\n          }\n        }\n      }\n\n      for (int x = 0; x < n; ++x){\n          if(fabs(a[x] - b[x]) > PRECISION){\n                  err += 1;\n                  break;\n          }\n      }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "data",
                            "data-region",
                            "devonly"
                        ],
                        "versions": []
                    },
                    "3": {
                        "content": "#ifndef T3\n//T3:parallel,data,data-region,V:3.0-3.1\nint test3(){\n    int err = 0;\n    srand(SEED);\n\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = 1;\n    }\n\n    #pragma acc data copyin(a[0:n]) copy(b[0:n])\n    {\n      #pragma acc parallel copyout(zero: b[0:n])\n      {\n        #pragma acc loop\n        {\n          for (int x = 0; x < n; ++x){\n            b[x] += a[x];\n          }\n        }\n      }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if(fabs(a[x] - b[x] + 1) > PRECISION){\n                err += 1;\n                break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T3\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test3();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 2);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "data",
                            "data-region"
                        ],
                        "versions": []
                    }
                }
            },
            "parallel_create.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:parallel,data,data-region,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = 0.0;\n        c[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a[0:n]) copy(c[0:n])\n    {\n        #pragma acc parallel create(b[0:n])\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                b[x] = a[x];\n            }\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                c[x] = b[x];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(a[x] - c[x]) > PRECISION){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "data",
                            "data-region"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_create_zero.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//#T1:parallel,data,data_region,V:3.0-3.2\nint Test1(){\n    int err=0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n\n    for( int x = 0; x < n; x++){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a[0:n]) copyout(b[0:n]\n    {\n        #pragma acc parallel create(zero: b[0:n])\n        {\n            #pragma acc loop\n            {\n                for(int x = 0; x < n; x++){\n                    b[x] += a[x];\n                }\n            }\n        }\n    }\n    for (int x = 0; x < n; ++x){\n        if (fabs(a[x] - b[x]) > PRECISION){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    }
                }
            },
            "parallel_default_copy.c": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:parallel,data,data-region,default-mapping,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t c[n];\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                c[x] += a[x] + b[x];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "data",
                            "data-region",
                            "default-mapping"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:parallel,data,data-region,default-mapping,V:2.0-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t c[n];\n    int * devtest = (int *)malloc(sizeof(real_t));\n\n    devtest[0] = 1;\n    #pragma acc enter data copyin(devtest[0:1])\n    #pragma acc parallel present(devtest[0:1])\n    {\n        devtest[0] = 0;\n    }\n\n    if (devtest[0] == 1){\n        for (int x = 0; x < n; ++x){\n            a[x] = rand() / (real_t)(RAND_MAX / 10);\n            b[x] = rand() / (real_t)(RAND_MAX / 10);\n            c[x] = 1;\n        }\n\n        #pragma acc enter data copyin(c[0:n])\n        for (int x = 0; x < n; ++x){\n            c[x] = 0.0;\n        }\n        #pragma acc data copyin(a[0:n], b[0:n])\n        {\n            #pragma acc parallel\n            {\n                #pragma acc loop\n                for (int x = 0; x < n; ++x){\n                    c[x] += a[x] + b[x];\n                }\n            }\n        }\n\n        for (int x = 0; x < n; ++x){\n            if (fabs(c[x]) > PRECISION){\n                err += 1;\n            }\n        }\n\n        #pragma acc exit data copyout(c[0:n])\n\n        for (int x = 0; x < n; ++x){\n            if (fabs(c[x] - (a[x] + b[x] + 1)) > PRECISION){\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "data",
                            "data-region",
                            "default-mapping"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_default_present.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:parallel,default,data,data-region,V:2.5-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = 0.0;\n    }\n    #pragma acc enter data copyin(a[0:n])\n    #pragma acc parallel default(present)\n    {\n        #pragma acc loop\n        for (int x = 0; x < n; ++x){\n            a[x] = 1.0;\n        }\n    }\n    #pragma acc exit data copyout(a[0:n])\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(a[x] - 1.0) > PRECISION){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "default",
                            "data",
                            "data-region"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_deviceptr.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:parallel,runtime,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = 0;\n    }\n\n    #pragma acc enter data copyin(a[0:n])\n    b = (real_t *) acc_deviceptr(a);\n    if (b == NULL){\n        err = 1;\n    }\n    else{\n        #pragma acc parallel deviceptr(b)\n        {\n            #pragma acc loop\n            for (int x = 0; x < (int) n/2; ++x){\n                b[x] = 1;\n            }\n        }\n        #pragma acc exit data copyout(a[0:n])\n    }\n    for (int x = 0; x < n; ++x){\n        if (x < (int) n/2){\n            if (fabs(a[x] - 1) > PRECISION){\n                err = 1;\n            }\n        }\n        else {\n            if (fabs(a[x]) > PRECISION){\n                err = 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "runtime"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_firstprivate.c": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:parallel,firstprivate,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c_copy = (real_t *)malloc(n * sizeof(real_t));\n    real_t * d = (real_t *)malloc(10 * n * sizeof(real_t));\n\n    for (int x = 0; x < 10*n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        d[x] = 0.0;\n    }\n    for (int x = 0; x < n; ++x){\n        c[x] = rand() / (real_t)(RAND_MAX / 10);\n        c_copy[x] = c[x];\n    }\n    #pragma acc data copyin(a[0:10*n], b[0:10*n]) copy(d[0:10*n])\n    {\n        #pragma acc parallel firstprivate(c[0:n])\n        {\n            #pragma acc loop gang\n            for (int x = 0; x < 10; ++x){\n                #pragma acc loop worker\n                for (int y = 0; y < n; ++y){\n                    d[x * n + y] = a[x * n + y] + b[x * n + y] + c[y];\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < 10; ++x){\n        for (int y = 0; y < n; ++y){\n            if (fabs(d[x * n + y] - (a[x * n + y] + b[x * n + y] + c_copy[y])) > PRECISION){\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "firstprivate"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:parallel,firstprivate,V:1.0-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c_copy = (real_t *)malloc(n * sizeof(real_t));\n    real_t * d = (real_t *)malloc(10 * n * sizeof(real_t));\n\n    for (int x = 0; x < 10*n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        d[x] = 0.0;\n    }\n    for (int x = 0; x < n; ++x){\n        c[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a[0:10*n], b[0:10*n]) copy(d[0:10*n])\n    {\n        #pragma acc parallel firstprivate(c[0:n])\n        {\n            #pragma acc loop gang independent\n            for (int x = 0; x < 10; ++x){\n                #pragma acc loop worker independent\n                for (int y = 0; y < n; ++y){\n                    c[y] = a[x * n + y] - b[x * n + y];\n                }\n                #pragma acc loop worker independent\n                for (int y = 0; y < n; ++y){\n                    d[x * n + y] = a[x * n + y] + b[x * n + y] + c[y];\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < 10 * n; ++x){\n        if (fabs(d[x] - 2 * a[x]) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "firstprivate"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_if.c": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:parallel,if,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n    int accel = 1;\n    int host = 0;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0.0;\n    }\n    #pragma acc parallel if(host)\n    {\n        #pragma acc loop\n        for (int x = 0; x < n; ++x){\n            c[x] = a[x] + b[x];\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "if"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:parallel,if,devonly,V:2.0-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n    int * dev_test = (int *)malloc(sizeof(int));\n    int accel = 1;\n    int host = 0;\n\n    dev_test[0] = 1;\n    #pragma acc data copyin(dev_test[0:1])\n    #pragma acc parallel\n    {\n      dev_test[0] = 0;\n    }\n\n    if (devtest[0] != 0){\n        for (int x = 0; x < n;  ++x){\n            a[x] = rand() / (real_t)(RAND_MAX / 10);\n            b[x] = rand() / (real_t)(RAND_MAX / 10);\n            c[x] = 0;\n        }\n\n        #pragma acc enter data copyin(a[0:n], b[0:n], c[0:n])\n        #pragma acc parallel if(host) present(a[0:n], b[0:n], c[0:n])\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                c[x] += a[x] + b[x];\n            }\n        }\n        #pragma acc exit data delete(a[0:n], b[0:n]) copyout(c[0:n])\n\n        for (int x = 0; x < n; ++x){\n            if (fabs(c[x]) > PRECISION){\n                err = 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "if",
                            "devonly"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n//T3:parallel,if,V:2.0-2.7\nint test3(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n    int accel = 1;\n    int host = 0;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0;\n    }\n\n    #pragma acc enter data copyin(a[0:n], b[0:n], c[0:n])\n\n    #pragma acc parallel if(accel) present(a[0:n], b[0:n], c[0:n])\n    {\n        #pragma acc loop\n        for (int x = 0; x < n; ++x){\n            c[x] += a[x] + b[x];\n        }\n    }\n\n    #pragma acc exit data delete(a[0:n], b[0:n]) copyout(c[0:n])\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION * 2){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T3\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test3();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 2);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "if"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_implicit_data_attributes.c": {
                "num tests": 4,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//copy clause test wih parallel default(none) and reduction with scalar variable\nint test1(){\n    int err = 0;\n    srand(SEED);\n    int test = rand()/(real_t)(RAND_MAX/10);\n    int host = test;\n\n    #pragma acc parallel default(none) reduction(+:test)\n    for(int x = 0; x < n; ++x){\n\ttest += 1;\n    }\n\n    if(fabs( test - host) >  PRECISION){\n\terr++;\n    }\n    \n    return err;\n} \n#endif\n#ifndef T1\n\tfailed = 0;\n\tfor( int x = 0; x < NUM_TEST_CALLS; ++x){\n\t\tfailed += test1();\n\t}\n\tif(failed){\n\t\tfailcode += ( 1 << 0);\n\t}\n#endif\n",
                        "tags": [],
                        "versions": []
                    },
                    "2": {
                        "content": "#ifndef T2\n//copy clause test with parallel loop and reduction with scalar variable\nint test2(){\n\tint err = 0;\n\tsrand(SEED);\n\treal_t a = rand()/(real_t)(RAND_MAX/10);\n\treal_t host = a;\n\n\t#pragma acc parallel loop reduction(+:a)\n\tfor( int x = 0; x < n; ++x){\n\t\ta += 1.0;\n\t}\n\n\tif( fabs( a - host) > PRECISION){\n\t\terr++;\n\t}\n\treturn err;\n}\n#endif\n#ifndef T2\n        failed = 0;\n        for( int x = 0; x < NUM_TEST_CALLS; ++x){\n                failed += test2();\n        }\n        if(failed){\n                failcode += ( 1 << 1);\n        }\n#endif\n",
                        "tags": [],
                        "versions": []
                    },
                    "3": {
                        "content": "#ifndef T3\n//firstprivate test with only parallel and reduction with scalar variable\nint test3(){\n\tint err = 0;\n\tsrand(SEED);\n\tint host_value = rand()/ (real_t)(RAND_MAX/10);\n\tint device_value = host_value;\n\n\t#pragma acc parallel reduction(+:device_value) \n\tfor( int x = 0; x > n; ++ x){\n\t\tdevice_value += device_value;\n\t}\n\tif( fabs(host_value - device_value) > PRECISION){\n\t\terr = 1;\n\t}\n\treturn err;\n}\t\n#endif\n#ifndef T3\n        failed = 0;\n        for( int x = 0; x < NUM_TEST_CALLS; ++x){\n                failed += test3();\n        }\n        if(failed){\n                failcode += ( 1 << 2);\n        }\n#endif\n",
                        "tags": [],
                        "versions": []
                    },
                    "4": {
                        "content": "#ifndef T4\n//copy clause wtth that calles detach action only parallel loop  with aggregate variables\nint test4(){\n\tint err = 0;\n\tsrand(SEED);\n\n\treal_t *host_array = (real_t *)malloc( n * sizeof(real_t));\n\treal_t *device_array = (real_t *)malloc( n * sizeof(real_t));\n\n\tfor(int x = 0; x < n; ++ x){\n\t\thost_array[x] = rand()/(real_t)(RAND_MAX/10);\n\t\tdevice_array[x] = host_array[x];\n\t}\n\n\t#pragma acc parallel loop\n\tfor( int x = 0; x < n; ++x){\n\t\tdevice_array[x] += device_array[x];\n\t}\n\n\tfor(int x = 0; x < n; ++x){\n\t\tif(fabs(host_array[x]*2 - device_array[x]) > PRECISION){\n\t\t\terr = 1;\n\t\t}\n\t}\n\tfree(host_array);\n\tfree(device_array);\n\treturn err;\n\n}\n#endif\n#ifndef T4\n        failed = 0;\n        for( int x = 0; x < NUM_TEST_CALLS; ++x){\n                failed += test4();\n        }\n        if(failed){\n                failcode += ( 1 << 3);\n        }\n#endif\n",
                        "tags": [],
                        "versions": []
                    }
                }
            },
            "parallel_independent_atomic.c": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.7-3.2\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n\n    #pragma acc data copy(a[0:n], b[0:n])\n    {\n        #pragma acc parallel\n        {\n\t    #pragma acc loop independent\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic \n                    a[x] = a[x] * 2; //dependent\n                    b[x] = a[x];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(a[x] - b[x]) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n   failed = 0;\n   for (int x = 0; x < NUM_TEST_CALLS; ++x){\n       failed = failed + test1();\n   }\n   if (failed != 0){\n       failcode = failcode + (1 << 0);\n   }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:parallel,loop,V:2.7-3.2\nint test2(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = a[x];\n    }\n\n    #pragma acc data copy(a[0:n])\n    {\n        #pragma acc parallel\n        {\n\t    #pragma acc loop independent\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic\n                    (a[x])++; //independent - without a clause, you're doing atomic update   \n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(a[x] - (b[x] + 1)) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "loop"
                        ],
                        "versions": [
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_independent_atomic_capture.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.7-3.2\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n\n    #pragma acc data copy(a[0:n], b[0:n])\n    {\n        #pragma acc parallel\n        {\n\t    #pragma acc loop independent\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic capture\n                    b[x] = (a[x])++;\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(a[x] - (b[x] + 1)) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n   failed = 0;\n   for (int x = 0; x < NUM_TEST_CALLS; ++x){\n       failed = failed + test1();\n   }\n   if (failed != 0){\n       failcode = failcode + (1 << 0);\n   }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_independent_atomic_read.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.7-3.2\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n\n    #pragma acc data copy(a[0:n], b[0:n])\n    {\n        #pragma acc parallel\n        {\n\t    #pragma acc loop independent\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic read\n                    b[x] = a[x];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(a[x] - b[x]) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n   failed = 0;\n   for (int x = 0; x < NUM_TEST_CALLS; ++x){\n       failed = failed + test1();\n   }\n   if (failed != 0){\n       failcode = failcode + (1 << 0);\n   }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_independent_atomic_update.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.7-3.2\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = a[x];\n    }\n\n    #pragma acc data copy(a[0:n])\n    {\n        #pragma acc parallel\n        {\n\t    #pragma acc loop independent\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic update\n                    (a[x])++;\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(a[x] - (b[x] + 1)) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n   failed = 0;\n   for (int x = 0; x < NUM_TEST_CALLS; ++x){\n       failed = failed + test1();\n   }\n   if (failed != 0){\n       failcode = failcode + (1 << 0);\n   }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_independent_atomic_write.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:atomic,construct-independent,V:2.7-3.2\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n\n    #pragma acc data copy(a[0:n], b[0:n])\n    {\n        #pragma acc parallel\n        {\n\t    #pragma acc loop independent\n            for (int x = 0; x < n; ++x){\n                #pragma acc atomic write\n                    b[x] = a[x];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(a[x] - b[x]) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n   failed = 0;\n   for (int x = 0; x < NUM_TEST_CALLS; ++x){\n       failed = failed + test1();\n   }\n   if (failed != 0){\n       failcode = failcode + (1 << 0);\n   }\n#endif\n",
                        "tags": [
                            "atomic",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop.c": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:parallel,loop,combined-constructs,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = 0;\n    }\n\n    #pragma acc data copy(a[0:n])\n    {\n        #pragma acc parallel loop\n        for (int x = 0; x < n; ++x){\n            a[x] = 1.0;\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(a[x] - 1.0) > PRECISION){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "loop",
                            "combined-constructs"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:parallel,loop,V:1.0-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n      a[x] = 0.0;\n      b[x] = rand() / (real_t)(RAND_MAX / 10);\n      c[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    #pragma acc data copy(a[0:n], b[0:n], c[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                a[x] = b[x];\n            }\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                a[x] += c[x];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(a[x] - (b[x] + c[x])) > PRECISION * 2){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_async.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:parallel,loop,async,combined-constructs,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * d = (real_t *)malloc(10 * n * sizeof(real_t));\n\t\tint * errors = (int *)malloc(10 * sizeof(int));\n\n\t\tfor (int x = 0; x < 10; ++x){\n\t\t\terrors[x] = 0;\n\t\t}\n\n    for (int x = 0; x < 10 * n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0.0;\n        d[x] = a[x] + b[x];\n    }\n\n    #pragma acc data copyin(a[0:10*n], b[0:10*n], c[0:10*n], d[0:10*n]) copy(errors[0:10])\n    {\n        for (int x = 0; x < 10; ++x){\n            #pragma acc parallel loop async(x)\n            for (int y = 0; y < n; ++y){\n                c[x * n + y] = a[x * n + y] + b[x * n + y];\n            }\n            #pragma acc parallel loop async(x) reduction(+:errors[x])\n            for (int y = 0; y < n; ++y){\n                if(c[x * n + y] - d[x * n + y] > PRECISION || d[x * n + y] - c[x * n + y] > PRECISION){\n                    errors[x] += 1;\n                }\n            }\n        }\n\t\t\t\t#pragma acc wait\n    }\n\n    for (int x = 0; x < 10; ++x){\n        err += errors[x];\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "loop",
                            "async",
                            "combined-constructs"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_auto.c": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:parallel,loop,combined-constructs,syntactic,V:2.0-2.7\n//data independent, treated as a independent clause\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * value = (real_t *)malloc(n * sizeof(real_t));\n    real_t * empty = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        value[x] = rand() / (real_t)(RAND_MAX / 10);\n        empty[x] = 0;\n    }\n\n    #pragma acc data copyin(value[0:n]) copy(empty[0:n])\n    {\n      #pragma acc parallel loop auto\n      for (int x = 0; x < n; ++x){\n        empty[x] = value[x];\n      }\n    }\n\n    for (int x = 0; x < n; ++x){\n      if (fabs(empty[x] - value[x]) > PRECISION){\n        err = 1;\n      }\n    }\n\n    free(value);\n    free(empty);\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed +=  test1();\n    }\n    if (failed){\n        failcode +=  (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "loop",
                            "combined-constructs",
                            "syntactic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:parallel,loop,combined-constructs,syntactic,V:2.0-2.7\n//data dependent, treated with as a seq clause. Added the num_gangs clause with 1\nint test3(){\n    int err = 0;\n    srand(SEED);\n    real_t * device = (real_t *)malloc(n * sizeof(real_t));\n    real_t * host = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        device[x] = rand() / (real_t)(RAND_MAX / 10);\n        host[x] = device[x];\n    }\n\n    #pragma acc data copy(device[0:n])\n    {\n      #pragma acc parallel loop num_gangs(1) auto\n      for (int x = 1; x < n; ++x){\n        device[x] = device[x - 1] + device[x];\n      }\n    }\n\n    real_t rolling_total = 0.0;\n    for (int x = 0; x < n; ++x){\n      rolling_total += host[x];\n      if (fabs(rolling_total - device[x]) > PRECISION){\n        err = 1;\n      }\n    }\n\n    free(device);\n    free(host);\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed += test2();\n    }\n    if (failed){\n        failcode += (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "loop",
                            "combined-constructs",
                            "syntactic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n//T3:parallel,loop,combined-constructs,V:2.0-2.7\n//data dependent, treated with as a seq clause. \nint test3(){\n    int err = 0;\n    srand(SEED);\n    real_t * device = (real_t *)malloc(n * sizeof(real_t));\n    real_t * host = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        device[x] = rand() / (real_t)(RAND_MAX / 10);\n        host[x] = device[x];\n    }\n\n    #pragma acc data copy(device[0:n])\n    {\n      #pragma acc parallel loop num_gangs(1) vector worker auto\n      for (int x = 1; x < n; ++x){\n        device[x] = device[x - 1] + device[x];\n      }\n    }\n\n    real_t rolling_total = 0.0;\n    for (int x = 0; x < n; ++x){\n      rolling_total += host[x];\n      if (fabs(rolling_total - device[x]) > PRECISION){\n        err = 1;\n      }\n    }\n\n    free(device);\n    free(host);\n\n    return err;\n}\n\n\n#endif\n#ifndef T3\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed += test3();\n    }\n    if (failed){\n        failcode += (1 << 2);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "loop",
                            "combined-constructs"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_gang.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:parallel,loop,combined-constructs,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(c[0:n])\n    {\n        #pragma acc parallel loop gang\n        for (int x = 0; x < n; ++x){\n            c[x] = a[x] + b[x];\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "loop",
                            "combined-constructs"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_independent.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:parallel,loop,combined-constructs,V:2.7-3.2\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n\n    #pragma acc data copy(a[0:n]) copyout(b[0:n])\n    {\n        #pragma acc parallel loop independent\n        for (int x = 0; x < n; ++x){\n            b[x] = a[x];\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(a[x] - b[x]) > PRECISION){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "loop",
                            "combined-constructs"
                        ],
                        "versions": [
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_independent_reduction.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:parallel,reduction,V:2.7-3.2\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t reduction;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n\n    #pragma acc parallel copyin(a[0:n]) reduction(+:reduction)\n    {\n        #pragma acc loop independent\n        for (int x = 0; x < n; ++x){\n            reduction = reduction + a[x];\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        reduction = reduction - a[x];\n    }\n    if (fabs(reduction) > PRECISION){\n        err += 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "reduction"
                        ],
                        "versions": [
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_add_general.c": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:parallel,loop,reduction,combined-constructs,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t total;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n\n    total = 10;\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(total)\n    {\n        #pragma acc parallel loop reduction(+:total)\n        for (int x = 0; x < n; ++x){\n            total += a[x] + b[x];\n        }\n    }\n    for (int x = 0; x < n; ++x){\n        total -= a[x] + b[x];\n    }\n    if (fabs(total - 10) > PRECISION * (2 * n - 1)){ //199 = # of mathematical operations necessary\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:parallel,loop,reduction,combined-constructs,V:2.7-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * 10 * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * 10 * sizeof(real_t));\n    real_t c[10];\n    real_t c_host[10];\n\n    for (int x = 0; x < 10 * n; ++x) {\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n\n    for (int x = 0; x < 10; ++x) {\n        c[x] = 1.0;\n        c_host[x] = 1.0;\n    }\n\n    #pragma acc data copyin(a[0:10*n], b[0:10*n])\n    {\n        #pragma acc parallel loop reduction(+:c[0:10])\n        for (int x = 0; x < n; ++x) {\n            for (int y = 0; y < 10; ++y) {\n                c[y] += a[x * 10 + y] + b[x * 10 + y];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x) {\n        for (int y = 0; y < 10; ++y) {\n            c_host[y] += a[x * 10 + y] + b[x * 10 + y];\n        }\n    }\n\n    for (int x = 0; x < 10; ++x) {\n        if (fabs(c_host[x] - c[x]) > PRECISION) {\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_add_general_type_check_pt1.c": {
                "num tests": 8,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:parallel,reduction,combined-constructs,loop,V:1.0-2.7\nint test1() {\n    int err = 0;\n    srand(SEED);\n    _Bool* a = (_Bool*)malloc(n * sizeof(_Bool));\n    _Bool* b = (_Bool*)malloc(n * sizeof(_Bool));\n    _Bool total = 1;\n    _Bool host_total = 1;\n\n    for (int x = 0; x < n; ++x) {\n        if ((rand()/((real_t) RAND_MAX)) > .5) {\n            a[x] = 1;\n        }\n        else {\n            a[x] = 0;\n        }\n        if ((rand()/((real_t) RAND_MAX)) > .5) {\n            b[x] = 1;\n        }\n        else {\n            b[x] = 0;\n        }\n    }\n    \n    #pragma acc data copyin(a[0:n], b[0:n])\n    {\n        #pragma acc parallel loop reduction(+:total)\n        for (int x = 0; x < n; ++x) {\n            total += a[x] + b[x];\n        }\n    }\n    \n\n    for (int x = 0; x < n; ++x) {\n        host_total += a[x] + b[x];\n    }\n\n    if (total != host_total) {\n        err += 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x) {\n        failed = failed + test1();\n    }\n    if (failed != 0) {\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:parallel,reduction,combined-constructs,loop,V:1.0-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    char * a = (char *)malloc(n * sizeof(char));\n    char * b = (char *)malloc(n * sizeof(char));\n    char total = 10;\n    char host_total = 10;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(UCHAR_MAX / 10);\n        b[x] = rand() / (real_t)(UCHAR_MAX / 10);\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n])\n    {\n        #pragma acc parallel loop reduction(+:total)\n        for (int x = 0; x < n; ++x) {\n            total += a[x] + b[x];\n        }\n    }\n\n    for (int x = 0; x < n; ++x) {\n        host_total += a[x] + b[x];\n    }\n\n    if (host_total != total) {\n        err += 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n//T3:parallel,reduction,combined-constructs,loop,V:1.0-2.7\nint test3(){\n    int err = 0;\n    srand(SEED);\n    signed char * a = (signed char *)malloc(n * sizeof(signed char));\n    signed char * b = (signed char *)malloc(n * sizeof(signed char));\n    signed char total = 10;\n    signed char host_total = 10;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n])\n    {\n        #pragma acc parallel loop reduction(+:total)\n        for (int x = 0; x < n; ++x) {\n            total += a[x] + b[x];\n        }\n    }\n\n    for (int x = 0; x < n; ++x) {\n        host_total += a[x] + b[x];\n    }\n\n    if (host_total != total) {\n        err += 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T3\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test3();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 2);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "4": {
                        "content": "#ifndef T4\n//T4:parallel,reduction,combined-constructs,loop,V:1.0-2.7\nint test4(){\n    int err = 0;\n    srand(SEED);\n    unsigned char * a = (unsigned char *)malloc(n * sizeof(unsigned char));\n    unsigned char * b = (unsigned char *)malloc(n * sizeof(unsigned char));\n    unsigned char total = 10;\n    unsigned char host_total = 10;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n])\n    {\n        #pragma acc parallel loop reduction(+:total)\n        for (int x = 0; x < n; ++x) {\n            total += a[x] + b[x];\n        }\n    }\n\n    for (int x = 0; x < n; ++x) {\n        host_total += a[x] + b[x];\n    }\n\n    if (total != host_total) {\n        err += 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T4\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test4();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 3);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "5": {
                        "content": "#ifndef T5\n//T5:parallel,reduction,combined-constructs,loop,V:1.0-2.7\nint test5(){\n    int err = 0;\n    srand(SEED);\n    short int * a = (short int *)malloc(n * sizeof(short int));\n    short int * b = (short int *)malloc(n * sizeof(short int));\n    short int total = 10;\n    short int host_total = 10;    \n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n])\n    {\n        #pragma acc parallel loop reduction(+:total)\n        for (int x = 0; x < n; ++x) {\n            total += a[x] + b[x];\n        }\n    }\n\n    for (int x = 0; x < n; ++x) {\n        host_total += a[x] + b[x];\n    }\n\n    if (total != host_total) {\n        err += 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T5\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test5();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 4);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "6": {
                        "content": "#ifndef T6\n//T6:parallel,reduction,combined-constructs,loop,V:1.0-2.7\nint test6(){\n    int err = 0;\n    srand(SEED);\n    int * a = (int *)malloc(n * sizeof(int));\n    int * b = (int *)malloc(n * sizeof(int));\n    int total = 10;\n    int host_total = 10;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n])\n    {\n        #pragma acc parallel loop reduction(+:total)\n        for (int x = 0; x < n; ++x) {\n            total += a[x] + b[x];\n        }\n    }\n\n    for (int x = 0; x < n; ++x) {\n        host_total += a[x] + b[x];\n    }\n\n    if (total != host_total) {\n        err += 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T6\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test6();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 5);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "7": {
                        "content": "#ifndef T7\n//T7:parallel,reduction,combined-constructs,loop,nonvalidating,V:1.0-2.7\nint test7(){\n    int err = 0;\n    srand(SEED);\n    long int * a = (long int *)malloc(n * sizeof(long int));\n    long int * b = (long int *)malloc(n * sizeof(long int));\n    long int total = 10;\n    long int host_total = 10;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n])\n    {\n        #pragma acc parallel loop reduction(+:total)\n        for (int x = 0; x < n; ++x) {\n            total += a[x] + b[x];\n        }\n    }\n\n    for (int x = 0; x < n; ++x) {\n        host_total += a[x] + b[x];\n    }\n\n    return err;\n}\n#endif\n#ifndef T7\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test7();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 6);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "reduction",
                            "combined-constructs",
                            "loop",
                            "nonvalidating"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "8": {
                        "content": "#ifndef T8\n//T8:parallel,reduction,combined-constructs,loop,V:1.0-2.7\nint test8(){\n    int err = 0;\n    srand(SEED);\n    long long int * a = (long long int *)malloc(n * sizeof(long long int));\n    long long int * b = (long long int *)malloc(n * sizeof(long long int));\n    long long int total = 10;\n    long long int host_total = 10;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n])\n    {\n        #pragma acc parallel loop reduction(+:total)\n        for (int x = 0; x < n; ++x) {\n            total += a[x] + b[x];\n        }\n    }\n\n    for (int x = 0; x < n; ++x) {\n        host_total += a[x] + b[x];\n    }\n\n    if (host_total != total) {\n        err += 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T8\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test8();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 7);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_add_general_type_check_pt2.c": {
                "num tests": 8,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:parallel,reduction,combined-constructs,loop,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    unsigned short int * a = (unsigned short int*)malloc(n * sizeof(unsigned short int));\n    unsigned short int * b = (unsigned short int *)malloc(n * sizeof(unsigned short int));\n    unsigned short int total = 10;\n    unsigned short int host_total = 10;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n])\n    {\n        #pragma acc parallel loop reduction(+:total)\n        for (int x = 0; x < n; ++x) {\n            total += a[x] + b[x];\n        }\n    }\n\n    for (int x = 0; x < n; ++x) {\n        host_total += a[x] + b[x];\n    }\n\n    if (host_total != total) {\n        err += 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:parallel,reduction,combined-constructs,loop,V:1.0-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    unsigned int * a = (unsigned int *)malloc(n * sizeof(unsigned int));\n    unsigned int * b = (unsigned int *)malloc(n * sizeof(unsigned int));\n    unsigned int total = 10;\n    unsigned int host_total = 10;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n])\n    {\n        #pragma acc parallel loop reduction(+:total)\n        for (int x = 0; x < n; ++x) {\n            total += a[x] + b[x];\n        }\n    }\n\n    for (int x = 0; x < n; ++x) {\n        host_total += a[x] + b[x];\n    }\n\n    if (host_total != total) {\n        err += 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n//T3:parallel,reduction,combined-constructs,loop,V:1.0-2.7\nint test3(){\n    int err = 0;\n    srand(SEED);\n    unsigned long int * a = (unsigned long int *)malloc(n * sizeof(unsigned long int));\n    unsigned long int * b = (unsigned long int *)malloc(n * sizeof(unsigned long int));\n    unsigned long int total = 10;\n    unsigned long int host_total = 10;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n])\n    {\n        #pragma acc parallel loop reduction(+:total)\n        for (int x = 0; x < n; ++x) {\n            total += a[x] + b[x];\n        }\n    }\n\n    for (int x = 0; x < n; ++x) {\n        host_total += a[x] + b[x];\n    }\n\n    if (host_total != total) {\n        err += 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T3\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test3();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 2);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "4": {
                        "content": "#ifndef T4\n//T4:parallel,reduction,combined-constructs,loop,V:1.0-2.7\nint test4(){\n    int err = 0;\n    srand(SEED);\n    unsigned long long int * a = (unsigned long long int *)malloc(n * sizeof(unsigned long long int));\n    unsigned long long int * b = (unsigned long long int *)malloc(n * sizeof(unsigned long long int));\n    unsigned long long int total = 10;\n    unsigned long long int host_total = 10;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n])\n    {\n        #pragma acc parallel loop reduction(+:total)\n        for (int x = 0; x < n; ++x) {\n            total += a[x] + b[x];\n        }\n    }\n\n    for (int x = 0; x < n; ++x) {\n        host_total += a[x] + b[x];\n    }\n    \n    if (total != host_total) {\n        err += 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T4\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test4();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 3);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "5": {
                        "content": "#ifndef T5\n//T5:parallel,reduction,combined-constructs,loop,V:1.0-2.7\nint test5(){\n    int err = 0;\n    srand(SEED);\n    float * a = (float *)malloc(n * sizeof(float));\n    float * b = (float *)malloc(n * sizeof(float));\n    float total = 10;\n    float host_total = 10;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n])\n    {\n        #pragma acc parallel loop reduction(+:total)\n        for (int x = 0; x < n; ++x) {\n            total += a[x] + b[x];\n        }\n    }\n\n    for (int x = 0; x < n; ++x) {\n        host_total += a[x] + b[x];\n    }\n\n    if (fabsf(total - host_total) > PRECISION) {\n        err += 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T5\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test5();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 4);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "6": {
                        "content": "#ifndef T6\n//T6:parallel,reduction,combined-constructs,loop,V:1.0-2.7\nint test6(){\n    int err = 0;\n    srand(SEED);\n    double * a = (double *)malloc(n * sizeof(double));\n    double * b = (double *)malloc(n * sizeof(double));\n    double total = 10;\n    double host_total = 10;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n])\n    {\n        #pragma acc parallel loop reduction(+:total)\n        for (int x = 0; x < n; ++x) {\n            total += a[x] + b[x];\n        }\n    }\n\n    for (int x = 0; x < n; ++x) {\n        host_total += a[x] + b[x];\n    }\n\n    if (fabs(host_total - total) > PRECISION) {\n        err += 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T6\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test6();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 5);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "7": {
                        "content": "#ifndef T7\n//T7:parallel,reduction,combined-constructs,loop,V:1.0-2.7\nint test7(){\n    int err = 0;\n    srand(SEED);\n    long double * a = (long double *)malloc(n * sizeof(long double));\n    long double * b = (long double *)malloc(n * sizeof(long double));\n    long double total = 10;\n    long double host_total = 10;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    \n    #pragma acc data copyin(a[0:n], b[0:n])\n    {\n        #pragma acc parallel loop reduction(+:total)\n        for (int x = 0; x < n; ++x){\n            total += a[x] + b[x];\n        }\n    }\n    \n    for (int x = 0; x < n; ++x) {\n        host_total += a[x] + b[x];\n    }\n\n    if (fabsl(host_total - total) > PRECISION) {\n        err += 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T7\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test7();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 6);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "8": {
                        "content": "#ifndef T8\n//T8:parallel,reduction,combined-constructs,loop,V:1.0-2.7\nint test8(){\n    int err = 0;\n    srand(SEED);\n    float _Complex * a = (float _Complex *)malloc(n * sizeof(float _Complex));\n    float _Complex * b = (float _Complex *)malloc(n * sizeof(float _Complex));\n    float _Complex total = 10 + 10 * I;\n    float _Complex host_total = 10 + 10 * I;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10) + rand() / (real_t)(RAND_MAX / 10) * I;\n        b[x] = rand() / (real_t)(RAND_MAX / 10) + rand() / (real_t)(RAND_MAX / 10) * I;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n])\n    {\n        #pragma acc parallel loop reduction(+:total)\n        for (int x = 0; x < n; ++x) {\n            total += a[x] + b[x];\n        }\n    }\n\n    for (int x = 0; x < n; ++x) {\n        host_total += a[x] + b[x];\n    }\n\n    if (fabsf(crealf(total) - crealf(host_total)) > PRECISION) {\n        err += 1;\n    }\n    if (fabsf(cimagf(total) - cimagf(host_total)) > PRECISION) {\n        err += 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T8\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test8();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 7);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_add_general_type_check_pt3.c": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:parallel,reduction,combined-constructs,loop,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    double _Complex * a = (double _Complex *)malloc(n * sizeof(double _Complex));\n    double _Complex * b = (double _Complex *)malloc(n * sizeof(double _Complex));\n    double _Complex total = 10 + 10 * I;\n    double _Complex host_total = 10 + 10 * I;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10) + rand() / (real_t)(RAND_MAX / 10) * I;\n        b[x] = rand() / (real_t)(RAND_MAX / 10) + rand() / (real_t)(RAND_MAX / 10) * I;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n])\n    {\n        #pragma acc parallel loop reduction(+:total)\n        for (int x = 0; x < n; ++x) {\n            total += a[x] + b[x];\n        }\n    }\n\n    for (int x = 0; x < n; ++x) {\n        host_total += a[x] + b[x];\n    }\n\n    if (fabs(creal(total) - creal(host_total)) > PRECISION) {\n        err += 1;\n    }\n    if (fabs(cimag(total) - cimag(host_total)) > PRECISION) {\n        err += 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:parallel,reduction,combined-constructs,loop,V:1.0-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    long double _Complex * a = (long double _Complex*)malloc(n * sizeof(long double _Complex));\n    long double _Complex * b = (long double _Complex*)malloc(n * sizeof(long double _Complex));\n    long double _Complex total = 10 + 10 * I;\n    long double _Complex host_total = 10 + 10 * I;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10) + rand() / (real_t)(RAND_MAX / 10) * I;\n        b[x] = rand() / (real_t)(RAND_MAX / 10) + rand() / (real_t)(RAND_MAX / 10) * I;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n])\n    {\n        #pragma acc parallel loop reduction(+:total)\n        for (int x = 0; x < n; ++x) {\n            total += a[x] + b[x];\n        }\n    }\n\n    for (int x = 0; x < n; ++x) {\n        host_total += a[x] + b[x];\n    }\n\n    if (fabsl(creall(total) - creall(host_total)) > PRECISION) {\n        err += 1;\n    }\n    if (fabsl(cimagl(total) - cimagl(host_total)) > PRECISION) {\n        err += 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_add_loop.c": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:parallel,loop,reduction,combined-constructs,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t* b = (real_t*)malloc(10 * n * sizeof(real_t));\n    real_t* c = (real_t*)malloc(10 * n * sizeof(real_t));\n    real_t* d = (real_t*)malloc(10 * n * sizeof(real_t));\n    real_t avg = 0.0;\n    real_t rolling_total = 0;\n\n    for (int x = 0; x < 10 * n; ++x) {\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n\n    #pragma acc data copyin(a[0:10*n], b[0:10*n]) create(c[0:10*n]) copyout(d[0:10*n])\n    {\n        #pragma acc parallel loop gang private(avg)\n        for (int x = 0; x < 10; ++x) {\n            avg = 0;\n            #pragma acc loop worker reduction(+:avg)\n            for (int y = 0; y < n; ++y) {\n                avg += c[x * n + y] = a[x * n + y] + b[x * n + y];\n            }\n            avg = avg / n;\n            #pragma acc loop worker\n            for (int y = 0; y < n; ++y) {\n                d[x * n + y] = c[x * n + y] - avg;\n            }\n        }\n    }\n\n\n    for (int x = 0; x < 10; ++x) {\n        rolling_total = 0;\n        for (int y = 0; y < n; ++y) {\n            rolling_total += a[x * n + y] + b[x * n + y];\n        }\n        rolling_total = rolling_total / n;\n        for (int y = 0; y < n; ++y) {\n            if (fabs(d[x * n + y] - ((a[x * n + y] + b[x * n + y]) - rolling_total)) > PRECISION) {\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:parallel,loop,reduction,combined-constructs,V:2.7-2.7\nint test2() {\n    int err = 0;\n    srand(SEED);\n    real_t* a = (real_t*)malloc(25 * n * sizeof(real_t));\n    real_t* b = (real_t*)malloc(25 * n * sizeof(real_t));\n    real_t* c = (real_t*)malloc(25 * n * sizeof(real_t));\n    real_t* d = (real_t*)malloc(25 * n * sizeof(real_t));\n    real_t avgs[5];\n    real_t host_avgs[5];\n\n    for (int x = 0; x < 25 * n; ++x) {\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0;\n        d[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:25*n], b[0:25*n]) copyout(c[0:25*n], d[0:25*n])\n    {\n        #pragma acc parallel loop gang private(avgs)\n        for (int x = 0; x < 5; ++x) {\n            for (int y = 0; y < 5; ++y) {\n                avgs[y] = 0;\n            }\n            #pragma acc loop worker reduction(+:avgs)\n            for (int y = 0; y < 5 * n; ++y) {\n                avgs[y % 5] += c[x * 5 * n + y] = a[x * 5 * n + y] + b[x * 5 * n + y];\n            }\n            for (int y = 0; y < 5; ++y) {\n                avgs[y] = avgs[y] / n;\n            }\n            #pragma acc loop worker\n            for (int y = 0; y < 5 * n; ++y) {\n                d[x * 5 * n + y] = c[x * 5 * n + y] - avgs[y % 5];\n            }\n        }\n    }\n\n    for (int x = 0; x < 5; ++x) {\n        for (int y = 0; y < 5; ++y) {\n            host_avgs[y] = 0;\n        }\n        for (int y = 0; y < 5 * n; ++y) {\n            host_avgs[y % 5] += a[x * 5 * n + y] + b[x * 5 * n + y];\n            if (fabs(c[x * 5 * n + y] - (a[x * n * 5 + y] + b[x * n * 5 + y])) > PRECISION) {\n                err += 1;\n            }\n        }\n        for (int y = 0; y < 5; ++y) {\n            host_avgs[y] = host_avgs[y] / n;\n        }\n        for (int y = 0; y < 5 * n; ++y) {\n            if (fabs(d[x * 5 * n + y] - (c[x * 5 * n + y] - host_avgs[y % 5])) > PRECISION){\n                err += 1;\n            \n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_add_loop_type_check_pt1.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1:private,reduction,combined-constructs,loop,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    char * a = (char *)malloc(10 * n * sizeof(char));\n    char * b = (char *)malloc(10 * n * sizeof(char));\n    char * c = (char *)malloc(10 * n * sizeof(char));\n    char * d = (char *)malloc(10 * n * sizeof(char));\n    char total = 10;\n    char host_total = 10;\n    char temp;\n\n    for (int x = 0; x < 10 * n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n\n    #pragma acc data copyin(a[0:10*n],b[0:10*n], c[0:10*n]) copyout(d[0:10*n])\n    {\n        #pragma acc parallel loop gang private(total)\n        for (int x = 0; x < 10; ++x) {\n            total = 10;\n            #pragma acc loop worker reduction(+:total)\n            for (int y = 0; y < n; ++y) {\n                total += a[x * n + y] + b[x * n + y];\n            }\n            #pragma acc loop worker\n            for (int y = 0; y < n; ++y) {\n                d[x * n + y] = c[x * n + y] + total;\n            }\n        }\n    }\n    int error_count = 0;\n    int total_count = 0;\n    for (int x = 0; x < 10; ++x) {\n        host_total = 10;\n        for (int y = 0; y < n; ++y) {\n            host_total += a[x * n + y] + b[x * n + y];\n        }\n        for (int y = 0; y < n; ++y) {\n            temp = host_total + c[x * n + y];\n            if (d[x * n + y] != temp) {\n                err += 1;\n                error_count += 1;\n                printf(\"Error location x: %d \\t y: %d\\n\", x, y); \n                printf(\"%d != %d\\n\", d[x * n + y], temp);\n            }\n            total_count += 1;\n        }\n    }\n\n    //printf(\"%d out of %d failed\\n\", error_count, total_count);\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    }
                }
            },
            "parallel_loop_reduction_add_vector_loop.c": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:parallel,private,reduction,combined-constructs,loop,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(10 * sizeof(real_t));\n    real_t temp = 0.0;\n\n    for(int x = 0; x < 10 * n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    #pragma acc data copyin(a[0:10*n], b[0:10*n]) copyout(c[0:10])\n    {\n        #pragma acc parallel loop private(temp)\n        for (int x = 0; x < 10; ++x){\n            temp = 0.0;\n            #pragma acc loop vector reduction(+:temp)\n            for (int y = 0; y < n; ++y){\n                temp += a[(x * n) + y] + b[(x * n) + y];\n            }\n            c[x] = temp;\n        }\n    }\n    for (int x = 0; x < 10; ++x){\n        for (int y = 0; y < n; ++y){\n            c[x] -= a[(x * n) + y] + b[(x * n) + y];\n        }\n        if (fabs(c[x]) > PRECISION * (2 * n - 1)){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:parallel,private,reduction,combined-constructs,loop,V:2.7-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(25 * n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(25 * n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(25 * sizeof(real_t));\n    real_t * c_host = (real_t *)malloc(25 * sizeof(real_t));\n    real_t temp[5];\n\n    for (int x = 0; x < 25 * n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n\n    for (int x = 0; x < 25; ++x) {\n        c[x] = 0;\n        c_host[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:25*n], b[0:25*n]) copyout(c[0:25])\n    {\n        #pragma acc parallel loop private(temp)\n        for (int x = 0; x < 5; ++x) {\n            for (int y = 0; y < 5; ++y) {\n                temp[y] = 0;\n            }\n            #pragma acc loop vector reduction(+:temp)\n            for (int y = 0; y < 5 * n; ++y) {\n                temp[y % 5] += a[x * 5 * n + y] + b[x * 5 * n + y];\n            }\n            for (int y = 0; y < 5; ++y) {\n                c[x * 5 + y] = temp[y];\n            }\n        }\n    }\n\n    for (int x = 0; x < 5; ++x) {\n        for (int y = 0; y < 5 * n; ++y) {\n            c_host[x * 5 + (y % 5)] += a[x * 5 * n + y] + b[x * 5 * n + y];\n        }\n    }\n\n    for (int x = 0; x < 25; ++x) {\n        if (fabs(c[x] - c_host[x]) > PRECISION) {\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_and_general.c": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:parallel,loop,reduction,combined-constructs,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    char * a = (char *)malloc(n * sizeof(char));\n    real_t false_margin = pow(exp(1), log(.5)/n);\n    char result = 1;\n    char found = 0;\n\n    for (int x = 0; x < n; ++x){\n        if(rand() / (real_t)(RAND_MAX) < false_margin){\n            a[x] = 1;\n        }\n        else{\n            a[x] = 0;\n        }\n    }\n\n    #pragma acc data copyin(a[0:n])\n    {\n        #pragma acc parallel loop reduction(&&:result)\n        for (int x = 0; x < n; ++x){\n            result = result && a[x];\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (a[x] == 0){\n            found = 1;\n            break;\n        }\n    }\n    if (found == result){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:parallel,combined-constructs,loop,V:2.7-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    char * a = (char *)malloc(n * 5 * sizeof(char));\n    real_t false_margin = pow(exp(1), log(.5/n));\n    char result[5];\n    char host_result[5];\n\n    for (int x = 0; x < 5; ++x) {\n        result[x] = 1;\n        host_result[x] = 1;\n    }\n\n    for (int x = 0; x < 5 * n; ++x) {\n        if (rand() / (real_t)(RAND_MAX) < false_margin) {\n            a[x] = 1;\n        }\n        else {\n            a[x] = 0;\n        }\n    }\n\n    #pragma acc data copyin(a[0:5*n])\n    {\n        #pragma acc parallel loop reduction(&&:result)\n        for (int x = 0; x < 5 * n; ++x) {\n            result[x%5] = result[x%5] && a[x];\n        }\n    }\n\n    for (int x = 0; x < 5 * n; ++x) {\n        host_result[x%5] = host_result[x%5] && a[x];\n    }\n\n    for (int x = 0; x < 5; ++x){\n        if (host_result[x] != result[x]) {\n            err += 1;\n        } \n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_and_loop.c": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:parallel,loop,reduction,combined-constructs,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    char * a = (char *)malloc(10 * n * sizeof(char));\n    char * a_copy = (char *)malloc(10 * n * sizeof(char));\n    char * has_false = (char *)malloc(10 * sizeof(char));\n    real_t false_margin = pow(exp(1), log(.5)/n);\n    char temp = 1;\n\n    for (int x = 0; x < 10; ++x){\n        has_false[x] = 0;\n    }\n\n    for (int x = 0; x < 10; ++x){\n        for (int y = 0; y < n; ++y){\n            if (rand() / (real_t)(RAND_MAX) < false_margin){\n                a[x * n + y] = 1;\n                a_copy[x * n + y] = 1;\n            }\n            else {\n                a[x * n + y] = 0;\n                a_copy[x * n + y] = 0;\n                has_false[x] = 1;\n            }\n        }\n    }\n\n    #pragma acc data copy(a[0:10*n])\n    {\n        #pragma acc parallel loop gang private(temp)\n        for (int x = 0; x < 10; ++x){\n            temp = 1;\n            #pragma acc loop worker reduction(&&:temp)\n            for (int y = 0; y < n; ++y){\n                temp = temp && a[x * n + y];\n            }\n            #pragma acc loop worker\n            for (int y = 0; y < n; ++y){\n                a[x * n + y] = a[x * n + y] ^ temp;\n            }\n        }\n    }\n\n\n    for (int x = 0; x < 10; ++x){\n        for (int y = 0; y < n; ++y){\n            if (has_false[x] == 1 && a[x * n + y] != a_copy[x * n + y]){\n                err = 1;\n            }\n            else if (has_false[x] == 0 && a[x * n + y] == a_copy[x * n + y]){\n                err = 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:parallel,private,reduction,combined-constructs,loop,V:2.7-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    char * a = (char *)malloc(n * 25 * sizeof(char));\n    char * a_copy = (char *)malloc(n * 25 * sizeof(char));\n    char * has_false = (char *)malloc(25 * sizeof(char));\n    real_t false_margin = pow(exp(1), log(.5)/n);\n    char device[5];\n    char host[5];\n\n    for (int x = 0; x < 5; ++x) {\n        device[x] = 1;\n        host[x] = 1;\n        for (int y = 0; y < 5; ++y) {\n            has_false[x * 5 + y] = 0;\n        }\n    }\n\n    for (int x = 0; x < 25 * n; ++x){\n        if (rand() / (real_t)(RAND_MAX) < false_margin) {\n            a[x] = 1;\n            a_copy[x] = 1;\n        }\n        else {\n            a[x] = 0;\n            a_copy[x] = 0;\n            has_false[x % 25] = 1;\n        }\n    }\n\n    #pragma acc data copy(a[0:25*n])\n    {\n        #pragma acc parallel loop gang private(device)\n        for (int x = 0; x < 5; ++x) {\n            for (int y = 0; y < 5; ++y) {\n                device[y] = 1;\n            }\n            #pragma acc loop worker reduction(&&:device)\n            for (int y = 0; y < 5 * n; ++y) {\n                device[y%5] = device[y%5] && a[x * 5 * n + y];\n            }\n            #pragma acc loop worker\n            for (int y = 0; y < 5 * n; ++y) {\n                a[x * 5 * n + y] = a[x * 5 * n + y] ^ device[y%5];\n            }\n        }\n    }\n\n    for (int x = 0; x < 5; ++x) {\n        for (int y = 0; y < 5; ++y) {\n            host[y] = 1;\n        }\n        for (int y = 0; y < 5 * n; ++y) {\n            host[y%5] = host[y%5] && a_copy[x * 5 * n + y];\n        }\n        for (int y = 0; y < 5 * n; ++y) {\n            if (a[x * 5 * n + y] != (a_copy[x * 5 * n + y] ^ host[y % 5])) {\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_and_vector_loop.c": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:parallel,loop,reduction,combined-constructs,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    char * a = (char *)malloc(10 * n * sizeof(char));\n    char * b = (char *)malloc(10 * sizeof(char));\n    char * has_false = (char *)malloc(10 * sizeof(char));\n    real_t false_margin = pow(exp(1), log(.5)/n);\n    char temp = 1;\n\n    for (int x = 0; x < 10; ++x){\n        has_false[x] = 0;\n    }\n    for (int x = 0; x < 10 * n; ++x){\n        if(rand() / (real_t)(RAND_MAX) < false_margin){\n            a[x] = 1;\n        }\n        else{\n            a[x] = 0;\n            has_false[x/n] = 1;\n        }\n    }\n    #pragma acc data copyin(a[0:10*n]) copy(b[0:10])\n    {\n        #pragma acc parallel loop private(temp)\n        for (int x = 0; x < 10; ++x){\n            temp = 1;\n            #pragma acc loop vector reduction(&&:temp)\n            for (int y = 0; y < n; ++y){\n                temp = temp && a[x * n + y];\n            }\n            b[x] = temp;\n        }\n    }\n    for (int x = 0; x < 10; ++x){\n        if (has_false[x] == b[x]){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:parallel,private,reduction,combined-constructs,loop,V:2.7-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    char * a = (char *)malloc(25 * n * sizeof(char));\n    char * b = (char *)malloc(25 * sizeof(char));\n    char * has_false = (char *)malloc(25 * sizeof(char));\n    real_t false_margin = pow(exp(1), log(.5)/n);\n    char device[5];\n    char host[5];\n\n    for (int x = 0; x < 5; ++x) {\n        for (int y = 0; y < 5 * n; ++y){\n            if (rand() / (real_t)(RAND_MAX) < false_margin) {\n                a[x] = 1;\n            }\n            else {\n                a[x] = 0;\n                has_false[x * 5 + y % 5];\n            }\n        }\n    }\n\n    #pragma acc data copyin(a[0:25*n]) copy(b[0:25])\n    {\n        #pragma acc parallel loop private(device)\n        for (int x = 0; x < 5; ++x) {\n            for (int y = 0; y < 5; ++y) {\n                device[y] = 1;\n            }\n            #pragma acc loop vector reduction(&&:device)\n            for (int y = 0; y < 5 * n; ++y) {\n                device[y%5] = device[y%5] && a[x * 5 * n + y];\n            }\n            for (int y = 0; y < 5; ++y){\n                b[x * 5 + y] = device[y];\n            }\n        }\n    }\n\n    for (int x = 0; x < 5; ++x) {\n        for (int y = 0; y < 5; ++y) {\n            host[y] = 1;\n        }\n        for (int y = 0; y < 5 * n; ++y) {\n            host[y%5] = host[y%5] && a[x * 5 * n + y];\n        }\n        for (int y = 0; y < 5; ++y) {\n            if (b[x * 5 + y] != host[y]) {\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_bitand_general.c": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:parallel,loop,reduction,combined-constructs,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    n = 10;\n    unsigned int * a = (unsigned int *)malloc(n * sizeof(unsigned int));\n    real_t false_margin = pow(exp(1), log(.5)/n);\n    unsigned int temp = 1;\n    unsigned int b;\n    unsigned int host_b;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = 0;\n        for (int y = 0; y < 16; ++y){\n            if (rand() / (real_t) RAND_MAX < false_margin){\n                for (int z = 0; z < y; ++z){\n                    temp *= 2;\n                }\n                a[x] += temp;\n                temp = 1;\n            }\n        }\n    }\n\n    b = a[0];\n    host_b = a[0];\n\n    #pragma acc data copyin(a[0:n])\n    {\n        #pragma acc parallel loop reduction(&:b)\n        for (int x = 0; x < n; ++x){\n            b = b & a[x];\n        }\n    }\n\n    for (int x = 1; x < n; ++x){\n        host_b = host_b & a[x];\n    }\n    if (b != host_b){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:parallel,reduction,combined-constructs,loop,V:2.7-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    unsigned int * a = (unsigned int *)malloc(10 * n * sizeof(int));\n    real_t false_margin = pow(exp(1), log(.5)/n);\n    unsigned int device[10];\n    unsigned int host[10];\n\n    for (int x = 0; x < 10 * n; ++x) {\n        a[x] = 0;\n        for (int y = 0; y < 16; ++y){\n            if (rand() / (real_t)RAND_MAX < false_margin) {\n                a[x] += 1<<y;\n            }\n        }\n    }\n\n    for (int x = 0; x < 10; ++x) {\n        device[x] = 0;\n        host[x] = 0;\n        for (int y = 0; y < 16; ++y) {\n            device[x] += 1<<y;\n            host[x] += 1<<y;\n        }\n    }\n\n    #pragma acc data copyin(a[0:10*n])\n    {\n        #pragma acc parallel loop reduction(&:device)\n        for (int x = 0; x < 10 * n; ++x) {\n            device[x%10] = device[x%10] & a[x];\n        }\n    }\n\n    for (int x = 0; x < 10 * n; ++x) {\n        host[x%10] = host[x%10] & a[x];\n    }\n\n    for (int x = 0; x < 10; ++x) {\n        if (host[x] != device[x]) {\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_bitand_loop.c": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:parallel,loop,reduction,combined-constructs,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    unsigned int * a = (unsigned int *)malloc(10 * n * sizeof(unsigned int));\n    unsigned int * b = (unsigned int *)malloc(10 * n * sizeof(unsigned int));\n    unsigned int * b_copy = (unsigned int *)malloc(10 * n * sizeof(unsigned int));\n    unsigned int * c = (unsigned int *)malloc(10 * sizeof(unsigned int));\n    unsigned int * host_c = (unsigned int *)malloc(10 * sizeof(unsigned int));\n\n    real_t false_margin = pow(exp(1), log(.5)/n);\n    unsigned int temp = 1;\n\n    for (int x = 0; x < 10 * n; ++x){\n        a[x] = 0;\n        b[x] = (unsigned int) rand() / (real_t)(RAND_MAX / 1000);\n        b_copy[x] = b[x];\n        for (int y = 0; y < 16; ++y){\n            if (rand() / (real_t) RAND_MAX < false_margin){\n                a[x] += 1 << y;\n            }\n        }\n    }\n    #pragma acc data copyin(a[0:10 * n]) copy(b[0:10 * n], c[0:10])\n    {\n        #pragma acc parallel loop gang private(temp)\n        for (int y = 0; y < 10; ++y){\n            temp = a[y * n];\n            #pragma acc loop worker reduction(&:temp)\n            for (int x = 1; x < n; ++x){\n                temp = temp & a[y * n + x];\n            }\n            c[y] = temp;\n            #pragma acc loop worker\n            for (int x = 0; x < n; ++x){\n                b[y * n + x] = b[y * n + x] + c[y];\n            }\n        }\n    }\n    for (int x = 0; x < 10; ++x){\n        host_c[x] = a[x * n];\n        for (int y = 1; y < n; ++y){\n            host_c[x] = host_c[x] & a[x * n + y];\n        }\n        if (host_c[x] != c[x]){\n          err += 1;\n        }\n    }\n\n    for (int x = 0; x < 10; ++x){\n        for (int y = 0; y < n; ++y){\n            if (b[x * n + y] != b_copy[x * n + y] + c[x]){\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:parallel,private,reduction,combined-constructs,loop,V:2.7-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    unsigned int * a = (unsigned int *)malloc(25 * n * sizeof(unsigned int));\n    unsigned int * b = (unsigned int *)malloc(25 * n * sizeof(unsigned int));\n    unsigned int * b_copy = (unsigned int *)malloc(25 * n * sizeof(unsigned int));\n    unsigned int * c = (unsigned int *)malloc(25 * sizeof(unsigned int));\n    unsigned int device[5];\n    unsigned int host[5];\n\n    real_t false_margin = pow(exp(1), log(.5)/n);\n    \n    for (int x = 0; x < 25 * n; ++x){\n        a[x] = 0;\n        b[x] = (unsigned int) rand() / (real_t)(RAND_MAX / 1000);\n        b_copy[x] = b[x];\n        for (int y = 0; y < 16; ++y) {\n            if (rand() / (real_t)RAND_MAX < false_margin) {\n                a[x] += 1 << y;\n            }\n        }\n    }\n\n    #pragma acc data copyin(a[0:25*n]) copy(b[0:25*n], c[0:25])\n    {\n        #pragma acc parallel loop gang private(device)\n        for (int x = 0; x < 5; ++x) {\n            for (int y = 0; y < 5; ++y) {\n                device[y] = a[x * 5 * n + y];\n            }\n            #pragma acc loop worker reduction(&:device)\n            for (int y = 0; y < 5 * n; ++y) {\n                device[y%5] = device[y%5] & a[x * 5 * n + y];\n            }\n            for (int y = 0; y < 5; ++y) {\n                c[x * 5 + y] = device[y];\n            }\n            #pragma acc loop worker\n            for (int y = 0; y < 5 * n; ++y) {\n                b[x * 5 * n + y] = b[x * 5 * n + y] + c[x * 5 + (y % 5)];\n            }\n        }\n    }\n\n    for (int x = 0; x < 5; ++x) {\n        for (int y = 0; y < 5; ++y) {\n            host[y] = a[x * 5 * n + y];\n        }\n        for (int y = 0; y < 5 * n; ++y) {\n            host[y%5] = host[y%5] & a[x * 5 * n + y];\n        }\n        for (int y = 0; y < 5; ++y) {\n            if (host[y] != c[x * 5 + y]) {\n                err += 1;\n            }\n        }\n        for (int y = 0; y < 5 * n; ++y) {\n            if (b[x * 5 * n + y] != (host[y%5] + b_copy[x * 5 * n + y])) {\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_bitand_vector_loop.c": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:parallel,loop,reduction,combined-constructs,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    unsigned int* a = (unsigned int *)malloc(10 * n * sizeof(unsigned int));\n    unsigned int* b = (unsigned int *)malloc(10 * sizeof(unsigned int));\n\n    real_t false_margin = pow(exp(1), log(.5)/n);\n    unsigned int temp = 1;\n    unsigned int c = 0;\n    unsigned int b_host;\n\n    for (int x = 0; x < 10 * n; ++x){\n        a[x] = 0;\n        for (int y = 0; y < 16; ++y){\n            if (rand() / (real_t) RAND_MAX < false_margin){\n                a[x] += 1 << y;\n            }\n        }\n    }\n\n    #pragma acc data copyin(a[0:10*n]) copyout(b[0:10])\n    {\n        #pragma acc parallel loop private(c)\n        for (int x = 0; x < 10; ++x){\n            c = a[x * n];\n            #pragma acc loop vector reduction(&:c)\n            for (int y = 1; y < n; ++y){\n                c = c & a[x * n + y];\n            }\n            b[x] = c;\n        }\n    }\n    for (int x = 0; x < 10; ++x){\n        b_host = a[x * n];\n        for (int y = 1; y < n; ++y){\n            b_host = b_host & a[x * n + y];\n        }\n        if (b_host != b[x]){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:parallel,private,reduction,combined-constructs,loop,V:2.7-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    unsigned int * a = (unsigned int *)malloc(25 * n * sizeof(unsigned int));\n    unsigned int * b = (unsigned int *)malloc(25 * sizeof(unsigned int));\n    real_t false_margin = pow(exp(1), log(.5)/n);\n    unsigned int c[5];\n    unsigned int * b_host = (unsigned int *)malloc(5 * sizeof(unsigned int));\n    \n\n    for (int x = 0; x < 25 * n; ++x){\n        a[x] = 0;\n        for (int y = 0; y < 16; ++y) {\n            if (rand() / (real_t)RAND_MAX < false_margin) {\n                a[x] += 1 << y;\n            }\n        }\n    }\n\n    #pragma acc data copyin(a[0:25*n]) copyout(b[0:25])\n    {\n        #pragma acc parallel loop private(c)\n        for (int x = 0; x < 5; ++x) {\n            for (int y = 0; y < 5; ++y) {\n                c[y] = a[x * 5 * n + y];\n            }\n            #pragma acc loop vector reduction(&:c)\n            for (int y = 0; y < 5 * n; ++y) {\n                c[y%5] = c[y%5] & a[x * 5 * n + y];\n            }\n            for (int y = 0; y < 5; ++y) {\n                b[x * 5 + y] = c[y];\n            }\n        }\n    }\n\n    for (int x = 0; x < 5; ++x) {\n        for (int y = 0; y < 5; ++y) {\n            b_host[y] = a[x * 5 * n + y];\n        }\n        for (int y = 0; y < 5 * n; ++y) {\n            b_host[y%5] = b_host[y%5] & a[x * 5 * n + y];\n        }\n        for (int y = 0; y < 5; ++y) {\n            if (b_host[y] != b[x * 5 + y]){\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_bitor_general.c": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:parallel,loop,reduction,combined-constructs,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    unsigned int * a = (unsigned int *)malloc(n * sizeof(unsigned int));\n    real_t false_margin = pow(exp(1), log(.5)/n);\n    unsigned int temp = 1;\n    unsigned int b = 0;\n    unsigned int host_b;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = 0;\n        for (int y = 0; y < 16; ++y){\n            if (rand() / (real_t) RAND_MAX > false_margin){\n                a[x] += 1 << y;\n            }\n        }\n    }\n\n    #pragma acc data copyin(a[0:n])\n    {\n        #pragma acc parallel loop reduction(|:b)\n        for (int x = 0; x < n; ++x){\n            b = b | a[x];\n        }\n    }\n\n    host_b = a[0];\n    for (int x = 1; x < n; ++x){\n        host_b = host_b | a[x];\n    }\n\n    if (b != host_b){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:parallel,reduction,combined-constructs,loop,V:2.7-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    unsigned int * a = (unsigned int *)malloc(5 * n * sizeof(unsigned int));\n    real_t false_margin = pow(exp(1), log(.5)/n);\n    unsigned int b[5];\n    unsigned int host_b[5];\n\n    for (int x = 0; x < 5 * n; ++x){\n        a[x] = 0;\n        for (int y = 0; y < 16; ++y) {\n            if (rand() / (real_t) RAND_MAX > false_margin) {\n                a[x] += 1 << y;\n            }\n        }\n    }\n\n    for (int x = 0; x < 5; ++x) {\n        b[x] = 0;\n        host_b[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:5*n])\n    {\n        #pragma acc parallel loop reduction(|:b)\n        for (int x = 0; x < 5 * n; ++x) {\n            b[x%5] = b[x%5] | a[x];\n        }\n    }\n\n    for (int x = 0; x < 5 * n; ++x){\n        host_b[x%5] = host_b[x%5] | a[x];\n    }\n\n    for (int x = 0; x < 5; ++x) {\n        if (host_b[x] != b[x]) {\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_bitor_loop.c": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:parallel,loop,reduction,combined-constructs,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    unsigned int * a = (unsigned int *)malloc(10 * n * sizeof(unsigned int));\n    unsigned int * b = (unsigned int *)malloc(10 * n * sizeof(unsigned int));\n    unsigned int * b_copy = (unsigned int *)malloc(10 * n * sizeof(unsigned int));\n    unsigned int * c = (unsigned int *)malloc(10 * sizeof(unsigned int));\n\n    real_t false_margin = pow(exp(1), log(.5)/n);\n    unsigned int temp = 1;\n    unsigned int host_c;\n\n    for (int x = 0; x < 10; ++x){\n        for (int y = 0; y < n; ++y){\n            b[x * n + y] = (unsigned int) rand() / (real_t)(RAND_MAX / 1000);\n            b_copy[x * n + y] = b[x * n + y];\n            for (int z = 0; z < 16; ++z){\n                a[x * n + y] += (1<<z);\n            }\n        }\n    }\n\n    #pragma acc data copyin(a[0:10*n]) copy(b[0:10*n], c[0:10])\n    {\n        #pragma acc parallel loop gang private(temp)\n        for (int x = 0; x < 10; ++x){\n            temp = 0;\n            #pragma acc loop worker reduction(|:temp)\n            for (int y = 0; y < n; ++y){\n                temp = temp | a[x * n + y];\n            }\n            c[x] = temp;\n            #pragma acc loop worker\n            for (int y = 0; y < n; ++y){\n                b[x * n + y] = b[x * n + y] + c[x];\n            }\n        }\n    }\n    for (int x = 0; x < 10; ++x){\n        host_c = a[x * n];\n        for (int y = 1; y < n; ++y){\n            host_c = host_c | a[x * n + y];\n        }\n        if (host_c != c[x]){\n            err += 1;\n        }\n        for (int y = 0; y < n; ++y){\n            if (b[x * n + y] != b_copy[x * n + y] + host_c){\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:parallel,private,reduction,combined-constructs,loop,V:2.7-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    unsigned int * a = (unsigned int *)malloc(25 * n * sizeof(unsigned int));\n    unsigned int * b = (unsigned int *)malloc(25 * n * sizeof(unsigned int));\n    unsigned int * b_copy = (unsigned int *)malloc(25 * n * sizeof(unsigned int));\n    unsigned int * c = (unsigned int *)malloc(25 * sizeof(unsigned int));\n    unsigned int temp[5];\n\n    real_t false_margin = pow(exp(1), log(.5)/n);\n\n    for (int x = 0; x < 25 * n; ++x){\n        b[x] = (unsigned int) rand() / (real_t)(RAND_MAX / 1000);\n        b_copy[x] = b[x];\n        for (int y = 0; y < 16; ++y) {\n            if (rand() / (real_t)RAND_MAX > false_margin) {\n                a[x] += (1<<y);\n            }\n        }\n    }\n\n    #pragma acc data copyin(a[0:25*n]) copy(b[0:25*n], c[0:25])\n    {\n        #pragma acc parallel loop gang private(temp)\n        for (int x = 0; x < 5; ++x) {\n            for (int y = 0; y < 5; ++y) {\n                temp[y] = 0;\n            }\n            #pragma acc loop worker reduction(|:temp)\n            for (int y = 0; y < 5 * n; ++y) {\n                temp[y%5] = temp[y%5] | a[x * 5 * n + y];\n            }\n            for (int y = 0; y < 5; ++y) {\n                c[x * 5 + y] = temp[y];\n            }\n            #pragma acc loop worker\n            for (int y = 0; y < 5 * n; ++y) {\n                b[x * 5 * n + y] = b[x * 5 * n + y] + c[x * 5 + (y % 5)];\n            }\n        }\n    }\n\n    for (int x = 0; x < 5; ++x){\n        for (int y = 0; y < 5; ++y){\n            temp[y] = 0;\n        }\n        for (int y = 0; y < 5 * n; ++y) {\n            temp[y%5] = temp[y%5] | a[x * 5 * n + y];\n        }\n        for (int y = 0; y < 5; ++y){\n            if (c[x * 5 + y] != temp[y]) {\n                err += 1;\n            }\n        }\n        for (int y = 0; y < 5 * n; ++y) {\n            if ((b_copy[x * 5 * n + y] + c[x * 5 + (y % 5)]) != b[x * 5 * n + y]) {\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_bitor_vector_loop.c": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:parallel,loop,reduction,combined-constructs,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    unsigned int* a = (unsigned int *)malloc(10 * n * sizeof(unsigned int));\n    unsigned int* b = (unsigned int *)malloc(10 * sizeof(unsigned int));\n\n    real_t false_margin = pow(exp(1), log(.5)/n);\n    unsigned int temp = 1;\n    unsigned int b_host;\n\n    for (int x = 0; x < 10 * n; ++x){\n        for (int y = 0; y < 16; ++y){\n            if (rand() / (real_t) RAND_MAX > false_margin){\n                for (int z = 0; z < y; ++z){\n                    temp *= 2;\n                }\n                a[x] += temp;\n                temp = 1;\n            }\n        }\n    }\n    temp = 0;\n    #pragma acc data copyin(a[0:10*n]) copy(b[0:10])\n    {\n        #pragma acc parallel loop private(temp)\n        for (int x = 0; x < 10; ++x){\n            temp = 0;\n            #pragma acc loop vector reduction(|:temp)\n            for (int y = 0; y < n; ++y){\n                temp = temp | a[x * n + y];\n            }\n            b[x] = temp;\n        }\n    }\n\n    for (int x = 0; x < 10; ++x){\n        b_host = a[x * n];\n        for (int y = 1; y < n; ++y){\n            b_host = b_host | a[x * n + y];\n        }\n        if (b_host != b[x]){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:parallel,private,reduction,combined-constructs,loop,V:2.7-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    unsigned int * a = (unsigned int *)malloc(25 * n * sizeof(unsigned int));\n    unsigned int * b = (unsigned int *)malloc(25 * sizeof(unsigned int));\n\n    unsigned int reduced[5];\n    real_t false_margin = pow(exp(1), log(.5)/n);\n    \n    for (int x = 0; x < 25 * n; ++x) {\n        a[x] = 0;\n        for (int y = 0; y < 16; ++y) {\n            if (rand() / (real_t)RAND_MAX > false_margin) {\n                a[x] += 1<<y;\n            }\n        }\n    }\n\n    #pragma acc data copyin(a[0:25*n]) copy(b[0:25])\n    {\n        #pragma acc parallel loop private(reduced)\n        for (int x = 0; x < 5; ++x) {\n            for (int y = 0; y < 5; ++y) {\n                reduced[y] = 0;\n            }\n            #pragma acc loop vector reduction(|:reduced)\n            for (int y = 0; y < 5 * n; ++y) {\n                reduced[y%5] = reduced[y%5] | a[x * 5 * n + y];\n            }\n            for (int y = 0; y < 5; ++y) {\n                b[x * 5 + y] = reduced[y];\n            }\n        }\n    }\n\n    for (int x = 0; x < 5; ++x) {\n        for (int y = 0; y < 5; ++y) {\n            reduced[y] = 0;\n        }\n        for (int y = 0; y < 5 * n; ++y) {\n            reduced[y%5] = reduced[y%5] | a[x * 5 * n + y];\n        }\n        for (int y = 0; y < 5; ++y) {\n            if (b[x * 5 + y] != reduced[y]) {\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_bitxor_general.c": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:parallel,reduction,combined-constructs,loop,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    unsigned int * a = (unsigned int *)malloc(n * sizeof(unsigned int));\n    unsigned int b = 0;\n    unsigned int host_b = 0;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = (unsigned int) rand() / (real_t) (RAND_MAX / 2);\n    }\n\n    #pragma acc data copyin(a[0:n])\n    {\n        #pragma acc parallel loop reduction(^:b)\n        for (int x = 0; x < n; ++x){\n            b = b ^ a[x];\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        host_b = host_b ^ a[x];\n    }\n    if (b != host_b){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:parallel,reduction,combined-constructs,loop,V:2.7-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    unsigned int * a = (unsigned int *)malloc(10 * n * sizeof(unsigned int));\n    unsigned int b[10];\n    unsigned int host_b[10];\n\n    for (int x = 0; x < 10 * n; ++x){\n        a[x] = (unsigned int) rand() / (real_t) (RAND_MAX / 2);\n    }\n\n    for (int x = 0; x < 10; ++x) {\n        b[x] = 0;\n        host_b[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:10*n])\n    {\n        #pragma acc parallel loop reduction(^:b)\n        for (int x = 0; x < 10 * n; ++x) {\n            b[x % 10] = b[x % 10] ^ a[x];\n        }\n    }\n\n    for (int x = 0; x < 10 * n; ++x) {\n        host_b[x % 10] = host_b[x % 10] ^ a[x];\n    }\n\n    for (int x = 0; x < 10; ++x) {\n        if (host_b[x] != b[x]) {\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_bitxor_loop.c": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:parallel,loop,reduction,combined-constructs,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    unsigned int * a = (unsigned int *)malloc(10 * n * sizeof(unsigned int));\n    unsigned int * b = (unsigned int *)malloc(10 * n * sizeof(unsigned int));\n    unsigned int * b_copy = (unsigned int *)malloc(10 * n * sizeof(unsigned int));\n    unsigned int * c = (unsigned int *)malloc(10 * sizeof(unsigned int));\n    unsigned int temp = 0;\n\n    for (int x = 0; x < 10*n; ++x){\n        b[x] = (unsigned int) rand() / (real_t)(RAND_MAX / 1000);\n        b_copy[x] = b[x];\n        a[x] = (unsigned int) rand() / (real_t)(RAND_MAX / 1000);\n    }\n    for (int x = 0; x < 10; ++x){\n        c[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:10*n]) copy(b[0:10*n], c[0:10])\n    {\n        #pragma acc parallel loop gang private(temp)\n        for (int x = 0; x < 10; ++x){\n            temp = 0;\n            #pragma acc loop worker reduction(^:temp)\n            for (int y = 0; y < n; ++y){\n                temp = temp ^ a[x * n + y];\n            }\n            c[x] = temp;\n            #pragma acc loop worker\n            for (int y = 0; y < n; ++y){\n                b[x * n + y] = b[x * n + y] + c[x];\n            }\n        }\n    }\n\n    for (int x = 0; x < 10; ++x){\n        temp = 0;\n        for (int y = 0; y < n; ++y){\n            temp = temp ^ a[x * n + y];\n        }\n        if (temp != c[x]){\n            err += 1;\n        }\n        for (int y = 0; y < n; ++y){\n            if (b[x * n + y] != b_copy[x * n + y] + c[x]){\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:parallel,private,reduction,combined-constructs,loop,nonvalidating,V:2.7-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    unsigned int * a = (unsigned int *)malloc(25 * n * sizeof(unsigned int));\n    unsigned int * b = (unsigned int *)malloc(25 * n * sizeof(unsigned int));\n    unsigned int * b_copy = (unsigned int *)malloc(25 * n * sizeof(unsigned int));\n    unsigned int * c = (unsigned int *)malloc(25 * sizeof(unsigned int));\n\n    unsigned int temp[5];\n\n    for (int x = 0; x < n; ++x){\n        a[x] = (unsigned int) rand() / (real_t)(RAND_MAX / 1000);\n        b[x] = (unsigned int) rand() / (real_t)(RAND_MAX / 1000);\n        b_copy[x] = b[x];\n    }\n\n    for (int x = 0; x < 25; ++x) {\n        c[x] = 0;\n    }\n\n    for (int x = 0; x < 5; ++x) {\n        temp[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:25*n]) copy(b[0:25*n], c[0:25])\n    {\n        #pragma acc parallel loop gang private(temp)\n        for (int x = 0; x < 5; ++x) {\n            for (int y = 0; y < 5; ++y) {\n                temp[y] = 0;\n            }\n            #pragma acc loop worker reduction(^:temp)\n            for (int y = 0; y < 5 * n; ++y) {\n                temp[y % 5] = temp[y % 5] ^ a[x * 5 * n + y];\n            }\n            for (int y = 0; y < 5; ++y) {\n                c[x * 5 + y] = temp[y];\n            }\n            #pragma acc loop worker\n            for (int y = 0; y < 5 * n; ++y) {\n                b[x * 5 * n + y] = b[x * 5 * n + y] + c[x * 5 + (y % 5)];\n            }\n        }\n    }\n\n    for (int x = 0; x < 5; ++x) {\n        for (int y = 0; y < 5; ++y) {\n            temp[y] = 0;\n        }\n        for (int y = 0; y < 5 * n; ++y) {\n            temp[y % 5] = temp[y % 5] ^ a[x * 5 * n + y];\n        }\n        \n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop",
                            "nonvalidating"
                        ],
                        "versions": [
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_bitxor_vector_loop.c": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:parallel,loop,reduction,combined-constructs,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    unsigned int* a = (unsigned int *)malloc(10 * n * sizeof(unsigned int));\n    unsigned int* b = (unsigned int *)malloc(10 * sizeof(unsigned int));\n\n    unsigned int temp = 0;\n    unsigned int b_host;\n\n    for (int x = 0; x < 10 * n; ++x){\n        a[x] = (unsigned int) rand() / (real_t) (RAND_MAX / 2);\n    }\n\n    #pragma acc data copyin(a[0:10*n]) copy(b[0:10])\n    {\n        #pragma acc parallel loop private(temp)\n        for (int x = 0; x < 10; ++x){\n            temp = 0;\n            #pragma acc loop vector reduction(^:temp)\n            for (int y = 0; y < n; ++y){\n                temp = temp ^ a[x * n + y];\n            }\n            b[x] = temp;\n        }\n    }\n\n    for (int x = 0; x < 10; ++x){\n        b_host = a[x * n];\n        for (int y = 1; y < n; ++y){\n            b_host = b_host ^ a[x * n + y];\n        }\n        if (b_host != b[x]){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:parallel,private,reduction,combined-constructs,loop,V:2.7-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    unsigned int * a = (unsigned int *)malloc(25 * n * sizeof(unsigned int));\n    unsigned int * b = (unsigned int *)malloc(25 * sizeof(unsigned int));\n\n    unsigned int temp[5];\n\n    for (int x = 0; x < 25 * n; ++x){\n        a[x] = (unsigned int) rand() / (real_t) (RAND_MAX / 2);\n    }\n\n    #pragma acc data copyin(a[0:25*n]) copy(b[0:25])\n    {\n        #pragma acc parallel loop private(temp)\n        for (int x = 0; x < 5; ++x) {\n            for (int y = 0; y < 5; ++y){\n                temp[y] = 0;\n            }\n            #pragma acc loop vector reduction(^:temp)\n            for (int y = 0; y < 5 * n; ++y) {\n                temp[y % 5] = temp[y % 5] ^ a[x * 5 * n + y];\n            }\n            for (int y = 0; y < 5; ++y) {\n                b[x * 5 + y] = temp[y];\n            }\n        }\n    }\n\n    for (int x = 0; x < 5; ++x) {\n        for (int y = 0; y < 5; ++y) {\n            temp[y] = 0;\n        }\n        for (int y = 0; y < 5 * n; ++y) {\n            temp[y % 5] = temp[y % 5] ^ a[x * 5 * n + y];\n        }\n        for (int y = 0; y < 5; ++y) {\n            if (b[x * 5 + y] != temp[y]) {\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_max_general.c": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:parallel,loop,reduction,combined-constructs,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t max = 0.0;\n    int found = 0;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX/10);\n        b[x] = rand() / (real_t)(RAND_MAX/10);\n    }\n    #pragma acc data copyin(a[0:n], b[0:n])\n    {\n        #pragma acc parallel loop reduction(max:max)\n        for (int x = 0; x < n; ++x){\n            max = fmax(a[x] * b[x], max);\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(max - (a[x] * b[x] + PRECISION)) < 0){\n            err = 1;\n        }\n        if (fabs(max - (a[x] * b[x] - PRECISION)) > 0){\n            found = 1;\n        }\n    }\n    if (found = 0){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:parallel,reduction,combined-constructs,loop,V:2.7-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t maximums[10];\n    real_t max_host[10];\n\n    for (int x = 0; x < 10 * n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n\n    for (int x = 0; x < 10; ++x) {\n        maximums[x] = 0;\n        max_host[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:10*n], b[0:10*n])\n    {\n        #pragma acc parallel loop reduction(max:maximums)\n        for (int x = 0; x < 10 * n; ++x) {\n            maximums[x%10] = fmax(a[x] * b[x], maximums[x%10]);\n        }\n    }\n\n    for (int x = 0; x < 10 * n; ++x) {\n        max_host[x%10] = fmax(a[x] * b[x], maximums[x%10]);\n    }\n    \n    for (int x = 0; x < 10; ++x) {\n        if (fabs(max_host[x] - maximums[x]) > PRECISION) {\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_max_loop.c": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:parallel,loop,reduction,combined-constructs,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * maximum = (real_t *)malloc(10 * sizeof(real_t));\n    real_t temp = 0;\n    real_t max = 0.0;\n\n    for (int x = 0; x < 10 * n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX/10);\n        b[x] = rand() / (real_t)(RAND_MAX/10);\n        c[x] = 0.0;\n    }\n    for (int x = 0; x < 10; ++x){\n        maximum[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:10*n], b[0:10*n]) copy(c[0:10*n], maximum[0:10])\n    {\n        #pragma acc parallel loop gang private(temp)\n        for (int x = 0; x < 10; ++x){\n            temp = 0;\n            #pragma acc loop worker reduction(max:temp)\n            for (int y = 0; y < n; ++y){\n                temp = fmax(a[x * n + y] * b[x * n + y], temp);\n            }\n            maximum[x] = temp;\n            #pragma acc loop worker\n            for (int y = 0; y < n; ++y){\n                c[x * n + y] = (a[x * n + y] * b[x * n + y]) / maximum[x];\n            }\n        }\n    }\n    for (int x = 0; x < 10; ++x){\n        temp = 0;\n        for (int y = 0; y < n; ++y){\n            temp = fmax(temp, a[x * n + y] * b[x * n + y]);\n        }\n        if (fabs(temp - maximum[x]) > PRECISION){\n            err += 1;\n        }\n        for (int y = 0; y < n; ++y){\n            if (c[x * n + y] > 1){\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:parallel,private,reduction,combined-constructs,loop,V:2.7-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(25 * n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(25 * n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(25 * n * sizeof(real_t));\n    real_t * maximum = (real_t *)malloc(25 * sizeof(real_t));\n    real_t * host_maximum = (real_t *)malloc(25 * sizeof(real_t));\n    real_t temp[5];\n\n    for (int x = 0; x < 25 * n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0;\n    }\n\n    for (int x = 0; x < 25; ++x) {\n        maximum[x] = 0;\n        host_maximum[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:25*n], b[0:25*n]) copy(c[0:25*n], maximum[0:25])\n    {\n        #pragma acc parallel loop gang private(temp)\n        for (int x = 0; x < 5; ++x) {\n            for (int y = 0; y < 5; ++y) {\n                temp[y] = 0;\n            }\n            #pragma acc loop worker reduction(max:temp)\n            for (int y = 0; y < 5 * n; ++y) {\n                temp[y%5] = fmax(a[x * 5 * n + y] * b[x * 5 * n + y], temp[y%5]);\n            }\n            for (int y = 0; y < 5; ++y) {\n                maximum[x * 5 + y] = temp[y];\n            }\n            #pragma acc loop worker\n            for (int y = 0; y < 5 * n; ++y) {\n                c[x * 5 * n + y] = (a[x * 5 * n + y] * b[x * 5 * n + y]) / maximum[x * 5 + (y % 5)];\n            }\n        }\n    }\n\n    for (int x = 0; x < 5; ++x) {\n        for (int y = 0; y < 5 * n; ++y) {\n            host_maximum[x * 5 + (y % 5)] = fmax(a[x * 5 * n + y] * b[x * 5 * n + y], host_maximum[x * 5 + (y % 5)]);\n        }\n        for (int y = 0; y < 5; ++y) {\n            if (fabs(host_maximum[x * 5 + y] - maximum[x * 5 + y]) > PRECISION) {\n                err += 1;\n            }\n        }\n        for (int y = 0; y < 5 * n; ++y) {\n            if (fabs(c[x * 5 * n + y] - ((a[x * 5 * n + y] * b[x * 5 * n + y]) / maximum[x * 5 + (y % 5)])) > PRECISION) {\n                err += 1;\n            }\n        }\n    }\n\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_max_vector_loop.c": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:parallel,loop,reduction,combined-constructs,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * max = (real_t *)malloc(10 * sizeof(real_t));\n    real_t temp = 0;\n    real_t temp_max;\n\n    for (int x = 0; x < 10 * n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX/10);\n        b[x] = rand() / (real_t)(RAND_MAX/10);\n    }\n    #pragma acc data copyin(a[0:10*n], b[0:10*n]) copy(max[0:10])\n    {\n        #pragma acc parallel loop private(temp)\n        for (int x = 0; x < 10; ++x){\n            temp = 0;\n            #pragma acc loop vector reduction(max:temp)\n            for (int y = 0; y < n; ++y){\n                temp = fmax(a[x * n + y] * b[x * n + y], temp);\n            }\n            max[x] = temp;\n        }\n    }\n    for (int x = 0; x < 10; ++x){\n        temp_max = 0;\n        for (int y = 0; y < n; ++y){\n            if (temp_max < a[x * n + y] * b[x * n + y]){\n                temp_max = a[x * n + y] * b[x * n + y];\n            }\n        }\n        if (fabs(temp_max - max[x]) > PRECISION){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:parallel,private,reduction,combined-constructs,loop,V:2.7-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(25 * n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(25 * n * sizeof(real_t));\n    real_t * maximums = (real_t *)malloc(25 * sizeof(real_t));\n    real_t reduced[5];\n\n    for (int x = 0; x < 25 * n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n\n    for (int x = 0; x < 25; ++x) {\n        maximums[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:25*n], b[0:25*n]) copy(maximums[0:25])\n    {\n        #pragma acc parallel loop private(reduced)\n        for (int x = 0; x < 5; ++x) {\n            for (int y = 0; y < 5; ++y) {\n                reduced[y] = 0;\n            }\n            #pragma acc loop vector reduction(max:reduced)\n            for (int y = 0; y < 5 * n; ++y) {\n                reduced[y%5] = fmax(a[x * 5 * n + y] * b[x * 5 * n + y], reduced[y%5]);\n            }\n            for (int y = 0; y < 5; ++y) {\n                maximums[x * 5 + y] = reduced[y];\n            }\n        }\n    }\n\n    for (int x = 0; x < 5; ++x) {\n        for (int y = 0; y < 5; ++y) {\n            reduced[y] = 0;\n        }\n        for (int y = 0; y < 5 * n; ++y) {\n            reduced[y%5] = fmax(a[x * 5 * n + y] * b[x * 5 * n + y], reduced[y%5]);\n        }\n        for (int y = 0; y < 5; ++y) {\n            if (fabs(maximums[x * 5 + y] - reduced[y]) > PRECISION) {\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_min_general.c": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:parallel,loop,reduction,combined-constructs,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t min = 1000.0;\n    int found = 0;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX/10);\n        b[x] = rand() / (real_t)(RAND_MAX/10);\n    }\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(min)\n    {\n        #pragma acc parallel loop reduction(min:min)\n        for (int x = 0; x < n; ++x){\n            min = fmin(a[x] * b[x], min);\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs((a[x] * b[x]) - (min + PRECISION)) < 0){\n            err = 1;\n        }\n        if (fabs(min - (a[x] * b[x])) < PRECISION){\n            found = 1;\n        }\n    }\n    if (found == 0){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:parallel,reduction,combined-constructs,loop,V:2.7-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t minimums[10];\n    real_t host_minimums[10];\n\n    for (int x = 0; x < 10 * n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n\n    for (int x = 0; x < 10; ++x) {\n        minimums[x] = 1000;\n        host_minimums[x] = 1000;\n    }\n\n    printf(\"Here\");\n\n    #pragma acc data copyin(a[0:10*n], b[0:10*n])\n    {\n        #pragma acc parallel loop reduction(min:minimums)\n        for (int x = 0; x < 10 * n; ++x) {\n            minimums[x%10] = fmin(a[x] * b[x], minimums[x%10]);\n        }\n    }\n\n    for (int x = 0; x < 10 * n; ++x) {\n        host_minimums[x%10] = fmin(a[x] * b[x], host_minimums[x%10]);\n    }\n    for (int x = 0; x < 10; ++x) {\n        if (fabs(minimums[x] - host_minimums[x]) > PRECISION) {\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_min_loop.c": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:parallel,loop,reduction,combined-constructs,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * minimum = (real_t *)malloc(10 * sizeof(real_t));\n    real_t temp = 0;\n\n    for (int x = 0; x < 10 * n; ++x){\n        a[x] = 1 + rand() / (real_t)(RAND_MAX/10);\n        b[x] = 1 + rand() / (real_t)(RAND_MAX/10);\n        c[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a[0:10*n], b[0:10*n]) copy(c[0:10*n], minimum[0:10])\n    {\n        #pragma acc parallel loop gang private(temp)\n        for (int x = 0; x < 10; ++x){\n            temp = 1000;\n            #pragma acc loop reduction(min:temp)\n            for (int y = 0; y < n; ++y){\n                temp = fmin(a[x * n + y] * b[x * n + y], temp);\n            }\n            minimum[x] = temp;\n            #pragma acc loop\n            for (int y = 0; y < n; ++y){\n                c[x * n + y] = (a[x * n + y] * b[x * n + y]) / minimum[x];\n            }\n        }\n    }\n\n    for (int x = 0; x < 10; ++x){\n        temp = 1000;\n        for (int y = 0; y < n; ++y){\n            temp = fmin(temp, a[x * n + y] * b[x * n + y]);\n        }\n        if (fabs(temp - minimum[x]) > PRECISION){\n            err += 1;\n        }\n        for (int y = 0; y < n; ++y){\n            if (fabs(c[x * n + y] - (a[x * n + y] * b[x * n + y] / minimum[x])) > PRECISION){\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:parallel,private,reduction,combined-constructs,loop,V:2.7-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(25 * n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(25 * n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(25 * n * sizeof(real_t));\n    real_t minimums[25];\n    real_t host_minimums[25];\n    real_t reduced[5];\n\n    for (int x = 0; x < n; ++x){\n        a[x] = 1 + rand() / (real_t)(RAND_MAX / 10);\n        b[x] = 1 + rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a[0:25*n], b[0:25*n]) copy(minimums[0:25], c[0:25*n])\n    {\n        #pragma acc parallel loop gang private(reduced)\n        for (int x = 0; x < 5; ++x) {\n            for (int y = 0; y < 5; ++y) {\n                reduced[y] = 1000;\n            }\n            #pragma acc loop reduction(min:reduced)\n            for (int y = 0; y < 5 * n; ++y) {\n                reduced[y%5] = fmin(a[x * 5 * n + y] * b[x * 5 * n + y], reduced[y%5]);\n            }\n            for (int y = 0; y < 5; ++y) {\n                minimums[x * 5 + y] = reduced[y];\n            }\n            #pragma acc loop\n            for (int y = 0; y < 5 * n; ++y) {\n                c[x * 5 * n + y] = (a[x * 5 * n + y] * b[x * 5 * n + y]) / minimums[x * 5 + (y % 5)];\n            }\n        }\n    }\n\n    for (int x = 0; x < 5; ++x) {\n        for (int y = 0; y < 5; ++y) {\n            reduced[y] = 1000;\n        }\n        for (int y = 0; y < 5 * n; ++y) {\n            reduced[y%5] = fmin(a[x * 5 * n + y] * b[x * 5 * n + y], reduced[y%5]);\n        }\n        for (int y = 0; y < 5; ++y) {\n            host_minimums[x * 5 + y] = reduced[y];\n            if (fabs(host_minimums[x * 5 + y] - minimums[x * 5 + y]) > PRECISION) {\n                err += 1;\n            }\n        }\n        for (int y = 0; y < 5 * n; ++y) {\n            if (fabs(c[x * 5 * n + y] - ((a[x * 5 * n + y] * b[x * 5 * n + y]) / minimums[x * 5 + (y % 5)])) > PRECISION) {\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_min_vector_loop.c": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:parallel,loop,reduction,combined-constructs,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * min = (real_t *)malloc(10 * sizeof(real_t));\n    real_t temp = 100;\n    real_t temp_min;\n\n    for (int x = 0; x < 10 * n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX/10);\n        b[x] = rand() / (real_t)(RAND_MAX/10);\n    }\n\n    #pragma acc data copyin(a[0:10*n], b[0:10*n]) copy(min[0:10])\n    {\n        #pragma acc parallel loop gang private(temp)\n        for (int x = 0; x < 10; ++x){\n            temp = 100;\n            #pragma acc loop vector reduction(min:temp)\n            for (int y = 0; y < n; ++y){\n                temp = fmin(a[x * n + y] * b[x * n + y], temp);\n            }\n            min[x] = temp;\n        }\n    }\n    for (int x = 0; x < 10; ++x){\n        temp_min = 100;\n        for (int y = 0; y < n; ++y){\n            if (temp_min > a[x * n + y] * b[x * n + y]){\n                temp_min = a[x * n + y] * b[x * n + y];\n            }\n        }\n        if (fabs(temp_min - min[x]) > PRECISION){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:parallel,private,reduction,combined-constructs,loop,V:2.7-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(25 * n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(25 * n * sizeof(real_t));\n    real_t * minimums = (real_t *)malloc(25 * sizeof(real_t));\n    real_t reduced[5];\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n\n    #pragma acc data copyin(a[0:25*n], b[0:25*n]) copy(minimums[0:25])\n    {\n        #pragma acc parallel loop gang private(reduced)\n        for (int x = 0; x < 5; ++x) {\n            for (int y = 0; y < 5; ++y) {\n                reduced[y] = 1000;\n            }\n            #pragma acc loop vector reduction(min:reduced)\n            for (int y = 0; y < 5 * n; ++y) {\n                reduced[y%5] = fmin(a[x * 5 * n + y] * b[x * 5 * n + y], reduced[y % 5]);\n            }\n            for (int y = 0; y < 5; ++y) {\n                minimums[x * 5 + y] = reduced[y];\n            }\n        }\n    }\n\n    for (int x = 0; x < 5; ++x) {\n        for (int y = 0; y < 5; ++y) {\n            reduced[y] = 1000;\n        }\n        for (int y = 0; y < 5 * n; ++y) {\n            reduced[y%5] = fmin(a[x * 5 * n + y] * b[x * 5 * n + y], reduced[y % 5]);\n        }\n        for (int y = 0; y < 5; ++y) {\n            if (fabs(reduced[y] - minimums[x * 5 + y]) > PRECISION) {\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_multiply_general.c": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:parallel,loop,reduction,combined-constructs,V:1.0-2.7\nint test1(){\n    int err = 0;\n    int multiplicitive_n = 128;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(multiplicitive_n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(multiplicitive_n * sizeof(real_t));\n\n    real_t multiplied_total = 1.0;\n\n    for (int x = 0; x < multiplicitive_n; ++x){\n        a[x] = rand() / (real_t) RAND_MAX;\n        b[x] = rand() / (real_t) RAND_MAX;\n    }\n\n    #pragma acc data copyin(a[0:multiplicitive_n], b[0:multiplicitive_n]) copy(multiplied_total)\n    {\n        #pragma acc parallel loop reduction(*:multiplied_total)\n        for (int x = 0; x < multiplicitive_n; ++x){\n            multiplied_total *= a[x] + b[x];\n        }\n    }\n\n    for (int x = 0; x < multiplicitive_n; ++x){\n        multiplied_total /= (a[x] + b[x]);\n    }\n    if (fabs(multiplied_total - 1) > PRECISION * (2 * multiplicitive_n - 1)){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:parallel,reduction,combined-constructs,loop,V:2.7-2.7\nint test2(){\n    int err = 0;\n    int m_n = 128;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(10 * m_n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(10 * m_n * sizeof(real_t));\n\n    real_t multiplicitive_total[10];\n\n    for (int x = 0; x < m_n; ++x){\n        a[x] = rand() / (real_t) RAND_MAX;\n        b[x] = rand() / (real_t) RAND_MAX;\n    }\n\n    for (int x = 0; x < 10; ++x) {\n        multiplicitive_total[x] = 1.0;\n    }\n\n    #pragma acc data copyin(a[0:10*m_n], b[0:10*m_n])\n    {\n        #pragma acc parallel loop reduction(*:multiplicitive_total)\n        for (int x = 0; x < 10 * m_n; ++x) {\n            multiplicitive_total[x%10] = multiplicitive_total[x%10] * (a[x] + b[x]);\n        }\n    }\n\n    for (int x = 0; x < 10 * m_n; ++x) {\n        multiplicitive_total[x%10] /= (a[x] + b[x]);\n    }\n\n    for (int x = 0; x < 10; ++x) {\n        if (fabs(multiplicitive_total[x]) > PRECISION) {\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_multiply_loop.c": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:parallel,loop,reduction,combined-constructs,V:1.0-2.7\nint test1(){\n    int err = 0;\n    int m_n = 128;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(10 * m_n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(10 * m_n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(10 * m_n * sizeof(real_t));\n    real_t * totals = (real_t *)malloc(10 * sizeof(real_t));\n    real_t temp;\n\n    for (int x = 0; x < 10 * m_n; ++x){\n        a[x] = .05 + rand() / (real_t)(RAND_MAX);\n        b[x] = .05 + rand() / (real_t)(RAND_MAX);\n        c[x] = 0.0;\n    }\n\n\n    #pragma acc data copyin(a[0:10*m_n], b[0:10*m_n]) copyout(c[0:10*m_n], totals[0:10])\n    {\n        #pragma acc parallel loop gang private(temp)\n        for (int x = 0; x < 10; ++x){\n            temp = 1;\n            #pragma acc loop worker reduction(*:temp)\n            for (int y = 0; y < m_n; ++y){\n                temp *= a[x * m_n + y] + b[x * m_n + y];\n            }\n            totals[x] = temp;\n            #pragma acc loop worker\n            for (int y = 0; y < m_n; ++y){\n                c[x * m_n + y] = (a[x * m_n + y] + b[x * m_n + y]) / totals[x];\n            }\n        }\n    }\n\n    for (int x = 0; x < 10; ++x){\n        temp = 1;\n        for (int y = 0; y < m_n; ++y){\n            temp *= a[x * m_n + y] + b[x * m_n + y];\n        }\n        if (fabs(temp - totals[x]) > (temp / 2 + totals[x] / 2) * PRECISION){\n            err += 1;\n        }\n        for (int y = 0; y < m_n; ++y){\n            if (fabs(c[x * m_n + y] - ((a[x * m_n + y] + b[x * m_n + y]) / totals[x])) > PRECISION){\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:parallel,private,reduction,combined-constructs,loop,V:2.7-2.7\nint test2(){\n    int err = 0;\n    int m_n = 128;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(25 * m_n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(25 * m_n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(25 * m_n * sizeof(real_t));\n\n    real_t * totals = (real_t *)malloc(25 * sizeof(real_t));\n    real_t reduced[5];\n\n    for (int x = 0; x < n; ++x){\n        a[x] = .05 + rand() / (real_t)(RAND_MAX / 10);\n        b[x] = .05 + rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:25*m_n], b[0:25*m_n]) copyout(c[0:25*m_n], totals[0:25])\n    {\n        #pragma acc parallel loop gang private(reduced)\n        for (int x = 0; x < 5; ++x) {\n            for (int y = 0; y < 5; ++y) {\n                reduced[y] = 1.0;\n            }\n            #pragma acc loop worker reduction(*:reduced)\n            for (int y = 0; y < 5 * m_n; ++y) {\n                reduced[y%5] *= a[x * 5 * m_n + y] + b[x * 5 * m_n + y];\n            }\n            for (int y = 0; y < 5; ++y) {\n                totals[x * 5 + y] = reduced[y];\n            }\n            for (int y = 0; y < 5 * m_n; ++y) {\n                c[x * 5 * m_n + y] = (a[x * 5 * m_n + y] + b[x * 5 * m_n + y]) / totals[x * 5 + (y%5)];\n            }\n        }\n    }\n\n    for (int x = 0; x < 5; ++x) {\n        for (int y = 0; y < 5; ++y) {\n            reduced[y] = 1;\n        }\n        for (int y = 0; y < 5 * m_n; ++y) {\n            reduced[y%5] *= a[x * 5 * m_n + y] + b[x * 5 * m_n + y];\n        }\n        for (int y = 0; y < 5; ++y) {\n            if (fabs(totals[x * 5 + y] - reduced[y]) > PRECISION) {\n                err += 1;\n            }\n        }\n        for (int y = 0; y < 5 * m_n; ++y) {\n            if (fabs(c[x * 5 * m_n + y] - ((a[x * 5 * m_n + y] + b[x * 5 * m_n + y]) / totals[x * 5 + (y % 5)])) > PRECISION) {\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_multiply_vector_loop.c": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:parallel,loop,reduction,combined-constructs,V:1.0-2.7\nint test1() {\n    int err = 0;\n    int multiplicitive_n = 128;\n    srand(SEED);\n    real_t* a = (real_t*)malloc(10 * multiplicitive_n * sizeof(real_t));\n    real_t* b = (real_t*)malloc(10 * multiplicitive_n * sizeof(real_t));\n    real_t* c = (real_t*)malloc(10 * sizeof(real_t));\n    real_t temp;\n\n    for (int x = 0; x < 10 * multiplicitive_n; ++x) {\n        a[x] = rand() / (real_t)RAND_MAX;\n        b[x] = rand() / (real_t)RAND_MAX;\n    }\n\n#pragma acc data copyin(a[0:10*multiplicitive_n], b[0:10*multiplicitive_n]) copyout(c[0:10])\n    {\n#pragma acc parallel loop private(temp)\n        for (int x = 0; x < 10; ++x) {\n            temp = 1.0;\n#pragma acc loop vector reduction(*:temp)\n            for (int y = 0; y < multiplicitive_n; ++y) {\n                temp *= a[(x * multiplicitive_n) + y] + b[(x * multiplicitive_n) + y];\n            }\n            c[x] = temp;\n        }\n    }\n\n    for (int x = 0; x < 10; ++x) {\n        for (int y = 0; y < multiplicitive_n; ++y) {\n            c[x] /= a[(x * multiplicitive_n) + y] + b[(x * multiplicitive_n) + y];\n        }\n    }\n\n    for (int x = 0; x < 10; ++x) {\n        if (fabs(c[x] - 1) > PRECISION* (4 * multiplicitive_n - 1)) {\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:parallel,private,reduction,combined-constructs,loop,V:2.7-2.7\nint test2() {\n    int err = 0;\n    int m_n = 128;\n    srand(SEED);\n    real_t* a = (real_t*)malloc(25 * m_n * sizeof(real_t));\n    real_t* b = (real_t*)malloc(25 * m_n * sizeof(real_t));\n    real_t* c = (real_t*)malloc(25 * m_n * sizeof(real_t));\n    real_t* totals = (real_t*)malloc(25 * sizeof(real_t));\n    real_t reduced[5];\n\n    for (int x = 0; x < n; ++x) {\n        a[x] = .05 + rand() / (real_t)(RAND_MAX / 10);\n        b[x] = .05 + rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:25*m_n], b[0:25*m_n]) copyout(c[0:25*m_n], totals[0:25])\n    {\n        #pragma acc parallel loop gang private(reduced)\n        for (int x = 0; x < 5; ++x) {\n            for (int y = 0; y < 5; ++y) {\n                reduced[y] = 1.0;\n            }\n            #pragma acc loop worker reduction(*:reduced)\n            for (int y = 0; y < 5 * m_n; ++y) {\n                reduced[y % 5] *= a[x * 5 * m_n + y] + b[x * 5 * m_n + y];\n            }\n            for (int y = 0; y < 5; ++y) {\n                totals[x * 5 + y] = reduced[y];\n            }\n            #pragma acc loop worker\n            for (int y = 0; y < 5 * m_n; ++y) {\n                c[x * 5 * m_n + y] = (a[x * 5 * m_n + y] + b[x * 5 * m_n + y]) / totals[(x * 5) + (y % 5)];\n            }\n        }\n    }\n\n    for (int x = 0; x < 5; ++x) {\n        for (int y = 0; y < 5; ++y) {\n            reduced[y] = 1;\n        }\n        for (int y = 0; y < 5 * m_n; ++y) {\n            reduced[y % 5] *= a[x * 5 * m_n + y] + b[x * 5 * m_n + y];\n        }\n        for (int y = 0; y < 5; ++y) {\n            if (fabs(totals[x * 5 + y] - reduced[y]) > PRECISION) {\n                err += 1;\n            }\n        }\n        for (int y = 0; y < 5 * m_n; ++y) {\n            if (fabs(c[x * 5 * m_n + y] - ((a[x * 5 * m_n + y] + b[x * 5 * m_n + y]) / totals[x * 5 + (y % 5)])) > PRECISION){\n                err += 1;\n            }   \n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n//T3:\nint test3(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0;\n    }\n\n    return err;\n}\n#endif\n#ifndef T3\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test3();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 2);\n    }\n#endif\n",
                        "tags": [
                            ""
                        ],
                        "versions": []
                    }
                }
            },
            "parallel_loop_reduction_or_general.c": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:parallel,loop,reduction,combined-constructs,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    char * a = (char *)malloc(n * sizeof(char));\n    real_t false_margin = pow(exp(1), log(.5)/n);\n    char result = 0;\n    char found = 0;\n\n    for (int x = 0; x < n; ++x){\n        if(rand() / (real_t)(RAND_MAX) > false_margin){\n            a[x] = 1;\n        }\n        else{\n            a[x] = 0;\n        }\n    }\n\n\n    #pragma acc data copyin(a[0:n])\n    {\n        #pragma acc parallel loop reduction(||:result)\n        for (int x = 0; x < n; ++x){\n            result = result || a[x];\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (a[x] == 1){\n            found = 1;\n        }\n    }\n    if (found != result){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:parallel,reduction,combined-constructs,loop,V:2.7-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    char* a = (char *)malloc(5 * n * sizeof(char));\n    char result[5];\n    char host_result[5];\n    real_t false_margin = pow(exp(1), log(.5)/n);\n\n    for (int x = 0; x < 5; ++x) {\n        result[x] = 0;\n        host_result[x] = 0;\n    }\n\n    for (int x = 0; x < 5 * n; ++x) {\n        if (rand() / (real_t)(RAND_MAX) > false_margin) {\n            a[x] = 1;\n        }\n        else {\n            a[x] = 0;\n        }\n    }\n\n    #pragma acc data copyin(a[0:5*n])\n    {\n        #pragma acc parallel loop reduction(||:result)\n        for (int x = 0; x < 5 * n; ++x) {\n            result[x%5] = result[x%5] || a[x];\n        }\n    }\n\n    for (int x = 0; x < 5 * n; ++x) {\n        host_result[x%5] = host_result[x%5] || a[x];\n    }\n    \n    for (int x = 0; x < 5; ++x) {\n        if (host_result[x] != result[x]) {\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_or_loop.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:parallel,loop,reduction,combined-constructs,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    char * a = (char *)malloc(10 * n * sizeof(char));\n    char * a_copy = (char *)malloc(10 * n * sizeof(char));\n    char * results = (char *)malloc(10 * sizeof(char));\n    char temp = 0;\n    real_t false_margin = pow(exp(1), log(.5)/n);\n\n    for (int x = 0; x < 10 * n; ++x){\n        if (rand() / (real_t)(RAND_MAX) > false_margin){\n            a[x] = 1;\n            a_copy[x] = 1;\n        }\n        else{\n            a[x] = 0;\n            a_copy[x] = 0;\n        }\n    }\n    #pragma acc data copy(a[0:10*n]) copyout(results[0:10])\n    {\n        #pragma acc parallel loop gang private(temp)\n        for (int x = 0; x < 10; ++x){\n            temp = 0;\n            #pragma acc loop worker reduction(||:temp)\n            for (int y = 0; y < n; ++y){\n                temp = temp || a[x * n + y];\n            }\n            results[x] = temp;\n            #pragma acc loop worker\n            for (int y = 0; y < n; ++y){\n                if(results[x] == 1){\n                    if (a[x * n + y] == 1){\n                        a[x * n + y] = 0;\n                    }\n                    else{\n                        a[x * n + y] = 1;\n                    }\n                }\n            }\n        }\n    }\n    for (int x = 0; x < 10; ++x){\n        temp = 0;\n        for (int y = 0; y < n; ++y){\n            temp = temp || a_copy[x * n + y];\n        }\n        if (temp != results[x]) {\n            err += 1;\n        }\n        for (int y = 0; y < n; ++y){\n            if (temp == 1){\n                if (a[x * n + y] == a_copy[x * n + y]){\n                    err += 1;\n                }\n            }\n            else {\n                if (a[x * n + y] != a_copy[x * n + y]){\n                    err += 1;\n                }\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_or_vector_loop.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:parallel,loop,reduction,combined-constructs,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    char * a = (char *)malloc(10 * n * sizeof(char));\n    char * b = (char *)malloc(10 * sizeof(char));\n    real_t false_margin = pow(exp(1), log(.5)/n);\n    char temp = 0;\n    char found;\n\n    for (int x = 0; x < 10 * n; ++x){\n        if(rand() / (real_t)(RAND_MAX) > false_margin){\n            a[x] = 1;\n        }\n        else{\n            a[x] = 0;\n        }\n    }\n    #pragma acc data copyin(a[0:10*n]) copy(b[0:10])\n    {\n        #pragma acc parallel loop private(temp)\n        for (int x = 0; x < 10; ++x){\n            temp = 0;\n            #pragma acc loop vector reduction(||:temp)\n            for (int y = 0; y < n; ++y){\n                temp = temp || a[x * n + y];\n            }\n            b[x] = temp;\n        }\n    }\n    for (int x = 0; x < 10; ++x){\n        found = 0;\n        for (int y = 0; y < n; ++y){\n            if (a[x * n + y] &! 0){\n                found = 1;\n            }\n        }\n        if (found != b[x]){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_seq.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:parallel,loop,combined-constructs,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t temp = 0.0;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a[0:n]) copy(b[0:n])\n    {\n        #pragma acc parallel loop seq\n        for (int x = 1; x < n; ++x){\n            b[x] = b[x-1] + a[x];\n        }\n    }\n\n    for (int x = 1; x < n; ++x){\n        temp += a[x];\n        if (fabs(b[x] - temp) > PRECISION){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "loop",
                            "combined-constructs"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_tile.c": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:parallel,loop,tile,reduction,combined-constructs,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n    real_t * d2 = (real_t *)malloc(n * n * sizeof(real_t));\n    real_t * d3 = (real_t *)malloc(n * n * n * sizeof(real_t));\n    real_t temp = 0.0;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    #pragma acc data copy(a[0:n], b[0:n], c[0:n], d2[0:n*n])\n    {\n        #pragma acc parallel loop tile(*, *) reduction(+:temp)\n        for (int x = 0; x < n; ++x){\n            for (int y = 0; y < n; ++y){\n                temp = 0;\n                for (int z = 0; z < n; ++z){\n                    temp += a[x] + b[y] + c[z];\n                }\n                d2[x * n + y] = temp;\n            }\n        }\n    }\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < n; ++y){\n            temp = 0.0;\n            for (int z = 0; z < n; ++z){\n                temp += a[x] + b[y] + c[z];\n            }\n            if (fabs(temp - d2[x * n + y]) > PRECISION * n){\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "loop",
                            "tile",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:parallel,loop,tile,combined-constructs,V:2.0-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n    real_t * d2 = (real_t *)malloc(n * n * sizeof(real_t));\n    real_t * d3 = (real_t *)malloc(n * n * n * sizeof(real_t));\n    real_t temp = 0.0;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n], c[0:n]) copyout(d3[0:n*n*n])\n    {\n        #pragma acc parallel loop tile(2, 4, 8)\n        for (int x = 0; x < n; ++x){\n            for (int y = 0; y < n; ++y){\n                for (int z = 0; z < n; ++z){\n                    d3[(n * n * x) + (n * y) + z] = a[x] + b[x] + c[x];\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < n; ++y){\n            for (int z = 0; z < n; ++z){\n                if (fabs(d3[(n * n * x) + (n * y) + z] - a[x] - b[x] - c[x]) > PRECISION * 2){\n                    err = 1;\n                }\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "loop",
                            "tile",
                            "combined-constructs"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_vector.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:parallel,loop,vector,combined-constructs,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(c[0:n])\n    {\n        #pragma acc parallel loop vector\n        for (int x = 0; x < n; ++x){\n            c[x] = a[x] + b[x];\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if(fabs(c[x] - (a[x] + b[x])) > PRECISION){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "loop",
                            "vector",
                            "combined-constructs"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_vector_blocking.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:parallel,loop,V:1.0-2.7\nint test1(){\n  int err = 0;\n  srand(SEED);\n  real_t * a = (real_t *)malloc(n * sizeof(real_t));\n  real_t * b = (real_t *)malloc(n * sizeof(real_t));\n  real_t * c = (real_t *)malloc(n * sizeof(real_t));\n  real_t multiplyer = 1;\n\n  for (int x = 0; x < n; ++x){\n      a[x] = rand() / (real_t)(RAND_MAX / 10);\n      b[x] = rand() / (real_t)(RAND_MAX / 10);\n      c[x] = 0.0;\n  }\n\n  #pragma acc data copyin(a[0:n], b[0:n]) copyout(c[0:n])\n  {\n    #pragma acc parallel\n    {\n      #pragma acc loop vector\n      for (int x = 0; x < n; ++x){\n        c[x] = (a[x] + b[x]) * multiplyer;\n      }\n      multiplyer += 1;\n      #pragma acc loop vector\n      for (int x = 0; x < n; ++x){\n        c[x] += (a[x] + b[x]) * multiplyer;\n      }\n    }\n  }\n\n  for (int x = 0; x < n; ++x){\n    if (fabs(c[x] - 3 * (a[x] + b[x])) > PRECISION){\n      err + 1;\n      break;\n    }\n  }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_worker.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:parallel,loop,combined-constructs,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(c[0:n])\n    {\n        #pragma acc parallel loop worker\n        for (int x = 0; x < n; ++x){\n            c[x] = a[x] + b[x];\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "loop",
                            "combined-constructs"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_worker_blocking.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:parallel,loop,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n    real_t multiplyer = 1;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copyout(c[0:n])\n    {\n      #pragma acc parallel\n      {\n        #pragma acc loop worker\n        for (int x = 0; x < n; ++x){\n          c[x] = (a[x] + b[x]) * multiplyer;\n        }\n        multiplyer += 1;\n        #pragma acc loop worker\n        for (int x = 0; x < n; ++x){\n          c[x] += (a[x] + b[x]) * multiplyer;\n        }\n      }\n    }\n\n    for (int x = 0; x < n; ++x){\n      if (fabs(c[x] - 3 * (a[x] + b[x])) > PRECISION){\n        err + 1;\n        break;\n      }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_present.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:parallel,present,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0.0;\n    }\n\n    #pragma acc enter data copyin(a[0:n], b[0:n])\n    #pragma acc parallel present(a[0:n], b[0:n]) copy(c[0:n])\n    {\n        #pragma acc loop\n        for (int x = 0; x < n; ++x){\n            c[x] = a[x] + b[x];\n        }\n    }\n    #pragma acc exit data delete(a[0:n], b[0:n])\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "present"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_private.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:parallel,private,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n    real_t * d = (real_t *)malloc(10 * sizeof(real_t));\n\n    for (int x = 0; x < 10; ++x){\n        for (int y = 0; y < n; ++y){\n            a[x * n + y] = rand() / (real_t)(RAND_MAX / 10);\n            b[x * n + y] = rand() / (real_t)(RAND_MAX / 10);\n            c[y] = 0.0;\n        }\n        d[x] = 0.0;\n    }\n\n    #pragma acc enter data copyin(a[0:10*n], b[0:10*n], d[0:10])\n    #pragma acc parallel num_gangs(10) private(c[0:n])\n    {\n        #pragma acc loop gang\n        for (int x = 0; x < 10; ++x){\n            #pragma acc loop worker\n            for (int y = 0; y < n; ++y){\n                c[y] = a[x * n + y] + b[x * n + y];\n            }\n            #pragma acc loop seq\n            for (int y = 0; y < n; ++y){\n                d[x] += c[y];\n            }\n        }\n    }\n    #pragma acc exit data copyout(d[0:10]) delete(a[0:10*n], b[0:10*n])\n\n    real_t temp;\n    for (int x = 0; x < 10; ++x){\n        temp = 0.0;\n        for (int y = 0; y < n; ++y){\n            temp += a[x * n + y] + b[x * n + y];\n        }\n        if (fabs(temp - d[x]) > (2 * PRECISION * n)){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "private"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_reduction.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:parallel,reduction,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t reduction;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n\n    #pragma acc parallel copyin(a[0:n]) reduction(+:reduction)\n    {\n        #pragma acc loop\n        for (int x = 0; x < n; ++x){\n            reduction = reduction + a[x];\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        reduction = reduction - a[x];\n    }\n    if (fabs(reduction) > PRECISION){\n        err += 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "reduction"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_scalar_default_firstprivate.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:parallel,data,data-region,default-mapping,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t scalar = rand() / (real_t)(RAND_MAX / 10);\n    real_t scalar_copy = scalar;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a[0:n]) copyout(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                b[x] = a[x] + scalar;\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(b[x] - (a[x] + scalar_copy)) > PRECISION){\n            err += 1;\n        }\n    }\n    if (fabs(scalar_copy - scalar) > PRECISION){\n        err += 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "data",
                            "data-region",
                            "default-mapping"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_switch.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:parallel,syntactic,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    int * a = (int *)malloc(n * sizeof(int));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b_host = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n    real_t tempc = 0.0;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = floor(rand() / (real_t)(RAND_MAX / 10));\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        b_host[x] = b[x];\n        c[x] = 0.0;\n    }\n    #pragma acc enter data copyin(a[0:n], b[0:n], c[0:n])\n    #pragma acc parallel present(a[0:n], b[0:n], c[0:n])\n    {\n        #pragma acc loop\n        for (int x = 0; x < n; ++x){\n            switch(a[x]){\n                case 0:\n                    c[x] = b[x] * b[x];\n                    break;\n                case 1:\n                    c[x] = b[x] / b[x];\n                    break;\n                case 2:\n                    b[x] = b[x] / 2;\n                default:\n                    c[x] = a[x] + b[x];\n\n\n            }\n        }\n    }\n    #pragma acc exit data delete(a[0:n], b[0:n]) copyout(c[0:n])\n\n    for (int x = 0; x < n; ++x){\n        switch(a[x]){\n            case 0:\n                tempc = b_host[x] * b_host[x];\n                break;\n            case 1:\n                tempc = b_host[x] / b_host[x];\n                break;\n            case 2:\n                b_host[x] = b_host[x] / 2;\n            default:\n                tempc = a[x] + b_host[x];\n        }\n        if (fabs(c[x] - tempc) > PRECISION){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "syntactic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_wait.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:parallel,wait,async,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = a[x];\n    }\n\n    #pragma acc enter data create(a[0:n])\n    #pragma acc update device(a[0:n]) async(1)\n    #pragma acc parallel present(a[0:n]) wait(1)\n    {\n        #pragma acc loop\n        for (int x = 0; x < n; ++x){\n            a[x] += 1;\n        }\n    }\n    #pragma acc exit data copyout(a[0:n])\n    for (int x = 0; x < n; ++x){\n        if (fabs(a[x] - (b[x] + 1)) > PRECISION){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "wait",
                            "async"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_wait_devnum.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:parallel,wait,async,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n])\n    {\n\t#pragma acc parallel loop present(a[0:n], b[0:n]) async(1)\n        for (int x = 0; x < n; ++x){\n\t    b[x] = a[x];\n        }\n\t#pragma acc update host(b[0:n]) wait(1)\n    }\n    for (int x = 0; x < n; ++x){\n        if (fabs(a[x] - b[x]) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed += test1();\n    }\n    if (failed){\n        failcode +=  (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "wait",
                            "async"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_wait_queue.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\nint test1(){\n    int err = 0;\n    srand(time(NULL));\n\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n    real_t * d = (real_t *)malloc(n * sizeof(real_t));\n    real_t * e = (real_t *)malloc(n * sizeof(real_t));\n    real_t * f = (real_t *)malloc(n * sizeof(real_t));\n    real_t * g = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0.0;\n        d[x] = rand() / (real_t)(RAND_MAX / 10);\n        e[x] = rand() / (real_t)(RAND_MAX / 10);\n        f[x] = 0.0;\n        g[x] = 0.0;\n    }\n\n   #pragma acc data copyin(a[0:n], b[0:n], c[0:n], d[0:n], e[0:n], f[0:n], g[0:n])\n    {\n        #pragma acc parallel loop async(1)\n        for (int x = 0; x < n; ++x){\n            c[x] = (a[x] + b[x]);\n        }\n        #pragma acc parallel loop async(2)\n        for (int x = 0; x < n; ++x){\n            f[x] = (d[x] + e[x]);\n        }\n        #pragma acc parallel loop wait(1, 2) async(3)\n        for (int x = 0; x < n; ++x){\n            g[x] = (c[x] + f[x]);\n        }\n        #pragma acc update host(c[0:n]) wait(1)\n        #pragma acc update host(f[0:n]) wait(2)\n        #pragma acc update host(g[0:n]) wait(3)\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION){\n\t    err++;\n\t}\n        if (fabs(f[x] - (d[x] + e[x])) > PRECISION){\n            err++;\n        }\n        if (fabs(g[x] - (c[x] + f[x])) > PRECISION){\n            err++;\n        }\n    }\n\n    free(a);\n    free(b);\n    free(c);\n    free(d);\n    free(e);\n    free(f);\n    free(g);\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for(int x = 0; x < NUM_TEST_CALLS; ++x){\n\tfailed += test1();\n    }\n    if(failed){\n\tfailcode += (1 << 0);\n    }\n\n#endif\n",
                        "tags": [],
                        "versions": []
                    }
                }
            },
            "parallel_while_loop.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:parallel,syntactic,V:1.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t avg = 0.0;\n\n    for (int x = 0; x < 10 * n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        avg += a[x]/(n * 10);\n    }\n\n    #pragma acc data copy(a[0:10*n])\n    {\n        #pragma acc parallel\n        {\n            real_t avg = 0.0;\n            #pragma acc loop\n            for (int y = 0; y < 10; ++y){\n                avg = 0.0;\n                while (avg - 1000 < PRECISION * n){\n                    avg = 0.0;\n                    #pragma acc loop reduction(+:avg)\n                    for (int x = 0; x < n; ++x){\n                        a[n * y + x] *= 1.5;\n                        avg += a[n * y + x] / n;\n                    }\n                }\n            }\n        }\n    }\n\n    avg = 0.0;\n    for (int x = 0; x < n; ++x){\n        avg += a[x]/n;\n    }\n\n    if (avg < 1000 || avg > 1600){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "parallel",
                            "syntactic"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "reference_count_zero.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0.0;\n    }\n\n\n    #pragma acc data copy(a[0:n], b[0:n], c[0:n])\n    {\n        #pragma acc parallel loop\n        for (int x = 0; x < n; ++x){\n            c[x] = a[x] + b[x];\n        }\n    }\n\n    #pragma acc exit data copyout(c[0:n])\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    }
                }
            },
            "routine_bind.c": {
                "num tests": 4,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:routine,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t **a = (real_t **)malloc(n * sizeof(real_t *));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    int on_host = (acc_get_device_type() == acc_device_none);\n    for (int x = 0; x < n; ++x){\n        a[x] = (real_t *)malloc(n * sizeof(real_t));\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < n; ++y){\n            a[x][y] = rand() / (real_t)(RAND_MAX / 10);\n        }\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n][0:n]) copyout(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop gang worker vector\n            for (int x = 0; x < n; ++x){\n                b[x] = device_function_identifier_unnamed(a[x], n);\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if ((!on_host) && (fabs(host_function_identifier_unnamed(a[x], n) + b[x]) > PRECISION)){\n            err += 1;\n            return 1;\n        }\n        else if ((on_host) && (fabs(host_function_identifier_unnamed(a[x], n) - b[x]) > PRECISION)){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "routine",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:routine,construct-independent,V:2.0-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    real_t **a = (real_t **)malloc(n * sizeof(real_t *));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    int on_host = (acc_get_device_type() == acc_device_none);\n    for (int x = 0; x < n; ++x){\n        a[x] = (real_t *)malloc(n * sizeof(real_t));\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < n; ++y){\n            a[x][y] = rand() / (real_t)(RAND_MAX / 10);\n        }\n    }\n\n    #pragma acc data copyin(a[0:n][0:n]) copyout(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop gang worker vector\n            for (int x = 0; x < n; ++x){\n                b[x] = device_function_string_unnamed(a[x], n);\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (!on_host && fabs(host_function_string_unnamed(a[x], n) + b[x]) > PRECISION){\n            err += 1;\n        }\n        else if (on_host && fabs(host_function_string_unnamed(a[x], n) - b[x]) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "routine",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n//T3:routine,construct-independent,V:2.0-2.7\nint test3(){\n    int err = 0;\n    srand(SEED);\n    real_t **a = (real_t **)malloc(n * sizeof(real_t *));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    int on_host = (acc_get_device_type() == acc_device_none);\n    for (int x = 0; x < n; ++x){\n        a[x] = (real_t *)malloc(n * sizeof(real_t));\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < n; ++y){\n            a[x][y] = rand() / (real_t)(RAND_MAX / 10);\n        }\n    }\n\n    #pragma acc data copyin(a[0:n][0:n]) copyout(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop gang worker vector\n            for (int x = 0; x < n; ++x){\n                b[x] = device_function_identifier_named(a[x], n);\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (!on_host && fabs(host_function_identifier_named(a[x], n) + b[x]) > PRECISION){\n            err += 1;\n        }\n        else if (on_host && fabs(host_function_identifier_named(a[x], n) - b[x]) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T3\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test3();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 2);\n    }\n#endif\n",
                        "tags": [
                            "routine",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "4": {
                        "content": "#ifndef T4\n//T4:routine,construct-independent,V:2.0-2.7\nint test4(){\n    int err = 0;\n    srand(SEED);\n    real_t **a = (real_t **)malloc(n * sizeof(real_t *));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    int on_host = (acc_get_device_type() == acc_device_none);\n    for (int x = 0; x < n; ++x){\n        a[x] = (real_t *)malloc(n * sizeof(real_t));\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < n; ++y){\n            a[x][y] = rand() / (real_t)(RAND_MAX / 10);\n        }\n    }\n\n    #pragma acc data copyin(a[0:n][0:n]) copyout(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop gang worker vector\n            for (int x = 0; x < n; ++x){\n                b[x] = device_function_string_named(a[x], n);\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (!on_host && fabs(host_function_string_named(a[x], n) + b[x]) > PRECISION){\n            err += 1;\n        }\n        else if (on_host && fabs(host_function_string_named(a[x], n) - b[x]) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T4\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test4();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 3);\n    }\n#endif\n",
                        "tags": [
                            "routine",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "routine_gang.c": {
                "num tests": 10,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:routine,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t ** a = (real_t **)malloc(n * sizeof(real_t *));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    for (int x = 0; x < n; ++x){\n        a[x] = (real_t *)malloc(n * sizeof(real_t));\n    }\n\n    for (int x = 0; x < n; ++x)\n        for (int y = 0; y < n; ++y){\n            a[x][y] = rand() / (real_t)(RAND_MAX / 10);\n        }\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n][0:n]) copy(b[0:n])\n    {\n        #pragma acc parallel\n        {\n              test_routine_gang_loop_unnamed(a, b, n);\n        }\n    }\n\n    if (validate_data(a, b)){\n        err += 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "routine",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "10": {
                        "content": "#ifndef T10\n//T10:routine,construct-independent,V:2.0-2.7\nint test10(){\n    int err = 0;\n    srand(SEED);\n    real_t ** a = (real_t **)malloc(n * sizeof(real_t *));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    for (int x = 0; x < n; ++x){\n        a[x] = (real_t *)malloc(n * sizeof(real_t));\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < n; ++y){\n            a[x][y] = rand() / (real_t)(RAND_MAX / 10);\n        }\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n][0:n]) copy(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            test_routine_gang_seq_named(a, b, n);\n        }\n    }\n\n    if (validate_data(a, b)){\n        err += 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T10\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test10();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 9);\n    }\n#endif\n",
                        "tags": [
                            "routine",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:routine,construct-independent,V:2.0-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    real_t ** a = (real_t **)malloc(n * sizeof(real_t *));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    for (int x = 0; x < n; ++x){\n        a[x] = (real_t *)malloc(n * sizeof(real_t));\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < n; ++y){\n            a[x][y] = rand() / (real_t)(RAND_MAX / 10);\n        }\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n][0:n]) copy(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            test_routine_gang_loop_named(a, b, n);\n        }\n    }\n\n    if (validate_data(a, b)){\n        err += 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "routine",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n//T3:routine,construct-independent,V:2.0-2.7\nint test3(){\n    int err = 0;\n    srand(SEED);\n    real_t ** a = (real_t **)malloc(n * sizeof(real_t *));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    for (int x = 0; x < n; ++x){\n        a[x] = (real_t *)malloc(n * sizeof(real_t));\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < n; ++y){\n            a[x][y] = rand() / (real_t)(RAND_MAX / 10);\n        }\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n][0:n]) copy(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            test_routine_gang_gang_unnamed(a, b, n);\n        }\n    }\n\n    if (validate_data(a, b)){\n        err += 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T3\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test3();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 2);\n    }\n#endif\n",
                        "tags": [
                            "routine",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "4": {
                        "content": "#ifndef T4\n//T4:routine,construct-independent,V:2.0-2.7\nint test4(){\n    int err = 0;\n    srand(SEED);\n    real_t ** a = (real_t **)malloc(n * sizeof(real_t *));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    for (int x = 0; x < n; ++x){\n        a[x] = (real_t *)malloc(n * sizeof(real_t));\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < n; ++y){\n            a[x][y] = rand() / (real_t)(RAND_MAX / 10);\n        }\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n][0:n]) copy(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            test_routine_gang_gang_named(a, b, n);\n        }\n    }\n\n    if (validate_data(a, b)){\n        err += 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T4\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test4();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 3);\n    }\n#endif\n",
                        "tags": [
                            "routine",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "5": {
                        "content": "#ifndef T5\n//T5:routine,construct-independent,V:2.0-2.7\nint test5(){\n    int err = 0;\n    srand(SEED);\n    real_t ** a = (real_t **)malloc(n * sizeof(real_t *));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    for (int x = 0; x < n; ++x){\n        a[x] = (real_t *)malloc(n * sizeof(real_t));\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < n; ++y){\n            a[x][y] = rand() / (real_t)(RAND_MAX / 10);\n        }\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n][0:n]) copy(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            test_routine_gang_worker_unnamed(a, b, n);\n        }\n    }\n\n    if (validate_data(a, b)){\n        err += 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T5\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test5();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 4);\n    }\n#endif\n",
                        "tags": [
                            "routine",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "6": {
                        "content": "#ifndef T6\n//T6:routine,construct-independent,V:2.0-2.7\nint test6(){\n    int err = 0;\n    srand(SEED);\n    real_t ** a = (real_t **)malloc(n * sizeof(real_t *));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    for (int x = 0; x < n; ++x){\n        a[x] = (real_t *)malloc(n * sizeof(real_t));\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < n; ++y){\n            a[x][y] = rand() / (real_t)(RAND_MAX / 10);\n        }\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n][0:n]) copy(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            test_routine_gang_worker_named(a, b, n);\n        }\n    }\n\n    if (validate_data(a, b)){\n        err += 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T6\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test6();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 5);\n    }\n#endif\n",
                        "tags": [
                            "routine",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "7": {
                        "content": "#ifndef T7\n//T7:routine,construct-independent,V:2.0-2.7\nint test7(){\n    int err = 0;\n    srand(SEED);\n    real_t ** a = (real_t **)malloc(n * sizeof(real_t *));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    for (int x = 0; x < n; ++x){\n        a[x] = (real_t *)malloc(n * sizeof(real_t));\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < n; ++y){\n            a[x][y] = rand() / (real_t)(RAND_MAX / 10);\n        }\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n][0:n]) copy(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            test_routine_gang_vector_unnamed(a, b, n);\n        }\n    }\n\n    if (validate_data(a, b)){\n        err += 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T7\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test7();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 6);\n    }\n#endif\n",
                        "tags": [
                            "routine",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "8": {
                        "content": "#ifndef T8\n//T8:routine,construct-independent,V:2.0-2.7\nint test8(){\n    int err = 0;\n    srand(SEED);\n    real_t ** a = (real_t **)malloc(n * sizeof(real_t *));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    for (int x = 0; x < n; ++x){\n        a[x] = (real_t *)malloc(n * sizeof(real_t));\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < n; ++y){\n            a[x][y] = rand() / (real_t)(RAND_MAX / 10);\n        }\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n][0:n]) copy(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            test_routine_gang_vector_named(a, b, n);\n        }\n    }\n\n    if (validate_data(a, b)){\n        err += 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T8\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test8();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 7);\n    }\n#endif\n",
                        "tags": [
                            "routine",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "9": {
                        "content": "#ifndef T9\n//T9:routine,construct-independent,V:2.0-2.7\nint test9(){\n    int err = 0;\n    srand(SEED);\n    real_t ** a = (real_t **)malloc(n * sizeof(real_t *));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    for (int x = 0; x < n; ++x){\n        a[x] = (real_t *)malloc(n * sizeof(real_t));\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < n; ++y){\n            a[x][y] = rand() / (real_t)(RAND_MAX / 10);\n        }\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n][0:n]) copy(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            test_routine_gang_seq_unnamed(a, b, n);\n        }\n    }\n\n    if (validate_data(a, b)){\n        err += 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T9\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test9();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 8);\n    }\n#endif\n",
                        "tags": [
                            "routine",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "routine_nohost.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:routine,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t ** a = (real_t **)malloc(n * sizeof(real_t *));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t summation;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = (real_t *)malloc(n * sizeof(real_t));\n        for (int y = 0; y < n; ++y){\n            a[x][y] = rand() / (real_t)(RAND_MAX / 10);\n        }\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n]) copyout(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            #pragma acc loop gang\n            for (int x = 0; x < n; ++x){\n                b[x] = function(a[x], n);\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        summation = 0;\n        for (int y = 0; y < n; ++y){\n            summation += a[x][y];\n        }\n        if (fabs(summation - b[x]) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "routine",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "routine_seq.c": {
                "num tests": 4,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:routine,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t ** a = (real_t **)malloc(n * sizeof(real_t *));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = (real_t *)malloc(n * sizeof(real_t));\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < n; ++y){\n            a[x][y] = rand() / (real_t)(RAND_MAX / 10);\n        }\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n][0:n]) copy(b[0:n])\n    {\n        #pragma acc parallel\n        {\n              test_routine_seq_loop_unnamed(a, b, n);\n        }\n    }\n\n    if (validate_data(a, b)){\n        err += 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "routine",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:routine,construct-independent,V:2.0-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    real_t ** a = (real_t **)malloc(n * sizeof(real_t *));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = (real_t *)malloc(n * sizeof(real_t));\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < n; ++y){\n            a[x][y] = rand() / (real_t)(RAND_MAX / 10);\n        }\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n][0:n]) copy(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            test_routine_seq_loop_named(a, b, n);\n        }\n    }\n\n    if (validate_data(a, b)){\n        err += 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "routine",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n//T3:routine,construct-independent,V:2.0-2.7\nint test3(){\n    int err = 0;\n    srand(SEED);\n    real_t ** a = (real_t **)malloc(n * sizeof(real_t *));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = (real_t *)malloc(n * sizeof(real_t));\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < n; ++y){\n            a[x][y] = rand() / (real_t)(RAND_MAX / 10);\n        }\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n][0:n]) copy(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            test_routine_seq_seq_unnamed(a, b, n);\n        }\n    }\n\n    if (validate_data(a, b)){\n        err += 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T3\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test3();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 2);\n    }\n#endif\n",
                        "tags": [
                            "routine",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "4": {
                        "content": "#ifndef T4\n//T4:routine,construct-independent,V:2.0-2.7\nint test4(){\n    int err = 0;\n    srand(SEED);\n    real_t ** a = (real_t **)malloc(n * sizeof(real_t *));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = (real_t *)malloc(n * sizeof(real_t));\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < n; ++y){\n            a[x][y] = rand() / (real_t)(RAND_MAX / 10);\n        }\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n][0:n]) copy(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            test_routine_seq_seq_named(a, b, n);\n        }\n    }\n\n    if (validate_data(a, b)){\n        err += 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T4\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test4();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 3);\n    }\n#endif\n",
                        "tags": [
                            "routine",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "routine_vector.c": {
                "num tests": 6,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:routine,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t ** a = (real_t **)malloc(n * sizeof(real_t *));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = (real_t *)malloc(n * sizeof(real_t));\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < n; ++y){\n            a[x][y] = rand() / (real_t)(RAND_MAX / 10);\n        }\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n][0:n]) copy(b[0:n])\n    {\n        #pragma acc parallel\n        {\n              test_routine_vector_loop_unnamed(a, b, n);\n        }\n    }\n\n    if (validate_data(a, b)){\n        err += 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "routine",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:routine,construct-independent,V:2.0-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    real_t ** a = (real_t **)malloc(n * sizeof(real_t *));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = (real_t *)malloc(n * sizeof(real_t));\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < n; ++y){\n            a[x][y] = rand() / (real_t)(RAND_MAX / 10);\n        }\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n][0:n]) copy(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            test_routine_vector_loop_named(a, b, n);\n        }\n    }\n\n    if (validate_data(a, b)){\n        err += 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "routine",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n//T3:routine,construct-independent,V:2.0-2.7\nint test3(){\n    int err = 0;\n    srand(SEED);\n    real_t ** a = (real_t **)malloc(n * sizeof(real_t *));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = (real_t *)malloc(n * sizeof(real_t));\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < n; ++y){\n            a[x][y] = rand() / (real_t)(RAND_MAX / 10);\n        }\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n][0:n]) copy(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            test_routine_vector_vector_unnamed(a, b, n);\n        }\n    }\n\n    if (validate_data(a, b)){\n        err += 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T3\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test3();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 2);\n    }\n#endif\n",
                        "tags": [
                            "routine",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "4": {
                        "content": "#ifndef T4\n//T4:routine,construct-independent,V:2.0-2.7\nint test4(){\n    int err = 0;\n    srand(SEED);\n    real_t ** a = (real_t **)malloc(n * sizeof(real_t *));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = (real_t *)malloc(n * sizeof(real_t));\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < n; ++y){\n            a[x][y] = rand() / (real_t)(RAND_MAX / 10);\n        }\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n][0:n]) copy(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            test_routine_vector_vector_named(a, b, n);\n        }\n    }\n\n    if (validate_data(a, b)){\n        err += 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T4\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test4();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 3);\n    }\n#endif\n",
                        "tags": [
                            "routine",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "5": {
                        "content": "#ifndef T5\n//T5:routine,construct-independent,V:2.0-2.7\nint test5(){\n    int err = 0;\n    srand(SEED);\n    real_t ** a = (real_t **)malloc(n * sizeof(real_t *));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = (real_t *)malloc(n * sizeof(real_t));\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < n; ++y){\n            a[x][y] = rand() / (real_t)(RAND_MAX / 10);\n        }\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n][0:n]) copy(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            test_routine_vector_seq_unnamed(a, b, n);\n        }\n    }\n\n    if (validate_data(a, b)){\n        err += 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T5\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test5();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 4);\n    }\n#endif\n",
                        "tags": [
                            "routine",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "6": {
                        "content": "#ifndef T6\n//T6:routine,construct-independent,V:2.0-2.7\nint test6(){\n    int err = 0;\n    srand(SEED);\n    real_t ** a = (real_t **)malloc(n * sizeof(real_t *));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = (real_t *)malloc(n * sizeof(real_t));\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < n; ++y){\n            a[x][y] = rand() / (real_t)(RAND_MAX / 10);\n        }\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n][0:n]) copy(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            test_routine_vector_seq_named(a, b, n);\n        }\n    }\n\n    if (validate_data(a, b)){\n        err += 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T6\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test6();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 5);\n    }\n#endif\n",
                        "tags": [
                            "routine",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "routine_worker.c": {
                "num tests": 8,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:routine,construct-independent,V:2.0-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t ** a = (real_t **)malloc(n * sizeof(real_t *));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = (real_t *)malloc(n * sizeof(real_t));\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < n; ++y){\n            a[x][y] = rand() / (real_t)(RAND_MAX / 10);\n        }\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n][0:n]) copy(b[0:n])\n    {\n        #pragma acc parallel\n        {\n              test_routine_worker_loop_unnamed(a, b, n);\n        }\n    }\n\n    if (validate_data(a, b)){\n        err += 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "routine",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:routine,construct-independent,V:2.0-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    real_t ** a = (real_t **)malloc(n * sizeof(real_t *));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = (real_t *)malloc(n * sizeof(real_t));\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < n; ++y){\n            a[x][y] = rand() / (real_t)(RAND_MAX / 10);\n        }\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n][0:n]) copy(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            test_routine_worker_loop_named(a, b, n);\n        }\n    }\n\n    if (validate_data(a, b)){\n        err += 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "routine",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n//T3:routine,construct-independent,V:2.0-2.7\nint test3(){\n    int err = 0;\n    srand(SEED);\n    real_t ** a = (real_t **)malloc(n * sizeof(real_t *));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = (real_t *)malloc(n * sizeof(real_t));\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < n; ++y){\n            a[x][y] = rand() / (real_t)(RAND_MAX / 10);\n        }\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n][0:n]) copy(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            test_routine_worker_worker_unnamed(a, b, n);\n        }\n    }\n\n    if (validate_data(a, b)){\n        err += 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T3\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test3();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 2);\n    }\n#endif\n",
                        "tags": [
                            "routine",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "4": {
                        "content": "#ifndef T4\n//T4:routine,construct-independent,V:2.0-2.7\nint test4(){\n    int err = 0;\n    srand(SEED);\n    real_t ** a = (real_t **)malloc(n * sizeof(real_t *));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = (real_t *)malloc(n * sizeof(real_t));\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < n; ++y){\n            a[x][y] = rand() / (real_t)(RAND_MAX / 10);\n        }\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n][0:n]) copy(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            test_routine_worker_worker_named(a, b, n);\n        }\n    }\n\n    if (validate_data(a, b)){\n        err += 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T4\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test4();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 3);\n    }\n#endif\n",
                        "tags": [
                            "routine",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "5": {
                        "content": "#ifndef T5\n//T5:routine,construct-independent,V:2.0-2.7\nint test5(){\n    int err = 0;\n    srand(SEED);\n    real_t ** a = (real_t **)malloc(n * sizeof(real_t *));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = (real_t *)malloc(n * sizeof(real_t));\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < n; ++y){\n            a[x][y] = rand() / (real_t)(RAND_MAX / 10);\n        }\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n][0:n]) copy(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            test_routine_worker_vector_unnamed(a, b, n);\n        }\n    }\n\n    if (validate_data(a, b)){\n        err += 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T5\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test5();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 4);\n    }\n#endif\n",
                        "tags": [
                            "routine",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "6": {
                        "content": "#ifndef T6\n//T6:routine,construct-independent,V:2.0-2.7\nint test6(){\n    int err = 0;\n    srand(SEED);\n    real_t ** a = (real_t **)malloc(n * sizeof(real_t *));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = (real_t *)malloc(n * sizeof(real_t));\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < n; ++y){\n            a[x][y] = rand() / (real_t)(RAND_MAX / 10);\n        }\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n][0:n]) copy(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            test_routine_worker_vector_named(a, b, n);\n        }\n    }\n\n    if (validate_data(a, b)){\n        err += 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T6\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test6();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 5);\n    }\n#endif\n",
                        "tags": [
                            "routine",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "7": {
                        "content": "#ifndef T7\n//T7:routine,construct-independent,V:2.0-2.7\nint test7(){\n    int err = 0;\n    srand(SEED);\n    real_t ** a = (real_t **)malloc(n * sizeof(real_t *));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = (real_t *)malloc(n * sizeof(real_t));\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < n; ++y){\n            a[x][y] = rand() / (real_t)(RAND_MAX / 10);\n        }\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n][0:n]) copy(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            test_routine_worker_seq_unnamed(a, b, n);\n        }\n    }\n\n    if (validate_data(a, b)){\n        err += 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T7\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test7();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 6);\n    }\n#endif\n",
                        "tags": [
                            "routine",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "8": {
                        "content": "#ifndef T8\n//T8:routine,construct-independent,V:2.0-2.7\nint test8(){\n    int err = 0;\n    srand(SEED);\n    real_t ** a = (real_t **)malloc(n * sizeof(real_t *));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = (real_t *)malloc(n * sizeof(real_t));\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < n; ++y){\n            a[x][y] = rand() / (real_t)(RAND_MAX / 10);\n        }\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n][0:n]) copy(b[0:n])\n    {\n        #pragma acc parallel\n        {\n            test_routine_worker_seq_named(a, b, n);\n        }\n    }\n\n    if (validate_data(a, b)){\n        err += 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T8\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test8();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 7);\n    }\n#endif\n",
                        "tags": [
                            "routine",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:serial,V:2.6-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t* a = (real_t *) malloc(1024 * sizeof(real_t));\n    real_t* b = (real_t *) malloc(1024 * sizeof(real_t));\n    real_t* c = (real_t *) malloc(1024 * sizeof(real_t));\n\n    for(int x = 0; x < 1024; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a[0:1024], b[0:1024]) copy(c[0:1024])\n    {\n        #pragma acc serial\n        {\n            #pragma acc loop\n            for (int _0 = 0; _0 < 2; ++_0){\n                #pragma acc loop\n                for (int _1 = 0; _1 < 2; ++_1){\n                    #pragma acc loop\n                    for (int _2 = 0; _2 < 2; ++_2){\n                        #pragma acc loop\n                        for (int _3 = 0; _3 < 2; ++_3){\n                            #pragma acc loop\n                            for (int _4 = 0; _4 < 2; ++_4){\n                                #pragma acc loop\n                                for (int _5 = 0; _5 < 2; ++_5){\n                                    #pragma acc loop\n                                    for (int _6 = 0; _6 < 2; ++_6){\n                                        #pragma acc loop\n                                        for (int _7 = 0; _7 < 2; ++_7){\n                                            #pragma acc loop\n                                            for (int _8 = 0; _8 < 2; ++_8){\n                                                #pragma acc loop\n                                                for (int _9 = 0; _9 < 2; ++_9){\n                                                    c[_0*512 + _1*256 + _2*128 + _3*64 + _4*32 + _5*16 + _6*8+ _7*4 + _8*2 + _9] =\n                                                    a[_0*512 + _1*256 + _2*128 + _3*64 + _4*32 + _5*16 + _6*8+ _7*4 + _8*2 + _9] +\n                                                    b[_0*512 + _1*256 + _2*128 + _3*64 + _4*32 + _5*16 + _6*8+ _7*4 + _8*2 + _9];\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < 1024; ++x){\n        if(fabs(c[x] - (a[x] +b[x])) > PRECISION){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "serial"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_async.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:serial,async,wait,V:2.6-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n    real_t * d = (real_t *)malloc(n * sizeof(real_t));\n    real_t * e = (real_t *)malloc(n * sizeof(real_t));\n    real_t * f = (real_t *)malloc(n * sizeof(real_t));\n    real_t * g = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0.0;\n        d[x] = rand() / (real_t)(RAND_MAX / 10);\n        e[x] = rand() / (real_t)(RAND_MAX / 10);\n        f[x] = 0.0;\n        g[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n], d[0:n], e[0:n], c[0:n], f[0:n], g[0:n])\n    {\n        #pragma acc serial async(1)\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                c[x] = a[x] + b[x];\n            }\n        }\n        #pragma acc serial async(2)\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                f[x] = d[x] + e[x];\n            }\n        }\n        #pragma acc serial wait(1, 2) async(3)\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                g[x] = c[x] + f[x];\n            }\n        }\n        #pragma acc update host(c[0:n]) async(1)\n        #pragma acc update host(f[0:n]) async(2)\n        #pragma acc update host(g[0:n]) async(3)\n\n        #pragma acc wait(1)\n        for (int x = 0; x < n; ++x){\n            if (fabs(c[x] - (a[x] + b[x])) > PRECISION){\n                err += 1;\n            }\n        }\n        #pragma acc wait(2)\n        for (int x = 0; x < n; ++x){\n            if (fabs(f[x] - (d[x] + e[x])) > PRECISION){\n                err += 1;\n            }\n        }\n        #pragma acc wait(3)\n        for (int x = 0; x < n; ++x){\n            if (fabs(g[x] - (a[x] + b[x] + d[x] + e[x])) > PRECISION){\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "serial",
                            "async",
                            "wait"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_copy.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:serial,data,data-region,V:2.6-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * a_host = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        a_host[x] = a[x];\n    }\n\n    #pragma acc serial copy(a[0:n])\n    {\n        #pragma acc loop\n        for (int x = 0; x < n; ++x){\n            a[x] = 2 * a[x];\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(a[x] - (2 * a_host[x])) > PRECISION){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "serial",
                            "data",
                            "data-region"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_copyin.c": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:serial,data,data-region,V:2.6-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * a_copy = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    int* hasDevice = (int *) malloc(sizeof(int));\n    hasDevice[0] = 1;\n    #pragma acc enter data copyin(hasDevice[0:1])\n    #pragma acc parallel present(hasDevice[0:1])\n    {\n      hasDevice[0] = 0;\n    }\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        a_copy[x] = a[x];\n        b[x] = 0.0;\n    }\n\n    #pragma acc serial copyin(a[0:n])\n    {\n        #pragma acc loop\n        for (int x = 0; x < n; ++x){\n            a[x] = 0.0;\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (((fabs(a[x] - a_copy[x]) > PRECISION) && (hasDevice[0] == 1)) || ((hasDevice[0] == 0) && (fabs(a[x]) > PRECISION))){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "serial",
                            "data",
                            "data-region"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:serial,data,data-region,V:2.6-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * a_copy = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n\n    #pragma acc data copy(b[0:n])\n    {\n        #pragma acc serial copyin(a[0:n])\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                b[x] = a[x];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(a[x] - b[x]) > PRECISION){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "serial",
                            "data",
                            "data-region"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_copyout.c": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:serial,data,data-region,V:2.6-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    int* hasDevice = (int *) malloc(sizeof(int));\n    hasDevice[0] = 1;\n    #pragma acc enter data copyin(hasDevice[0:1])\n    #pragma acc serial present(hasDevice[0:1])\n    {\n      hasDevice[0] = 0;\n    }\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a[0:n])\n    {\n        #pragma acc serial copyout(b[0:n])\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                b[x] = a[x];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(a[x] - b[x]) > PRECISION){\n            err += 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "serial",
                            "data",
                            "data-region"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:serial,data,data-region,reference-counting,devonly,V:2.6-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    int* hasDevice = (int *) malloc(sizeof(int));\n    hasDevice[0] = 1;\n    #pragma acc enter data copyin(hasDevice[0:1])\n    #pragma acc serial present(hasDevice[0:1])\n    {\n      hasDevice[0] = 0;\n    }\n\n    if (hasDevice[0] == 1){\n        for (int x = 0; x < n; ++x){\n            a[x] = rand() / (real_t)(RAND_MAX / 10);\n            b[x] = 0;\n        }\n        #pragma acc data copyin(a[0:n], b[0:n])\n        {\n            #pragma acc serial copyout(b[0:n])\n            {\n                #pragma acc loop\n                for (int x = 0; x < n; ++x){\n                    b[x] = a[x];\n                }\n            }\n        }\n        for (int x = 0; x < n; ++x){\n            if (fabs(b[x]) > PRECISION){\n                err += 2;\n                break;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "serial",
                            "data",
                            "data-region",
                            "reference-counting",
                            "devonly"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n//T3:serial,data,data-region,reference-counting,V:2.6-2.7\nint test3(){\n    int err = 0;\n    srand(SEED);\n\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    int* hasDevice = (int *) malloc(sizeof(int));\n    hasDevice[0] = 1;\n    #pragma acc enter data copyin(hasDevice[0:1])\n    #pragma acc serial present(hasDevice[0:1])\n    {\n      hasDevice[0] = 0;\n    }\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n])\n    {\n        #pragma acc serial copyout(b[0:n])\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                b[x] = a[x];\n            }\n        }\n        #pragma acc update host(b[0:n])\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(b[x] - a[x]) > PRECISION){\n            err += 4;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T3\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test3();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 2);\n    }\n#endif\n",
                        "tags": [
                            "serial",
                            "data",
                            "data-region",
                            "reference-counting"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_copyout_zero.c": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:serial,data,data-region,V:3.0-3.2\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a[0:n])\n    {\n        #pragma acc serial copyout(zero: b[0:n])\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                b[x] += a[x];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(a[x] - b[x]) > PRECISION){\n            err += 1;\n            break;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "serial",
                            "data",
                            "data-region"
                        ],
                        "versions": []
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:serial,data,data-region,reference-counting,devonly,V:3.0-3.1\nint test2(){\n    int err = 0;\n    srand(SEED);\n\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    int* hasDevice = (int *) malloc(sizeof(int));\n    hasDevice[0] = 1;\n    #pragma acc enter data copyin(hasDevice[0:1])\n    #pragma acc serial present(hasDevice[0:1])\n    {\n      hasDevice[0] = 0;\n    }\n\n    if (hasDevice[0] == 1){\n        for (int x = 0; x < n; ++x){\n            a[x] = rand() / (real_t)(RAND_MAX / 10);\n            b[x] = 0;\n        }\n        #pragma acc data copyin(a[0:n], b[0:n])\n        {\n            #pragma acc serial copyout(b[0:n])\n            {\n                #pragma acc loop\n                for (int x = 0; x < n; ++x){\n                    b[x] += a[x];\n                }\n            }\n        }\n        for (int x = 0; x < n; ++x){\n            if (fabs(b[x]) > PRECISION){\n                err += 1;\n                break;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "serial",
                            "data",
                            "data-region",
                            "reference-counting",
                            "devonly"
                        ],
                        "versions": []
                    }
                }
            },
            "serial_create.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:serial,data,data-region,V:2.6-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = 0.0;\n        c[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a[0:n]) copy(c[0:n])\n    {\n        #pragma acc serial create(b[0:n])\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                b[x] = a[x];\n            }\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                c[x] = b[x];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(a[x] - c[x]) > PRECISION){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "serial",
                            "data",
                            "data-region"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_create_zero.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:serial,data,data-region,V:3.0-3.2\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = 1;\n    }\n\n    #pragma acc data copyin(a[0:n]) \n    {\n        #pragma acc serial create(zero: b[0:n]) copyout(b[0:n])\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                b[x] += a[x];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(a[x] - b[x]) > PRECISION){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "serial",
                            "data",
                            "data-region"
                        ],
                        "versions": []
                    }
                }
            },
            "serial_default_copy.c": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:serial,data,data-region,default-mapping,V:2.6-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n])\n    {\n        #pragma acc serial\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                c[x] += a[x] + b[x];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "serial",
                            "data",
                            "data-region",
                            "default-mapping"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:serial,data,data-region,default-mapping,devonly,V:2.6-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n    int * devtest = (int *)malloc(sizeof(real_t));\n\n    devtest[0] = 1;\n    #pragma acc enter data copyin(devtest[0:1])\n    #pragma acc parallel present(devtest[0:1])\n    {\n        devtest[0] = 0;\n    }\n\n    if (devtest[0] == 1){\n        for (int x = 0; x < n; ++x){\n            a[x] = rand() / (real_t)(RAND_MAX / 10);\n            b[x] = rand() / (real_t)(RAND_MAX / 10);\n            c[x] = 1;\n        }\n\n        #pragma acc enter data copyin(c[0:n])\n        for (int x = 0; x < n; ++x){\n            c[x] = 0.0;\n        }\n        #pragma acc data copyin(a[0:n], b[0:n])\n        {\n            #pragma acc serial\n            {\n                #pragma acc loop\n                for (int x = 0; x < n; ++x){\n                    c[x] += a[x] + b[x];\n                }\n            }\n        }\n\n        for (int x = 0; x < n; ++x){\n            if (fabs(c[x]) > PRECISION){\n                err += 1;\n            }\n        }\n\n        #pragma acc exit data copyout(c[0:n])\n\n        for (int x = 0; x < n; ++x){\n            if (fabs(c[x] - (a[x] + b[x] + 1)) > PRECISION){\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "serial",
                            "data",
                            "data-region",
                            "default-mapping",
                            "devonly"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_default_present.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:serial,data,data-region,default,V:2.6-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = 0.0;\n    }\n    #pragma acc enter data copyin(a[0:n])\n    #pragma acc serial default(present)\n    {\n        #pragma acc loop\n        for (int x = 0; x < n; ++x){\n            a[x] = 1.0;\n        }\n    }\n    #pragma acc exit data copyout(a[0:n])\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(a[x] - 1.0) > PRECISION){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "serial",
                            "data",
                            "data-region",
                            "default"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_deviceptr.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:serial,data,data-region,V:2.6-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = 0;\n    }\n\n    #pragma acc enter data copyin(a[0:n])\n    b = (real_t *) acc_deviceptr(a);\n    if (b == NULL){\n        err = 1;\n    }\n    else{\n        #pragma acc serial deviceptr(b)\n        {\n            #pragma acc loop\n            for (int x = 0; x < (int) n/2; ++x){\n                b[x] = 1;\n            }\n        }\n        #pragma acc exit data copyout(a[0:n])\n    }\n    for (int x = 0; x < n; ++x){\n        if (x < (int) n/2){\n            if (fabs(a[x] - 1) > PRECISION){\n                err = 1;\n            }\n        }\n        else {\n            if (fabs(a[x]) > PRECISION){\n                err = 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "serial",
                            "data",
                            "data-region"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_firstprivate.c": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:serial,firstprivate,V:2.6-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(10 * sizeof(real_t));\n    real_t * c_copy = (real_t *)malloc(10 * sizeof(real_t));\n    real_t * d = (real_t *)malloc(10 * n * sizeof(real_t));\n\n    for (int x = 0; x < 10*n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        d[x] = 0.0;\n    }\n    for (int x = 0; x < 10; ++x){\n        c[x] = rand() / (real_t)(RAND_MAX / 10);\n        c_copy[x] = c[x];\n    }\n    #pragma acc data copyin(a[0:10*n], b[0:10*n]) copy(d[0:10*n])\n    {\n        #pragma acc serial firstprivate(c[0:n])\n        {\n            #pragma acc loop gang\n            for (int x = 0; x < n; ++x){\n                #pragma acc loop worker\n                for (int y = 0; y < 10; ++y){\n                    d[x * 10 + y] = a[x * 10 + y] + b[x * 10 + y] + c[y];\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 10; ++y){\n            if (fabs(d[x * 10 + y] - (a[x * 10 + y] + b[x * 10 + y] + c_copy[y])) > PRECISION){\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "serial",
                            "firstprivate"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:serial,firstprivate,V:2.6-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(10 * sizeof(real_t));\n    real_t * c_copy = (real_t *)malloc(10 * sizeof(real_t));\n    real_t * d = (real_t *)malloc(10 * n * sizeof(real_t));\n\n    for (int x = 0; x < 10*n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        d[x] = 0.0;\n    }\n    for (int x = 0; x < 10; ++x){\n        c[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a[0:10*n], b[0:10*n]) copy(d[0:10*n])\n    {\n        #pragma acc serial firstprivate(c[0:n])\n        {\n            #pragma acc loop gang independent\n            for (int x = 0; x < n; ++x){\n                #pragma acc loop worker independent\n                for (int y = 0; y < 10; ++y){\n                    c[y] = a[x * 10 + y] - b[x * 10 + y];\n                }\n                #pragma acc loop worker independent\n                for (int y = 0; y < 10; ++y){\n                    d[x * 10 + y] = a[x * 10 + y] + b[x * 10 + y] + c[y];\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < 10 * n; ++x){\n        if (fabs(d[x] - 2 * a[x]) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "serial",
                            "firstprivate"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_if.c": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:serial,if,V:2.6-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n    int accel = 1;\n    int host = 0;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0.0;\n    }\n    #pragma acc serial if(host)\n    {\n        #pragma acc loop\n        for (int x = 0; x < n; ++x){\n            c[x] = a[x] + b[x];\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "serial",
                            "if"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:serial,if,devonly,V:2.6-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n    int accel = 1;\n    int host = 0;\n    int * devtest = (int *)malloc(sizeof(int));\n    devtest[0] = 1;\n    #pragma acc data copyin(devtest[0:1])\n    #pragma acc parallel present(devtest[0:1])\n    {\n      devtest[0] = 0;\n    }\n\n    if (devtest[0] == 1){\n        for (int x = 0; x < n; ++x){\n            a[x] = rand() / (real_t)(RAND_MAX / 10);\n            b[x] = rand() / (real_t)(RAND_MAX / 10);\n            c[x] = 0;\n        }\n        #pragma acc enter data copyin(a[0:n], b[0:n], c[0:n])\n        #pragma acc serial if(host) present(a[0:n], b[0:n], c[0:n])\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                c[x] += a[x] + b[x];\n            }\n        }\n        #pragma acc exit data delete(a[0:n], b[0:n]) copyout(c[0:n])\n\n        for (int x = 0; x < n; ++x){\n            if (fabs(c[x]) > PRECISION){\n                err = 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "serial",
                            "if",
                            "devonly"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n//T3:serial,if,V:2.6-2.7\nint test3(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n    int accel = 1;\n    int host = 0;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0;\n    }\n    #pragma acc enter data copyin(a[0:n], b[0:n], c[0:n])\n    #pragma acc serial if(accel) present(a[0:n], b[0:n], c[0:n])\n    {\n        #pragma acc loop\n        for (int x = 0; x < n; ++x){\n            c[x] += a[x] + b[x];\n        }\n    }\n\n    #pragma acc exit data delete(a[0:n], b[0:n]) copyout(c[0:n])\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION * 2){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T3\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test3();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 2);\n    }\n#endif\n",
                        "tags": [
                            "serial",
                            "if"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_implicit_data_attributes.c": {
                "num tests": 4,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//copy cluase test with serial default(none) and reduction with scalar variables\nint test1(){\n\tint err = 0;\n\tsrand(SEED);\n\tint temp = rand()/(real_t)(RAND_MAX / 10);\n\t#pragma acc serial default(none) reduction(+:temp)\n\tfor(int x = 0; x < n; ++x){\n\t\ttemp += temp;\n\t}\n\tif(temp > PRECISION){\n\t\terr = 1;\n\t}\n\treturn err;\n}\n#endif\n#ifndef T1\n\tfailed = 0;\n\tfor( int x = 0; x < NUM_TEST_CALLS; ++x){\n\t\tfailed += test1();\n\t}\n\tif(failed){\n\t\tfailcode += (1 << 0);\n\t}\n#endif\n",
                        "tags": [],
                        "versions": []
                    },
                    "2": {
                        "content": "#ifndef T2\n//copy clause test with serial loop and reduction with scalar\nint test2(){\n\tint err = 0;\n\tsrand(SEED);\n\tint temp = rand()/(real_t)(RAND_MAX / 10);\n\t#pragma acc serial loop reduction(+:temp)\n\tfor(int x = 0; x < n; ++x){\n\t\ttemp += temp;\n\t}\n\tif(temp > PRECISION){\n\t\terr = 1;\n\t}\n\treturn err;\n}\n#endif\n#ifndef T2\n        failed = 0;\n        for( int x = 0; x < NUM_TEST_CALLS; ++x){\n                failed += test2();\n        }\n        if(failed){\n                failcode += (1 << 1);\n\t}\n#endif\n",
                        "tags": [],
                        "versions": []
                    },
                    "3": {
                        "content": "#ifndef T3\n//firstprivate test with only serial and reduction with scalar variables\nint test3(){\n\tint err = 0;\n\tsrand(SEED);\n\tint host = rand()/(real_t)(RAND_MAX/10);\n\tint device = host;\n\t#pragma acc serial reduction(+:device)\n\tfor( int x = 0; x < n; ++x){\n\t\tdevice += device;\n\t}\n\n\tif( fabs(host - device) > PRECISION ){\n\t\terr = 1;\n\t}\n\treturn err;\n}\n#endif\n#ifndef T3\n        failed = 0;\n        for( int x = 0; x < NUM_TEST_CALLS; ++x){\n                failed += test3();\n        }\n        if(failed){\n                failcode += (1 << 2);\n        }\n#endif\n",
                        "tags": [],
                        "versions": []
                    },
                    "4": {
                        "content": "#ifndef T4\nint test4(){\n\tint err = 0;\n\tsrand(SEED);\n\n\treal_t *host_array = (real_t *) malloc ( n *sizeof(real_t));\n        real_t *device_array = (real_t *) malloc ( n *sizeof(real_t));\n\n\tfor( int x = 0; x < n; ++x){\n                host_array[x] = rand()/ (real_t)(RAND_MAX/10);\n                device_array[x] = host_array[x];\n        }\n\t\n\t#pragma acc serial loop\n\tfor ( int x = 0; x < n; ++x){\n\t\tdevice_array[x] += device_array[x];\n\t}\n\t\n\tfor( int x = 0; x < n; ++x){\n                if(fabs(host_array[x]*2 - device_array[x]) > PRECISION){\n                        err = 1;\n                }\n        }\n        free(host_array);\n        free(device_array);\n        return err;\n}\n#endif\n#ifndef T4\n        failed = 0;\n        for( int x = 0; x < NUM_TEST_CALLS; ++x){\n                failed += test4();\n        }\n        if(failed){\n                failcode += (1 << 3);\n        }\n#endif\n",
                        "tags": [],
                        "versions": []
                    }
                }
            },
            "serial_loop.c": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:serial,loop,combined-constructs,V:2.6-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = 0;\n    }\n\n    #pragma acc data copy(a[0:n])\n    {\n        #pragma acc serial loop\n        for (int x = 0; x < n; ++x){\n            a[x] = 1.0;\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(a[x] - 1.0) > PRECISION){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "serial",
                            "loop",
                            "combined-constructs"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:serial,loop,V:2.6-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n      a[x] = 0.0;\n      b[x] = rand() / (real_t)(RAND_MAX / 10);\n      c[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    #pragma acc data copy(a[0:n], b[0:n], c[0:n])\n    {\n        #pragma acc serial\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                a[x] = b[x];\n            }\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                a[x] += c[x];\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(a[x] - (b[x] + c[x])) > PRECISION * 2){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "serial",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_async.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:serial,loop,async,combined-constructs,V:2.6-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * d = (real_t *)malloc(10 * n * sizeof(real_t));\n\t\tint * errors = (int *)malloc(10 * sizeof(int));\n\n\t\tfor (int x = 0; x < 10; ++x){\n\t\t\terrors[x] = 0;\n\t\t}\n\n    for (int x = 0; x < 10 * n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0.0;\n        d[x] = a[x] + b[x];\n    }\n\n    #pragma acc data copyin(a[0:10*n], b[0:10*n], c[0:10*n], d[0:10*n]) copy(errors[0:10])\n    {\n        for (int x = 0; x < 10; ++x){\n            #pragma acc serial loop async(x)\n            for (int y = 0; y < n; ++y){\n                c[x * n + y] = a[x * n + y] + b[x * n + y];\n            }\n            #pragma acc serial loop async(x)\n            for (int y = 0; y < n; ++y){\n                if(c[x * n + y] - d[x * n + y] > PRECISION || d[x * n + y] - c[x * n + y] > PRECISION){\n                    errors[x] += 1;\n                }\n            }\n        }\n\t\t\t\t#pragma acc wait\n    }\n\n    for (int x = 0; x < 10; ++x){\n        err += errors[x];\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "serial",
                            "loop",
                            "async",
                            "combined-constructs"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_auto.c": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:serial,loop,auto,V:2.6-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * a_copy = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t rolling_total = 0.0;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:n]) copyout(b[0:n])\n    {\n      #pragma acc serial loop auto\n      for (int x = 0; x < n; ++x){\n        b[x] = a[x];\n      }\n    }\n\n    for (int x = 0; x < n; ++x){\n      if (fabs(b[x] - a[x]) > PRECISION){\n        err = 1;\n      }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "serial",
                            "loop",
                            "auto"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:serial,loop,combined-constructs,V:2.6-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * a_copy = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t rolling_total = 0.0;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        a_copy[x] = a[x];\n    }\n\n    #pragma acc data copy(a[0:n])\n    {\n      #pragma acc serial loop auto\n      for (int x = 1; x < n; ++x){\n        a[x] = a[x - 1] + a[x];\n      }\n    }\n\n    for (int x = 0; x < n; ++x){\n      rolling_total += a_copy[x];\n      if (fabs(rolling_total - a[x]) > PRECISION){\n        err = 1;\n      }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "serial",
                            "loop",
                            "combined-constructs"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_gang.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:serial,loop,combined-constructs,V:2.6-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(c[0:n])\n    {\n        #pragma acc serial loop gang\n        for (int x = 0; x < n; ++x){\n            c[x] = a[x] + b[x];\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "serial",
                            "loop",
                            "combined-constructs"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_add_general.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:serial,loop,reduction,combined-constructs,V:2.6-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t total = 10;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n])\n    {\n        #pragma acc serial loop reduction(+:total)\n        for (int x = 0; x < n; ++x){\n            total += a[x] + b[x];\n        }\n    }\n    for (int x = 0; x < n; ++x){\n        total -= a[x] + b[x];\n    }\n    if (fabs(total - 10) > PRECISION * (2 * n - 1)){ //199 = # of mathematical operations necessary\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "serial",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_add_loop.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:serial,loop,reduction,combined-constructs,V:2.6-3.2\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * d = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t avg = 0.0;\n    real_t rolling_total = 0;\n\n    for (int x = 0; x < 10 * n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n\n    #pragma acc data copyin(a[0:10*n], b[0:10*n]) create(c[0:10*n]) copyout(d[0:10*n])\n    {\n        #pragma acc serial \n\t{    \n\t#pragma acc loop gang private(avg)\n        for (int x = 0; x < 10; ++x){\n            avg = 0;\n            #pragma acc loop worker reduction(+:avg)\n            for (int y = 0; y < n; ++y){\n                avg += c[x * n + y] = a[x * n + y] + b[x * n + y];\n            }\n            avg = avg / n;\n            #pragma acc loop worker\n            for (int y = 0; y < n; ++y){\n                d[x * n + y] = c[x * n + y] - avg;\n            }\n        }\n\t}\n    }\n\n\n    for (int x = 0; x < 10; ++x){\n        rolling_total = 0;\n        for (int y = 0; y < n; ++y){\n            rolling_total += a[x * n + y] + b[x * n + y];\n        }\n        rolling_total = rolling_total / n;\n        for (int y = 0; y < n; ++y){\n            if (fabs(d[x * n + y] - ((a[x * n + y] + b[x * n + y]) - rolling_total)) > PRECISION){\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "serial",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_add_vector_loop.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:serial,loop,reduction,combined-constructs,V:2.6-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(10 * sizeof(real_t));\n    real_t temp = 0.0;\n\n    for(int x = 0; x < 10 * n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    #pragma acc data copyin(a[0:10*n], b[0:10*n]) copyout(c[0:10])\n    {\n        #pragma acc serial loop private(temp)\n        for (int x = 0; x < 10; ++x){\n            temp = 0.0;\n            #pragma acc loop vector reduction(+:temp)\n            for (int y = 0; y < n; ++y){\n                temp += a[(x * n) + y] + b[(x * n) + y];\n            }\n            c[x] = temp;\n        }\n    }\n    for (int x = 0; x < 10; ++x){\n        for (int y = 0; y < n; ++y){\n            c[x] -= a[(x * n) + y] + b[(x * n) + y];\n        }\n        if (fabs(c[x]) > PRECISION * (2 * n - 1)){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "serial",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_and_general.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:serial,loop,reduction,combined-constructs,V:2.6-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    char * a = (char *)malloc(n * sizeof(char));\n    real_t false_margin = pow(exp(1), log(.5)/n);\n    char result = 1;\n    char found = 0;\n\n    for (int x = 0; x < n; ++x){\n        if(rand() / (real_t)(RAND_MAX) < false_margin){\n            a[x] = 1;\n        }\n        else{\n            a[x] = 0;\n        }\n    }\n\n    #pragma acc data copyin(a[0:n])\n    {\n        #pragma acc serial loop reduction(&&:result)\n        for (int x = 0; x < n; ++x){\n            result = result && a[x];\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (a[x] == 0){\n            found = 1;\n            break;\n        }\n    }\n    if (found == result){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "serial",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_and_loop.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:serial,loop,reduction,combined-constructs,V:2.6-3.2\nint test1(){\n    int err = 0;\n    srand(SEED);\n    char * a = (char *)malloc(10 * n * sizeof(char));\n    char * a_copy = (char *)malloc(10 * n * sizeof(char));\n    char * has_false = (char *)malloc(10 * sizeof(char));\n    real_t false_margin = pow(exp(1), log(.5)/n);\n    char temp = 1;\n\n    for (int x = 0; x < 10; ++x){\n        has_false[x] = 0;\n    }\n\n    for (int x = 0; x < 10; ++x){\n        for (int y = 0; y < n; ++y){\n            if (rand() / (real_t)(RAND_MAX) < false_margin){\n                a[x * n + y] = 1;\n                a_copy[x * n + y] = 1;\n            }\n            else {\n                a[x * n + y] = 0;\n                a_copy[x * n + y] = 0;\n                has_false[x] = 1;\n            }\n        }\n    }\n\n    #pragma acc data copy(a[0:10*n])\n    {\n        #pragma acc serial\n\t{   \n\t#pragma acc loop gang private(temp)\n        for (int x = 0; x < 10; ++x){\n            temp = 1;\n            #pragma acc loop worker reduction(&&:temp)\n            for (int y = 0; y < n; ++y){\n                temp = temp && a[x * n + y];\n            }\n            #pragma acc loop worker\n            for (int y = 0; y < n; ++y){\n                if(temp == 1){\n                    if  (a[x * n + y] == 1){\n                        a[x * n + y] = 0;\n                    }\n                    else {\n                        a[x * n + y] = 1;\n                    }\n                }\n            }\n        }\n\t}\n    }\n\n\n    for (int x = 0; x < 10; ++x){\n        for (int y = 0; y < n; ++y){\n            if (has_false[x] == 1 && a[x * n + y] != a_copy[x * n + y]){\n                err = 1;\n            }\n            else if (has_false[x] == 0 && a[x * n + y] == a_copy[x * n + y]){\n                err = 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "serial",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_and_vector_loop.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:serial,loop,reduction,combined-constructs,V:2.6-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    char * a = (char *)malloc(10 * n * sizeof(char));\n    char * b = (char *)malloc(10 * sizeof(char));\n    char * has_false = (char *)malloc(10 * sizeof(char));\n    char temp = 1;\n    real_t false_margin = pow(exp(1), log(.5)/n);\n\n    for (int x = 0; x < 10; ++x){\n        has_false[x] = 0;\n    }\n    for (int x = 0; x < 10 * n; ++x){\n        if(rand() / (real_t)(RAND_MAX) < false_margin){\n            a[x] = 1;\n        }\n        else{\n            a[x] = 0;\n            has_false[x/n] = 1;\n        }\n    }\n    #pragma acc data copyin(a[0:10*n]) copy(b[0:10])\n    {\n        #pragma acc serial loop private(temp)\n        for (int x = 0; x < 10; ++x){\n            temp = 1;\n            #pragma acc loop vector reduction(&&:temp)\n            for (int y = 0; y < n; ++y){\n                temp = temp && a[x * n + y];\n            }\n            b[x] = temp;\n        }\n    }\n    for (int x = 0; x < 10; ++x){\n        if (has_false[x] == b[x]){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "serial",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_bitand_general.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:serial,loop,reduction,combined-constructs,V:2.6-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    n = 10;\n    unsigned int * a = (unsigned int *)malloc(n * sizeof(unsigned int));\n    real_t false_margin = pow(exp(1), log(.5)/n);\n    unsigned int temp = 1;\n    unsigned int b = 0;\n    unsigned int host_b;\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 16; ++y){\n            if (rand() / (real_t) RAND_MAX < false_margin){\n                for (int z = 0; z < y; ++z){\n                    temp *= 2;\n                }\n                a[x] += temp;\n                temp = 1;\n            }\n        }\n    }\n    for (int x = 0; x < 16; ++x){\n        temp = 1;\n        for (int y = 0; y < x; ++y){\n            temp *= 2;\n        }\n        b += temp;\n    }\n    #pragma acc data copyin(a[0:n])\n    {\n        #pragma acc serial loop reduction(&:b)\n        for (int x = 0; x < n; ++x){\n            b = b & a[x];\n        }\n    }\n\n    host_b = a[0];\n    for (int x = 1; x < n; ++x){\n        host_b = host_b & a[x];\n    }\n    if (b != host_b){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "serial",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_bitand_loop.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:serial,loop,reduction,combined-constructs,V:2.6-3.2\nint test1(){\n    int err = 0;\n    srand(SEED);\n    unsigned int * a = (unsigned int *)malloc(10 * n * sizeof(unsigned int));\n    unsigned int * b = (unsigned int *)malloc(10 * n * sizeof(unsigned int));\n    unsigned int * b_copy = (unsigned int *)malloc(10 * n * sizeof(unsigned int));\n    unsigned int * c = (unsigned int *)malloc(10 * sizeof(unsigned int));\n    unsigned int* host_c = (unsigned int *)malloc(10 * sizeof(unsigned int));\n\n    real_t false_margin = pow(exp(1), log(.5)/n);\n    unsigned int temp = 1;\n\n    for (int x = 0; x < 10 * n; ++x){\n        b[x] = (unsigned int) rand() / (real_t)(RAND_MAX / 1000);\n        b_copy[x] = b[x];\n        for (int y = 0; y < 16; ++y){\n            if (rand() / (real_t) RAND_MAX < false_margin){\n                for (int z = 0; z < y; ++z){\n                    temp *= 2;\n                }\n                a[x] += temp;\n                temp = 1;\n            }\n        }\n    }\n    #pragma acc data copyin(a[0:10 * n]) copy(b[0:10 * n], c[0:10])\n    {\n        #pragma acc serial\n\t{   \n\t\t#pragma acc loop gang private(temp)\n        \tfor (int y = 0; y < 10; ++y){\n            \t\ttemp = a[y * n];\n            \t\t#pragma acc loop worker reduction(&:temp)\n           \t\tfor (int x = 1; x < n; ++x){\n               \t\ttemp = temp & a[y * n + x];\n            \t\t}\n            \t\n\t\t\tc[y] = temp;\n            \t\n\t\t\t#pragma acc loop worker\n            \t\tfor (int x = 0; x < n; ++x){\n\t       \t\t\tb[y * n + x] = b[y * n + x] + c[y];\n            \t\t}\n        \t}\n    \t}\n    }\n    for (int x = 0; x < 10; ++x){\n        host_c[x] = a[x * n];\n        for (int y = 1; y < n; ++y){\n            host_c[x] = host_c[x] & a[x * n + y];\n        }\n        if (host_c[x] != c[x]){\n          err += 1;\n        }\n    }\n\n    for (int x = 0; x < 10; ++x){\n        for (int y = 0; y < n; ++y){\n            if (b[x * n + y] != b_copy[x * n + y] + c[x]){\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "serial",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_bitand_vector_loop.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:serial,loop,reduction,combined-constructs,V:2.6-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    unsigned int* a = (unsigned int *)malloc(10 * n * sizeof(unsigned int));\n    unsigned int* b = (unsigned int *)malloc(10 * sizeof(unsigned int));\n    unsigned int b_host;\n    unsigned int c = 0;\n\n    real_t false_margin = pow(exp(1), log(.5)/n);\n    unsigned int temp = 1;\n\n    for (int x = 0; x < 10 * n; ++x){\n        for (int y = 0; y < 16; ++y){\n            if (rand() / (real_t) RAND_MAX < false_margin){\n                for (int z = 0; z < y; ++z){\n                    temp *= 2;\n                }\n                a[x] += temp;\n                temp = 1;\n            }\n        }\n    }\n\n    #pragma acc data copyin(a[0:10*n]) copy(b[0:10])\n    {\n        #pragma acc serial loop private(c)\n        for (int x = 0; x < 10; ++x){\n            c = a[x * n];\n            #pragma acc loop vector reduction(&:c)\n            for (int y = 1; y < n; ++y){\n                c = c & a[x * n + y];\n            }\n            b[x] = c;\n        }\n    }\n    for (int x = 0; x < 10; ++x){\n        b_host = a[x * n];\n        for (int y = 1; y < n; ++y){\n            b_host = b_host & a[x * n + y];\n        }\n        if (b_host != b[x]){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "serial",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_bitor_general.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:serial,loop,reduction,combined-constructs,V:2.6-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    unsigned int * a = (unsigned int *)malloc(n * sizeof(unsigned int));\n    unsigned int b = 0;\n    unsigned int host_b;\n    real_t false_margin = pow(exp(1), log(.5)/n);\n    unsigned int temp = 1;\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < 16; ++y){\n            if (rand() / (real_t) RAND_MAX > false_margin){\n                for (int z = 0; z < y; ++z){\n                    temp *= 2;\n                }\n                a[x] += temp;\n                temp = 1;\n            }\n        }\n    }\n\n    #pragma acc data copyin(a[0:n])\n    {\n        #pragma acc serial loop reduction(|:b)\n        for (int x = 0; x < n; ++x){\n            b = b | a[x];\n        }\n    }\n\n    host_b = a[0];\n    for (int x = 1; x < n; ++x){\n        host_b = host_b | a[x];\n    }\n    if (b != host_b){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "serial",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_bitor_loop.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:serial,loop,reduction,combined-constructs,V:2.6-3.2\nint test1(){\n    int err = 0;\n    srand(SEED);\n    unsigned int * a = (unsigned int *)malloc(10 * n * sizeof(unsigned int));\n    unsigned int * b = (unsigned int *)malloc(10 * n * sizeof(unsigned int));\n    unsigned int * b_copy = (unsigned int *)malloc(10 * n * sizeof(unsigned int));\n    unsigned int * c = (unsigned int *)malloc(10 * sizeof(unsigned int));\n    unsigned int host_c;\n\n    real_t false_margin = pow(exp(1), log(.5)/n);\n    unsigned int temp = 1;\n\n    for (int x = 0; x < 10; ++x){\n        for (int y = 0; y < n; ++y){\n            b[x * n + y] = (unsigned int) rand() / (real_t)(RAND_MAX / 1000);\n            b_copy[x * n + y] = b[x * n + y];\n            for (int z = 0; z < 16; ++z){\n                if (rand() / (real_t) RAND_MAX > false_margin){\n                    temp = 1;\n                    for (int i = 0; i < z; ++i){\n                        temp = temp * 2;\n                    }\n                    a[x * n + y] += temp;\n                }\n            }\n        }\n    }\n\n    #pragma acc data copyin(a[0:10*n]) copy(b[0:10*n], c[0:10])\n    {\n        #pragma acc serial loop private(temp)\n        for (int x = 0; x < 10; ++x){\n            temp = 0;\n            #pragma acc loop worker reduction(|:temp)\n            for (int y = 0; y < n; ++y){\n                temp = temp | a[x * n + y];\n            }\n            c[x] = temp;\n            #pragma acc loop worker\n            for (int y = 0; y < n; ++y){\n                b[x * n + y] = b[x * n + y] + c[x];\n            }\n        }\n    }\n    for (int x = 0; x < 10; ++x){\n        host_c = a[x * n];\n        for (int y = 1; y < n; ++y){\n            host_c = host_c | a[x * n + y];\n        }\n        if (host_c != c[x]){\n            err += 1;\n        }\n        for (int y = 0; y < n; ++y){\n            if (b[x * n + y] != b_copy[x * n + y] + host_c){\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "serial",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_bitor_vector_loop.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:serial,loop,reduction,combined-constructs,V:2.6-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    unsigned int* a = (unsigned int *)malloc(10 * n * sizeof(unsigned int));\n    unsigned int* b = (unsigned int *)malloc(10 * sizeof(unsigned int));\n    unsigned int b_host;\n\n    real_t false_margin = pow(exp(1), log(.5)/n);\n    unsigned int temp = 1;\n\n    for (int x = 0; x < 10 * n; ++x){\n        for (int y = 0; y < 16; ++y){\n            if (rand() / (real_t) RAND_MAX > false_margin){\n                for (int z = 0; z < y; ++z){\n                    temp *= 2;\n                }\n                a[x] += temp;\n                temp = 1;\n            }\n        }\n    }\n    temp = 0;\n    #pragma acc data copyin(a[0:10*n]) copy(b[0:10])\n    {\n        #pragma acc serial loop private(temp)\n        for (int x = 0; x < 10; ++x){\n            temp = 0;\n            #pragma acc loop vector reduction(|:temp)\n            for (int y = 0; y < n; ++y){\n                temp = temp | a[x * n + y];\n            }\n            b[x] = temp;\n        }\n    }\n\n    for (int x = 0; x < 10; ++x){\n        b_host = a[x * n];\n        for (int y = 1; y < n; ++y){\n            b_host = b_host | a[x * n + y];\n        }\n        if (b_host != b[x]){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "serial",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_bitxor_general.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:serial,loop,reduction,combined-constructs,V:2.6-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    unsigned int * a = (unsigned int *)malloc(n * sizeof(unsigned int));\n    unsigned int host_b;\n    unsigned int b = 0;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = (unsigned int) rand() / (real_t) (RAND_MAX / 2);\n    }\n\n    #pragma acc data copyin(a[0:n])\n    {\n        #pragma acc serial loop reduction(^:b)\n        for (int x = 0; x < n; ++x){\n            b = b ^ a[x];\n        }\n    }\n\n    host_b = a[0];\n\n    for (int x = 1; x < n; ++x){\n        host_b = host_b ^ a[x];\n    }\n    if (b != host_b){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "serial",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_bitxor_loop.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:serial,loop,reduction,combined-constructs,V:2.6-3.2\nint test1(){\n    int err = 0;\n    srand(SEED);\n    unsigned int * a = (unsigned int *)malloc(10 * n * sizeof(unsigned int));\n    unsigned int * b = (unsigned int *)malloc(10 * n * sizeof(unsigned int));\n    unsigned int * b_copy = (unsigned int *)malloc(10 * n * sizeof(unsigned int));\n    unsigned int * c = (unsigned int *)malloc(10 * sizeof(unsigned int));\n    unsigned int temp = 0;\n\n    for (int x = 0; x < 10*n; ++x){\n        b[x] = (unsigned int) rand() / (real_t)(RAND_MAX / 1000);\n        b_copy[x] = b[x];\n        a[x] = (unsigned int) rand() / (real_t)(RAND_MAX / 1000);\n    }\n    for (int x = 0; x < 10; ++x){\n        c[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:10*n]) copy(b[0:10*n], c[0:10])\n    {\n        #pragma acc serial loop private(temp)\n        for (int x = 0; x < 10; ++x){\n            temp = 0;\n            #pragma acc loop worker reduction(^:temp)\n            for (int y = 0; y < n; ++y){\n                temp = temp ^ a[x * n + y];\n            }\n            c[x] = temp;\n            #pragma acc loop worker\n            for (int y = 0; y < n; ++y){\n                b[x * n + y] = b[x * n + y] + c[x];\n            }\n        }\n    }\n\n    for (int x = 0; x < 10; ++x){\n        temp = 0;\n        for (int y = 0; y < n; ++y){\n            temp = temp ^ a[x * n + y];\n        }\n        if (temp != c[x]){\n            err += 1;\n        }\n        for (int y = 0; y < n; ++y){\n            if (b[x * n + y] != b_copy[x * n + y] + c[x]){\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "serial",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_bitxor_vector_loop.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:serial,loop,reduction,combined-constructs,V:2.6-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    unsigned int* a = (unsigned int *)malloc(10 * n * sizeof(unsigned int));\n    unsigned int* b = (unsigned int *)malloc(10 * sizeof(unsigned int));\n    unsigned int temp = 0;\n    unsigned int b_host;\n\n    for (int x = 0; x < 10 * n; ++x){\n        a[x] = (unsigned int) rand() / (real_t) (RAND_MAX / 2);\n    }\n\n    #pragma acc data copyin(a[0:10*n]) copy(b[0:10])\n    {\n        #pragma acc serial loop private(temp)\n        for (int x = 0; x < 10; ++x){\n            temp = 0;\n            #pragma acc loop vector reduction(^:temp)\n            for (int y = 0; y < n; ++y){\n                temp = temp ^ a[x * n + y];\n            }\n            b[x] = temp;\n        }\n    }\n\n    for (int x = 0; x < 10; ++x){\n        b_host = a[x * n];\n        for (int y = 1; y < n; ++y){\n            b_host = b_host ^ a[x * n + y];\n        }\n        if (b_host != b[x]){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "serial",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_max_general.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:serial,loop,reduction,combined-constructs,V:2.6-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t max = 0.0;\n    int found = 0;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX/10);\n        b[x] = rand() / (real_t)(RAND_MAX/10);\n    }\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(max)\n    {\n        #pragma acc serial loop reduction(max:max)\n        for (int x = 0; x < n; ++x){\n            max = fmax(a[x] * b[x], max);\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(max - (a[x] * b[x] + PRECISION)) < 0){\n            err = 1;\n        }\n        if (fabs(max - (a[x] * b[x] - PRECISION)) > 0){\n            found = 1;\n        }\n    }\n    if (found = 0){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "serial",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_max_loop.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:serial,loop,reduction,combined-constructs,V:2.6-3.2\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * maximum = (real_t *)malloc(10 * sizeof(real_t));\n    real_t temp = 0;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX/10);\n        b[x] = rand() / (real_t)(RAND_MAX/10);\n        c[x] = 0.0;\n    }\n    for (int x = 0; x < 10; ++x){\n        maximum[x] = 0;\n    }\n\n    #pragma acc data copyin(a[0:10*n], b[0:10*n]) copy(c[0:10*n], maximum[0:10])\n    {\n        #pragma acc serial loop private(temp)\n        for (int x = 0; x < 10; ++x){\n            temp = 0;\n            #pragma acc loop worker reduction(max:temp)\n            for (int y = 0; y < n; ++y){\n                temp = fmax(a[x * n + y] * b[x * n + y], temp);\n            }\n            maximum[x] = temp;\n            #pragma acc loop worker\n            for (int y = 0; y < n; ++y){\n                c[x * n + y] = (a[x * n + y] * b[x * n + y]) / maximum[x];\n            }\n        }\n    }\n    for (int x = 0; x < 10; ++x){\n        temp = 0;\n        for (int y = 0; y < n; ++y){\n            temp = fmax(temp, a[x * n + y] * b[x * n + y]);\n        }\n        if (fabs(temp - maximum[x]) > PRECISION){\n            err += 1;\n        }\n        for (int y = 0; y < n; ++y){\n            if (c[x * n + y] > 1){\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "serial",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_max_vector_loop.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:serial,loop,reduction,combined-constructs,V:2.6-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * max = (real_t *)malloc(10 * sizeof(real_t));\n    real_t temp = 0;\n    real_t temp_max;\n\n    for (int x = 0; x < 10 * n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX/10);\n        b[x] = rand() / (real_t)(RAND_MAX/10);\n    }\n    #pragma acc data copyin(a[0:10*n], b[0:10*n]) copy(max[0:10])\n    {\n        #pragma acc serial loop private(temp)\n        for (int x = 0; x < 10; ++x){\n            temp = 0;\n            #pragma acc loop vector reduction(max:temp)\n            for (int y = 0; y < n; ++y){\n                temp = fmax(a[x * n + y] * b[x * n + y], temp);\n            }\n            max[x] = temp;\n        }\n    }\n    for (int x = 0; x < 10; ++x){\n        temp_max = 0;\n        for (int y = 0; y < n; ++y){\n            if (temp_max < a[x * n + y] * b[x * n + y]){\n                temp_max = a[x * n + y] * b[x * n + y];\n            }\n        }\n        if (fabs(temp_max - max[x]) > PRECISION){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "serial",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_min_general.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:serial,loop,reduction,combined-constructs,V:2.6-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t min = 1000.0;\n    int found = 0;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX/10);\n        b[x] = rand() / (real_t)(RAND_MAX/10);\n    }\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(min)\n    {\n        #pragma acc serial loop reduction(min:min)\n        for (int x = 0; x < n; ++x){\n            min = fmin(a[x] * b[x], min);\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs((a[x] * b[x]) - (min + PRECISION)) < 0){\n            err = 1;\n        }\n        if (fabs(min - (a[x] * b[x])) < PRECISION){\n            found = 1;\n        }\n    }\n    if (found == 0){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "serial",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_min_loop.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:serial,loop,reduction,combined-constructs,V:2.6-3.2\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * minimum = (real_t *)malloc(10 * sizeof(real_t));\n    real_t temp = 0;\n\n    for (int x = 0; x < 10 * n; ++x){\n        a[x] = 1 + rand() / (real_t)(RAND_MAX/10);\n        b[x] = 1 + rand() / (real_t)(RAND_MAX/10);\n        c[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a[0:10*n], b[0:10*n]) copy(c[0:10*n], minimum[0:10])\n    {\n        #pragma acc serial \n\t{    \n\t    \n\t#pragma acc loop gang private(temp)\n        for (int x = 0; x < 10; ++x){\n            temp = 1000;\n            #pragma acc loop reduction(min:temp)\n            for (int y = 0; y < n; ++y){\n                temp = fmin(a[x * n + y] * b[x * n + y], temp);\n            }\n            minimum[x] = temp;\n            #pragma acc loop\n            for (int y = 0; y < n; ++y){\n                c[x * n + y] = (a[x * n + y] * b[x * n + y]) / minimum[x];\n            }\n        }\n\t}\n    }\n\n    for (int x = 0; x < 10; ++x){\n        temp = 1000;\n        for (int y = 0; y < n; ++y){\n            temp = fmin(temp, a[x * n + y] * b[x * n + y]);\n        }\n        if (fabs(temp - minimum[x]) > PRECISION){\n            err += 1;\n        }\n        for (int y = 0; y < n; ++y){\n            if (fabs(c[x * n + y] - (a[x * n + y] * b[x * n + y] / minimum[x])) > PRECISION){\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "serial",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_min_vector_loop.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:serial,loop,reduction,combined-constructs,V:2.6-3.2\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * min = (real_t *)malloc(10 * sizeof(real_t));\n    real_t temp = 100;\n    real_t temp_min;\n\n    for (int x = 0; x < 10 * n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX/10);\n        b[x] = rand() / (real_t)(RAND_MAX/10);\n    }\n\n    #pragma acc data copyin(a[0:10*n], b[0:10*n]) copy(min[0:10])\n    {\n        #pragma acc serial \n\t{    \n\t#pragma acc loop gang private(temp)\n        for (int x = 0; x < 10; ++x){\n            temp = 100;\n            #pragma acc loop vector reduction(min:temp)\n            for (int y = 0; y < n; ++y){\n                temp = fmin(a[x * n + y] * b[x * n + y], temp);\n            }\n            min[x] = temp;\n        }\n\t}\n    }\n    for (int x = 0; x < 10; ++x){\n        temp_min = 100;\n        for (int y = 0; y < n; ++y){\n            if (temp_min > a[x * n + y] * b[x * n + y]){\n                temp_min = a[x * n + y] * b[x * n + y];\n            }\n        }\n        if (fabs(temp_min - min[x]) > PRECISION){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "serial",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_multiply_general.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:serial,loop,reduction,combined-constructs,V:2.6-2.7\nint test1(){\n    int err = 0;\n    int multiplicitive_n = 128;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(multiplicitive_n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(multiplicitive_n * sizeof(real_t));\n\n    real_t multiplied_total = 1.0;\n\n    for (int x = 0; x < multiplicitive_n; ++x){\n        a[x] = rand() / (real_t) RAND_MAX;\n        b[x] = rand() / (real_t) RAND_MAX;\n    }\n\n    #pragma acc data copyin(a[0:multiplicitive_n], b[0:multiplicitive_n]) copy(multiplied_total)\n    {\n        #pragma acc serial loop reduction (*:multiplied_total)\n        for (int x = 0; x < multiplicitive_n; ++x){\n            multiplied_total *= a[x] + b[x];\n        }\n    }\n\n    for (int x = 0; x < multiplicitive_n; ++x){\n        multiplied_total /= (a[x] + b[x]);\n    }\n    if (fabs(multiplied_total - 1) > PRECISION * (2 * multiplicitive_n - 1)){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "serial",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_multiply_loop.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:serial,loop,reduction,combined-constructs,V:2.6-3.2\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * totals = (real_t *)malloc(10 * sizeof(real_t));\n    real_t temp;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = (999.4 + rand() / (real_t)(RAND_MAX)) / 1000;\n        b[x] = (999.4 + rand() / (real_t)(RAND_MAX)) / 1000;\n        c[x] = 0.0;\n    }\n\n\n    #pragma acc data copyin(a[0:10*n], b[0:10*n]) copyout(c[0:10*n]) copy(totals[0:10])\n    {\n        #pragma acc serial \n\t{   \n\t#pragma acc loop gang private(temp)\n        for (int x = 0; x < 10; ++x){\n            temp = 1;\n            #pragma acc loop worker reduction(*:temp)\n            for (int y = 0; y < n; ++y){\n                temp *= a[x * n + y] + b[x * n + y];\n            }\n            totals[x] = temp;\n            #pragma acc loop worker\n            for (int y = 0; y < n; ++y){\n                c[x * n + y] = (a[x * n + y] + b[x * n + y]) / totals[x];\n            }\n        }\n\t}\n    }\n\n    for (int x = 0; x < 10; ++x){\n        temp = 1;\n        for (int y = 0; y < n; ++y){\n            temp *= a[x * n + y] + b[x * n + y];\n        }\n        if (fabs(temp - totals[x]) > (temp / 2 + totals[x] / 2) * PRECISION){\n            err += 1;\n        }\n        for (int y = 0; y < n; ++y){\n            if (fabs(c[x * n + y] - ((a[x * n + y] + b[x * n + y]) / totals[x])) > PRECISION){\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "serial",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_multiply_vector_loop.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:serial,loop,reduction,combined-constructs,V:2.6-2.7\nint test1(){\n    int err = 0;\n    int multiplicitive_n = 128;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(10 * multiplicitive_n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(10 * multiplicitive_n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(10 * sizeof(real_t));\n    real_t temp;\n\n    for (int x = 0; x < 10 * multiplicitive_n; ++x){\n        a[x] = rand() / (real_t) RAND_MAX;\n        b[x] = rand() / (real_t) RAND_MAX;\n    }\n\n    #pragma acc data copyin(a[0:10*multiplicitive_n], b[0:10*multiplicitive_n]) copyout(c[0:10])\n    {\n        #pragma acc serial loop private(temp)\n        for (int x = 0; x < 10; ++x){\n            temp = 1.0;\n            #pragma acc loop vector reduction(*:temp)\n            for (int y = 0; y < multiplicitive_n; ++y){\n                temp *= a[(x * multiplicitive_n) + y] + b[(x * multiplicitive_n) + y];\n            }\n            c[x] = temp;\n        }\n    }\n\n    for (int x = 0; x < 10; ++x){\n        for (int y = 0; y < multiplicitive_n; ++y){\n            c[x] /= a[(x * multiplicitive_n) + y] + b[(x * multiplicitive_n) + y];\n        }\n    }\n\n    for (int x = 0; x < 10; ++x){\n        if (fabs(c[x] - 1) > PRECISION * (4 * multiplicitive_n - 1)){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "serial",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_or_general.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:serial,loop,reduction,combined-constructs,V:2.6-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    char * a = (char *)malloc(n * sizeof(char));\n    real_t false_margin = pow(exp(1), log(.5)/n);\n    char result = 0;\n    char found = 0;\n\n    for (int x = 0; x < n; ++x){\n        if(rand() / (real_t)(RAND_MAX) > false_margin){\n            a[x] = 1;\n        }\n        else{\n            a[x] = 0;\n        }\n    }\n\n\n    #pragma acc data copyin(a[0:n])\n    {\n        #pragma acc serial loop reduction(||:result)\n        for (int x = 0; x < n; ++x){\n            result = result || a[x];\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (a[x] == 1){\n            found = 1;\n        }\n    }\n    if (found != result){\n        err = 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "serial",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_or_loop.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:serial,loop,reduction,combined-constructs,V:2.6-3.2\nint test1(){\n    int err = 0;\n    srand(SEED);\n    char * a = (char *)malloc(10 * n * sizeof(char));\n    char * a_copy = (char *)malloc(10 * n * sizeof(char));\n    char * results = (char *)malloc(10 * sizeof(char));\n    char temp = 0;\n    real_t false_margin = pow(exp(1), log(.5)/n);\n\n    for (int x = 0; x < 10 * n; ++x){\n        if (rand() / (real_t)(RAND_MAX) > false_margin){\n            a[x] = 1;\n            a_copy[x] = 1;\n        }\n        else{\n            a[x] = 0;\n            a_copy[x] = 0;\n        }\n    }\n    #pragma acc data copy(a[0:10*n]) copyout(results[0:10])\n    {\n        #pragma acc serial \n\t{\n\t#pragma loop gang private(temp)\n        for (int x = 0; x < 10; ++x){\n            temp = 0;\n            #pragma acc loop worker reduction(||:temp)\n            for (int y = 0; y < n; ++y){\n                temp = temp || a[x * n + y];\n            }\n            results[x] = temp;\n            #pragma acc loop worker\n            for (int y = 0; y < n; ++y){\n                if(results[x] == 1){\n                    if (a[x * n + y] == 1){\n                        a[x * n + y] = 0;\n                    }\n                    else{\n                        a[x * n + y] = 1;\n                    }\n                }\n            }\n        }\n\t}\n    }\n    for (int x = 0; x < 10; ++x){\n        temp = 0;\n        for (int y = 0; y < n; ++y){\n            temp = temp || a_copy[x * n + y];\n        }\n        if (temp != results[x]) {\n            err += 1;\n        }\n        for (int y = 0; y < n; ++y){\n            if (temp == 1){\n                if (a[x * n + y] == a_copy[x * n + y]){\n                    err += 1;\n                }\n            }\n            else {\n                if (a[x * n + y] != a_copy[x * n + y]){\n                    err += 1;\n                }\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "serial",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_or_vector_loop.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:serial,loop,reduction,combined-constructs,V:2.6-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    char * a = (char *)malloc(10 * n * sizeof(char));\n    char * b = (char *)malloc(10 * sizeof(char));\n    real_t false_margin = pow(exp(1), log(.5)/n);\n    char temp = 0;\n    char found;\n\n    for (int x = 0; x < 10 * n; ++x){\n        if(rand() / (real_t)(RAND_MAX) > false_margin){\n            a[x] = 1;\n        }\n        else{\n            a[x] = 0;\n        }\n    }\n    #pragma acc data copyin(a[0:10*n]) copy(b[0:10])\n    {\n        #pragma acc serial loop private(temp)\n        for (int x = 0; x < 10; ++x){\n            temp = 0;\n            #pragma acc loop vector reduction(||:temp)\n            for (int y = 0; y < n; ++y){\n                temp = temp || a[x * n + y];\n            }\n            b[x] = temp;\n        }\n    }\n    for (int x = 0; x < 10; ++x){\n        found = 0;\n        for (int y = 0; y < n; ++y){\n            if (a[x * n + y] &! 0){\n                found = 1;\n            }\n        }\n        if (found != b[x]){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "serial",
                            "loop",
                            "reduction",
                            "combined-constructs"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_seq.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:serial,loop,combined-constructs,V:2.6-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t temp = 0.0;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a[0:n]) copy(b[0:n])\n    {\n        #pragma acc serial loop seq\n        for (int x = 1; x < n; ++x){\n            b[x] = b[x-1] + a[x];\n        }\n    }\n\n    for (int x = 1; x < n; ++x){\n        temp += a[x];\n        if (fabs(b[x] - temp) > PRECISION){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "serial",
                            "loop",
                            "combined-constructs"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_tile.c": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:serial,loop,tile,combined-constructs,syntactic,V:2.6-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n    real_t * d2 = (real_t *)malloc(n * n * sizeof(real_t));\n    real_t * d3 = (real_t *)malloc(n * n * n * sizeof(real_t));\n    real_t temp = 0.0;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n    #pragma acc data copy(a[0:n], b[0:n], c[0:n], d2[0:n*n])\n    {\n        #pragma acc serial loop tile(*, *) reduction(+:temp)\n        for (int x = 0; x < n; ++x){\n            for (int y = 0; y < n; ++y){\n                temp = 0;\n                for (int z = 0; z < n; ++z){\n                    temp += a[x] + b[y] + c[z];\n                }\n                d2[x * n + y] = temp;\n            }\n        }\n    }\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < n; ++y){\n            temp = 0.0;\n            for (int z = 0; z < n; ++z){\n                temp += a[x] + b[y] + c[z];\n            }\n            if (fabs(temp - d2[x * n + y]) > PRECISION * n){\n                err += 1;\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "serial",
                            "loop",
                            "tile",
                            "combined-constructs",
                            "syntactic"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:serial,loop,combined-constructs,tile,V:2.6-2.7\nint test2(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n    real_t * d2 = (real_t *)malloc(n * n * sizeof(real_t));\n    real_t * d3 = (real_t *)malloc(n * n * n * sizeof(real_t));\n    real_t temp = 0.0;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n], c[0:n]) copyout(d3[0:n*n*n])\n    {\n        #pragma acc serial loop tile(2, 4, 8)\n        for (int x = 0; x < n; ++x){\n            for (int y = 0; y < n; ++y){\n                for (int z = 0; z < n; ++z){\n                    d3[(n * n * x) + (n * y) + z] = a[x] + b[x] + c[x];\n                }\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        for (int y = 0; y < n; ++y){\n            for (int z = 0; z < n; ++z){\n                if (fabs(d3[(n * n * x) + (n * y) + z] - a[x] - b[x] - c[x]) > PRECISION * 2){\n                    err = 1;\n                }\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "serial",
                            "loop",
                            "combined-constructs",
                            "tile"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_vector.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:serial,loop,combined-constructs,V:2.6-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(c[0:n])\n    {\n        #pragma acc serial loop vector\n        for (int x = 0; x < n; ++x){\n            c[x] = a[x] + b[x];\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if(fabs(c[x] - (a[x] + b[x])) > PRECISION){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "serial",
                            "loop",
                            "combined-constructs"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_vector_blocking.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:serial,loop,V:2.6-2.7\nint test1(){\n  int err = 0;\n  srand(SEED);\n  real_t * a = (real_t *)malloc(n * sizeof(real_t));\n  real_t * b = (real_t *)malloc(n * sizeof(real_t));\n  real_t * c = (real_t *)malloc(n * sizeof(real_t));\n  real_t multiplyer = 1;\n\n  for (int x = 0; x < n; ++x){\n      a[x] = rand() / (real_t)(RAND_MAX / 10);\n      b[x] = rand() / (real_t)(RAND_MAX / 10);\n      c[x] = 0.0;\n  }\n\n  #pragma acc data copyin(a[0:n], b[0:n]) copyout(c[0:n])\n  {\n    #pragma acc serial\n    {\n      #pragma acc loop vector\n      for (int x = 0; x < n; ++x){\n        c[x] = (a[x] + b[x]) * multiplyer;\n      }\n      multiplyer += 1;\n      #pragma acc loop vector\n      for (int x = 0; x < n; ++x){\n        c[x] += (a[x] + b[x]) * multiplyer;\n      }\n    }\n  }\n\n  for (int x = 0; x < n; ++x){\n    if (fabs(c[x] - 3 * (a[x] + b[x])) > PRECISION){\n      err += 1;\n      break;\n    }\n  }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "serial",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_worker.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:serial,loop,combined-constructs,V:2.6-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copy(c[0:n])\n    {\n        #pragma acc serial loop worker\n        for (int x = 0; x < n; ++x){\n            c[x] = a[x] + b[x];\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "serial",
                            "loop",
                            "combined-constructs"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_worker_blocking.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:serial,loop,V:2.6-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n    real_t multiplyer = 1;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copyout(c[0:n])\n    {\n      #pragma acc serial\n      {\n        #pragma acc loop worker\n        for (int x = 0; x < n; ++x){\n          c[x] = (a[x] + b[x]) * multiplyer;\n        }\n        multiplyer += 1;\n        #pragma acc loop worker\n        for (int x = 0; x < n; ++x){\n          c[x] += (a[x] + b[x]) * multiplyer;\n        }\n      }\n    }\n\n    for (int x = 0; x < n; ++x){\n      if (fabs(c[x] - 3 * (a[x] + b[x])) > PRECISION){\n        err += 1;\n        break;\n      }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "serial",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_present.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:serial,present,V:2.6-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0.0;\n    }\n\n    #pragma acc enter data copyin(a[0:n], b[0:n])\n    #pragma acc serial present(a[0:n], b[0:n]) copy(c[0:n])\n    {\n        #pragma acc loop\n        for (int x = 0; x < n; ++x){\n            c[x] = a[x] + b[x];\n        }\n    }\n    #pragma acc exit data delete(a[0:n], b[0:n])\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a[x] + b[x])) > PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "serial",
                            "present"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_private.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:serial,private,V:2.6-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    n = 10;\n    real_t * a = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n    real_t * d = (real_t *)malloc(10 * sizeof(real_t));\n    real_t temp;\n\n    for (int x = 0; x < 10; ++x){\n        for (int y = 0; y < n; ++y){\n            a[x * n + y] = rand() / (real_t)(RAND_MAX / 10);\n            b[x * n + y] = rand() / (real_t)(RAND_MAX / 10);\n            c[y] = 0.0;\n        }\n        d[x] = 0.0;\n    }\n\n    #pragma acc enter data copyin(a[0:10*n], b[0:10*n], d[0:10])\n    #pragma acc serial private(c[0:n])\n    {\n        #pragma acc loop gang\n        for (int x = 0; x < 10; ++x){\n            #pragma acc loop worker\n            for (int y = 0; y < n; ++y){\n                c[y] = a[x * n + y] + b[x * n + y];\n            }\n            #pragma acc loop seq\n            for (int y = 0; y < n; ++y){\n                d[x] += c[y];\n            }\n        }\n    }\n    #pragma acc exit data copyout(d[0:10]) delete(a[0:10*n], b[0:10*n])\n\n    for (int x = 0; x < 10; ++x){\n        temp = 0.0;\n        for (int y = 0; y < n; ++y){\n            temp += a[x * n + y] + b[x * n + y];\n        }\n        if (fabs(temp - d[x]) > (2 * PRECISION * n)){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "serial",
                            "private"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_reduction.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:serial,reduction,V:2.6-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t reduction;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n\n    #pragma acc serial copyin(a[0:n]) reduction(+:reduction)\n    {\n        #pragma acc loop\n        for (int x = 0; x < n; ++x){\n            reduction = reduction + a[x];\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        reduction = reduction - a[x];\n    }\n    if (fabs(reduction) > PRECISION){\n        err += 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "serial",
                            "reduction"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_scalar_default_firstprivate.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:data,default-mapping,serial,firstprivate,V:2.6-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t scalar = rand() / (real_t)(RAND_MAX / 10);\n    real_t scalar_copy = scalar;\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a[0:n]) copyout(b[0:n])\n    {\n        #pragma acc serial\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                b[x] = a[x] + scalar;\n            }\n        }\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(b[x] - (a[x] + scalar_copy)) > PRECISION){\n            err += 1;\n        }\n    }\n    if (fabs(scalar_copy - scalar) > PRECISION){\n        err += 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "data",
                            "default-mapping",
                            "serial",
                            "firstprivate"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_switch.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:serial,V:2.6-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    int * a = (int *)malloc(n * sizeof(int));\n    real_t * b = (real_t *)malloc(n * sizeof(real_t));\n    real_t * b_host = (real_t *)malloc(n * sizeof(real_t));\n    real_t * c = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = floor(rand() / (real_t)(RAND_MAX / 10));\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        b_host[x] = b[x];\n        c[x] = 0.0;\n    }\n    #pragma acc enter data copyin(a[0:n], b[0:n], c[0:n])\n    #pragma acc serial present(a[0:n], b[0:n], c[0:n])\n    {\n        #pragma acc loop\n        for (int x = 0; x < n; ++x){\n            switch(a[x]){\n                case 0:\n                    c[x] = b[x] * b[x];\n                    break;\n                case 1:\n                    c[x] = b[x] / b[x];\n                    break;\n                case 2:\n                    b[x] = b[x] / 2;\n                default:\n                    c[x] = a[x] + b[x];\n\n\n            }\n        }\n    }\n    #pragma acc exit data delete(a[0:n], b[0:n]) copyout(c[0:n])\n\n    real_t tempc = 0.0;\n    for (int x = 0; x < n; ++x){\n        switch(a[x]){\n            case 0:\n                tempc = b_host[x] * b_host[x];\n                break;\n            case 1:\n                tempc = b_host[x] / b_host[x];\n                break;\n            case 2:\n                b_host[x] = b_host[x] / 2;\n            default:\n                tempc = a[x] + b_host[x];\n        }\n        if (fabs(c[x] - tempc) > PRECISION){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "serial"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_wait.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:serial,data,executable-data,async,wait,V:2.6-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = a[x];\n    }\n\n    #pragma acc enter data create(a[0:n])\n    #pragma acc update device(a[0:n]) async(1)\n    #pragma acc serial present(a[0:n]) wait(1)\n    {\n        #pragma acc loop\n        for (int x = 0; x < n; ++x){\n            a[x] += 1;\n        }\n    }\n    #pragma acc exit data copyout(a[0:n])\n    for (int x = 0; x < n; ++x){\n        if (fabs(a[x] - (b[x] + 1)) > PRECISION){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "serial",
                            "data",
                            "executable-data",
                            "async",
                            "wait"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_while_loop.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:serial,reduction,V:2.6-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t * a = (real_t *)malloc(10 * n * sizeof(real_t));\n    real_t avg = 0.0;\n\n    for (int x = 0; x < 10 * n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n    }\n\n    #pragma acc data copy(a[0:10*n])\n    {\n        #pragma acc serial\n        {\n            #pragma acc loop\n            for (int y = 0; y < 10; ++y){\n                avg = 0.0;\n                while (avg - 1000 < PRECISION * n){\n                    avg = 0.0;\n                    #pragma acc loop reduction(+:avg)\n                    for (int x = 0; x < n; ++x){\n                        a[n * y + x] *= 1.5;\n                        avg += a[n * y + x] / n;\n                    }\n                }\n            }\n        }\n    }\n\n    for (int y = 0; y < 10; ++y){\n        avg = 0.0;\n        for (int x = 0; x < n; ++x){\n            avg += a[y * n + x]/n;\n        }\n\n        if (avg < 1000 || avg > 1500){\n            err = 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "serial",
                            "reduction"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "set_default_async.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:async,set,construct-independent,V:2.5-2.7\nint test1(){\n    int err = 0;\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    real_t *a_host = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b_host = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0;\n        a_host[x] = a[x];\n        b_host[x] = b[x];\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n]) copyout(c[0:n])\n    {\n        #pragma acc set default_async(1)\n        #pragma acc parallel async\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                a[x] = a[x] * a[x];\n            }\n        }\n        #pragma acc set default_async(2)\n        #pragma acc parallel async\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                b[x] = b[x] * b[x];\n            }\n        }\n        #pragma acc parallel async(1) wait(2)\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                c[x] = a[x] + b[x];\n            }\n        }\n        #pragma acc wait(1)\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (fabs(c[x] - (a_host[x] * a_host[x] + b_host[x] * b_host[x])) > 4*PRECISION){\n            err += 1;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "async",
                            "set",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "set_device_num.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:set,devonly,runtime,construct-independent,V:2.5-2.7\nint test1(){\n    int err = 0;\n\n    if (acc_get_device_type() != acc_device_none){\n        real_t **host_copy = (real_t **)malloc(acc_get_num_devices(acc_get_device_type()) * sizeof(real_t *));\n        for (int x = 0; x < acc_get_num_devices(acc_get_device_type()); ++x){\n            host_copy[x] = (real_t *)malloc(n * sizeof(real_t));\n        }\n        real_t *a = (real_t *)malloc(n * sizeof(real_t));\n        for (int x = 0; x < acc_get_num_devices(acc_get_device_type()); ++x){\n            for (int y = 0; y < n; ++y){\n                a[y] = rand() / (real_t)(RAND_MAX / 10);\n                host_copy[x][y] = a[y];\n            }\n            #pragma acc set device_num(x)\n            #pragma acc enter data copyin(a[0:n])\n        }\n        for (int x = 0; x < acc_get_num_devices(acc_get_device_type()); ++x){\n            #pragma acc set device_num(x)\n            #pragma acc data present(a[0:n])\n            {\n                #pragma acc parallel\n                {\n                    #pragma acc loop\n                    for (int y = 0; y < n; ++y){\n                        a[y] = a[y] + 1;\n                    }\n                }\n            }\n        }\n        for (int x = 0; x < acc_get_num_devices(acc_get_device_type()); ++x){\n            #pragma acc set device_num(x)\n            #pragma acc exit data copyout(a[0:n])\n            for (int y = 0; y < n; ++y){\n                if (fabs(a[y] - (host_copy[x][y] + 1)) > PRECISION){\n                    err += 1;\n                }\n            }\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "set",
                            "devonly",
                            "runtime",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "set_device_type.c": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:set,runtime,syntactic,V:2.5-3.2\nint test1(){\n    int err = 0;\n\n    int device_type = acc_get_device_type();\n\n    #pragma acc set device_type(host)\n    if (acc_get_device_type() != device_type){\n        err += 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "set",
                            "runtime",
                            "syntactic"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:set,runtime,syntactic,V:2.5-3.2\nint test2(){\n    int err = 0;\n\n    int device_type = acc_get_device_type();\n\n    #pragma acc set device_type(multicore)\n    if (acc_get_device_type() != device_type){\n        err += 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "set",
                            "runtime",
                            "syntactic"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n//T3:set,runtime,syntactic,V:2.5-3.2\nint test3(){\n    int err = 0;\n\n    int device_type = acc_get_device_type();\n\n    #pragma acc set device_type(default)\n    if (acc_get_device_type() != device_type){\n        err += 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T3\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test3();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 2);\n    }\n#endif\n",
                        "tags": [
                            "set",
                            "runtime",
                            "syntactic"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "set_device_type_num.c": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:set,runtime,syntactic,V:2.5-3.2\nint test1(){\n\tint err = 0;\n\tint device_num;\n\n\tdevice_num = acc_get_device_num(acc_get_device_type());\n\t#pragma acc set device_type(host) device_num(device_num)\n\n\treturn err;\n}\n#endif\n#ifndef T1\n    \tfailed = 0;\n    \tfor (int x = 0; x < NUM_TEST_CALLS; ++x){\n        \tfailed = failed + test1();\n    \t}\n    \tif (failed != 0){\n        \tfailcode = failcode + (1 << 0);\n    \t}\n#endif\n",
                        "tags": [
                            "set",
                            "runtime",
                            "syntactic"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:set,runtime,syntactic,V:2.5-3.2\nint test2(){\nint err = 0;\n        int device_num;\n\n        device_num = acc_get_device_num(acc_get_device_type());\n        #pragma acc set device_type(multicore) device_num(device_num)\n\n        return err;\t\n}\n#endif\n#ifndef T2\n    \tfailed = 0;\n    \tfor (int x = 0; x < NUM_TEST_CALLS; ++x){\n        \tfailed = failed + test2();\n    \t}\n    \tif (failed != 0){\n        \tfailcode = failcode + (1 << 1);\n    \t}\n#endif \n",
                        "tags": [
                            "set",
                            "runtime",
                            "syntactic",
                            "set",
                            "runtime",
                            "syntactic"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n//T2:set,runtime,syntactic,V:2.5-3.2\nint test3(){\nint err = 0;\n        int device_num;\n\n        device_num = acc_get_device_num(acc_get_device_type());\n        #pragma acc set device_type(default) device_num(device_num)\n\n        return err;\n}\n#endif\n#ifndef T3\n    \tfailed = 0;\n    \tfor (int x = 0; x < NUM_TEST_CALLS; ++x){\n        \tfailed = failed + test3();\n    \t}\n    \tif (failed != 0){\n        \tfailcode = failcode + (1 << 2);\n    \t}\n#endif \n",
                        "tags": [],
                        "versions": []
                    }
                }
            },
            "set_device_type_num_nvidia.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:set,runtime,syntactic,V:2.5-3.2\nint test1(){\n        int err = 0;\n        int device_num;\n\n        device_num = acc_get_device_num(acc_get_device_type());\n        #pragma acc set device_type(nvidia) device_num(device_num)\n\n        return err;\n}\n#endif\n#ifndef T1\n    \tfailed = 0;\n    \tfor (int x = 0; x < NUM_TEST_CALLS; ++x){\n        \tfailed = failed + test1();\n    \t}\n    \tif (failed != 0){\n        \tfailcode = failcode + (1 << 0);\n    \t}\n#endif\n",
                        "tags": [
                            "set",
                            "runtime",
                            "syntactic"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "set_device_type_nvidia.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:set,runtime,syntactic,V:2.5-3.2\nint test1(){\n    int err = 0;\n\n    int device_type = acc_get_device_type();\n\n    #pragma acc set device_type(nvidia)\n    if (acc_get_device_type() != device_type){\n        err += 1;\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "set",
                            "runtime",
                            "syntactic"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "set_if.c": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:,V:2.7-3.0\nint test1(){\n\tint err = 0;\n\tsrand(SEED);\n\tint device_type = acc_get_device_type();\n\n\t#pragma acc set if(acc_get_device_type == device_type)\n\n\treturn err;\t\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            ""
                        ],
                        "versions": [
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:,V:2.7-3.0\nint test2(){\n\tint err = 0;\n        srand(SEED);\n        int device_type = acc_get_device_type();\n\n        #pragma acc set if(acc_get_device_type != device_type)\n\n        return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            ""
                        ],
                        "versions": [
                            "2.7"
                        ]
                    }
                }
            },
            "shutdown.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:shutdown,V:2.5-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n\n    #pragma acc shutdown\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "shutdown"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "shutdown_device_num.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:shutdown,runtime,syntactic,V:2.5-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    int device_num;\n\n    device_num = acc_get_device_num(acc_get_device_type());\n    #pragma acc shutdown device_num(device_num)\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "shutdown",
                            "runtime",
                            "syntactic"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "shutdown_device_type.c": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:shutdown,runtime,syntactic,V:2.5-3.2\nint test1(){\n    int err = 0;\n\n    #pragma acc shutdown device_type(host)\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "shutdown",
                            "runtime",
                            "syntactic"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:shutdown,runtime,syntactic,V:2.5-3.2\nint test2(){\n    int err = 0;\n\n    #pragma acc shutdown device_type(multicore)\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test2();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 1);\n    }\n#endif\n",
                        "tags": [
                            "shutdown",
                            "runtime",
                            "syntactic"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n//T3:shutdown,runtime,syntactic,V:2.5-3.2\nint test3(){\n    int err = 0;\n\n    #pragma acc shutdown device_type(default)\n\n    return err;\n}\n#endif\n#ifndef T3\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test3();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 2);\n    }\n#endif\n",
                        "tags": [
                            "shutdown",
                            "runtime",
                            "syntactic"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "shutdown_device_type_num.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:shutdown,runtime,syntactic,V:2.5-2.7\nint test1(){\n    int err = 0;\n    srand(SEED);\n    int device_type;\n    int device_num;\n\n    device_type = acc_get_device_type();\n    device_num = acc_get_device_num(device_type);\n    #pragma acc shutdown device_type(device_type) device_num(device_num)\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "shutdown",
                            "runtime",
                            "syntactic"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "shutdown_device_type_num_nvidia.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:shutdown,runtime,syntactic,V:2.5-2.7\nint test1(){\n    int err = 0;\n    int device_num;\n\n    device_num = acc_get_device_num(acc_get_device_type());\n    #pragma acc shutdown device_type(nvidia) device_num(device_num)\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "shutdown",
                            "runtime",
                            "syntactic"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "shutdown_device_type_nvidia.c": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:shutdown,runtime,syntactic,V:2.5-3.2\nint test1(){\n    int err = 0;\n\n    #pragma acc shutdown device_type(nvidia)\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed = failed + test1();\n    }\n    if (failed != 0){\n        failcode = failcode + (1 << 0);\n    }\n#endif\n",
                        "tags": [
                            "shutdown",
                            "runtime",
                            "syntactic"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "shutdown_if.c": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n//T1:,V:2.7-3.0\nint test1(){\n\tint err = 0;\n\tsrand(SEED);\n\tint device_num;\n\n\tdevice_num = acc_get_device_num(acc_get_device_type());\n\t#pragma acc shutdown if(device_num == device_num)\n\n\treturn err;\n}\n#endif\n#ifndef T1\n\tfailed = 0;\n\tfor (int x = 0; x < NUM_TEST_CALLS; ++x){\n\t\tfailed = failed + test1();\n\t}\n\tif (failed != 0){\n\t\tfailcode = failcode + (1 << 0);\n\t}\n#endif\n",
                        "tags": [
                            ""
                        ],
                        "versions": [
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n//T2:,V:2.7-3.0\nint test2(){\n\tint err = 0;\n\tsrand(SEED);\n\tint device_num;\n\n\tdevice_num = acc_get_device_num(acc_get_device_type());\n\t#pragma acc shutdown if(device_num != device_num)\n\n\treturn err;\n}\n#endif\n#ifndef T2\n        failed = 0;\n        for (int x = 0; x < NUM_TEST_CALLS; ++x){\n                failed = failed + test2();\n        }\n        if (failed != 0){\n                failcode = failcode + (1 << 1);\n        }\n#endif\n",
                        "tags": [
                            ""
                        ],
                        "versions": [
                            "2.7"
                        ]
                    }
                }
            },
            "wait_if.c": {
                "num tests": 4,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\nint test1(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    real_t *d = (real_t *)malloc(n * sizeof(real_t));\n    real_t *e = (real_t *)malloc(n * sizeof(real_t));\n    real_t *f = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n\ta[x] = rand() / (real_t)(RAND_MAX / 10);\n\tb[x] = rand() / (real_t)(RAND_MAX / 10);\n\tc[x] = 0.0;\n\td[x] = rand() / (real_t)(RAND_MAX / 10);\n\te[x] = rand() / (real_t)(RAND_MAX / 10);\n\tf[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n], d[0:n], e[0:n]) create(c[0:n], f[0:n])\n    {\n\t#pragma acc parallel async(1)\n\t{\n\t    #pragma acc loop\n\t    for (int x = 0; x < n; ++x){\n\t\tc[x] = a[x] + b[x];\n\t    }\n\t}\n\t#pragma acc parallel async(2)\n\t{\n\t    #pragma acc loop\n\t    for (int x = 0; x < n; ++x){\n\t\tf[x] = d[x] + e[x];\n\t    }\n\t}\n\t#pragma acc update host(c[0:n], f[0:n]) wait(1, 2) if(true)\n    }\n    \n    for (int x = 0; x < n; ++x){\n\tif (abs(c[x] - (a[x] + b[x])) > PRECISION){\n\t    err++;\n\t}\n\tif (abs(f[x] - (d[x] + e[x])) > PRECISION){\n\t    err++;\n\t}\n    }\n\n    return err;\n}\n#endif\n#ifndef T1\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed += test1();\n    }\n    if (failed){\n        failcode += (1 << 0);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    },
                    "2": {
                        "content": "#ifndef T2\nint test2(){\n    int err = 0;\n    srand(SEED);\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    real_t *d = (real_t *)malloc(n * sizeof(real_t));\n    real_t *e = (real_t *)malloc(n * sizeof(real_t));\n    real_t *f = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0.0;\n        d[x] = rand() / (real_t)(RAND_MAX / 10);\n        e[x] = rand() / (real_t)(RAND_MAX / 10);\n        f[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n], d[0:n], e[0:n]) create(c[0:n], f[0:n])\n    {\n        #pragma acc parallel async(1)\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                c[x] = a[x] + b[x];\n            }\n        }\n        #pragma acc parallel async(2)\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                f[x] = d[x] + e[x];\n            }\n        }\n        #pragma acc update host(c[0:n], f[0:n]) wait(1) if(true)\n\t#pragma acc update host(c[0:n], f[0:n]) wait(2) if(true)\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (abs(c[x] - (a[x] + b[x])) > PRECISION){\n            err++;\n        }\n        if (abs(f[x] - (d[x] + e[x])) > PRECISION){\n            err++;\n        }\n    }\n\n    return err;\n}\n#endif\n#ifndef T2\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n\tfailed += test2();\n    }\n    if (failed){\n\tfailcode += (1 << 1);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    },
                    "3": {
                        "content": "#ifndef T3\nint test3(){\n    int err = 0;\n    srand(time(NULL));\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    real_t *d = (real_t *)malloc(n * sizeof(real_t));\n    real_t *e = (real_t *)malloc(n * sizeof(real_t));\n    real_t *f = (real_t *)malloc(n * sizeof(real_t));\n    \n    for (int x = 0; x < n; ++x){\n\ta[x] = rand() / (real_t)(RAND_MAX / 10);\n\tb[x] = rand() / (real_t)(RAND_MAX / 10);\n\tc[x] = 0.0;\n\td[x] = rand() / (real_t)(RAND_MAX / 10);\n\te[x] = rand() / (real_t)(RAND_MAX / 10\n\tf[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n], d[0:n], e[0:n]) create(c[0:n], f[0:n])\n    {\n\t#pragma acc parallel async(1)\n\t{\n\t    #pragma acc loop\n\t    for (int x = 0; x < n; ++x){\n\t        c[x] = a[x] + b[x];\n\t    }\n \t}\n\t#pragma acc parallel async(2)\n\t{\n\t    #pragma acc loop\n\t    for (int x = 0; x < n; ++x){\n\t\tf[x] = d[x] + e[x];\n\t    }\n\t}\n\t#pragma acc update host(c[0:n], f[0:n]) wait(1, 2) if(false)\n    }\n        \n    for (int x = 0; x < n; ++x){\n\tif (c[x] > PRECISION){\n\t    err++;\n\t}\n\tif (f[x] > PRECISION){\n\t    err++\n\t}\n    }\n    return err;\n}\n#endif\n#ifndef T3\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed += test3();\n    }\n    if (failed){\n        failcode += (1 << 2);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    },
                    "4": {
                        "content": "#ifndef T4\nint test4(){\n    int err = 0;\n    srand(time(NULL));\n    real_t *a = (real_t *)malloc(n * sizeof(real_t));\n    real_t *b = (real_t *)malloc(n * sizeof(real_t));\n    real_t *c = (real_t *)malloc(n * sizeof(real_t));\n    real_t *d = (real_t *)malloc(n * sizeof(real_t));\n    real_t *e = (real_t *)malloc(n * sizeof(real_t));\n    real_t *f = (real_t *)malloc(n * sizeof(real_t));\n\n    for (int x = 0; x < n; ++x){\n        a[x] = rand() / (real_t)(RAND_MAX / 10);\n        b[x] = rand() / (real_t)(RAND_MAX / 10);\n        c[x] = 0.0;\n        d[x] = rand() / (real_t)(RAND_MAX / 10);\n        e[x] = rand() / (real_t)(RAND_MAX / 10\n        f[x] = 0.0;\n    }\n\n    #pragma acc data copyin(a[0:n], b[0:n], d[0:n], e[0:n]) create(c[0:n], f[0:n])\n    {\n        #pragma acc parallel async(1)\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                c[x] = a[x] + b[x];\n            }\n        }\n        #pragma acc parallel async(2)\n        {\n            #pragma acc loop\n            for (int x = 0; x < n; ++x){\n                f[x] = d[x] + e[x];\n            }\n        }\n        #pragma acc update host(c[0:n], f[0:n]) wait(1) if(false)\n\t#pragma acc update host(c[0:n], f[0:n]) wait(2) if(false)\n    }\n\n    for (int x = 0; x < n; ++x){\n        if (c[x] > PRECISION){\n            err++;\n        }\n        if (f[x] > PRECISION){\n            err++\n        }\n    }\n    return err;\n}\n#endif\n#ifndef T4\n    failed = 0;\n    for (int x = 0; x < NUM_TEST_CALLS; ++x){\n        failed += test4();\n    }\n    if (failed){\n        failcode += (1 << 3);\n    }\n#endif\n",
                        "tags": [],
                        "versions": []
                    }
                }
            }
        }
    ]
}