var jsonResults = {
    "configs": [
        {
            "CC": "",
            "CCFlags": [],
            "CC_ACC_Version": null,
            "CPP": "",
            "CPPFlags": [],
            "CPP_ACC_Version": null,
            "FC": "ftn",
            "FCFlags": [
                "-h",
                "acc",
                "-target-accel=nvidia80"
            ],
            "FC_ACC_Version": "2.7",
            "PostCompileCommands": [],
            "PostRunCommands": [],
            "PreCompileCommands": [],
            "PreRunCommands": [],
            "build_dir": "/global/u1/j/jarmusch/OpenACCV-V/build",
            "config_id": -1,
            "config_name": "init_config.txt",
            "env": null,
            "exclude_tags": [],
            "exclude_tests": [
                "acc_testsuite.Fh",
                "acc_testsuite.h",
                "acc_testsuite_declare.h"
            ],
            "export_format": "json",
            "fast": false,
            "id": 1,
            "include_by_default": true,
            "include_tags": [],
            "include_tests": [],
            "keep_build_dir": false,
            "keep_mutated_tests": false,
            "keep_partial_results": false,
            "keep_policy": "on-error",
            "mutated_test_dir": "/global/u1/j/jarmusch/OpenACCV-V/build/mutated_tests",
            "mutators": [],
            "partial": false,
            "partial_results_dir": "/global/u1/j/jarmusch/OpenACCV-V/build/partial_results",
            "runtime_prefix": "",
            "seed": null,
            "system_name": null,
            "tag_evaluation": null,
            "test_dir": "/global/u1/j/jarmusch/OpenACCV-V/Tests",
            "timeout": 10
        }
    ],
    "runs": {
        "acc_async_test.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_async_test.F90/acc_async_test.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_async_test.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1158708240109263
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_async_test.F90/acc_async_test.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_async_test.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11567108800227288
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT2 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_async_test.F90/acc_async_test.F902 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_async_test.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11548270500497892
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_async_test.F90/acc_async_test.F903 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_async_test.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11527036401093937
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT3 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_async_test.F90/acc_async_test.F904 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_async_test.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11551801199675538
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_async_test.F90/acc_async_test.F905 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_async_test.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11524029499560129
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT2 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_async_test.F90/acc_async_test.F906 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_async_test.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1159640749974642
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_async_test.F90/acc_async_test.F907 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_async_test.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11529000199516304
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "acc_async_test_all.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_async_test_all.F90/acc_async_test_all.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_async_test_all.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11523114799638279
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_async_test_all.F90/acc_async_test_all.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_async_test_all.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.16570557598606683
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT2 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_async_test_all.F90/acc_async_test_all.F902 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_async_test_all.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11624500699690543
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_async_test_all.F90/acc_async_test_all.F903 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_async_test_all.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11534766299882904
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT3 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_async_test_all.F90/acc_async_test_all.F904 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_async_test_all.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11552664899500087
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_async_test_all.F90/acc_async_test_all.F905 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_async_test_all.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11541614499583375
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT2 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_async_test_all.F90/acc_async_test_all.F906 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_async_test_all.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11559387900342699
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_async_test_all.F90/acc_async_test_all.F907 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_async_test_all.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11531480999838095
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "acc_copyin.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -DT2 -DT3 -DT4 -DT5 -DT6 -DT7 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_copyin.F90/acc_copyin.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_copyin.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11521379400801379
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT2 -DT3 -DT4 -DT5 -DT6 -DT7 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_copyin.F90/acc_copyin.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_copyin.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11581621800723951
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -DT3 -DT4 -DT5 -DT6 -DT7 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_copyin.F90/acc_copyin.F902 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_copyin.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11603245700825937
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -DT2 -DT4 -DT5 -DT6 -DT7 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_copyin.F90/acc_copyin.F903 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_copyin.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11627364199375734
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -DT2 -DT3 -DT5 -DT6 -DT7 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_copyin.F90/acc_copyin.F904 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_copyin.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11590202400111593
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -DT2 -DT3 -DT4 -DT6 -DT7 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_copyin.F90/acc_copyin.F905 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_copyin.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11550319299567491
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -DT2 -DT3 -DT4 -DT5 -DT7 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_copyin.F90/acc_copyin.F906 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_copyin.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11586273800639901
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -DT2 -DT3 -DT4 -DT5 -DT6 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_copyin.F90/acc_copyin.F907 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_copyin.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11534679100441281
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT7 -DT1 -DT2 -DT3 -DT4 -DT5 -DT6 -DT7 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_copyin.F90/acc_copyin.F908 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_copyin.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11571964199538343
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "acc_copyin_async.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -DT2 -DT3 -DT4 -DT5 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_copyin_async.F90/acc_copyin_async.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_copyin_async.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11529294800129719
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT2 -DT3 -DT4 -DT5 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_copyin_async.F90/acc_copyin_async.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_copyin_async.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1155995799927041
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -DT3 -DT4 -DT5 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_copyin_async.F90/acc_copyin_async.F902 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_copyin_async.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11613230899092741
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -DT2 -DT4 -DT5 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_copyin_async.F90/acc_copyin_async.F903 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_copyin_async.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1156340059969807
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -DT2 -DT3 -DT5 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_copyin_async.F90/acc_copyin_async.F904 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_copyin_async.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11567949500749819
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -DT2 -DT3 -DT4 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_copyin_async.F90/acc_copyin_async.F905 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_copyin_async.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11560459999600425
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT5 -DT1 -DT2 -DT3 -DT4 -DT5 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_copyin_async.F90/acc_copyin_async.F906 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_copyin_async.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1159594950004248
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "acc_copyin_async_with_len.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -DT2 -DT3 -DT4 -DT5 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_copyin_async_with_len.F90/acc_copyin_async_with_len.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_copyin_async_with_len.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11596864300372545
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT2 -DT3 -DT4 -DT5 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_copyin_async_with_len.F90/acc_copyin_async_with_len.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_copyin_async_with_len.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11567240000294987
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -DT3 -DT4 -DT5 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_copyin_async_with_len.F90/acc_copyin_async_with_len.F902 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_copyin_async_with_len.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11558633401000407
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -DT2 -DT4 -DT5 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_copyin_async_with_len.F90/acc_copyin_async_with_len.F903 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_copyin_async_with_len.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11562278399651404
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -DT2 -DT3 -DT5 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_copyin_async_with_len.F90/acc_copyin_async_with_len.F904 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_copyin_async_with_len.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11573711500386707
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -DT2 -DT3 -DT4 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_copyin_async_with_len.F90/acc_copyin_async_with_len.F905 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_copyin_async_with_len.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11520848399959505
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT5 -DT1 -DT2 -DT3 -DT4 -DT5 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_copyin_async_with_len.F90/acc_copyin_async_with_len.F906 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_copyin_async_with_len.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11547260500083212
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "acc_copyin_with_len.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -DT2 -DT3 -DT4 -DT5 -DT6 -DT7 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_copyin_with_len.F90/acc_copyin_with_len.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_copyin_with_len.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.115801880005165
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT2 -DT3 -DT4 -DT5 -DT6 -DT7 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_copyin_with_len.F90/acc_copyin_with_len.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_copyin_with_len.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11610324399953242
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -DT3 -DT4 -DT5 -DT6 -DT7 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_copyin_with_len.F90/acc_copyin_with_len.F902 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_copyin_with_len.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11574576199927833
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -DT2 -DT4 -DT5 -DT6 -DT7 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_copyin_with_len.F90/acc_copyin_with_len.F903 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_copyin_with_len.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11552083800779656
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -DT2 -DT3 -DT5 -DT6 -DT7 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_copyin_with_len.F90/acc_copyin_with_len.F904 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_copyin_with_len.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1158601240022108
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -DT2 -DT3 -DT4 -DT6 -DT7 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_copyin_with_len.F90/acc_copyin_with_len.F905 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_copyin_with_len.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11553314099728595
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -DT2 -DT3 -DT4 -DT5 -DT7 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_copyin_with_len.F90/acc_copyin_with_len.F906 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_copyin_with_len.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11581258200749289
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -DT2 -DT3 -DT4 -DT5 -DT6 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_copyin_with_len.F90/acc_copyin_with_len.F907 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_copyin_with_len.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11586361000081524
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT7 -DT1 -DT2 -DT3 -DT4 -DT5 -DT6 -DT7 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_copyin_with_len.F90/acc_copyin_with_len.F908 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_copyin_with_len.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11551710100320634
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "acc_copyout.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -DT2 -DT3 -DT4 -DT5 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_copyout.F90/acc_copyout.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_copyout.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1157686269871192
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT2 -DT3 -DT4 -DT5 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_copyout.F90/acc_copyout.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_copyout.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1155298249941552
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -DT3 -DT4 -DT5 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_copyout.F90/acc_copyout.F902 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_copyout.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1159776900021825
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -DT2 -DT4 -DT5 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_copyout.F90/acc_copyout.F903 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_copyout.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1154772940062685
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -DT2 -DT3 -DT5 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_copyout.F90/acc_copyout.F904 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_copyout.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1157147129997611
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -DT2 -DT3 -DT4 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_copyout.F90/acc_copyout.F905 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_copyout.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11592118100088555
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT5 -DT1 -DT2 -DT3 -DT4 -DT5 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_copyout.F90/acc_copyout.F906 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_copyout.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11569003500335384
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "acc_copyout_async.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_copyout_async.F90/acc_copyout_async.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_copyout_async.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11572998198971618
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_copyout_async.F90/acc_copyout_async.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_copyout_async.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11553746000572573
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "acc_copyout_async_with_len.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_copyout_async_with_len.F90/acc_copyout_async_with_len.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_copyout_async_with_len.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11554698899271898
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_copyout_async_with_len.F90/acc_copyout_async_with_len.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_copyout_async_with_len.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11559570200915914
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "acc_copyout_finalize.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_copyout_finalize.F90/acc_copyout_finalize.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_copyout_finalize.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11553595800069161
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_copyout_finalize.F90/acc_copyout_finalize.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_copyout_finalize.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11560333699162584
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "acc_copyout_finalize_async.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_copyout_finalize_async.F90/acc_copyout_finalize_async.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_copyout_finalize_async.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1148666230001254
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_copyout_finalize_async.F90/acc_copyout_finalize_async.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_copyout_finalize_async.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11526236799545586
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "acc_copyout_finalize_async_with_len.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_copyout_finalize_async_with_len.F90/acc_copyout_finalize_async_with_len.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_copyout_finalize_async_with_len.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1153687850019196
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_copyout_finalize_async_with_len.F90/acc_copyout_finalize_async_with_len.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_copyout_finalize_async_with_len.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11619167400931474
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "acc_copyout_finalize_with_len.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_copyout_finalize_with_len.F90/acc_copyout_finalize_with_len.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_copyout_finalize_with_len.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11529625298862811
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_copyout_finalize_with_len.F90/acc_copyout_finalize_with_len.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_copyout_finalize_with_len.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11545139300869778
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "acc_copyout_with_len.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_copyout_with_len.F90/acc_copyout_with_len.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_copyout_with_len.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11547997800516896
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_copyout_with_len.F90/acc_copyout_with_len.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_copyout_with_len.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11537071799102705
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT2 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_copyout_with_len.F90/acc_copyout_with_len.F902 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_copyout_with_len.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11544786699232645
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_copyout_with_len.F90/acc_copyout_with_len.F903 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_copyout_with_len.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11523309200129006
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "acc_create.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -DT2 -DT3 -DT4 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_create.F90/acc_create.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_create.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1152460970042739
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT2 -DT3 -DT4 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_create.F90/acc_create.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_create.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11573424999369308
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -DT3 -DT4 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_create.F90/acc_create.F902 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_create.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1153706479963148
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -DT2 -DT4 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_create.F90/acc_create.F903 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_create.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11576547099684831
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -DT2 -DT3 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_create.F90/acc_create.F904 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_create.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1158016199915437
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT4 -DT1 -DT2 -DT3 -DT4 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_create.F90/acc_create.F905 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_create.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11564477800857276
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "acc_create_async.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_create_async.F90/acc_create_async.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_create_async.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11601956200320274
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_create_async.F90/acc_create_async.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_create_async.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11541075499553699
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "acc_create_async_with_len.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_create_async_with_len.F90/acc_create_async_with_len.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_create_async_with_len.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11525190799147822
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_create_async_with_len.F90/acc_create_async_with_len.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_create_async_with_len.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11577307499828748
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "acc_create_with_len.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -DT2 -DT3 -DT4 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_create_with_len.F90/acc_create_with_len.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_create_with_len.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11588499099889304
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT2 -DT3 -DT4 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_create_with_len.F90/acc_create_with_len.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_create_with_len.F90",
                    "config": 1,
                    "errors": "\n\nftn-100 ftn: ERROR TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/acc_create_with_len.F90, Line = 14, Column = 9 \n  This statement must begin with a label, a keyword, or an identifier.\n\n\nftn-113 ftn: ERROR TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/acc_create_with_len.F90, Line = 15, Column = 22 \n  IMPLICIT NONE is specified in the local scope, therefore an explicit type must be specified for data object \"SEED\".\n\n\nftn-100 ftn: ERROR TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/acc_create_with_len.F90, Line = 16, Column = 9 \n  This statement must begin with a label, a keyword, or an identifier.\n\nCray Fortran : Version 14.0.1 (20220526224428_3a8780657c742829e80f36338fb6ec6578642bb7)\nCray Fortran : Compile time:  0.0054 seconds\nCray Fortran : 267 source lines\nCray Fortran : 3 errors, 0 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11592600100266282
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -DT3 -DT4 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_create_with_len.F90/acc_create_with_len.F902 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_create_with_len.F90",
                    "config": 1,
                    "errors": "\n\nftn-100 ftn: ERROR TEST2, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/acc_create_with_len.F90, Line = 60, Column = 9 \n  This statement must begin with a label, a keyword, or an identifier.\n\n\nftn-113 ftn: ERROR TEST2, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/acc_create_with_len.F90, Line = 61, Column = 22 \n  IMPLICIT NONE is specified in the local scope, therefore an explicit type must be specified for data object \"SEED\".\n\n\nftn-100 ftn: ERROR TEST2, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/acc_create_with_len.F90, Line = 62, Column = 9 \n  This statement must begin with a label, a keyword, or an identifier.\n\nCray Fortran : Version 14.0.1 (20220526224428_3a8780657c742829e80f36338fb6ec6578642bb7)\nCray Fortran : Compile time:  0.0048 seconds\nCray Fortran : 267 source lines\nCray Fortran : 3 errors, 0 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11602661499637179
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -DT2 -DT4 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_create_with_len.F90/acc_create_with_len.F903 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_create_with_len.F90",
                    "config": 1,
                    "errors": "\n\nftn-100 ftn: ERROR TEST3, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/acc_create_with_len.F90, Line = 106, Column = 9 \n  This statement must begin with a label, a keyword, or an identifier.\n\n\nftn-113 ftn: ERROR TEST3, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/acc_create_with_len.F90, Line = 107, Column = 22 \n  IMPLICIT NONE is specified in the local scope, therefore an explicit type must be specified for data object \"SEED\".\n\n\nftn-100 ftn: ERROR TEST3, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/acc_create_with_len.F90, Line = 108, Column = 9 \n  This statement must begin with a label, a keyword, or an identifier.\n\nCray Fortran : Version 14.0.1 (20220526224428_3a8780657c742829e80f36338fb6ec6578642bb7)\nCray Fortran : Compile time:  0.0053 seconds\nCray Fortran : 267 source lines\nCray Fortran : 3 errors, 0 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11556097499851603
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -DT2 -DT3 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_create_with_len.F90/acc_create_with_len.F904 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_create_with_len.F90",
                    "config": 1,
                    "errors": "\n\nftn-100 ftn: ERROR TEST4, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/acc_create_with_len.F90, Line = 152, Column = 9 \n  This statement must begin with a label, a keyword, or an identifier.\n\n\nftn-113 ftn: ERROR TEST4, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/acc_create_with_len.F90, Line = 153, Column = 22 \n  IMPLICIT NONE is specified in the local scope, therefore an explicit type must be specified for data object \"SEED\".\n\n\nftn-100 ftn: ERROR TEST4, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/acc_create_with_len.F90, Line = 154, Column = 9 \n  This statement must begin with a label, a keyword, or an identifier.\n\nCray Fortran : Version 14.0.1 (20220526224428_3a8780657c742829e80f36338fb6ec6578642bb7)\nCray Fortran : Compile time:  0.0050 seconds\nCray Fortran : 267 source lines\nCray Fortran : 3 errors, 0 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11577815499913413
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT4 -DT1 -DT2 -DT3 -DT4 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_create_with_len.F90/acc_create_with_len.F905 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_create_with_len.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11572187699493952
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "acc_delete.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_delete.F90/acc_delete.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_delete.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11525482300203294
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_delete.F90/acc_delete.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_delete.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11542616499355063
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT2 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_delete.F90/acc_delete.F902 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_delete.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11538218999339733
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_delete.F90/acc_delete.F903 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_delete.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11609795299591497
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "acc_delete_async.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_delete_async.F90/acc_delete_async.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_delete_async.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11527435199241154
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_delete_async.F90/acc_delete_async.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_delete_async.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11525910199270584
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT2 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_delete_async.F90/acc_delete_async.F902 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_delete_async.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11539542599348351
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_delete_async.F90/acc_delete_async.F903 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_delete_async.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11567356299201492
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "acc_delete_async_with_len.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_delete_async_with_len.F90/acc_delete_async_with_len.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_delete_async_with_len.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11526842998864595
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_delete_async_with_len.F90/acc_delete_async_with_len.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_delete_async_with_len.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11549711199768353
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT2 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_delete_async_with_len.F90/acc_delete_async_with_len.F902 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_delete_async_with_len.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11523140899953432
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_delete_async_with_len.F90/acc_delete_async_with_len.F903 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_delete_async_with_len.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11550390500633512
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "acc_delete_finalize.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_delete_finalize.F90/acc_delete_finalize.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_delete_finalize.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11532805500610266
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_delete_finalize.F90/acc_delete_finalize.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_delete_finalize.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11509210999065544
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT2 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_delete_finalize.F90/acc_delete_finalize.F902 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_delete_finalize.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11539427300158422
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_delete_finalize.F90/acc_delete_finalize.F903 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_delete_finalize.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1155726080032764
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "acc_delete_finalize_async.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_delete_finalize_async.F90/acc_delete_finalize_async.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_delete_finalize_async.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11531878699315712
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_delete_finalize_async.F90/acc_delete_finalize_async.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_delete_finalize_async.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11652292399958242
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT2 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_delete_finalize_async.F90/acc_delete_finalize_async.F902 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_delete_finalize_async.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11555688800581265
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_delete_finalize_async.F90/acc_delete_finalize_async.F903 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_delete_finalize_async.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1155902719910955
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "acc_delete_finalize_async_with_len.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_delete_finalize_async_with_len.F90/acc_delete_finalize_async_with_len.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_delete_finalize_async_with_len.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11506269298843108
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_delete_finalize_async_with_len.F90/acc_delete_finalize_async_with_len.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_delete_finalize_async_with_len.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11554060599883087
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT2 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_delete_finalize_async_with_len.F90/acc_delete_finalize_async_with_len.F902 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_delete_finalize_async_with_len.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11569328099722043
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_delete_finalize_async_with_len.F90/acc_delete_finalize_async_with_len.F903 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_delete_finalize_async_with_len.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11581427500641439
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "acc_delete_finalize_with_len.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_delete_finalize_with_len.F90/acc_delete_finalize_with_len.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_delete_finalize_with_len.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1154879149980843
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_delete_finalize_with_len.F90/acc_delete_finalize_with_len.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_delete_finalize_with_len.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11602344899438322
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT2 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_delete_finalize_with_len.F90/acc_delete_finalize_with_len.F902 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_delete_finalize_with_len.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1153505190013675
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_delete_finalize_with_len.F90/acc_delete_finalize_with_len.F903 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_delete_finalize_with_len.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11606672299967613
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "acc_delete_with_len.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_delete_with_len.F90/acc_delete_with_len.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_delete_with_len.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11554727899783757
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_delete_with_len.F90/acc_delete_with_len.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_delete_with_len.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11564509800518863
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT2 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_delete_with_len.F90/acc_delete_with_len.F902 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_delete_with_len.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11552182000014
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_delete_with_len.F90/acc_delete_with_len.F903 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_delete_with_len.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11554939199413639
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "acc_get_default_async.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_get_default_async.F90/acc_get_default_async.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_get_default_async.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11596928400103934
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_get_default_async.F90/acc_get_default_async.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_get_default_async.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11585158699017484
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "acc_get_device_num.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_get_device_num.F90/acc_get_device_num.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_get_device_num.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11599158799799625
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_get_device_num.F90/acc_get_device_num.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_get_device_num.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11582954399636947
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "acc_get_num_devices.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_get_num_devices.F90/acc_get_num_devices.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_get_num_devices.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1153602380072698
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_get_num_devices.F90/acc_get_num_devices.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_get_num_devices.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11554722799337469
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "acc_get_property.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_get_property.F90/acc_get_property.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_get_property.F90",
                    "config": 1,
                    "errors": "\n\nftn-232 ftn: ERROR TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/acc_get_property.F90, Line = 9, Column = 20 \n  IMPLICIT NONE is specified in the local scope, therefore an explicit type must be specified for function \"ACC_GET_PROPERTY\".\n\n\nftn-113 ftn: ERROR TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/acc_get_property.F90, Line = 9, Column = 103 \n  IMPLICIT NONE is specified in the local scope, therefore an explicit type must be specified for data object \"ACC_PROPERTY_MEMORY\".\n\n\nftn-113 ftn: ERROR TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/acc_get_property.F90, Line = 10, Column = 103 \n  IMPLICIT NONE is specified in the local scope, therefore an explicit type must be specified for data object \"ACC_PROPERTY_FREE_MEMORY\".\n\nCray Fortran : Version 14.0.1 (20220526224428_3a8780657c742829e80f36338fb6ec6578642bb7)\nCray Fortran : Compile time:  0.0049 seconds\nCray Fortran : 58 source lines\nCray Fortran : 3 errors, 0 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11536976600473281
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_get_property.F90/acc_get_property.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_get_property.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11563686199951917
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "acc_get_property_string.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_get_property_string.F90/acc_get_property_string.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_get_property_string.F90",
                    "config": 1,
                    "errors": "\n\nftn-113 ftn: ERROR TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/acc_get_property_string.F90, Line = 11, Column = 104 \n  IMPLICIT NONE is specified in the local scope, therefore an explicit type must be specified for data object \"ACC_PROPERTY_NAME\".\n\n\nftn-113 ftn: ERROR TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/acc_get_property_string.F90, Line = 12, Column = 104 \n  IMPLICIT NONE is specified in the local scope, therefore an explicit type must be specified for data object \"ACC_PROPERTY_VENDOR\".\n\n\nftn-113 ftn: ERROR TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/acc_get_property_string.F90, Line = 13, Column = 104 \n  IMPLICIT NONE is specified in the local scope, therefore an explicit type must be specified for data object \"ACC_PROPERTY_DRIVER\".\n\nCray Fortran : Version 14.0.1 (20220526224428_3a8780657c742829e80f36338fb6ec6578642bb7)\nCray Fortran : Compile time:  0.0047 seconds\nCray Fortran : 60 source lines\nCray Fortran : 3 errors, 0 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11504429701017216
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_get_property_string.F90/acc_get_property_string.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_get_property_string.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11590582098870073
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "acc_init.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_init.F90/acc_init.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_init.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1154390500014415
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_init.F90/acc_init.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_init.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11575828699278645
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "acc_is_present.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_is_present.F90/acc_is_present.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_is_present.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11554486499517225
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_is_present.F90/acc_is_present.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_is_present.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11548243300057948
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "acc_is_present_with_len.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_is_present_with_len.F90/acc_is_present_with_len.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_is_present_with_len.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11530858698824886
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_is_present_with_len.F90/acc_is_present_with_len.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_is_present_with_len.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11582174999057315
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "acc_on_device.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_on_device.F90/acc_on_device.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_on_device.F90",
                    "config": 1,
                    "errors": "\n\nftn-1698 ftn: ERROR TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/acc_on_device.F90, Line = 13, Column = 31 \n  Type INTEGER(kind=4) is not allowed for the \"DEVICE\" argument of intrinsic ACC_ON_DEVICE.\n\nCray Fortran : Version 14.0.1 (20220526224428_3a8780657c742829e80f36338fb6ec6578642bb7)\nCray Fortran : Compile time:  0.0050 seconds\nCray Fortran : 75 source lines\nCray Fortran : 1 errors, 0 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11565684000379406
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_on_device.F90/acc_on_device.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_on_device.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11547243400127627
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "acc_set_default_async.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_set_default_async.F90/acc_set_default_async.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_set_default_async.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11547843599691987
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_set_default_async.F90/acc_set_default_async.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_set_default_async.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11552292200212833
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "acc_set_device_num.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_set_device_num.F90/acc_set_device_num.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_set_device_num.F90",
                    "config": 1,
                    "errors": "\n\nftn-375 ftn: WARNING TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/acc_set_device_num.F90, Line = 20, Column = 15 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-324 ftn: ERROR TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/acc_set_device_num.F90, Line = 20, Column = 28 \n  Assignment of a rank 1 expression to a rank 0 variable is not allowed.\n\n\nftn-281 ftn: ERROR TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/acc_set_device_num.F90, Line = 22, Column = 13 \n  The left hand side of an assignment statement must be a variable or a function result.\n\n\nftn-503 ftn: ERROR TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/acc_set_device_num.F90, Line = 26, Column = 41 \n  Argument mismatch:  Actual argument \"ACC_GET_DEVICE_TYPE\" is a \"PROGRAM UNIT\".  Dummy argument \"DEVICE\" is a \"DATA OBJECT\".\n\n\nftn-281 ftn: ERROR TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/acc_set_device_num.F90, Line = 27, Column = 13 \n  The left hand side of an assignment statement must be a variable or a function result.\n\n\nftn-281 ftn: ERROR TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/acc_set_device_num.F90, Line = 39, Column = 13 \n  The left hand side of an assignment statement must be a variable or a function result.\n\nCray Fortran : Version 14.0.1 (20220526224428_3a8780657c742829e80f36338fb6ec6578642bb7)\nCray Fortran : Compile time:  0.0055 seconds\nCray Fortran : 99 source lines\nCray Fortran : 5 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11506668099900708
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_set_device_num.F90/acc_set_device_num.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_set_device_num.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11581581800419372
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "acc_set_device_type.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_set_device_type.F90/acc_set_device_type.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_set_device_type.F90",
                    "config": 1,
                    "errors": "\n\nftn-1307 ftn: ERROR TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/acc_set_device_type.F90, Line = 11, Column = 34 \n  The kind (4) of this actual argument does not match that of its associated dummy argument (8).\n\nCray Fortran : Version 14.0.1 (20220526224428_3a8780657c742829e80f36338fb6ec6578642bb7)\nCray Fortran : Compile time:  0.0044 seconds\nCray Fortran : 66 source lines\nCray Fortran : 1 errors, 0 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11572315900411922
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_set_device_type.F90/acc_set_device_type.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_set_device_type.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1154418250080198
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "acc_shutdown.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_shutdown.F90/acc_shutdown.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_shutdown.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11509449398727156
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_shutdown.F90/acc_shutdown.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_shutdown.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11580843399860896
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "acc_update_device.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_update_device.F90/acc_update_device.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_update_device.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11566005599161144
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_update_device.F90/acc_update_device.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_update_device.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1155140240007313
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT2 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_update_device.F90/acc_update_device.F902 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_update_device.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11548434699943755
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_update_device.F90/acc_update_device.F903 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_update_device.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11572940000041854
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "acc_update_device_async.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_update_device_async.F90/acc_update_device_async.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_update_device_async.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11540999299904797
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_update_device_async.F90/acc_update_device_async.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_update_device_async.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11623146099736914
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT2 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_update_device_async.F90/acc_update_device_async.F902 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_update_device_async.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11538322101114318
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_update_device_async.F90/acc_update_device_async.F903 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_update_device_async.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11547555099241436
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "acc_update_device_async_with_len.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_update_device_async_with_len.F90/acc_update_device_async_with_len.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_update_device_async_with_len.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11534516800020356
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_update_device_async_with_len.F90/acc_update_device_async_with_len.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_update_device_async_with_len.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11533034099556971
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT2 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_update_device_async_with_len.F90/acc_update_device_async_with_len.F902 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_update_device_async_with_len.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11560028100211639
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_update_device_async_with_len.F90/acc_update_device_async_with_len.F903 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_update_device_async_with_len.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1154822829994373
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "acc_update_device_with_len.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_update_device_with_len.F90/acc_update_device_with_len.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_update_device_with_len.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11567919400113169
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_update_device_with_len.F90/acc_update_device_with_len.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_update_device_with_len.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11548778400174342
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT2 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_update_device_with_len.F90/acc_update_device_with_len.F902 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_update_device_with_len.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11523389299691189
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_update_device_with_len.F90/acc_update_device_with_len.F903 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_update_device_with_len.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1156636130035622
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "acc_update_self.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_update_self.F90/acc_update_self.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_update_self.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11560946899408009
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_update_self.F90/acc_update_self.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_update_self.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11583486500603613
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT2 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_update_self.F90/acc_update_self.F902 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_update_self.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11561156300012954
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_update_self.F90/acc_update_self.F903 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_update_self.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11534596999990754
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "acc_update_self_async.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_update_self_async.F90/acc_update_self_async.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_update_self_async.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11576430899731349
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_update_self_async.F90/acc_update_self_async.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_update_self_async.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11554021600750275
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT2 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_update_self_async.F90/acc_update_self_async.F902 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_update_self_async.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11552941500849556
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_update_self_async.F90/acc_update_self_async.F903 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_update_self_async.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11550433600496035
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "acc_update_self_async_with_len.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_update_self_async_with_len.F90/acc_update_self_async_with_len.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_update_self_async_with_len.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11575921799521893
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_update_self_async_with_len.F90/acc_update_self_async_with_len.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_update_self_async_with_len.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11549910598841961
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT2 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_update_self_async_with_len.F90/acc_update_self_async_with_len.F902 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_update_self_async_with_len.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11590666401025373
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_update_self_async_with_len.F90/acc_update_self_async_with_len.F903 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_update_self_async_with_len.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11568598700978328
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "acc_update_self_with_len.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_update_self_with_len.F90/acc_update_self_with_len.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_update_self_with_len.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11550768199958839
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_update_self_with_len.F90/acc_update_self_with_len.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_update_self_with_len.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11555113599752076
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT2 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_update_self_with_len.F90/acc_update_self_with_len.F902 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_update_self_with_len.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11547191299905535
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_update_self_with_len.F90/acc_update_self_with_len.F903 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_update_self_with_len.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11526877099822741
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "acc_wait.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_wait.F90/acc_wait.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_wait.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11518366700329352
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_wait.F90/acc_wait.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_wait.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11515160498674959
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "acc_wait_all.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_wait_all.F90/acc_wait_all.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_wait_all.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11531914900115225
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_wait_all.F90/acc_wait_all.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_wait_all.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11560021099285223
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "acc_wait_all_async.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_wait_all_async.F90/acc_wait_all_async.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_wait_all_async.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11513104499317706
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_wait_all_async.F90/acc_wait_all_async.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_wait_all_async.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11566675899666734
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "acc_wait_async.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_wait_async.F90/acc_wait_async.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_wait_async.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11550141000770964
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_wait_async.F90/acc_wait_async.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_wait_async.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1159172839979874
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "atomic_capture_assign_expr_and_x.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_assign_expr_and_x.F90/atomic_capture_assign_expr_and_x.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_and_x.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11517072100832593
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_assign_expr_and_x.F90/atomic_capture_assign_expr_and_x.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_and_x.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11584427200432401
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "atomic_capture_assign_expr_divided_x.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_assign_expr_divided_x.F90/atomic_capture_assign_expr_divided_x.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_divided_x.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11557421099860221
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_assign_expr_divided_x.F90/atomic_capture_assign_expr_divided_x.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_divided_x.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11579518800135702
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "atomic_capture_assign_expr_eqv_x.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_assign_expr_eqv_x.F90/atomic_capture_assign_expr_eqv_x.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_eqv_x.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11539800099853892
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_assign_expr_eqv_x.F90/atomic_capture_assign_expr_eqv_x.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_eqv_x.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11549684198689647
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "atomic_capture_assign_expr_minus_x.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_assign_expr_minus_x.F90/atomic_capture_assign_expr_minus_x.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_minus_x.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11579454698949121
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_assign_expr_minus_x.F90/atomic_capture_assign_expr_minus_x.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_minus_x.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11535978699976113
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "atomic_capture_assign_expr_neqv_x.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_assign_expr_neqv_x.F90/atomic_capture_assign_expr_neqv_x.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_neqv_x.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11516418900282588
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_assign_expr_neqv_x.F90/atomic_capture_assign_expr_neqv_x.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_neqv_x.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11551964499813039
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "atomic_capture_assign_expr_or_x.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_assign_expr_or_x.F90/atomic_capture_assign_expr_or_x.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_or_x.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11590666300617158
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_assign_expr_or_x.F90/atomic_capture_assign_expr_or_x.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_or_x.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11550428500049748
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "atomic_capture_assign_expr_plus_x.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_assign_expr_plus_x.F90/atomic_capture_assign_expr_plus_x.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_plus_x.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11552728099923115
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_assign_expr_plus_x.F90/atomic_capture_assign_expr_plus_x.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_plus_x.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11550719200749882
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "atomic_capture_assign_expr_times_x.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_assign_expr_times_x.F90/atomic_capture_assign_expr_times_x.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_times_x.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11515764700016007
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_assign_expr_times_x.F90/atomic_capture_assign_expr_times_x.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_times_x.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11510052600351628
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "atomic_capture_assign_iand_expr_x.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_assign_iand_expr_x.F90/atomic_capture_assign_iand_expr_x.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_iand_expr_x.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11551828299707267
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_assign_iand_expr_x.F90/atomic_capture_assign_iand_expr_x.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_iand_expr_x.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11544083300395869
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "atomic_capture_assign_iand_x_expr.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_assign_iand_x_expr.F90/atomic_capture_assign_iand_x_expr.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_iand_x_expr.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11588655400555581
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_assign_iand_x_expr.F90/atomic_capture_assign_iand_x_expr.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_iand_x_expr.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11550537799485028
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "atomic_capture_assign_ior_expr_x.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_assign_ior_expr_x.F90/atomic_capture_assign_ior_expr_x.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_ior_expr_x.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11524282100435812
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_assign_ior_expr_x.F90/atomic_capture_assign_ior_expr_x.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_ior_expr_x.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11548409699753392
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "atomic_capture_assign_ior_x_expr.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_assign_ior_x_expr.F90/atomic_capture_assign_ior_x_expr.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_ior_x_expr.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.115600021003047
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_assign_ior_x_expr.F90/atomic_capture_assign_ior_x_expr.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_ior_x_expr.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11536452500149608
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "atomic_capture_assign_ixor_expr_x.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_assign_ixor_expr_x.F90/atomic_capture_assign_ixor_expr_x.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_ixor_expr_x.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11505590000888333
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_assign_ixor_expr_x.F90/atomic_capture_assign_ixor_expr_x.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_ixor_expr_x.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11577033900539391
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "atomic_capture_assign_ixor_x_expr.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_assign_ixor_x_expr.F90/atomic_capture_assign_ixor_x_expr.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_ixor_x_expr.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.115756112994859
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_assign_ixor_x_expr.F90/atomic_capture_assign_ixor_x_expr.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_ixor_x_expr.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11552515599760227
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "atomic_capture_assign_max_expr_list_x.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_assign_max_expr_list_x.F90/atomic_capture_assign_max_expr_list_x.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_max_expr_list_x.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1152590020064963
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_assign_max_expr_list_x.F90/atomic_capture_assign_max_expr_list_x.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_max_expr_list_x.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1155757230008021
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "atomic_capture_assign_max_expr_x.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_assign_max_expr_x.F90/atomic_capture_assign_max_expr_x.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_max_expr_x.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11587515199789777
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_assign_max_expr_x.F90/atomic_capture_assign_max_expr_x.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_max_expr_x.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1153282649902394
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "atomic_capture_assign_max_x_expr.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_assign_max_x_expr.F90/atomic_capture_assign_max_x_expr.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_max_x_expr.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1152339039981598
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_assign_max_x_expr.F90/atomic_capture_assign_max_x_expr.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_max_x_expr.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11563028999080416
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "atomic_capture_assign_max_x_expr_list.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_assign_max_x_expr_list.F90/atomic_capture_assign_max_x_expr_list.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_max_x_expr_list.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11541965299693402
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_assign_max_x_expr_list.F90/atomic_capture_assign_max_x_expr_list.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_max_x_expr_list.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11528468200413045
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "atomic_capture_assign_min_expr_list_x.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_assign_min_expr_list_x.F90/atomic_capture_assign_min_expr_list_x.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_min_expr_list_x.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11510474300303031
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_assign_min_expr_list_x.F90/atomic_capture_assign_min_expr_list_x.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_min_expr_list_x.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11552176999975927
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "atomic_capture_assign_min_expr_x.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_assign_min_expr_x.F90/atomic_capture_assign_min_expr_x.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_min_expr_x.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11565393500495702
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_assign_min_expr_x.F90/atomic_capture_assign_min_expr_x.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_min_expr_x.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11544231600419153
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "atomic_capture_assign_min_x_expr.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_assign_min_x_expr.F90/atomic_capture_assign_min_x_expr.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_min_x_expr.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11516875799861737
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_assign_min_x_expr.F90/atomic_capture_assign_min_x_expr.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_min_x_expr.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1154241010081023
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "atomic_capture_assign_min_x_expr_list.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_assign_min_x_expr_list.F90/atomic_capture_assign_min_x_expr_list.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_min_x_expr_list.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11552501599362586
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_assign_min_x_expr_list.F90/atomic_capture_assign_min_x_expr_list.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_min_x_expr_list.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11555956299707759
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "atomic_capture_assign_x_and_expr.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_assign_x_and_expr.F90/atomic_capture_assign_x_and_expr.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_and_expr.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11526389099890366
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_assign_x_and_expr.F90/atomic_capture_assign_x_and_expr.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_and_expr.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11528182598704007
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "atomic_capture_assign_x_divided_expr.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_assign_x_divided_expr.F90/atomic_capture_assign_x_divided_expr.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_divided_expr.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11550689999421593
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_assign_x_divided_expr.F90/atomic_capture_assign_x_divided_expr.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_divided_expr.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11527973199554253
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "atomic_capture_assign_x_eqv_expr.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_assign_x_eqv_expr.F90/atomic_capture_assign_x_eqv_expr.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_eqv_expr.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11515045299893245
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_assign_x_eqv_expr.F90/atomic_capture_assign_x_eqv_expr.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_eqv_expr.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11570443199889269
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "atomic_capture_assign_x_minus_expr.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_assign_x_minus_expr.F90/atomic_capture_assign_x_minus_expr.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_minus_expr.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11536314401018899
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_assign_x_minus_expr.F90/atomic_capture_assign_x_minus_expr.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_minus_expr.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1159916770120617
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "atomic_capture_assign_x_neqv_expr.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_assign_x_neqv_expr.F90/atomic_capture_assign_x_neqv_expr.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_neqv_expr.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1152975560107734
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_assign_x_neqv_expr.F90/atomic_capture_assign_x_neqv_expr.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_neqv_expr.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11575934900611173
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "atomic_capture_assign_x_or_expr.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_assign_x_or_expr.F90/atomic_capture_assign_x_or_expr.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_or_expr.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11549526800808962
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_assign_x_or_expr.F90/atomic_capture_assign_x_or_expr.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_or_expr.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11612753001099918
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "atomic_capture_assign_x_plus_expr.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_assign_x_plus_expr.F90/atomic_capture_assign_x_plus_expr.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_plus_expr.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11566278200189117
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_assign_x_plus_expr.F90/atomic_capture_assign_x_plus_expr.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_plus_expr.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11563022900372744
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "atomic_capture_assign_x_times_expr.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_assign_x_times_expr.F90/atomic_capture_assign_x_times_expr.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_times_expr.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11614258898771368
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_assign_x_times_expr.F90/atomic_capture_assign_x_times_expr.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_times_expr.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11549689200182911
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "atomic_capture_expr_and_x_assign.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_expr_and_x_assign.F90/atomic_capture_expr_and_x_assign.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_and_x_assign.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11530007100373041
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_expr_and_x_assign.F90/atomic_capture_expr_and_x_assign.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_and_x_assign.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1159935509931529
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "atomic_capture_expr_divided_x_assign.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_expr_divided_x_assign.F90/atomic_capture_expr_divided_x_assign.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_divided_x_assign.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11530090299493168
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_expr_divided_x_assign.F90/atomic_capture_expr_divided_x_assign.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_divided_x_assign.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11509735000436194
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "atomic_capture_expr_eqv_x_assign.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_expr_eqv_x_assign.F90/atomic_capture_expr_eqv_x_assign.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_eqv_x_assign.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1151133199891774
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_expr_eqv_x_assign.F90/atomic_capture_expr_eqv_x_assign.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_eqv_x_assign.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11560719400586095
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "atomic_capture_expr_minus_x_assign.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_expr_minus_x_assign.F90/atomic_capture_expr_minus_x_assign.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_minus_x_assign.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11568710900610313
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_expr_minus_x_assign.F90/atomic_capture_expr_minus_x_assign.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_minus_x_assign.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11552195000695065
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "atomic_capture_expr_neqv_x_assign.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_expr_neqv_x_assign.F90/atomic_capture_expr_neqv_x_assign.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_neqv_x_assign.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11514752599759959
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_expr_neqv_x_assign.F90/atomic_capture_expr_neqv_x_assign.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_neqv_x_assign.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11566748000041116
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "atomic_capture_expr_or_x_assign.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_expr_or_x_assign.F90/atomic_capture_expr_or_x_assign.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_or_x_assign.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1152083839988336
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_expr_or_x_assign.F90/atomic_capture_expr_or_x_assign.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_or_x_assign.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11527983300038613
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "atomic_capture_expr_plus_x_assign.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_expr_plus_x_assign.F90/atomic_capture_expr_plus_x_assign.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_plus_x_assign.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11519354599295184
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_expr_plus_x_assign.F90/atomic_capture_expr_plus_x_assign.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_plus_x_assign.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11540702800266445
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "atomic_capture_expr_times_x_assign.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_expr_times_x_assign.F90/atomic_capture_expr_times_x_assign.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_times_x_assign.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11578059999737889
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_expr_times_x_assign.F90/atomic_capture_expr_times_x_assign.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_times_x_assign.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11550361500121653
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "atomic_capture_iand_expr_x_assign.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_iand_expr_x_assign.F90/atomic_capture_iand_expr_x_assign.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_iand_expr_x_assign.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11576267499185633
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_iand_expr_x_assign.F90/atomic_capture_iand_expr_x_assign.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_iand_expr_x_assign.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11529047299700323
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "atomic_capture_iand_x_expr_assign.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_iand_x_expr_assign.F90/atomic_capture_iand_x_expr_assign.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_iand_x_expr_assign.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11559341799875256
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_iand_x_expr_assign.F90/atomic_capture_iand_x_expr_assign.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_iand_x_expr_assign.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11554118699859828
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "atomic_capture_ior_expr_x_assign.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_ior_expr_x_assign.F90/atomic_capture_ior_expr_x_assign.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_ior_expr_x_assign.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11536134900234174
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_ior_expr_x_assign.F90/atomic_capture_ior_expr_x_assign.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_ior_expr_x_assign.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11575501000334043
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "atomic_capture_ior_x_expr_assign.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_ior_x_expr_assign.F90/atomic_capture_ior_x_expr_assign.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_ior_x_expr_assign.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11561994899238925
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_ior_x_expr_assign.F90/atomic_capture_ior_x_expr_assign.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_ior_x_expr_assign.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11556733699399047
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "atomic_capture_ixor_expr_x_assign.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_ixor_expr_x_assign.F90/atomic_capture_ixor_expr_x_assign.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_ixor_expr_x_assign.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1153509900032077
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_ixor_expr_x_assign.F90/atomic_capture_ixor_expr_x_assign.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_ixor_expr_x_assign.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1157123079901794
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "atomic_capture_ixor_x_expr_assign.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_ixor_x_expr_assign.F90/atomic_capture_ixor_x_expr_assign.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_ixor_x_expr_assign.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11558414998580702
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_ixor_x_expr_assign.F90/atomic_capture_ixor_x_expr_assign.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_ixor_x_expr_assign.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11555190800572746
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "atomic_capture_max_expr_list_x_assign.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_max_expr_list_x_assign.F90/atomic_capture_max_expr_list_x_assign.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_max_expr_list_x_assign.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11568092799279839
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_max_expr_list_x_assign.F90/atomic_capture_max_expr_list_x_assign.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_max_expr_list_x_assign.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1155034940020414
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "atomic_capture_max_expr_x_assign.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_max_expr_x_assign.F90/atomic_capture_max_expr_x_assign.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_max_expr_x_assign.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11575227499997709
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_max_expr_x_assign.F90/atomic_capture_max_expr_x_assign.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_max_expr_x_assign.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11579777199949604
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "atomic_capture_max_x_expr_assign.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_max_x_expr_assign.F90/atomic_capture_max_x_expr_assign.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_max_x_expr_assign.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11520665099669714
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_max_x_expr_assign.F90/atomic_capture_max_x_expr_assign.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_max_x_expr_assign.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11567745100182947
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "atomic_capture_max_x_expr_list_assign.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_max_x_expr_list_assign.F90/atomic_capture_max_x_expr_list_assign.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_max_x_expr_list_assign.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11513991199899465
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_max_x_expr_list_assign.F90/atomic_capture_max_x_expr_list_assign.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_max_x_expr_list_assign.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11571753899625037
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "atomic_capture_min_expr_list_x_assign.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_min_expr_list_x_assign.F90/atomic_capture_min_expr_list_x_assign.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_min_expr_list_x_assign.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1159407300001476
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_min_expr_list_x_assign.F90/atomic_capture_min_expr_list_x_assign.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_min_expr_list_x_assign.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.115574972005561
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "atomic_capture_min_expr_x_assign.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_min_expr_x_assign.F90/atomic_capture_min_expr_x_assign.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_min_expr_x_assign.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11548729299101979
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_min_expr_x_assign.F90/atomic_capture_min_expr_x_assign.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_min_expr_x_assign.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11548673099605367
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "atomic_capture_min_x_expr_assign.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_min_x_expr_assign.F90/atomic_capture_min_x_expr_assign.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_min_x_expr_assign.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11516217500320636
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_min_x_expr_assign.F90/atomic_capture_min_x_expr_assign.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_min_x_expr_assign.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11565665999660268
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "atomic_capture_min_x_expr_list_assign.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_min_x_expr_list_assign.F90/atomic_capture_min_x_expr_list_assign.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_min_x_expr_list_assign.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1159984900004929
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_min_x_expr_list_assign.F90/atomic_capture_min_x_expr_list_assign.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_min_x_expr_list_assign.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11587613400479313
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "atomic_capture_x_and_expr_assign.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_x_and_expr_assign.F90/atomic_capture_x_and_expr_assign.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_x_and_expr_assign.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11566760099958628
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_x_and_expr_assign.F90/atomic_capture_x_and_expr_assign.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_x_and_expr_assign.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11527623501024209
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "atomic_capture_x_divided_expr_assign.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_x_divided_expr_assign.F90/atomic_capture_x_divided_expr_assign.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_x_divided_expr_assign.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11517380700388458
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_x_divided_expr_assign.F90/atomic_capture_x_divided_expr_assign.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_x_divided_expr_assign.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11566599800426047
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "atomic_capture_x_eqv_expr_assign.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_x_eqv_expr_assign.F90/atomic_capture_x_eqv_expr_assign.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_x_eqv_expr_assign.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11521016800543293
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_x_eqv_expr_assign.F90/atomic_capture_x_eqv_expr_assign.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_x_eqv_expr_assign.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11611376400105655
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "atomic_capture_x_minus_expr_assign.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_x_minus_expr_assign.F90/atomic_capture_x_minus_expr_assign.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_x_minus_expr_assign.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11499389998789411
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_x_minus_expr_assign.F90/atomic_capture_x_minus_expr_assign.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_x_minus_expr_assign.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11542582399852108
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "atomic_capture_x_neqv_expr_assign.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_x_neqv_expr_assign.F90/atomic_capture_x_neqv_expr_assign.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_x_neqv_expr_assign.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11559495999244973
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_x_neqv_expr_assign.F90/atomic_capture_x_neqv_expr_assign.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_x_neqv_expr_assign.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11551753099774942
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "atomic_capture_x_or_expr_assign.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_x_or_expr_assign.F90/atomic_capture_x_or_expr_assign.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_x_or_expr_assign.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11560677400848363
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_x_or_expr_assign.F90/atomic_capture_x_or_expr_assign.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_x_or_expr_assign.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11556905100587755
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "atomic_capture_x_plus_expr_assign.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_x_plus_expr_assign.F90/atomic_capture_x_plus_expr_assign.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_x_plus_expr_assign.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11547286600398365
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_x_plus_expr_assign.F90/atomic_capture_x_plus_expr_assign.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_x_plus_expr_assign.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11537202099862043
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "atomic_capture_x_times_expr_assign.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_x_times_expr_assign.F90/atomic_capture_x_times_expr_assign.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_x_times_expr_assign.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11550138000166044
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_x_times_expr_assign.F90/atomic_capture_x_times_expr_assign.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_x_times_expr_assign.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11600907098909374
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "atomic_expr_and_x.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_expr_and_x.F90/atomic_expr_and_x.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_expr_and_x.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11530554199998733
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_expr_and_x.F90/atomic_expr_and_x.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_expr_and_x.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11580458599200938
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "atomic_expr_and_x_end.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_expr_and_x_end.F90/atomic_expr_and_x_end.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_expr_and_x_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11516128299990669
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_expr_and_x_end.F90/atomic_expr_and_x_end.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_expr_and_x_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11533092000172473
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "atomic_expr_divided_x.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_expr_divided_x.F90/atomic_expr_divided_x.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_expr_divided_x.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11556554399430752
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_expr_divided_x.F90/atomic_expr_divided_x.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_expr_divided_x.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11593900600564666
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "atomic_expr_divided_x_end.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_expr_divided_x_end.F90/atomic_expr_divided_x_end.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_expr_divided_x_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11537861300166696
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_expr_divided_x_end.F90/atomic_expr_divided_x_end.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_expr_divided_x_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11565872500068508
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "atomic_expr_eqv_x.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_expr_eqv_x.F90/atomic_expr_eqv_x.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_expr_eqv_x.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11540872199111618
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_expr_eqv_x.F90/atomic_expr_eqv_x.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_expr_eqv_x.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11574704499798827
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "atomic_expr_eqv_x_end.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_expr_eqv_x_end.F90/atomic_expr_eqv_x_end.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_expr_eqv_x_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1156238759867847
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_expr_eqv_x_end.F90/atomic_expr_eqv_x_end.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_expr_eqv_x_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11569517401221674
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "atomic_expr_minus_x.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_expr_minus_x.F90/atomic_expr_minus_x.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_expr_minus_x.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11512171699723694
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_expr_minus_x.F90/atomic_expr_minus_x.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_expr_minus_x.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1154183899925556
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "atomic_expr_minus_x_end.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_expr_minus_x_end.F90/atomic_expr_minus_x_end.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_expr_minus_x_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11543806799454615
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_expr_minus_x_end.F90/atomic_expr_minus_x_end.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_expr_minus_x_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11565825399884488
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "atomic_expr_neqv_x.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_expr_neqv_x.F90/atomic_expr_neqv_x.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_expr_neqv_x.F90",
                    "config": 1,
                    "errors": "\n\nftn-303 ftn: ERROR TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_expr_neqv_x.F90, Line = 52, Column = 36 \n  Data type LOGICAL is not allowed with LOGICAL for the operation \"ne\".\n\nCray Fortran : Version 14.0.1 (20220526224428_3a8780657c742829e80f36338fb6ec6578642bb7)\nCray Fortran : Compile time:  0.0034 seconds\nCray Fortran : 104 source lines\nCray Fortran : 1 errors, 0 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06510834000073373
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_expr_neqv_x.F90/atomic_expr_neqv_x.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_expr_neqv_x.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11541771900374442
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "atomic_expr_neqv_x_end.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_expr_neqv_x_end.F90/atomic_expr_neqv_x_end.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_expr_neqv_x_end.F90",
                    "config": 1,
                    "errors": "\n\nftn-303 ftn: ERROR TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_expr_neqv_x_end.F90, Line = 53, Column = 36 \n  Data type LOGICAL is not allowed with LOGICAL for the operation \"ne\".\n\nCray Fortran : Version 14.0.1 (20220526224428_3a8780657c742829e80f36338fb6ec6578642bb7)\nCray Fortran : Compile time:  0.0034 seconds\nCray Fortran : 105 source lines\nCray Fortran : 1 errors, 0 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11527812900021672
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_expr_neqv_x_end.F90/atomic_expr_neqv_x_end.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_expr_neqv_x_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11506326500966679
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "atomic_expr_or_x.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_expr_or_x.F90/atomic_expr_or_x.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_expr_or_x.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11533068999415264
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_expr_or_x.F90/atomic_expr_or_x.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_expr_or_x.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11545884799852502
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "atomic_expr_or_x_end.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_expr_or_x_end.F90/atomic_expr_or_x_end.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_expr_or_x_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11522586800856516
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_expr_or_x_end.F90/atomic_expr_or_x_end.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_expr_or_x_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11528131400700659
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "atomic_expr_plus_x.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_expr_plus_x.F90/atomic_expr_plus_x.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_expr_plus_x.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11523637799837161
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_expr_plus_x.F90/atomic_expr_plus_x.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_expr_plus_x.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1154268160025822
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "atomic_expr_plus_x_end.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_expr_plus_x_end.F90/atomic_expr_plus_x_end.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_expr_plus_x_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11580219099414535
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_expr_plus_x_end.F90/atomic_expr_plus_x_end.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_expr_plus_x_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11585739799193107
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "atomic_expr_times_x.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_expr_times_x.F90/atomic_expr_times_x.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_expr_times_x.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11581222098902799
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_expr_times_x.F90/atomic_expr_times_x.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_expr_times_x.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11583508500189055
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "atomic_expr_times_x_end.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_expr_times_x_end.F90/atomic_expr_times_x_end.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_expr_times_x_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11557610500312876
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_expr_times_x_end.F90/atomic_expr_times_x_end.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_expr_times_x_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11547366699960548
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "atomic_iand_expr_x.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_iand_expr_x.F90/atomic_iand_expr_x.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_iand_expr_x.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11537498600955587
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_iand_expr_x.F90/atomic_iand_expr_x.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_iand_expr_x.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11559398999088444
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "atomic_iand_expr_x_end.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_iand_expr_x_end.F90/atomic_iand_expr_x_end.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_iand_expr_x_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1160140800056979
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_iand_expr_x_end.F90/atomic_iand_expr_x_end.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_iand_expr_x_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1159065129904775
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "atomic_iand_x_expr.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_iand_x_expr.F90/atomic_iand_x_expr.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_iand_x_expr.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11597328100469895
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_iand_x_expr.F90/atomic_iand_x_expr.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_iand_x_expr.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11562980800226796
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "atomic_iand_x_expr_end.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_iand_x_expr_end.F90/atomic_iand_x_expr_end.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_iand_x_expr_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11547035998955835
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_iand_x_expr_end.F90/atomic_iand_x_expr_end.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_iand_x_expr_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11529493099078536
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "atomic_ior_expr_x.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_ior_expr_x.F90/atomic_ior_expr_x.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_ior_expr_x.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11570490399026312
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_ior_expr_x.F90/atomic_ior_expr_x.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_ior_expr_x.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11579189100302756
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "atomic_ior_expr_x_end.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_ior_expr_x_end.F90/atomic_ior_expr_x_end.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_ior_expr_x_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1153645060112467
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_ior_expr_x_end.F90/atomic_ior_expr_x_end.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_ior_expr_x_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11568941299628932
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "atomic_ior_x_expr.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_ior_x_expr.F90/atomic_ior_x_expr.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_ior_x_expr.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11559096300334204
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_ior_x_expr.F90/atomic_ior_x_expr.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_ior_x_expr.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11566972600121517
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "atomic_ior_x_expr_end.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_ior_x_expr_end.F90/atomic_ior_x_expr_end.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_ior_x_expr_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11528285800886806
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_ior_x_expr_end.F90/atomic_ior_x_expr_end.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_ior_x_expr_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1155603139923187
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "atomic_ixor_expr_x.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_ixor_expr_x.F90/atomic_ixor_expr_x.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_ixor_expr_x.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11495734899654053
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_ixor_expr_x.F90/atomic_ixor_expr_x.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_ixor_expr_x.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11554994400648866
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "atomic_ixor_expr_x_end.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_ixor_expr_x_end.F90/atomic_ixor_expr_x_end.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_ixor_expr_x_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11515079298987985
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_ixor_expr_x_end.F90/atomic_ixor_expr_x_end.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_ixor_expr_x_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11517727401223965
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "atomic_ixor_x_expr.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_ixor_x_expr.F90/atomic_ixor_x_expr.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_ixor_x_expr.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11504282501118723
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_ixor_x_expr.F90/atomic_ixor_x_expr.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_ixor_x_expr.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11547110200626776
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "atomic_ixor_x_expr_end.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_ixor_x_expr_end.F90/atomic_ixor_x_expr_end.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_ixor_x_expr_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11584494399721734
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_ixor_x_expr_end.F90/atomic_ixor_x_expr_end.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_ixor_x_expr_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11569696800142992
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "atomic_max_expr_list_x.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_max_expr_list_x.F90/atomic_max_expr_list_x.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_max_expr_list_x.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1156109319999814
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_max_expr_list_x.F90/atomic_max_expr_list_x.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_max_expr_list_x.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11579865500971209
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "atomic_max_expr_list_x_end.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_max_expr_list_x_end.F90/atomic_max_expr_list_x_end.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_max_expr_list_x_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11531809601001441
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_max_expr_list_x_end.F90/atomic_max_expr_list_x_end.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_max_expr_list_x_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11560571199515834
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "atomic_max_expr_x.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_max_expr_x.F90/atomic_max_expr_x.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_max_expr_x.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1155054580012802
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_max_expr_x.F90/atomic_max_expr_x.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_max_expr_x.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1154085909947753
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "atomic_max_expr_x_end.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_max_expr_x_end.F90/atomic_max_expr_x_end.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_max_expr_x_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11549378601193894
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_max_expr_x_end.F90/atomic_max_expr_x_end.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_max_expr_x_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1155198860069504
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "atomic_max_x_expr.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_max_x_expr.F90/atomic_max_x_expr.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_max_x_expr.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11536360399622936
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_max_x_expr.F90/atomic_max_x_expr.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_max_x_expr.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11578693198680412
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "atomic_max_x_expr_end.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_max_x_expr_end.F90/atomic_max_x_expr_end.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_max_x_expr_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11536671000067145
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_max_x_expr_end.F90/atomic_max_x_expr_end.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_max_x_expr_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11544937999860849
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "atomic_max_x_expr_list.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_max_x_expr_list.F90/atomic_max_x_expr_list.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_max_x_expr_list.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1154085909947753
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_max_x_expr_list.F90/atomic_max_x_expr_list.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_max_x_expr_list.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11580656000296585
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "atomic_max_x_expr_list_end.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_max_x_expr_list_end.F90/atomic_max_x_expr_list_end.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_max_x_expr_list_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11542479299532715
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_max_x_expr_list_end.F90/atomic_max_x_expr_list_end.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_max_x_expr_list_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1153528830036521
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "atomic_min_expr_list_x.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_min_expr_list_x.F90/atomic_min_expr_list_x.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_min_expr_list_x.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1157105050078826
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_min_expr_list_x.F90/atomic_min_expr_list_x.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_min_expr_list_x.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11566091800341383
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "atomic_min_expr_list_x_end.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_min_expr_list_x_end.F90/atomic_min_expr_list_x_end.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_min_expr_list_x_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11538542600465007
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_min_expr_list_x_end.F90/atomic_min_expr_list_x_end.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_min_expr_list_x_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1156457600009162
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "atomic_min_expr_x.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_min_expr_x.F90/atomic_min_expr_x.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_min_expr_x.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11592564001330175
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_min_expr_x.F90/atomic_min_expr_x.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_min_expr_x.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11567382300563622
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "atomic_min_expr_x_end.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_min_expr_x_end.F90/atomic_min_expr_x_end.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_min_expr_x_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11595322299399413
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_min_expr_x_end.F90/atomic_min_expr_x_end.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_min_expr_x_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11535158799961209
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "atomic_min_x_expr.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_min_x_expr.F90/atomic_min_x_expr.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_min_x_expr.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11566348900669254
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_min_x_expr.F90/atomic_min_x_expr.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_min_x_expr.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1156290819926653
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "atomic_min_x_expr_end.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_min_x_expr_end.F90/atomic_min_x_expr_end.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_min_x_expr_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11551119400246534
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_min_x_expr_end.F90/atomic_min_x_expr_end.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_min_x_expr_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11585639200347941
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "atomic_min_x_expr_list.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_min_x_expr_list.F90/atomic_min_x_expr_list.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_min_x_expr_list.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11525689299742226
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_min_x_expr_list.F90/atomic_min_x_expr_list.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_min_x_expr_list.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11542737200215925
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "atomic_min_x_expr_list_end.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_min_x_expr_list_end.F90/atomic_min_x_expr_list_end.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_min_x_expr_list_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11553530000674073
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_min_x_expr_list_end.F90/atomic_min_x_expr_list_end.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_min_x_expr_list_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1154384649998974
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "atomic_update_expr_and_x.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_expr_and_x.F90/atomic_update_expr_and_x.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_expr_and_x.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11545254100929014
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_expr_and_x.F90/atomic_update_expr_and_x.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_expr_and_x.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11535141499189194
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "atomic_update_expr_and_x_end.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_expr_and_x_end.F90/atomic_update_expr_and_x_end.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_expr_and_x_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11563169700093567
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_expr_and_x_end.F90/atomic_update_expr_and_x_end.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_expr_and_x_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11558250201051123
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "atomic_update_expr_divided_x.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_expr_divided_x.F90/atomic_update_expr_divided_x.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_expr_divided_x.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11532822099979967
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_expr_divided_x.F90/atomic_update_expr_divided_x.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_expr_divided_x.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11573824301012792
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "atomic_update_expr_divided_x_end.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_expr_divided_x_end.F90/atomic_update_expr_divided_x_end.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_expr_divided_x_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11561261001043022
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_expr_divided_x_end.F90/atomic_update_expr_divided_x_end.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_expr_divided_x_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11586690200783778
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "atomic_update_expr_eqv_x.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_expr_eqv_x.F90/atomic_update_expr_eqv_x.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_expr_eqv_x.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1151623999903677
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_expr_eqv_x.F90/atomic_update_expr_eqv_x.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_expr_eqv_x.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1155143509968184
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "atomic_update_expr_eqv_x_end.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_expr_eqv_x_end.F90/atomic_update_expr_eqv_x_end.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_expr_eqv_x_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11562198899628129
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_expr_eqv_x_end.F90/atomic_update_expr_eqv_x_end.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_expr_eqv_x_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11600260400155094
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "atomic_update_expr_minus_x.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_expr_minus_x.F90/atomic_update_expr_minus_x.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_expr_minus_x.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11559376399964094
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_expr_minus_x.F90/atomic_update_expr_minus_x.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_expr_minus_x.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11557871500554029
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "atomic_update_expr_minus_x_end.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_expr_minus_x_end.F90/atomic_update_expr_minus_x_end.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_expr_minus_x_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11580543300078716
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_expr_minus_x_end.F90/atomic_update_expr_minus_x_end.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_expr_minus_x_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11559537799621467
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "atomic_update_expr_neqv_x.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_expr_neqv_x.F90/atomic_update_expr_neqv_x.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_expr_neqv_x.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11534535499231424
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_expr_neqv_x.F90/atomic_update_expr_neqv_x.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_expr_neqv_x.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11555743399367202
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "atomic_update_expr_neqv_x_end.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_expr_neqv_x_end.F90/atomic_update_expr_neqv_x_end.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_expr_neqv_x_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11533723899628967
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_expr_neqv_x_end.F90/atomic_update_expr_neqv_x_end.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_expr_neqv_x_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11513941700104624
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "atomic_update_expr_or_x.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_expr_or_x.F90/atomic_update_expr_or_x.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_expr_or_x.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11521082499530166
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_expr_or_x.F90/atomic_update_expr_or_x.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_expr_or_x.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11553686398838181
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "atomic_update_expr_or_x_end.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_expr_or_x_end.F90/atomic_update_expr_or_x_end.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_expr_or_x_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11584520000906195
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_expr_or_x_end.F90/atomic_update_expr_or_x_end.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_expr_or_x_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11527758299780544
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "atomic_update_expr_plus_x.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_expr_plus_x.F90/atomic_update_expr_plus_x.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_expr_plus_x.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11507800800609402
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_expr_plus_x.F90/atomic_update_expr_plus_x.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_expr_plus_x.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11572337499819696
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "atomic_update_expr_plus_x_end.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_expr_plus_x_end.F90/atomic_update_expr_plus_x_end.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_expr_plus_x_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11604554700898007
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_expr_plus_x_end.F90/atomic_update_expr_plus_x_end.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_expr_plus_x_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11535806801111903
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "atomic_update_expr_times_x.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_expr_times_x.F90/atomic_update_expr_times_x.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_expr_times_x.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11502905300585553
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_expr_times_x.F90/atomic_update_expr_times_x.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_expr_times_x.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11573130000033416
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "atomic_update_expr_times_x_end.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_expr_times_x_end.F90/atomic_update_expr_times_x_end.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_expr_times_x_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11564107600133866
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_expr_times_x_end.F90/atomic_update_expr_times_x_end.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_expr_times_x_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11519565500202589
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "atomic_update_iand_expr_x.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_iand_expr_x.F90/atomic_update_iand_expr_x.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_iand_expr_x.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11520683699927758
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_iand_expr_x.F90/atomic_update_iand_expr_x.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_iand_expr_x.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11543420600355603
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "atomic_update_iand_expr_x_end.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_iand_expr_x_end.F90/atomic_update_iand_expr_x_end.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_iand_expr_x_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11534459301037714
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_iand_expr_x_end.F90/atomic_update_iand_expr_x_end.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_iand_expr_x_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11541915700945538
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "atomic_update_iand_x_expr.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_iand_x_expr.F90/atomic_update_iand_x_expr.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_iand_x_expr.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1152639069914585
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_iand_x_expr.F90/atomic_update_iand_x_expr.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_iand_x_expr.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11526385700562969
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "atomic_update_iand_x_expr_end.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_iand_x_expr_end.F90/atomic_update_iand_x_expr_end.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_iand_x_expr_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.115643208991969
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_iand_x_expr_end.F90/atomic_update_iand_x_expr_end.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_iand_x_expr_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1154861659888411
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "atomic_update_ior_expr_x.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_ior_expr_x.F90/atomic_update_ior_expr_x.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_ior_expr_x.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11639604398806114
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_ior_expr_x.F90/atomic_update_ior_expr_x.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_ior_expr_x.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11530779200256802
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "atomic_update_ior_expr_x_end.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_ior_expr_x_end.F90/atomic_update_ior_expr_x_end.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_ior_expr_x_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11607624600583222
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_ior_expr_x_end.F90/atomic_update_ior_expr_x_end.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_ior_expr_x_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11558284300554078
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "atomic_update_ior_x_expr.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_ior_x_expr.F90/atomic_update_ior_x_expr.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_ior_x_expr.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11543944600271061
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_ior_x_expr.F90/atomic_update_ior_x_expr.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_ior_x_expr.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11546749999979511
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "atomic_update_ior_x_expr_end.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_ior_x_expr_end.F90/atomic_update_ior_x_expr_end.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_ior_x_expr_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11604326200904325
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_ior_x_expr_end.F90/atomic_update_ior_x_expr_end.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_ior_x_expr_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.115443333008443
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "atomic_update_ixor_expr_x.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_ixor_expr_x.F90/atomic_update_ixor_expr_x.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_ixor_expr_x.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11557793400424998
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_ixor_expr_x.F90/atomic_update_ixor_expr_x.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_ixor_expr_x.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11549778799235355
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "atomic_update_ixor_expr_x_end.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_ixor_expr_x_end.F90/atomic_update_ixor_expr_x_end.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_ixor_expr_x_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1160722680069739
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_ixor_expr_x_end.F90/atomic_update_ixor_expr_x_end.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_ixor_expr_x_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11549347000254784
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "atomic_update_ixor_x_expr.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_ixor_x_expr.F90/atomic_update_ixor_x_expr.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_ixor_x_expr.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11551677501120139
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_ixor_x_expr.F90/atomic_update_ixor_x_expr.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_ixor_x_expr.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11545367300277576
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "atomic_update_ixor_x_expr_end.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_ixor_x_expr_end.F90/atomic_update_ixor_x_expr_end.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_ixor_x_expr_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11551159499504138
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_ixor_x_expr_end.F90/atomic_update_ixor_x_expr_end.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_ixor_x_expr_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11573303400655277
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "atomic_update_max_expr_list_x.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_max_expr_list_x.F90/atomic_update_max_expr_list_x.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_max_expr_list_x.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11576469399733469
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_max_expr_list_x.F90/atomic_update_max_expr_list_x.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_max_expr_list_x.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11557624000124633
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "atomic_update_max_expr_list_x_end.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_max_expr_list_x_end.F90/atomic_update_max_expr_list_x_end.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_max_expr_list_x_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11516533698886633
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_max_expr_list_x_end.F90/atomic_update_max_expr_list_x_end.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_max_expr_list_x_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11519132601097226
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "atomic_update_max_expr_x.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_max_expr_x.F90/atomic_update_max_expr_x.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_max_expr_x.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11513407599704806
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_max_expr_x.F90/atomic_update_max_expr_x.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_max_expr_x.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11561848201381508
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "atomic_update_max_expr_x_end.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_max_expr_x_end.F90/atomic_update_max_expr_x_end.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_max_expr_x_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11538877799466718
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_max_expr_x_end.F90/atomic_update_max_expr_x_end.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_max_expr_x_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11596156499581411
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "atomic_update_max_x_expr.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_max_x_expr.F90/atomic_update_max_x_expr.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_max_x_expr.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11538116399606224
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_max_x_expr.F90/atomic_update_max_x_expr.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_max_x_expr.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11561404301028233
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "atomic_update_max_x_expr_end.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_max_x_expr_end.F90/atomic_update_max_x_expr_end.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_max_x_expr_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1156958619976649
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_max_x_expr_end.F90/atomic_update_max_x_expr_end.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_max_x_expr_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11555866598791908
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "atomic_update_max_x_expr_list.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_max_x_expr_list.F90/atomic_update_max_x_expr_list.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_max_x_expr_list.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1152370039926609
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_max_x_expr_list.F90/atomic_update_max_x_expr_list.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_max_x_expr_list.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11545338301220909
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "atomic_update_max_x_expr_list_end.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_max_x_expr_list_end.F90/atomic_update_max_x_expr_list_end.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_max_x_expr_list_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11541919701267034
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_max_x_expr_list_end.F90/atomic_update_max_x_expr_list_end.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_max_x_expr_list_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11552766599925235
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "atomic_update_min_expr_list_x.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_min_expr_list_x.F90/atomic_update_min_expr_list_x.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_min_expr_list_x.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11526513900025748
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_min_expr_list_x.F90/atomic_update_min_expr_list_x.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_min_expr_list_x.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11581072400440462
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "atomic_update_min_expr_list_x_end.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_min_expr_list_x_end.F90/atomic_update_min_expr_list_x_end.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_min_expr_list_x_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11535958199237939
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_min_expr_list_x_end.F90/atomic_update_min_expr_list_x_end.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_min_expr_list_x_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11554155399790034
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "atomic_update_min_expr_x.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_min_expr_x.F90/atomic_update_min_expr_x.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_min_expr_x.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1152346309972927
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_min_expr_x.F90/atomic_update_min_expr_x.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_min_expr_x.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11545179999666288
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "atomic_update_min_expr_x_end.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_min_expr_x_end.F90/atomic_update_min_expr_x_end.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_min_expr_x_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11535146599635482
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_min_expr_x_end.F90/atomic_update_min_expr_x_end.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_min_expr_x_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11596858898701612
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "atomic_update_min_x_expr.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_min_x_expr.F90/atomic_update_min_x_expr.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_min_x_expr.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11525335599435493
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_min_x_expr.F90/atomic_update_min_x_expr.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_min_x_expr.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11597419899771921
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "atomic_update_min_x_expr_end.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_min_x_expr_end.F90/atomic_update_min_x_expr_end.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_min_x_expr_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11564466198615264
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_min_x_expr_end.F90/atomic_update_min_x_expr_end.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_min_x_expr_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11528323400125373
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "atomic_update_min_x_expr_list.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_min_x_expr_list.F90/atomic_update_min_x_expr_list.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_min_x_expr_list.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11579169599281158
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_min_x_expr_list.F90/atomic_update_min_x_expr_list.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_min_x_expr_list.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1154779999924358
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "atomic_update_min_x_expr_list_end.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_min_x_expr_list_end.F90/atomic_update_min_x_expr_list_end.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_min_x_expr_list_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11555857599887531
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_min_x_expr_list_end.F90/atomic_update_min_x_expr_list_end.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_min_x_expr_list_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11591219999536406
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "atomic_update_x_and_expr.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_x_and_expr.F90/atomic_update_x_and_expr.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_x_and_expr.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11562862100254279
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_x_and_expr.F90/atomic_update_x_and_expr.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_x_and_expr.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11554962900117971
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "atomic_update_x_and_expr_end.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_x_and_expr_end.F90/atomic_update_x_and_expr_end.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_x_and_expr_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11529053800040856
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_x_and_expr_end.F90/atomic_update_x_and_expr_end.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_x_and_expr_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11538856799597852
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "atomic_update_x_divided_expr.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_x_divided_expr.F90/atomic_update_x_divided_expr.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_x_divided_expr.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11537217599106953
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_x_divided_expr.F90/atomic_update_x_divided_expr.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_x_divided_expr.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11601147100736853
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "atomic_update_x_divided_expr_end.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_x_divided_expr_end.F90/atomic_update_x_divided_expr_end.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_x_divided_expr_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11508273700019345
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_x_divided_expr_end.F90/atomic_update_x_divided_expr_end.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_x_divided_expr_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11534170700178947
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "atomic_update_x_eqv_expr.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_x_eqv_expr.F90/atomic_update_x_eqv_expr.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_x_eqv_expr.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11520835901319515
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_x_eqv_expr.F90/atomic_update_x_eqv_expr.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_x_eqv_expr.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11553900799481198
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "atomic_update_x_eqv_expr_end.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_x_eqv_expr_end.F90/atomic_update_x_eqv_expr_end.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_x_eqv_expr_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11596857898985036
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_x_eqv_expr_end.F90/atomic_update_x_eqv_expr_end.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_x_eqv_expr_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11566487100208178
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "atomic_update_x_minus_expr.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_x_minus_expr.F90/atomic_update_x_minus_expr.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_x_minus_expr.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11525300600624178
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_x_minus_expr.F90/atomic_update_x_minus_expr.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_x_minus_expr.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.115506464993814
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "atomic_update_x_minus_expr_end.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_x_minus_expr_end.F90/atomic_update_x_minus_expr_end.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_x_minus_expr_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11556304499390535
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_x_minus_expr_end.F90/atomic_update_x_minus_expr_end.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_x_minus_expr_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11580186599167064
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "atomic_update_x_neqv_expr.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_x_neqv_expr.F90/atomic_update_x_neqv_expr.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_x_neqv_expr.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11526484800560866
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_x_neqv_expr.F90/atomic_update_x_neqv_expr.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_x_neqv_expr.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11518919198715594
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "atomic_update_x_neqv_expr_end.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_x_neqv_expr_end.F90/atomic_update_x_neqv_expr_end.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_x_neqv_expr_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11603863399068359
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_x_neqv_expr_end.F90/atomic_update_x_neqv_expr_end.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_x_neqv_expr_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11578797901165672
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "atomic_update_x_or_expr.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_x_or_expr.F90/atomic_update_x_or_expr.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_x_or_expr.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11518088600132614
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_x_or_expr.F90/atomic_update_x_or_expr.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_x_or_expr.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11545759100408759
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "atomic_update_x_or_expr_end.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_x_or_expr_end.F90/atomic_update_x_or_expr_end.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_x_or_expr_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11538282698893454
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_x_or_expr_end.F90/atomic_update_x_or_expr_end.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_x_or_expr_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11557263400754891
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "atomic_update_x_plus_expr.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_x_plus_expr.F90/atomic_update_x_plus_expr.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_x_plus_expr.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11527284399198834
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_x_plus_expr.F90/atomic_update_x_plus_expr.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_x_plus_expr.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11555042100371793
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "atomic_update_x_plus_expr_end.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_x_plus_expr_end.F90/atomic_update_x_plus_expr_end.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_x_plus_expr_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1154375420010183
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_x_plus_expr_end.F90/atomic_update_x_plus_expr_end.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_x_plus_expr_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11519876100646798
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "atomic_update_x_times_expr.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_x_times_expr.F90/atomic_update_x_times_expr.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_x_times_expr.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1151975979882991
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_x_times_expr.F90/atomic_update_x_times_expr.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_x_times_expr.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1154738520126557
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "atomic_update_x_times_expr_end.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_x_times_expr_end.F90/atomic_update_x_times_expr_end.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_x_times_expr_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11548064601083752
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_x_times_expr_end.F90/atomic_update_x_times_expr_end.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_x_times_expr_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11545272200601175
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "atomic_x_and_expr.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_x_and_expr.F90/atomic_x_and_expr.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_x_and_expr.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11513017800461967
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_x_and_expr.F90/atomic_x_and_expr.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_x_and_expr.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11543669999809936
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "atomic_x_and_expr_end.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_x_and_expr_end.F90/atomic_x_and_expr_end.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_x_and_expr_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11585573000775184
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_x_and_expr_end.F90/atomic_x_and_expr_end.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_x_and_expr_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11561963400163222
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "atomic_x_divided_expr.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_x_divided_expr.F90/atomic_x_divided_expr.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_x_divided_expr.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11518991299089976
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_x_divided_expr.F90/atomic_x_divided_expr.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_x_divided_expr.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11540205300843809
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "atomic_x_divided_expr_end.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_x_divided_expr_end.F90/atomic_x_divided_expr_end.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_x_divided_expr_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11548956199840177
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_x_divided_expr_end.F90/atomic_x_divided_expr_end.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_x_divided_expr_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11552648400538601
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "atomic_x_eqv_expr.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_x_eqv_expr.F90/atomic_x_eqv_expr.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_x_eqv_expr.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11550739700032864
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_x_eqv_expr.F90/atomic_x_eqv_expr.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_x_eqv_expr.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1154810459993314
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "atomic_x_eqv_expr_end.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_x_eqv_expr_end.F90/atomic_x_eqv_expr_end.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_x_eqv_expr_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11551505301031284
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_x_eqv_expr_end.F90/atomic_x_eqv_expr_end.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_x_eqv_expr_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11578243899566587
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "atomic_x_minus_expr.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_x_minus_expr.F90/atomic_x_minus_expr.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_x_minus_expr.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11532128800172359
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_x_minus_expr.F90/atomic_x_minus_expr.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_x_minus_expr.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11537347799458075
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "atomic_x_minus_expr_end.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_x_minus_expr_end.F90/atomic_x_minus_expr_end.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_x_minus_expr_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11546087700116914
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_x_minus_expr_end.F90/atomic_x_minus_expr_end.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_x_minus_expr_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11553659298806451
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "atomic_x_neqv_expr.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_x_neqv_expr.F90/atomic_x_neqv_expr.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_x_neqv_expr.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1154335539904423
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_x_neqv_expr.F90/atomic_x_neqv_expr.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_x_neqv_expr.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11564537399681285
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "atomic_x_neqv_expr_end.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_x_neqv_expr_end.F90/atomic_x_neqv_expr_end.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_x_neqv_expr_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11528666999947745
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_x_neqv_expr_end.F90/atomic_x_neqv_expr_end.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_x_neqv_expr_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11525619200256187
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "atomic_x_or_expr.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_x_or_expr.F90/atomic_x_or_expr.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_x_or_expr.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11507118499139324
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_x_or_expr.F90/atomic_x_or_expr.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_x_or_expr.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11568433900538366
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "atomic_x_or_expr_end.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_x_or_expr_end.F90/atomic_x_or_expr_end.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_x_or_expr_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11552824798854999
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_x_or_expr_end.F90/atomic_x_or_expr_end.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_x_or_expr_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11561870299919974
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "atomic_x_plus_expr.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_x_plus_expr.F90/atomic_x_plus_expr.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_x_plus_expr.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11513205200026277
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_x_plus_expr.F90/atomic_x_plus_expr.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_x_plus_expr.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1162256150128087
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "atomic_x_plus_expr_end.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_x_plus_expr_end.F90/atomic_x_plus_expr_end.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_x_plus_expr_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11574255200685002
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_x_plus_expr_end.F90/atomic_x_plus_expr_end.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_x_plus_expr_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1157340759964427
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "atomic_x_times_expr.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_x_times_expr.F90/atomic_x_times_expr.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_x_times_expr.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11527293399558403
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_x_times_expr.F90/atomic_x_times_expr.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_x_times_expr.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11526053900888655
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "atomic_x_times_expr_end.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_x_times_expr_end.F90/atomic_x_times_expr_end.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_x_times_expr_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11601512800552882
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_x_times_expr_end.F90/atomic_x_times_expr_end.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_x_times_expr_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11597008199896663
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "data_copy_no_lower_bound.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/data_copy_no_lower_bound.F90/data_copy_no_lower_bound.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/data_copy_no_lower_bound.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1149473149998812
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/data_copy_no_lower_bound.F90/data_copy_no_lower_bound.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/data_copy_no_lower_bound.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11568189501122106
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "data_copyin_no_lower_bound.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/data_copyin_no_lower_bound.F90/data_copyin_no_lower_bound.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/data_copyin_no_lower_bound.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11540827598946635
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/data_copyin_no_lower_bound.F90/data_copyin_no_lower_bound.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/data_copyin_no_lower_bound.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11535509300301783
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "data_copyout_no_lower_bound.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/data_copyout_no_lower_bound.F90/data_copyout_no_lower_bound.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/data_copyout_no_lower_bound.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11516941500303801
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/data_copyout_no_lower_bound.F90/data_copyout_no_lower_bound.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/data_copyout_no_lower_bound.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11553027199988719
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "data_copyout_reference_counts.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/data_copyout_reference_counts.F90/data_copyout_reference_counts.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/data_copyout_reference_counts.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11587225200491957
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/data_copyout_reference_counts.F90/data_copyout_reference_counts.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/data_copyout_reference_counts.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11565585400967393
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT2 -o /global/u1/j/jarmusch/OpenACCV-V/build/data_copyout_reference_counts.F90/data_copyout_reference_counts.F902 /global/u1/j/jarmusch/OpenACCV-V/Tests/data_copyout_reference_counts.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11543255300784949
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/data_copyout_reference_counts.F90/data_copyout_reference_counts.F903 /global/u1/j/jarmusch/OpenACCV-V/Tests/data_copyout_reference_counts.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11542948499845807
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT3 -o /global/u1/j/jarmusch/OpenACCV-V/build/data_copyout_reference_counts.F90/data_copyout_reference_counts.F904 /global/u1/j/jarmusch/OpenACCV-V/Tests/data_copyout_reference_counts.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11491712700808421
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/data_copyout_reference_counts.F90/data_copyout_reference_counts.F905 /global/u1/j/jarmusch/OpenACCV-V/Tests/data_copyout_reference_counts.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11545209999894723
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT2 -o /global/u1/j/jarmusch/OpenACCV-V/build/data_copyout_reference_counts.F90/data_copyout_reference_counts.F906 /global/u1/j/jarmusch/OpenACCV-V/Tests/data_copyout_reference_counts.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11594366999634076
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/data_copyout_reference_counts.F90/data_copyout_reference_counts.F907 /global/u1/j/jarmusch/OpenACCV-V/Tests/data_copyout_reference_counts.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11514956600149162
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "data_create.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/data_create.F90/data_create.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/data_create.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11571877601090819
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/data_create.F90/data_create.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/data_create.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11593219800852239
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT2 -o /global/u1/j/jarmusch/OpenACCV-V/build/data_create.F90/data_create.F902 /global/u1/j/jarmusch/OpenACCV-V/Tests/data_create.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11577971398946829
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/data_create.F90/data_create.F903 /global/u1/j/jarmusch/OpenACCV-V/Tests/data_create.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11571355699561536
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT3 -o /global/u1/j/jarmusch/OpenACCV-V/build/data_create.F90/data_create.F904 /global/u1/j/jarmusch/OpenACCV-V/Tests/data_create.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11575150900171138
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/data_create.F90/data_create.F905 /global/u1/j/jarmusch/OpenACCV-V/Tests/data_create.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11532324099971447
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT2 -o /global/u1/j/jarmusch/OpenACCV-V/build/data_create.F90/data_create.F906 /global/u1/j/jarmusch/OpenACCV-V/Tests/data_create.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11592507499153726
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/data_create.F90/data_create.F907 /global/u1/j/jarmusch/OpenACCV-V/Tests/data_create.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11544826299359556
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "data_create_no_lower_bound.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/data_create_no_lower_bound.F90/data_create_no_lower_bound.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/data_create_no_lower_bound.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11528493800142314
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/data_create_no_lower_bound.F90/data_create_no_lower_bound.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/data_create_no_lower_bound.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11533009499544278
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "data_present_no_lower_bound.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/data_present_no_lower_bound.F90/data_present_no_lower_bound.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/data_present_no_lower_bound.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1152146310050739
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/data_present_no_lower_bound.F90/data_present_no_lower_bound.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/data_present_no_lower_bound.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11522631499974523
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "data_with_changing_subscript.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/data_with_changing_subscript.F90/data_with_changing_subscript.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/data_with_changing_subscript.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1150613850040827
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/data_with_changing_subscript.F90/data_with_changing_subscript.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/data_with_changing_subscript.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11559533700346947
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "data_with_derived_type.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/data_with_derived_type.F90/data_with_derived_type.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/data_with_derived_type.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11507586301013362
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/data_with_derived_type.F90/data_with_derived_type.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/data_with_derived_type.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11514852399704978
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "declare_copyin.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -DT2 -DT3 -DT4 -o /global/u1/j/jarmusch/OpenACCV-V/build/declare_copyin.F90/declare_copyin.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/declare_copyin.F90",
                    "config": 1,
                    "errors": "\n\nftn-795 ftn: WARNING $MAIN, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_copyin.F90, Line = 1, Column = 7 \n  Compiler directive ACC ROUTINE is only allowed within a program unit.\n\n\nftn-287 ftn: WARNING MULTIPLYDATA, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_copyin.F90, Line = 2, Column = 10 \n  The result of function name \"MULTIPLYDATA\" in the function subprogram is not defined.\n\n\nftn-521 ftn: ERROR MULTIPLYDATA, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_copyin.F90, Line = 3, Column = 21 \n  Object \"LOOPCOUNT\", used in a bounds expression must be a constant, a dummy argument, a common block member or use or host associated.\n\nCray Fortran : Version 14.0.1 (20220526224428_3a8780657c742829e80f36338fb6ec6578642bb7)\nCray Fortran : Compile time:  0.0027 seconds\nCray Fortran : 246 source lines\nCray Fortran : 1 errors, 2 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11543831299059093
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT2 -DT3 -DT4 -o /global/u1/j/jarmusch/OpenACCV-V/build/declare_copyin.F90/declare_copyin.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/declare_copyin.F90",
                    "config": 1,
                    "errors": "\n\nftn-795 ftn: WARNING $MAIN, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_copyin.F90, Line = 1, Column = 7 \n  Compiler directive ACC ROUTINE is only allowed within a program unit.\n\n\nftn-287 ftn: WARNING MULTIPLYDATA, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_copyin.F90, Line = 2, Column = 10 \n  The result of function name \"MULTIPLYDATA\" in the function subprogram is not defined.\n\n\nftn-521 ftn: ERROR MULTIPLYDATA, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_copyin.F90, Line = 3, Column = 21 \n  Object \"LOOPCOUNT\", used in a bounds expression must be a constant, a dummy argument, a common block member or use or host associated.\n\n\nftn-292 ftn: ERROR TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_copyin.F90, Line = 15, Column = 7 \n  \"DECLARE_COPYIN_MOD\" is specified as the module name on a USE statement, but the compiler cannot find it.\n\n\nftn-113 ftn: ERROR TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_copyin.F90, Line = 32, Column = 69 \n  IMPLICIT NONE is specified in the local scope, therefore an explicit type must be specified for data object \"FIXED_SIZE_ARRAY\".\n\n\nftn-511 ftn: ERROR TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_copyin.F90, Line = 36, Column = 23 \n  \"FIXED_SIZE_ARRAY\" is scalar, but it is being used as an array or function reference.\n\n\nftn-511 ftn: ERROR TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_copyin.F90, Line = 42, Column = 28 \n  \"FIXED_SIZE_ARRAY\" is scalar, but it is being used as an array or function reference.\n\nCray Fortran : Version 14.0.1 (20220526224428_3a8780657c742829e80f36338fb6ec6578642bb7)\nCray Fortran : Compile time:  0.0079 seconds\nCray Fortran : 255 source lines\nCray Fortran : 5 errors, 2 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11544172000139952
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -DT3 -DT4 -o /global/u1/j/jarmusch/OpenACCV-V/build/declare_copyin.F90/declare_copyin.F902 /global/u1/j/jarmusch/OpenACCV-V/Tests/declare_copyin.F90",
                    "config": 1,
                    "errors": "\n\nftn-795 ftn: WARNING $MAIN, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_copyin.F90, Line = 1, Column = 7 \n  Compiler directive ACC ROUTINE is only allowed within a program unit.\n\n\nftn-287 ftn: WARNING MULTIPLYDATA, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_copyin.F90, Line = 2, Column = 10 \n  The result of function name \"MULTIPLYDATA\" in the function subprogram is not defined.\n\n\nftn-521 ftn: ERROR MULTIPLYDATA, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_copyin.F90, Line = 3, Column = 21 \n  Object \"LOOPCOUNT\", used in a bounds expression must be a constant, a dummy argument, a common block member or use or host associated.\n\n\nftn-292 ftn: ERROR TEST2, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_copyin.F90, Line = 58, Column = 7 \n  \"DECLARE_COPYIN_MOD\" is specified as the module name on a USE statement, but the compiler cannot find it.\n\n\nftn-113 ftn: ERROR TEST2, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_copyin.F90, Line = 74, Column = 69 \n  IMPLICIT NONE is specified in the local scope, therefore an explicit type must be specified for data object \"SCALAR\".\n\n\nftn-113 ftn: ERROR TEST2, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_copyin.F90, Line = 77, Column = 10 \n  IMPLICIT NONE is specified in the local scope, therefore an explicit type must be specified for data object \"X\".\n\n\nftn-319 ftn: ERROR TEST2, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_copyin.F90, Line = 78, Column = 11 \n  A subscript must be a scalar integer expression.\n\n\nftn-319 ftn: ERROR TEST2, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_copyin.F90, Line = 78, Column = 18 \n  A subscript must be a scalar integer expression.\n\n\nftn-319 ftn: ERROR TEST2, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_copyin.F90, Line = 84, Column = 15 \n  A subscript must be a scalar integer expression.\n\n\nftn-319 ftn: ERROR TEST2, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_copyin.F90, Line = 84, Column = 23 \n  A subscript must be a scalar integer expression.\n\nCray Fortran : Version 14.0.1 (20220526224428_3a8780657c742829e80f36338fb6ec6578642bb7)\nCray Fortran : Compile time:  0.0065 seconds\nCray Fortran : 255 source lines\nCray Fortran : 8 errors, 2 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11594339000293985
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -DT2 -DT4 -o /global/u1/j/jarmusch/OpenACCV-V/build/declare_copyin.F90/declare_copyin.F903 /global/u1/j/jarmusch/OpenACCV-V/Tests/declare_copyin.F90",
                    "config": 1,
                    "errors": "\n\nftn-795 ftn: WARNING $MAIN, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_copyin.F90, Line = 1, Column = 7 \n  Compiler directive ACC ROUTINE is only allowed within a program unit.\n\n\nftn-287 ftn: WARNING MULTIPLYDATA, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_copyin.F90, Line = 2, Column = 10 \n  The result of function name \"MULTIPLYDATA\" in the function subprogram is not defined.\n\n\nftn-521 ftn: ERROR MULTIPLYDATA, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_copyin.F90, Line = 3, Column = 21 \n  Object \"LOOPCOUNT\", used in a bounds expression must be a constant, a dummy argument, a common block member or use or host associated.\n\n\nftn-292 ftn: ERROR TEST3, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_copyin.F90, Line = 100, Column = 7 \n  \"DECLARE_COPYIN_MOD\" is specified as the module name on a USE statement, but the compiler cannot find it.\n\n\nftn-113 ftn: ERROR TEST3, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_copyin.F90, Line = 119, Column = 10 \n  IMPLICIT NONE is specified in the local scope, therefore an explicit type must be specified for data object \"X\".\n\n\nftn-319 ftn: ERROR TEST3, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_copyin.F90, Line = 126, Column = 15 \n  A subscript must be a scalar integer expression.\n\n\nftn-319 ftn: ERROR TEST3, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_copyin.F90, Line = 126, Column = 23 \n  A subscript must be a scalar integer expression.\n\nCray Fortran : Version 14.0.1 (20220526224428_3a8780657c742829e80f36338fb6ec6578642bb7)\nCray Fortran : Compile time:  0.0063 seconds\nCray Fortran : 255 source lines\nCray Fortran : 5 errors, 2 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11563472299894784
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -DT2 -DT3 -o /global/u1/j/jarmusch/OpenACCV-V/build/declare_copyin.F90/declare_copyin.F904 /global/u1/j/jarmusch/OpenACCV-V/Tests/declare_copyin.F90",
                    "config": 1,
                    "errors": "\n\nftn-795 ftn: WARNING $MAIN, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_copyin.F90, Line = 1, Column = 7 \n  Compiler directive ACC ROUTINE is only allowed within a program unit.\n\n\nftn-287 ftn: WARNING MULTIPLYDATA, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_copyin.F90, Line = 2, Column = 10 \n  The result of function name \"MULTIPLYDATA\" in the function subprogram is not defined.\n\n\nftn-521 ftn: ERROR MULTIPLYDATA, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_copyin.F90, Line = 3, Column = 21 \n  Object \"LOOPCOUNT\", used in a bounds expression must be a constant, a dummy argument, a common block member or use or host associated.\n\n\nftn-292 ftn: ERROR TEST4, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_copyin.F90, Line = 142, Column = 7 \n  \"DECLARE_COPYIN_MOD\" is specified as the module name on a USE statement, but the compiler cannot find it.\n\n\nftn-113 ftn: ERROR TEST4, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_copyin.F90, Line = 161, Column = 10 \n  IMPLICIT NONE is specified in the local scope, therefore an explicit type must be specified for data object \"X\".\n\n\nftn-1293 ftn: ERROR TEST4, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_copyin.F90, Line = 162, Column = 9 \n  Program unit \"MULTIPLYDATA\" is defined as a FUNCTION at line 2 (/global/u1/j/jarmusch/OpenACCV-V/Tests/declare_copyin.F90), but is defined or referenced as a SUBROUTINE here.\n\n\nftn-319 ftn: ERROR TEST4, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_copyin.F90, Line = 168, Column = 15 \n  A subscript must be a scalar integer expression.\n\n\nftn-319 ftn: ERROR TEST4, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_copyin.F90, Line = 168, Column = 23 \n  A subscript must be a scalar integer expression.\n\nCray Fortran : Version 14.0.1 (20220526224428_3a8780657c742829e80f36338fb6ec6578642bb7)\nCray Fortran : Compile time:  0.0071 seconds\nCray Fortran : 255 source lines\nCray Fortran : 6 errors, 2 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11623896099627018
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT4 -DT1 -DT2 -DT3 -DT4 -o /global/u1/j/jarmusch/OpenACCV-V/build/declare_copyin.F90/declare_copyin.F905 /global/u1/j/jarmusch/OpenACCV-V/Tests/declare_copyin.F90",
                    "config": 1,
                    "errors": "\n\nftn-795 ftn: WARNING $MAIN, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_copyin.F90, Line = 1, Column = 7 \n  Compiler directive ACC ROUTINE is only allowed within a program unit.\n\n\nftn-287 ftn: WARNING MULTIPLYDATA, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_copyin.F90, Line = 2, Column = 10 \n  The result of function name \"MULTIPLYDATA\" in the function subprogram is not defined.\n\n\nftn-521 ftn: ERROR MULTIPLYDATA, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_copyin.F90, Line = 3, Column = 21 \n  Object \"LOOPCOUNT\", used in a bounds expression must be a constant, a dummy argument, a common block member or use or host associated.\n\nCray Fortran : Version 14.0.1 (20220526224428_3a8780657c742829e80f36338fb6ec6578642bb7)\nCray Fortran : Compile time:  0.0025 seconds\nCray Fortran : 246 source lines\nCray Fortran : 1 errors, 2 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06578496099973563
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "declare_copyin_mod.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/declare_copyin_mod.F90/declare_copyin_mod.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/declare_copyin_mod.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11569318600231782
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "declare_create.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -DT2 -DT3 -DT4 -o /global/u1/j/jarmusch/OpenACCV-V/build/declare_create.F90/declare_create.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/declare_create.F90",
                    "config": 1,
                    "errors": "\n\nftn-795 ftn: WARNING $MAIN, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 1, Column = 7 \n  Compiler directive ACC DECLARE is only allowed within a program unit.\n\n\nftn-795 ftn: WARNING $MAIN, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 2, Column = 7 \n  Compiler directive ACC DECLARE is only allowed within a program unit.\n\n\nftn-795 ftn: WARNING $MAIN, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 3, Column = 7 \n  Compiler directive ACC DECLARE is only allowed within a program unit.\n\n\nftn-795 ftn: WARNING $MAIN, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 5, Column = 7 \n  Compiler directive ACC ROUTINE is only allowed within a program unit.\n\n\nftn-287 ftn: WARNING MULTIPLYDATA, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 6, Column = 10 \n  The result of function name \"MULTIPLYDATA\" in the function subprogram is not defined.\n\n\nftn-521 ftn: ERROR MULTIPLYDATA, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 7, Column = 21 \n  Object \"LOOPCOUNT\", used in a bounds expression must be a constant, a dummy argument, a common block member or use or host associated.\n\n\nftn-1514 ftn: ERROR MULTIPLYDATA, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 9, Column = 6 \n  When the DO loop is in an OpenMP work-sharing construct, the iteration variable must be integer.\n\n\nftn-1569 ftn: WARNING MULTIPLYDATA, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 9, Column = 6 \n  A DO loop variable or expression of type default real or double precision real is a deleted feature of the Fortran standard.\n\n\nftn-319 ftn: ERROR MULTIPLYDATA, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 10, Column = 7 \n  A subscript must be a scalar integer expression.\n\n\nftn-319 ftn: ERROR MULTIPLYDATA, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 10, Column = 14 \n  A subscript must be a scalar integer expression.\n\nCray Fortran : Version 14.0.1 (20220526224428_3a8780657c742829e80f36338fb6ec6578642bb7)\nCray Fortran : Compile time:  0.0028 seconds\nCray Fortran : 251 source lines\nCray Fortran : 4 errors, 6 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.1156183920102194
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT2 -DT3 -DT4 -o /global/u1/j/jarmusch/OpenACCV-V/build/declare_create.F90/declare_create.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/declare_create.F90",
                    "config": 1,
                    "errors": "\n\nftn-795 ftn: WARNING $MAIN, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 1, Column = 7 \n  Compiler directive ACC DECLARE is only allowed within a program unit.\n\n\nftn-795 ftn: WARNING $MAIN, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 2, Column = 7 \n  Compiler directive ACC DECLARE is only allowed within a program unit.\n\n\nftn-795 ftn: WARNING $MAIN, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 3, Column = 7 \n  Compiler directive ACC DECLARE is only allowed within a program unit.\n\n\nftn-795 ftn: WARNING $MAIN, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 5, Column = 7 \n  Compiler directive ACC ROUTINE is only allowed within a program unit.\n\n\nftn-287 ftn: WARNING MULTIPLYDATA, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 6, Column = 10 \n  The result of function name \"MULTIPLYDATA\" in the function subprogram is not defined.\n\n\nftn-521 ftn: ERROR MULTIPLYDATA, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 7, Column = 21 \n  Object \"LOOPCOUNT\", used in a bounds expression must be a constant, a dummy argument, a common block member or use or host associated.\n\n\nftn-1514 ftn: ERROR MULTIPLYDATA, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 9, Column = 6 \n  When the DO loop is in an OpenMP work-sharing construct, the iteration variable must be integer.\n\n\nftn-1569 ftn: WARNING MULTIPLYDATA, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 9, Column = 6 \n  A DO loop variable or expression of type default real or double precision real is a deleted feature of the Fortran standard.\n\n\nftn-319 ftn: ERROR MULTIPLYDATA, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 10, Column = 7 \n  A subscript must be a scalar integer expression.\n\n\nftn-319 ftn: ERROR MULTIPLYDATA, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 10, Column = 14 \n  A subscript must be a scalar integer expression.\n\n\nftn-113 ftn: ERROR TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 33, Column = 69 \n  IMPLICIT NONE is specified in the local scope, therefore an explicit type must be specified for data object \"FIXED_SIZE_ARRAY\".\n\n\nftn-113 ftn: ERROR TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 36, Column = 10 \n  IMPLICIT NONE is specified in the local scope, therefore an explicit type must be specified for data object \"X\".\n\n\nftn-724 ftn: ERROR TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 37, Column = 25 \n  Unknown statement.  Expected assignment statement but found \"(\" instead of \"=\" or \"=>\".\n\n\nftn-319 ftn: ERROR TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 43, Column = 11 \n  A subscript must be a scalar integer expression.\n\n\nftn-319 ftn: ERROR TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 43, Column = 18 \n  A subscript must be a scalar integer expression.\n\n\nftn-557 ftn: ERROR TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 43, Column = 23 \n  \"FIXED_SIZE_ARRAY\" has been used as a variable, therefore it must not be declared or used as a procedure.\n\n\nftn-319 ftn: ERROR TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 49, Column = 15 \n  A subscript must be a scalar integer expression.\n\n\nftn-319 ftn: ERROR TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 49, Column = 23 \n  A subscript must be a scalar integer expression.\n\nCray Fortran : Version 14.0.1 (20220526224428_3a8780657c742829e80f36338fb6ec6578642bb7)\nCray Fortran : Compile time:  0.0051 seconds\nCray Fortran : 260 source lines\nCray Fortran : 12 errors, 6 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11531781099620275
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -DT3 -DT4 -o /global/u1/j/jarmusch/OpenACCV-V/build/declare_create.F90/declare_create.F902 /global/u1/j/jarmusch/OpenACCV-V/Tests/declare_create.F90",
                    "config": 1,
                    "errors": "\n\nftn-795 ftn: WARNING $MAIN, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 1, Column = 7 \n  Compiler directive ACC DECLARE is only allowed within a program unit.\n\n\nftn-795 ftn: WARNING $MAIN, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 2, Column = 7 \n  Compiler directive ACC DECLARE is only allowed within a program unit.\n\n\nftn-795 ftn: WARNING $MAIN, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 3, Column = 7 \n  Compiler directive ACC DECLARE is only allowed within a program unit.\n\n\nftn-795 ftn: WARNING $MAIN, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 5, Column = 7 \n  Compiler directive ACC ROUTINE is only allowed within a program unit.\n\n\nftn-287 ftn: WARNING MULTIPLYDATA, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 6, Column = 10 \n  The result of function name \"MULTIPLYDATA\" in the function subprogram is not defined.\n\n\nftn-521 ftn: ERROR MULTIPLYDATA, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 7, Column = 21 \n  Object \"LOOPCOUNT\", used in a bounds expression must be a constant, a dummy argument, a common block member or use or host associated.\n\n\nftn-1514 ftn: ERROR MULTIPLYDATA, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 9, Column = 6 \n  When the DO loop is in an OpenMP work-sharing construct, the iteration variable must be integer.\n\n\nftn-1569 ftn: WARNING MULTIPLYDATA, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 9, Column = 6 \n  A DO loop variable or expression of type default real or double precision real is a deleted feature of the Fortran standard.\n\n\nftn-319 ftn: ERROR MULTIPLYDATA, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 10, Column = 7 \n  A subscript must be a scalar integer expression.\n\n\nftn-319 ftn: ERROR MULTIPLYDATA, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 10, Column = 14 \n  A subscript must be a scalar integer expression.\n\n\nftn-113 ftn: ERROR TEST2, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 79, Column = 3 \n  IMPLICIT NONE is specified in the local scope, therefore an explicit type must be specified for data object \"SCALAR\".\n\n\nftn-113 ftn: ERROR TEST2, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 84, Column = 10 \n  IMPLICIT NONE is specified in the local scope, therefore an explicit type must be specified for data object \"X\".\n\n\nftn-319 ftn: ERROR TEST2, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 85, Column = 11 \n  A subscript must be a scalar integer expression.\n\n\nftn-319 ftn: ERROR TEST2, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 85, Column = 18 \n  A subscript must be a scalar integer expression.\n\n\nftn-319 ftn: ERROR TEST2, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 91, Column = 15 \n  A subscript must be a scalar integer expression.\n\n\nftn-319 ftn: ERROR TEST2, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 91, Column = 23 \n  A subscript must be a scalar integer expression.\n\nCray Fortran : Version 14.0.1 (20220526224428_3a8780657c742829e80f36338fb6ec6578642bb7)\nCray Fortran : Compile time:  0.0054 seconds\nCray Fortran : 260 source lines\nCray Fortran : 10 errors, 6 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11526376599795185
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -DT2 -DT4 -o /global/u1/j/jarmusch/OpenACCV-V/build/declare_create.F90/declare_create.F903 /global/u1/j/jarmusch/OpenACCV-V/Tests/declare_create.F90",
                    "config": 1,
                    "errors": "\n\nftn-795 ftn: WARNING $MAIN, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 1, Column = 7 \n  Compiler directive ACC DECLARE is only allowed within a program unit.\n\n\nftn-795 ftn: WARNING $MAIN, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 2, Column = 7 \n  Compiler directive ACC DECLARE is only allowed within a program unit.\n\n\nftn-795 ftn: WARNING $MAIN, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 3, Column = 7 \n  Compiler directive ACC DECLARE is only allowed within a program unit.\n\n\nftn-795 ftn: WARNING $MAIN, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 5, Column = 7 \n  Compiler directive ACC ROUTINE is only allowed within a program unit.\n\n\nftn-287 ftn: WARNING MULTIPLYDATA, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 6, Column = 10 \n  The result of function name \"MULTIPLYDATA\" in the function subprogram is not defined.\n\n\nftn-521 ftn: ERROR MULTIPLYDATA, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 7, Column = 21 \n  Object \"LOOPCOUNT\", used in a bounds expression must be a constant, a dummy argument, a common block member or use or host associated.\n\n\nftn-1514 ftn: ERROR MULTIPLYDATA, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 9, Column = 6 \n  When the DO loop is in an OpenMP work-sharing construct, the iteration variable must be integer.\n\n\nftn-1569 ftn: WARNING MULTIPLYDATA, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 9, Column = 6 \n  A DO loop variable or expression of type default real or double precision real is a deleted feature of the Fortran standard.\n\n\nftn-319 ftn: ERROR MULTIPLYDATA, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 10, Column = 7 \n  A subscript must be a scalar integer expression.\n\n\nftn-319 ftn: ERROR MULTIPLYDATA, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 10, Column = 14 \n  A subscript must be a scalar integer expression.\n\n\nftn-1725 ftn: ERROR TEST3, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 121, Column = 15 \n  Unexpected syntax while parsing the DIRECTIVE statement : \"HOST, DEVICE, IF and/or ASYNC\" was expected but found \"EOS\".\n\n\nftn-113 ftn: ERROR TEST3, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 125, Column = 10 \n  IMPLICIT NONE is specified in the local scope, therefore an explicit type must be specified for data object \"X\".\n\n\nftn-319 ftn: ERROR TEST3, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 132, Column = 15 \n  A subscript must be a scalar integer expression.\n\n\nftn-319 ftn: ERROR TEST3, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 132, Column = 23 \n  A subscript must be a scalar integer expression.\n\nCray Fortran : Version 14.0.1 (20220526224428_3a8780657c742829e80f36338fb6ec6578642bb7)\nCray Fortran : Compile time:  0.0054 seconds\nCray Fortran : 260 source lines\nCray Fortran : 8 errors, 6 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11523119399498682
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -DT2 -DT3 -o /global/u1/j/jarmusch/OpenACCV-V/build/declare_create.F90/declare_create.F904 /global/u1/j/jarmusch/OpenACCV-V/Tests/declare_create.F90",
                    "config": 1,
                    "errors": "\n\nftn-795 ftn: WARNING $MAIN, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 1, Column = 7 \n  Compiler directive ACC DECLARE is only allowed within a program unit.\n\n\nftn-795 ftn: WARNING $MAIN, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 2, Column = 7 \n  Compiler directive ACC DECLARE is only allowed within a program unit.\n\n\nftn-795 ftn: WARNING $MAIN, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 3, Column = 7 \n  Compiler directive ACC DECLARE is only allowed within a program unit.\n\n\nftn-795 ftn: WARNING $MAIN, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 5, Column = 7 \n  Compiler directive ACC ROUTINE is only allowed within a program unit.\n\n\nftn-287 ftn: WARNING MULTIPLYDATA, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 6, Column = 10 \n  The result of function name \"MULTIPLYDATA\" in the function subprogram is not defined.\n\n\nftn-521 ftn: ERROR MULTIPLYDATA, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 7, Column = 21 \n  Object \"LOOPCOUNT\", used in a bounds expression must be a constant, a dummy argument, a common block member or use or host associated.\n\n\nftn-1514 ftn: ERROR MULTIPLYDATA, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 9, Column = 6 \n  When the DO loop is in an OpenMP work-sharing construct, the iteration variable must be integer.\n\n\nftn-1569 ftn: WARNING MULTIPLYDATA, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 9, Column = 6 \n  A DO loop variable or expression of type default real or double precision real is a deleted feature of the Fortran standard.\n\n\nftn-319 ftn: ERROR MULTIPLYDATA, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 10, Column = 7 \n  A subscript must be a scalar integer expression.\n\n\nftn-319 ftn: ERROR MULTIPLYDATA, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 10, Column = 14 \n  A subscript must be a scalar integer expression.\n\n\nftn-113 ftn: ERROR TEST4, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 166, Column = 10 \n  IMPLICIT NONE is specified in the local scope, therefore an explicit type must be specified for data object \"X\".\n\n\nftn-1293 ftn: ERROR TEST4, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 167, Column = 9 \n  Program unit \"MULTIPLYDATA\" is defined as a FUNCTION at line 6 (/global/u1/j/jarmusch/OpenACCV-V/Tests/declare_create.F90), but is defined or referenced as a SUBROUTINE here.\n\n\nftn-319 ftn: ERROR TEST4, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 173, Column = 15 \n  A subscript must be a scalar integer expression.\n\n\nftn-319 ftn: ERROR TEST4, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 173, Column = 23 \n  A subscript must be a scalar integer expression.\n\nCray Fortran : Version 14.0.1 (20220526224428_3a8780657c742829e80f36338fb6ec6578642bb7)\nCray Fortran : Compile time:  0.0051 seconds\nCray Fortran : 260 source lines\nCray Fortran : 8 errors, 6 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11565116498968564
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT4 -DT1 -DT2 -DT3 -DT4 -o /global/u1/j/jarmusch/OpenACCV-V/build/declare_create.F90/declare_create.F905 /global/u1/j/jarmusch/OpenACCV-V/Tests/declare_create.F90",
                    "config": 1,
                    "errors": "\n\nftn-795 ftn: WARNING $MAIN, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 1, Column = 7 \n  Compiler directive ACC DECLARE is only allowed within a program unit.\n\n\nftn-795 ftn: WARNING $MAIN, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 2, Column = 7 \n  Compiler directive ACC DECLARE is only allowed within a program unit.\n\n\nftn-795 ftn: WARNING $MAIN, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 3, Column = 7 \n  Compiler directive ACC DECLARE is only allowed within a program unit.\n\n\nftn-795 ftn: WARNING $MAIN, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 5, Column = 7 \n  Compiler directive ACC ROUTINE is only allowed within a program unit.\n\n\nftn-287 ftn: WARNING MULTIPLYDATA, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 6, Column = 10 \n  The result of function name \"MULTIPLYDATA\" in the function subprogram is not defined.\n\n\nftn-521 ftn: ERROR MULTIPLYDATA, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 7, Column = 21 \n  Object \"LOOPCOUNT\", used in a bounds expression must be a constant, a dummy argument, a common block member or use or host associated.\n\n\nftn-1514 ftn: ERROR MULTIPLYDATA, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 9, Column = 6 \n  When the DO loop is in an OpenMP work-sharing construct, the iteration variable must be integer.\n\n\nftn-1569 ftn: WARNING MULTIPLYDATA, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 9, Column = 6 \n  A DO loop variable or expression of type default real or double precision real is a deleted feature of the Fortran standard.\n\n\nftn-319 ftn: ERROR MULTIPLYDATA, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 10, Column = 7 \n  A subscript must be a scalar integer expression.\n\n\nftn-319 ftn: ERROR MULTIPLYDATA, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 10, Column = 14 \n  A subscript must be a scalar integer expression.\n\nCray Fortran : Version 14.0.1 (20220526224428_3a8780657c742829e80f36338fb6ec6578642bb7)\nCray Fortran : Compile time:  0.0028 seconds\nCray Fortran : 251 source lines\nCray Fortran : 4 errors, 6 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06534162499883678
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "declare_function_scope_copy.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -DT2 -DT3 -DT4 -o /global/u1/j/jarmusch/OpenACCV-V/build/declare_function_scope_copy.F90/declare_function_scope_copy.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copy.F90",
                    "config": 1,
                    "errors": "\n\nftn-287 ftn: WARNING COPYIN_COPYOUT_TEST, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copy.F90, Line = 1, Column = 10 \n  The result of function name \"COPYIN_COPYOUT_TEST\" in the function subprogram is not defined.\n\n\nftn-1725 ftn: ERROR COPYIN_COPYOUT_TEST, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copy.F90, Line = 6, Column = 23 \n  Unexpected syntax while parsing the DIRECTIVE statement : \")\" was expected but found \"(\".\n\nCray Fortran : Version 14.0.1 (20220526224428_3a8780657c742829e80f36338fb6ec6578642bb7)\nCray Fortran : Compile time:  0.0027 seconds\nCray Fortran : 289 source lines\nCray Fortran : 1 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06559223899967037
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT2 -DT3 -DT4 -o /global/u1/j/jarmusch/OpenACCV-V/build/declare_function_scope_copy.F90/declare_function_scope_copy.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copy.F90",
                    "config": 1,
                    "errors": "\n\nftn-287 ftn: WARNING COPYIN_COPYOUT_TEST, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copy.F90, Line = 1, Column = 10 \n  The result of function name \"COPYIN_COPYOUT_TEST\" in the function subprogram is not defined.\n\n\nftn-1725 ftn: ERROR COPYIN_COPYOUT_TEST, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copy.F90, Line = 6, Column = 23 \n  Unexpected syntax while parsing the DIRECTIVE statement : \")\" was expected but found \"(\".\n\n\nftn-1293 ftn: ERROR TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copy.F90, Line = 44, Column = 7 \n  Program unit \"COPYIN_COPYOUT_TEST\" is defined as a FUNCTION at line 1 (/global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copy.F90), but is defined or referenced as a SUBROUTINE here.\n\nCray Fortran : Version 14.0.1 (20220526224428_3a8780657c742829e80f36338fb6ec6578642bb7)\nCray Fortran : Compile time:  0.0058 seconds\nCray Fortran : 298 source lines\nCray Fortran : 2 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11511006799992174
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -DT3 -DT4 -o /global/u1/j/jarmusch/OpenACCV-V/build/declare_function_scope_copy.F90/declare_function_scope_copy.F902 /global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copy.F90",
                    "config": 1,
                    "errors": "\n\nftn-287 ftn: WARNING COPYIN_COPYOUT_TEST, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copy.F90, Line = 1, Column = 10 \n  The result of function name \"COPYIN_COPYOUT_TEST\" in the function subprogram is not defined.\n\n\nftn-1725 ftn: ERROR COPYIN_COPYOUT_TEST, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copy.F90, Line = 6, Column = 23 \n  Unexpected syntax while parsing the DIRECTIVE statement : \")\" was expected but found \"(\".\n\n\nftn-1293 ftn: ERROR TEST2, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copy.F90, Line = 93, Column = 9 \n  Program unit \"COPYIN_COPYOUT_TEST\" is defined as a FUNCTION at line 1 (/global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copy.F90), but is defined or referenced as a SUBROUTINE here.\n\nCray Fortran : Version 14.0.1 (20220526224428_3a8780657c742829e80f36338fb6ec6578642bb7)\nCray Fortran : Compile time:  0.0055 seconds\nCray Fortran : 298 source lines\nCray Fortran : 2 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11543717099993955
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -DT2 -DT4 -o /global/u1/j/jarmusch/OpenACCV-V/build/declare_function_scope_copy.F90/declare_function_scope_copy.F903 /global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copy.F90",
                    "config": 1,
                    "errors": "\n\nftn-287 ftn: WARNING COPYIN_COPYOUT_TEST, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copy.F90, Line = 1, Column = 10 \n  The result of function name \"COPYIN_COPYOUT_TEST\" in the function subprogram is not defined.\n\n\nftn-1725 ftn: ERROR COPYIN_COPYOUT_TEST, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copy.F90, Line = 6, Column = 23 \n  Unexpected syntax while parsing the DIRECTIVE statement : \")\" was expected but found \"(\".\n\n\nftn-1293 ftn: ERROR TEST3, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copy.F90, Line = 145, Column = 11 \n  Program unit \"COPYIN_COPYOUT_TEST\" is defined as a FUNCTION at line 1 (/global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copy.F90), but is defined or referenced as a SUBROUTINE here.\n\nCray Fortran : Version 14.0.1 (20220526224428_3a8780657c742829e80f36338fb6ec6578642bb7)\nCray Fortran : Compile time:  0.0057 seconds\nCray Fortran : 298 source lines\nCray Fortran : 2 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11613584199221805
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -DT2 -DT3 -o /global/u1/j/jarmusch/OpenACCV-V/build/declare_function_scope_copy.F90/declare_function_scope_copy.F904 /global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copy.F90",
                    "config": 1,
                    "errors": "\n\nftn-287 ftn: WARNING COPYIN_COPYOUT_TEST, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copy.F90, Line = 1, Column = 10 \n  The result of function name \"COPYIN_COPYOUT_TEST\" in the function subprogram is not defined.\n\n\nftn-1725 ftn: ERROR COPYIN_COPYOUT_TEST, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copy.F90, Line = 6, Column = 23 \n  Unexpected syntax while parsing the DIRECTIVE statement : \")\" was expected but found \"(\".\n\n\nftn-1293 ftn: ERROR TEST4, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copy.F90, Line = 200, Column = 11 \n  Program unit \"COPYIN_COPYOUT_TEST\" is defined as a FUNCTION at line 1 (/global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copy.F90), but is defined or referenced as a SUBROUTINE here.\n\nCray Fortran : Version 14.0.1 (20220526224428_3a8780657c742829e80f36338fb6ec6578642bb7)\nCray Fortran : Compile time:  0.0058 seconds\nCray Fortran : 298 source lines\nCray Fortran : 2 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11589045799337327
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT4 -DT1 -DT2 -DT3 -DT4 -o /global/u1/j/jarmusch/OpenACCV-V/build/declare_function_scope_copy.F90/declare_function_scope_copy.F905 /global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copy.F90",
                    "config": 1,
                    "errors": "\n\nftn-287 ftn: WARNING COPYIN_COPYOUT_TEST, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copy.F90, Line = 1, Column = 10 \n  The result of function name \"COPYIN_COPYOUT_TEST\" in the function subprogram is not defined.\n\n\nftn-1725 ftn: ERROR COPYIN_COPYOUT_TEST, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copy.F90, Line = 6, Column = 23 \n  Unexpected syntax while parsing the DIRECTIVE statement : \")\" was expected but found \"(\".\n\nCray Fortran : Version 14.0.1 (20220526224428_3a8780657c742829e80f36338fb6ec6578642bb7)\nCray Fortran : Compile time:  0.0029 seconds\nCray Fortran : 289 source lines\nCray Fortran : 1 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11562120700546075
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "declare_function_scope_copyin.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/declare_function_scope_copyin.F90/declare_function_scope_copyin.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90",
                    "config": 1,
                    "errors": "\n\nftn-287 ftn: WARNING FUNCTION_TEST, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 1, Column = 10 \n  The result of function name \"FUNCTION_TEST\" in the function subprogram is not defined.\n\n\nftn-1725 ftn: ERROR FUNCTION_TEST, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 7, Column = 25 \n  Unexpected syntax while parsing the DIRECTIVE statement : \")\" was expected but found \"(\".\n\n\nftn-287 ftn: WARNING FUNCTION_TEST_DEV_ONLY, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 16, Column = 10 \n  The result of function name \"FUNCTION_TEST_DEV_ONLY\" in the function subprogram is not defined.\n\n\nftn-1725 ftn: ERROR FUNCTION_TEST_DEV_ONLY, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 22, Column = 25 \n  Unexpected syntax while parsing the DIRECTIVE statement : \")\" was expected but found \"(\".\n\n\nftn-1293 ftn: ERROR TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 63, Column = 7 \n  Program unit \"FUNCTION_TEST\" is defined as a FUNCTION at line 1 (/global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90), but is defined or referenced as a SUBROUTINE here.\n\n\nftn-1293 ftn: ERROR TEST2, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 116, Column = 9 \n  Program unit \"FUNCTION_TEST_DEV_ONLY\" is defined as a FUNCTION at line 16 (/global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90), but is defined or referenced as a SUBROUTINE here.\n\n\nftn-1293 ftn: ERROR TEST3, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 178, Column = 9 \n  Program unit \"FUNCTION_TEST_DEV_ONLY\" is defined as a FUNCTION at line 16 (/global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90), but is defined or referenced as a SUBROUTINE here.\n\nCray Fortran : Version 14.0.1 (20220526224428_3a8780657c742829e80f36338fb6ec6578642bb7)\nCray Fortran : Compile time:  0.0099 seconds\nCray Fortran : 288 source lines\nCray Fortran : 5 errors, 2 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11539120199449826
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/declare_function_scope_copyin.F90/declare_function_scope_copyin.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90",
                    "config": 1,
                    "errors": "\n\nftn-287 ftn: WARNING FUNCTION_TEST, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 1, Column = 10 \n  The result of function name \"FUNCTION_TEST\" in the function subprogram is not defined.\n\n\nftn-1725 ftn: ERROR FUNCTION_TEST, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 7, Column = 25 \n  Unexpected syntax while parsing the DIRECTIVE statement : \")\" was expected but found \"(\".\n\n\nftn-287 ftn: WARNING FUNCTION_TEST_DEV_ONLY, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 16, Column = 10 \n  The result of function name \"FUNCTION_TEST_DEV_ONLY\" in the function subprogram is not defined.\n\n\nftn-1725 ftn: ERROR FUNCTION_TEST_DEV_ONLY, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 22, Column = 25 \n  Unexpected syntax while parsing the DIRECTIVE statement : \")\" was expected but found \"(\".\n\n\nftn-1293 ftn: ERROR TEST2, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 116, Column = 9 \n  Program unit \"FUNCTION_TEST_DEV_ONLY\" is defined as a FUNCTION at line 16 (/global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90), but is defined or referenced as a SUBROUTINE here.\n\n\nftn-1293 ftn: ERROR TEST3, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 178, Column = 9 \n  Program unit \"FUNCTION_TEST_DEV_ONLY\" is defined as a FUNCTION at line 16 (/global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90), but is defined or referenced as a SUBROUTINE here.\n\nCray Fortran : Version 14.0.1 (20220526224428_3a8780657c742829e80f36338fb6ec6578642bb7)\nCray Fortran : Compile time:  0.0086 seconds\nCray Fortran : 279 source lines\nCray Fortran : 4 errors, 2 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11558996800158639
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT2 -o /global/u1/j/jarmusch/OpenACCV-V/build/declare_function_scope_copyin.F90/declare_function_scope_copyin.F902 /global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90",
                    "config": 1,
                    "errors": "\n\nftn-287 ftn: WARNING FUNCTION_TEST, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 1, Column = 10 \n  The result of function name \"FUNCTION_TEST\" in the function subprogram is not defined.\n\n\nftn-1725 ftn: ERROR FUNCTION_TEST, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 7, Column = 25 \n  Unexpected syntax while parsing the DIRECTIVE statement : \")\" was expected but found \"(\".\n\n\nftn-287 ftn: WARNING FUNCTION_TEST_DEV_ONLY, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 16, Column = 10 \n  The result of function name \"FUNCTION_TEST_DEV_ONLY\" in the function subprogram is not defined.\n\n\nftn-1725 ftn: ERROR FUNCTION_TEST_DEV_ONLY, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 22, Column = 25 \n  Unexpected syntax while parsing the DIRECTIVE statement : \")\" was expected but found \"(\".\n\n\nftn-1293 ftn: ERROR TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 63, Column = 7 \n  Program unit \"FUNCTION_TEST\" is defined as a FUNCTION at line 1 (/global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90), but is defined or referenced as a SUBROUTINE here.\n\n\nftn-1293 ftn: ERROR TEST3, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 178, Column = 9 \n  Program unit \"FUNCTION_TEST_DEV_ONLY\" is defined as a FUNCTION at line 16 (/global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90), but is defined or referenced as a SUBROUTINE here.\n\nCray Fortran : Version 14.0.1 (20220526224428_3a8780657c742829e80f36338fb6ec6578642bb7)\nCray Fortran : Compile time:  0.0085 seconds\nCray Fortran : 279 source lines\nCray Fortran : 4 errors, 2 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11542589000600856
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/declare_function_scope_copyin.F90/declare_function_scope_copyin.F903 /global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90",
                    "config": 1,
                    "errors": "\n\nftn-287 ftn: WARNING FUNCTION_TEST, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 1, Column = 10 \n  The result of function name \"FUNCTION_TEST\" in the function subprogram is not defined.\n\n\nftn-1725 ftn: ERROR FUNCTION_TEST, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 7, Column = 25 \n  Unexpected syntax while parsing the DIRECTIVE statement : \")\" was expected but found \"(\".\n\n\nftn-287 ftn: WARNING FUNCTION_TEST_DEV_ONLY, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 16, Column = 10 \n  The result of function name \"FUNCTION_TEST_DEV_ONLY\" in the function subprogram is not defined.\n\n\nftn-1725 ftn: ERROR FUNCTION_TEST_DEV_ONLY, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 22, Column = 25 \n  Unexpected syntax while parsing the DIRECTIVE statement : \")\" was expected but found \"(\".\n\n\nftn-1293 ftn: ERROR TEST2, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 116, Column = 9 \n  Program unit \"FUNCTION_TEST_DEV_ONLY\" is defined as a FUNCTION at line 16 (/global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90), but is defined or referenced as a SUBROUTINE here.\n\n\nftn-1293 ftn: ERROR TEST3, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 178, Column = 9 \n  Program unit \"FUNCTION_TEST_DEV_ONLY\" is defined as a FUNCTION at line 16 (/global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90), but is defined or referenced as a SUBROUTINE here.\n\nCray Fortran : Version 14.0.1 (20220526224428_3a8780657c742829e80f36338fb6ec6578642bb7)\nCray Fortran : Compile time:  0.0082 seconds\nCray Fortran : 279 source lines\nCray Fortran : 4 errors, 2 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11538842700247187
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT3 -o /global/u1/j/jarmusch/OpenACCV-V/build/declare_function_scope_copyin.F90/declare_function_scope_copyin.F904 /global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90",
                    "config": 1,
                    "errors": "\n\nftn-287 ftn: WARNING FUNCTION_TEST, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 1, Column = 10 \n  The result of function name \"FUNCTION_TEST\" in the function subprogram is not defined.\n\n\nftn-1725 ftn: ERROR FUNCTION_TEST, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 7, Column = 25 \n  Unexpected syntax while parsing the DIRECTIVE statement : \")\" was expected but found \"(\".\n\n\nftn-287 ftn: WARNING FUNCTION_TEST_DEV_ONLY, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 16, Column = 10 \n  The result of function name \"FUNCTION_TEST_DEV_ONLY\" in the function subprogram is not defined.\n\n\nftn-1725 ftn: ERROR FUNCTION_TEST_DEV_ONLY, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 22, Column = 25 \n  Unexpected syntax while parsing the DIRECTIVE statement : \")\" was expected but found \"(\".\n\n\nftn-1293 ftn: ERROR TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 63, Column = 7 \n  Program unit \"FUNCTION_TEST\" is defined as a FUNCTION at line 1 (/global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90), but is defined or referenced as a SUBROUTINE here.\n\n\nftn-1293 ftn: ERROR TEST2, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 116, Column = 9 \n  Program unit \"FUNCTION_TEST_DEV_ONLY\" is defined as a FUNCTION at line 16 (/global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90), but is defined or referenced as a SUBROUTINE here.\n\nCray Fortran : Version 14.0.1 (20220526224428_3a8780657c742829e80f36338fb6ec6578642bb7)\nCray Fortran : Compile time:  0.0087 seconds\nCray Fortran : 279 source lines\nCray Fortran : 4 errors, 2 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11546775100578088
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/declare_function_scope_copyin.F90/declare_function_scope_copyin.F905 /global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90",
                    "config": 1,
                    "errors": "\n\nftn-287 ftn: WARNING FUNCTION_TEST, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 1, Column = 10 \n  The result of function name \"FUNCTION_TEST\" in the function subprogram is not defined.\n\n\nftn-1725 ftn: ERROR FUNCTION_TEST, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 7, Column = 25 \n  Unexpected syntax while parsing the DIRECTIVE statement : \")\" was expected but found \"(\".\n\n\nftn-287 ftn: WARNING FUNCTION_TEST_DEV_ONLY, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 16, Column = 10 \n  The result of function name \"FUNCTION_TEST_DEV_ONLY\" in the function subprogram is not defined.\n\n\nftn-1725 ftn: ERROR FUNCTION_TEST_DEV_ONLY, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 22, Column = 25 \n  Unexpected syntax while parsing the DIRECTIVE statement : \")\" was expected but found \"(\".\n\n\nftn-1293 ftn: ERROR TEST2, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 116, Column = 9 \n  Program unit \"FUNCTION_TEST_DEV_ONLY\" is defined as a FUNCTION at line 16 (/global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90), but is defined or referenced as a SUBROUTINE here.\n\n\nftn-1293 ftn: ERROR TEST3, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 178, Column = 9 \n  Program unit \"FUNCTION_TEST_DEV_ONLY\" is defined as a FUNCTION at line 16 (/global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90), but is defined or referenced as a SUBROUTINE here.\n\nCray Fortran : Version 14.0.1 (20220526224428_3a8780657c742829e80f36338fb6ec6578642bb7)\nCray Fortran : Compile time:  0.0082 seconds\nCray Fortran : 279 source lines\nCray Fortran : 4 errors, 2 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11586662199988496
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT2 -o /global/u1/j/jarmusch/OpenACCV-V/build/declare_function_scope_copyin.F90/declare_function_scope_copyin.F906 /global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90",
                    "config": 1,
                    "errors": "\n\nftn-287 ftn: WARNING FUNCTION_TEST, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 1, Column = 10 \n  The result of function name \"FUNCTION_TEST\" in the function subprogram is not defined.\n\n\nftn-1725 ftn: ERROR FUNCTION_TEST, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 7, Column = 25 \n  Unexpected syntax while parsing the DIRECTIVE statement : \")\" was expected but found \"(\".\n\n\nftn-287 ftn: WARNING FUNCTION_TEST_DEV_ONLY, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 16, Column = 10 \n  The result of function name \"FUNCTION_TEST_DEV_ONLY\" in the function subprogram is not defined.\n\n\nftn-1725 ftn: ERROR FUNCTION_TEST_DEV_ONLY, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 22, Column = 25 \n  Unexpected syntax while parsing the DIRECTIVE statement : \")\" was expected but found \"(\".\n\n\nftn-1293 ftn: ERROR TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 63, Column = 7 \n  Program unit \"FUNCTION_TEST\" is defined as a FUNCTION at line 1 (/global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90), but is defined or referenced as a SUBROUTINE here.\n\n\nftn-1293 ftn: ERROR TEST3, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 178, Column = 9 \n  Program unit \"FUNCTION_TEST_DEV_ONLY\" is defined as a FUNCTION at line 16 (/global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90), but is defined or referenced as a SUBROUTINE here.\n\nCray Fortran : Version 14.0.1 (20220526224428_3a8780657c742829e80f36338fb6ec6578642bb7)\nCray Fortran : Compile time:  0.0089 seconds\nCray Fortran : 279 source lines\nCray Fortran : 4 errors, 2 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11557701200945303
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/declare_function_scope_copyin.F90/declare_function_scope_copyin.F907 /global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90",
                    "config": 1,
                    "errors": "\n\nftn-287 ftn: WARNING FUNCTION_TEST, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 1, Column = 10 \n  The result of function name \"FUNCTION_TEST\" in the function subprogram is not defined.\n\n\nftn-1725 ftn: ERROR FUNCTION_TEST, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 7, Column = 25 \n  Unexpected syntax while parsing the DIRECTIVE statement : \")\" was expected but found \"(\".\n\n\nftn-287 ftn: WARNING FUNCTION_TEST_DEV_ONLY, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 16, Column = 10 \n  The result of function name \"FUNCTION_TEST_DEV_ONLY\" in the function subprogram is not defined.\n\n\nftn-1725 ftn: ERROR FUNCTION_TEST_DEV_ONLY, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 22, Column = 25 \n  Unexpected syntax while parsing the DIRECTIVE statement : \")\" was expected but found \"(\".\n\n\nftn-1293 ftn: ERROR TEST2, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 116, Column = 9 \n  Program unit \"FUNCTION_TEST_DEV_ONLY\" is defined as a FUNCTION at line 16 (/global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90), but is defined or referenced as a SUBROUTINE here.\n\n\nftn-1293 ftn: ERROR TEST3, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 178, Column = 9 \n  Program unit \"FUNCTION_TEST_DEV_ONLY\" is defined as a FUNCTION at line 16 (/global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90), but is defined or referenced as a SUBROUTINE here.\n\nCray Fortran : Version 14.0.1 (20220526224428_3a8780657c742829e80f36338fb6ec6578642bb7)\nCray Fortran : Compile time:  0.0083 seconds\nCray Fortran : 279 source lines\nCray Fortran : 4 errors, 2 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11502095800824463
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "declare_function_scope_copyout.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/declare_function_scope_copyout.F90/declare_function_scope_copyout.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90",
                    "config": 1,
                    "errors": "\n\nftn-287 ftn: WARNING COPYOUT_TEST, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90, Line = 1, Column = 10 \n  The result of function name \"COPYOUT_TEST\" in the function subprogram is not defined.\n\n\nftn-1725 ftn: ERROR COPYOUT_TEST, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90, Line = 7, Column = 26 \n  Unexpected syntax while parsing the DIRECTIVE statement : \")\" was expected but found \"(\".\n\n\nftn-1293 ftn: ERROR TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90, Line = 46, Column = 7 \n  Program unit \"COPYOUT_TEST\" is defined as a FUNCTION at line 1 (/global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90), but is defined or referenced as a SUBROUTINE here.\n\n\nftn-1293 ftn: ERROR TEST2, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90, Line = 96, Column = 9 \n  Program unit \"COPYOUT_TEST\" is defined as a FUNCTION at line 1 (/global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90), but is defined or referenced as a SUBROUTINE here.\n\n\nftn-1293 ftn: ERROR TEST3, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90, Line = 148, Column = 11 \n  Program unit \"COPYOUT_TEST\" is defined as a FUNCTION at line 1 (/global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90), but is defined or referenced as a SUBROUTINE here.\n\nCray Fortran : Version 14.0.1 (20220526224428_3a8780657c742829e80f36338fb6ec6578642bb7)\nCray Fortran : Compile time:  0.0097 seconds\nCray Fortran : 247 source lines\nCray Fortran : 4 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11550082500616554
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/declare_function_scope_copyout.F90/declare_function_scope_copyout.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90",
                    "config": 1,
                    "errors": "\n\nftn-287 ftn: WARNING COPYOUT_TEST, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90, Line = 1, Column = 10 \n  The result of function name \"COPYOUT_TEST\" in the function subprogram is not defined.\n\n\nftn-1725 ftn: ERROR COPYOUT_TEST, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90, Line = 7, Column = 26 \n  Unexpected syntax while parsing the DIRECTIVE statement : \")\" was expected but found \"(\".\n\n\nftn-1293 ftn: ERROR TEST2, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90, Line = 96, Column = 9 \n  Program unit \"COPYOUT_TEST\" is defined as a FUNCTION at line 1 (/global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90), but is defined or referenced as a SUBROUTINE here.\n\n\nftn-1293 ftn: ERROR TEST3, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90, Line = 148, Column = 11 \n  Program unit \"COPYOUT_TEST\" is defined as a FUNCTION at line 1 (/global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90), but is defined or referenced as a SUBROUTINE here.\n\nCray Fortran : Version 14.0.1 (20220526224428_3a8780657c742829e80f36338fb6ec6578642bb7)\nCray Fortran : Compile time:  0.0073 seconds\nCray Fortran : 238 source lines\nCray Fortran : 3 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11551384899939876
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT2 -o /global/u1/j/jarmusch/OpenACCV-V/build/declare_function_scope_copyout.F90/declare_function_scope_copyout.F902 /global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90",
                    "config": 1,
                    "errors": "\n\nftn-287 ftn: WARNING COPYOUT_TEST, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90, Line = 1, Column = 10 \n  The result of function name \"COPYOUT_TEST\" in the function subprogram is not defined.\n\n\nftn-1725 ftn: ERROR COPYOUT_TEST, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90, Line = 7, Column = 26 \n  Unexpected syntax while parsing the DIRECTIVE statement : \")\" was expected but found \"(\".\n\n\nftn-1293 ftn: ERROR TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90, Line = 46, Column = 7 \n  Program unit \"COPYOUT_TEST\" is defined as a FUNCTION at line 1 (/global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90), but is defined or referenced as a SUBROUTINE here.\n\n\nftn-1293 ftn: ERROR TEST3, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90, Line = 148, Column = 11 \n  Program unit \"COPYOUT_TEST\" is defined as a FUNCTION at line 1 (/global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90), but is defined or referenced as a SUBROUTINE here.\n\nCray Fortran : Version 14.0.1 (20220526224428_3a8780657c742829e80f36338fb6ec6578642bb7)\nCray Fortran : Compile time:  0.0073 seconds\nCray Fortran : 238 source lines\nCray Fortran : 3 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11543786300171632
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/declare_function_scope_copyout.F90/declare_function_scope_copyout.F903 /global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90",
                    "config": 1,
                    "errors": "\n\nftn-287 ftn: WARNING COPYOUT_TEST, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90, Line = 1, Column = 10 \n  The result of function name \"COPYOUT_TEST\" in the function subprogram is not defined.\n\n\nftn-1725 ftn: ERROR COPYOUT_TEST, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90, Line = 7, Column = 26 \n  Unexpected syntax while parsing the DIRECTIVE statement : \")\" was expected but found \"(\".\n\n\nftn-1293 ftn: ERROR TEST2, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90, Line = 96, Column = 9 \n  Program unit \"COPYOUT_TEST\" is defined as a FUNCTION at line 1 (/global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90), but is defined or referenced as a SUBROUTINE here.\n\n\nftn-1293 ftn: ERROR TEST3, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90, Line = 148, Column = 11 \n  Program unit \"COPYOUT_TEST\" is defined as a FUNCTION at line 1 (/global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90), but is defined or referenced as a SUBROUTINE here.\n\nCray Fortran : Version 14.0.1 (20220526224428_3a8780657c742829e80f36338fb6ec6578642bb7)\nCray Fortran : Compile time:  0.0080 seconds\nCray Fortran : 238 source lines\nCray Fortran : 3 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11521733700647019
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT3 -o /global/u1/j/jarmusch/OpenACCV-V/build/declare_function_scope_copyout.F90/declare_function_scope_copyout.F904 /global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90",
                    "config": 1,
                    "errors": "\n\nftn-287 ftn: WARNING COPYOUT_TEST, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90, Line = 1, Column = 10 \n  The result of function name \"COPYOUT_TEST\" in the function subprogram is not defined.\n\n\nftn-1725 ftn: ERROR COPYOUT_TEST, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90, Line = 7, Column = 26 \n  Unexpected syntax while parsing the DIRECTIVE statement : \")\" was expected but found \"(\".\n\n\nftn-1293 ftn: ERROR TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90, Line = 46, Column = 7 \n  Program unit \"COPYOUT_TEST\" is defined as a FUNCTION at line 1 (/global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90), but is defined or referenced as a SUBROUTINE here.\n\n\nftn-1293 ftn: ERROR TEST2, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90, Line = 96, Column = 9 \n  Program unit \"COPYOUT_TEST\" is defined as a FUNCTION at line 1 (/global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90), but is defined or referenced as a SUBROUTINE here.\n\nCray Fortran : Version 14.0.1 (20220526224428_3a8780657c742829e80f36338fb6ec6578642bb7)\nCray Fortran : Compile time:  0.0077 seconds\nCray Fortran : 238 source lines\nCray Fortran : 3 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11559840200061444
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/declare_function_scope_copyout.F90/declare_function_scope_copyout.F905 /global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90",
                    "config": 1,
                    "errors": "\n\nftn-287 ftn: WARNING COPYOUT_TEST, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90, Line = 1, Column = 10 \n  The result of function name \"COPYOUT_TEST\" in the function subprogram is not defined.\n\n\nftn-1725 ftn: ERROR COPYOUT_TEST, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90, Line = 7, Column = 26 \n  Unexpected syntax while parsing the DIRECTIVE statement : \")\" was expected but found \"(\".\n\n\nftn-1293 ftn: ERROR TEST2, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90, Line = 96, Column = 9 \n  Program unit \"COPYOUT_TEST\" is defined as a FUNCTION at line 1 (/global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90), but is defined or referenced as a SUBROUTINE here.\n\n\nftn-1293 ftn: ERROR TEST3, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90, Line = 148, Column = 11 \n  Program unit \"COPYOUT_TEST\" is defined as a FUNCTION at line 1 (/global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90), but is defined or referenced as a SUBROUTINE here.\n\nCray Fortran : Version 14.0.1 (20220526224428_3a8780657c742829e80f36338fb6ec6578642bb7)\nCray Fortran : Compile time:  0.0077 seconds\nCray Fortran : 238 source lines\nCray Fortran : 3 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11593955199350603
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT2 -o /global/u1/j/jarmusch/OpenACCV-V/build/declare_function_scope_copyout.F90/declare_function_scope_copyout.F906 /global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90",
                    "config": 1,
                    "errors": "\n\nftn-287 ftn: WARNING COPYOUT_TEST, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90, Line = 1, Column = 10 \n  The result of function name \"COPYOUT_TEST\" in the function subprogram is not defined.\n\n\nftn-1725 ftn: ERROR COPYOUT_TEST, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90, Line = 7, Column = 26 \n  Unexpected syntax while parsing the DIRECTIVE statement : \")\" was expected but found \"(\".\n\n\nftn-1293 ftn: ERROR TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90, Line = 46, Column = 7 \n  Program unit \"COPYOUT_TEST\" is defined as a FUNCTION at line 1 (/global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90), but is defined or referenced as a SUBROUTINE here.\n\n\nftn-1293 ftn: ERROR TEST3, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90, Line = 148, Column = 11 \n  Program unit \"COPYOUT_TEST\" is defined as a FUNCTION at line 1 (/global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90), but is defined or referenced as a SUBROUTINE here.\n\nCray Fortran : Version 14.0.1 (20220526224428_3a8780657c742829e80f36338fb6ec6578642bb7)\nCray Fortran : Compile time:  0.0076 seconds\nCray Fortran : 238 source lines\nCray Fortran : 3 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11546295099833515
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/declare_function_scope_copyout.F90/declare_function_scope_copyout.F907 /global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90",
                    "config": 1,
                    "errors": "\n\nftn-287 ftn: WARNING COPYOUT_TEST, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90, Line = 1, Column = 10 \n  The result of function name \"COPYOUT_TEST\" in the function subprogram is not defined.\n\n\nftn-1725 ftn: ERROR COPYOUT_TEST, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90, Line = 7, Column = 26 \n  Unexpected syntax while parsing the DIRECTIVE statement : \")\" was expected but found \"(\".\n\n\nftn-1293 ftn: ERROR TEST2, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90, Line = 96, Column = 9 \n  Program unit \"COPYOUT_TEST\" is defined as a FUNCTION at line 1 (/global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90), but is defined or referenced as a SUBROUTINE here.\n\n\nftn-1293 ftn: ERROR TEST3, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90, Line = 148, Column = 11 \n  Program unit \"COPYOUT_TEST\" is defined as a FUNCTION at line 1 (/global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90), but is defined or referenced as a SUBROUTINE here.\n\nCray Fortran : Version 14.0.1 (20220526224428_3a8780657c742829e80f36338fb6ec6578642bb7)\nCray Fortran : Compile time:  0.0079 seconds\nCray Fortran : 238 source lines\nCray Fortran : 3 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11565920100838412
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "declare_function_scope_create.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/declare_function_scope_create.F90/declare_function_scope_create.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90",
                    "config": 1,
                    "errors": "\n\nftn-1725 ftn: ERROR CREATE_TEST, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 7, Column = 25 \n  Unexpected syntax while parsing the DIRECTIVE statement : \")\" was expected but found \"(\".\n\n\nftn-283 ftn: ERROR CREATE_TEST, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 18, Column = 14 \n  The name specified on the END FUNCTION statement must match the FUNCTION name \"CREATE_TEST\".\n\n\nftn-1725 ftn: ERROR CREATE_AS_PRESENT, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 26, Column = 25 \n  Unexpected syntax while parsing the DIRECTIVE statement : \")\" was expected but found \"(\".\n\n\nftn-283 ftn: ERROR CREATE_AS_PRESENT, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 37, Column = 14 \n  The name specified on the END FUNCTION statement must match the FUNCTION name \"CREATE_AS_PRESENT\".\n\n\nftn-375 ftn: WARNING TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 70, Column = 24 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 70, Column = 30 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 70, Column = 36 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 70, Column = 42 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST2, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 120, Column = 30 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST2, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 120, Column = 36 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST2, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 120, Column = 42 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST2, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 120, Column = 48 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST3, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 174, Column = 34 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST3, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 174, Column = 40 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST3, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 174, Column = 46 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST3, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 174, Column = 52 \n  The number of subscripts is smaller than the number of declared dimensions.\n\nCray Fortran : Version 14.0.1 (20220526224428_3a8780657c742829e80f36338fb6ec6578642bb7)\nCray Fortran : Compile time:  0.0111 seconds\nCray Fortran : 276 source lines\nCray Fortran : 4 errors, 12 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11584442699677311
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/declare_function_scope_create.F90/declare_function_scope_create.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90",
                    "config": 1,
                    "errors": "\n\nftn-1725 ftn: ERROR CREATE_TEST, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 7, Column = 25 \n  Unexpected syntax while parsing the DIRECTIVE statement : \")\" was expected but found \"(\".\n\n\nftn-283 ftn: ERROR CREATE_TEST, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 18, Column = 14 \n  The name specified on the END FUNCTION statement must match the FUNCTION name \"CREATE_TEST\".\n\n\nftn-1725 ftn: ERROR CREATE_AS_PRESENT, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 26, Column = 25 \n  Unexpected syntax while parsing the DIRECTIVE statement : \")\" was expected but found \"(\".\n\n\nftn-283 ftn: ERROR CREATE_AS_PRESENT, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 37, Column = 14 \n  The name specified on the END FUNCTION statement must match the FUNCTION name \"CREATE_AS_PRESENT\".\n\n\nftn-375 ftn: WARNING TEST2, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 120, Column = 30 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST2, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 120, Column = 36 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST2, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 120, Column = 42 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST2, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 120, Column = 48 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST3, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 174, Column = 34 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST3, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 174, Column = 40 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST3, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 174, Column = 46 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST3, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 174, Column = 52 \n  The number of subscripts is smaller than the number of declared dimensions.\n\nCray Fortran : Version 14.0.1 (20220526224428_3a8780657c742829e80f36338fb6ec6578642bb7)\nCray Fortran : Compile time:  0.0093 seconds\nCray Fortran : 267 source lines\nCray Fortran : 4 errors, 8 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11561317100131419
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT2 -o /global/u1/j/jarmusch/OpenACCV-V/build/declare_function_scope_create.F90/declare_function_scope_create.F902 /global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90",
                    "config": 1,
                    "errors": "\n\nftn-1725 ftn: ERROR CREATE_TEST, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 7, Column = 25 \n  Unexpected syntax while parsing the DIRECTIVE statement : \")\" was expected but found \"(\".\n\n\nftn-283 ftn: ERROR CREATE_TEST, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 18, Column = 14 \n  The name specified on the END FUNCTION statement must match the FUNCTION name \"CREATE_TEST\".\n\n\nftn-1725 ftn: ERROR CREATE_AS_PRESENT, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 26, Column = 25 \n  Unexpected syntax while parsing the DIRECTIVE statement : \")\" was expected but found \"(\".\n\n\nftn-283 ftn: ERROR CREATE_AS_PRESENT, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 37, Column = 14 \n  The name specified on the END FUNCTION statement must match the FUNCTION name \"CREATE_AS_PRESENT\".\n\n\nftn-375 ftn: WARNING TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 70, Column = 24 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 70, Column = 30 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 70, Column = 36 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 70, Column = 42 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST3, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 174, Column = 34 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST3, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 174, Column = 40 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST3, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 174, Column = 46 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST3, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 174, Column = 52 \n  The number of subscripts is smaller than the number of declared dimensions.\n\nCray Fortran : Version 14.0.1 (20220526224428_3a8780657c742829e80f36338fb6ec6578642bb7)\nCray Fortran : Compile time:  0.0100 seconds\nCray Fortran : 267 source lines\nCray Fortran : 4 errors, 8 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11545062699588016
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/declare_function_scope_create.F90/declare_function_scope_create.F903 /global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90",
                    "config": 1,
                    "errors": "\n\nftn-1725 ftn: ERROR CREATE_TEST, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 7, Column = 25 \n  Unexpected syntax while parsing the DIRECTIVE statement : \")\" was expected but found \"(\".\n\n\nftn-283 ftn: ERROR CREATE_TEST, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 18, Column = 14 \n  The name specified on the END FUNCTION statement must match the FUNCTION name \"CREATE_TEST\".\n\n\nftn-1725 ftn: ERROR CREATE_AS_PRESENT, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 26, Column = 25 \n  Unexpected syntax while parsing the DIRECTIVE statement : \")\" was expected but found \"(\".\n\n\nftn-283 ftn: ERROR CREATE_AS_PRESENT, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 37, Column = 14 \n  The name specified on the END FUNCTION statement must match the FUNCTION name \"CREATE_AS_PRESENT\".\n\n\nftn-375 ftn: WARNING TEST2, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 120, Column = 30 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST2, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 120, Column = 36 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST2, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 120, Column = 42 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST2, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 120, Column = 48 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST3, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 174, Column = 34 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST3, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 174, Column = 40 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST3, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 174, Column = 46 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST3, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 174, Column = 52 \n  The number of subscripts is smaller than the number of declared dimensions.\n\nCray Fortran : Version 14.0.1 (20220526224428_3a8780657c742829e80f36338fb6ec6578642bb7)\nCray Fortran : Compile time:  0.0100 seconds\nCray Fortran : 267 source lines\nCray Fortran : 4 errors, 8 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.1155331959889736
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT3 -o /global/u1/j/jarmusch/OpenACCV-V/build/declare_function_scope_create.F90/declare_function_scope_create.F904 /global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90",
                    "config": 1,
                    "errors": "\n\nftn-1725 ftn: ERROR CREATE_TEST, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 7, Column = 25 \n  Unexpected syntax while parsing the DIRECTIVE statement : \")\" was expected but found \"(\".\n\n\nftn-283 ftn: ERROR CREATE_TEST, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 18, Column = 14 \n  The name specified on the END FUNCTION statement must match the FUNCTION name \"CREATE_TEST\".\n\n\nftn-1725 ftn: ERROR CREATE_AS_PRESENT, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 26, Column = 25 \n  Unexpected syntax while parsing the DIRECTIVE statement : \")\" was expected but found \"(\".\n\n\nftn-283 ftn: ERROR CREATE_AS_PRESENT, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 37, Column = 14 \n  The name specified on the END FUNCTION statement must match the FUNCTION name \"CREATE_AS_PRESENT\".\n\n\nftn-375 ftn: WARNING TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 70, Column = 24 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 70, Column = 30 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 70, Column = 36 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 70, Column = 42 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST2, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 120, Column = 30 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST2, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 120, Column = 36 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST2, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 120, Column = 42 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST2, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 120, Column = 48 \n  The number of subscripts is smaller than the number of declared dimensions.\n\nCray Fortran : Version 14.0.1 (20220526224428_3a8780657c742829e80f36338fb6ec6578642bb7)\nCray Fortran : Compile time:  0.0096 seconds\nCray Fortran : 267 source lines\nCray Fortran : 4 errors, 8 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11501919399597682
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/declare_function_scope_create.F90/declare_function_scope_create.F905 /global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90",
                    "config": 1,
                    "errors": "\n\nftn-1725 ftn: ERROR CREATE_TEST, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 7, Column = 25 \n  Unexpected syntax while parsing the DIRECTIVE statement : \")\" was expected but found \"(\".\n\n\nftn-283 ftn: ERROR CREATE_TEST, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 18, Column = 14 \n  The name specified on the END FUNCTION statement must match the FUNCTION name \"CREATE_TEST\".\n\n\nftn-1725 ftn: ERROR CREATE_AS_PRESENT, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 26, Column = 25 \n  Unexpected syntax while parsing the DIRECTIVE statement : \")\" was expected but found \"(\".\n\n\nftn-283 ftn: ERROR CREATE_AS_PRESENT, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 37, Column = 14 \n  The name specified on the END FUNCTION statement must match the FUNCTION name \"CREATE_AS_PRESENT\".\n\n\nftn-375 ftn: WARNING TEST2, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 120, Column = 30 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST2, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 120, Column = 36 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST2, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 120, Column = 42 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST2, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 120, Column = 48 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST3, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 174, Column = 34 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST3, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 174, Column = 40 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST3, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 174, Column = 46 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST3, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 174, Column = 52 \n  The number of subscripts is smaller than the number of declared dimensions.\n\nCray Fortran : Version 14.0.1 (20220526224428_3a8780657c742829e80f36338fb6ec6578642bb7)\nCray Fortran : Compile time:  0.0091 seconds\nCray Fortran : 267 source lines\nCray Fortran : 4 errors, 8 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11584472900722176
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT2 -o /global/u1/j/jarmusch/OpenACCV-V/build/declare_function_scope_create.F90/declare_function_scope_create.F906 /global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90",
                    "config": 1,
                    "errors": "\n\nftn-1725 ftn: ERROR CREATE_TEST, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 7, Column = 25 \n  Unexpected syntax while parsing the DIRECTIVE statement : \")\" was expected but found \"(\".\n\n\nftn-283 ftn: ERROR CREATE_TEST, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 18, Column = 14 \n  The name specified on the END FUNCTION statement must match the FUNCTION name \"CREATE_TEST\".\n\n\nftn-1725 ftn: ERROR CREATE_AS_PRESENT, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 26, Column = 25 \n  Unexpected syntax while parsing the DIRECTIVE statement : \")\" was expected but found \"(\".\n\n\nftn-283 ftn: ERROR CREATE_AS_PRESENT, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 37, Column = 14 \n  The name specified on the END FUNCTION statement must match the FUNCTION name \"CREATE_AS_PRESENT\".\n\n\nftn-375 ftn: WARNING TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 70, Column = 24 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 70, Column = 30 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 70, Column = 36 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 70, Column = 42 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST3, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 174, Column = 34 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST3, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 174, Column = 40 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST3, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 174, Column = 46 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST3, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 174, Column = 52 \n  The number of subscripts is smaller than the number of declared dimensions.\n\nCray Fortran : Version 14.0.1 (20220526224428_3a8780657c742829e80f36338fb6ec6578642bb7)\nCray Fortran : Compile time:  0.0094 seconds\nCray Fortran : 267 source lines\nCray Fortran : 4 errors, 8 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.1161962080077501
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/declare_function_scope_create.F90/declare_function_scope_create.F907 /global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90",
                    "config": 1,
                    "errors": "\n\nftn-1725 ftn: ERROR CREATE_TEST, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 7, Column = 25 \n  Unexpected syntax while parsing the DIRECTIVE statement : \")\" was expected but found \"(\".\n\n\nftn-283 ftn: ERROR CREATE_TEST, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 18, Column = 14 \n  The name specified on the END FUNCTION statement must match the FUNCTION name \"CREATE_TEST\".\n\n\nftn-1725 ftn: ERROR CREATE_AS_PRESENT, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 26, Column = 25 \n  Unexpected syntax while parsing the DIRECTIVE statement : \")\" was expected but found \"(\".\n\n\nftn-283 ftn: ERROR CREATE_AS_PRESENT, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 37, Column = 14 \n  The name specified on the END FUNCTION statement must match the FUNCTION name \"CREATE_AS_PRESENT\".\n\n\nftn-375 ftn: WARNING TEST2, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 120, Column = 30 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST2, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 120, Column = 36 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST2, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 120, Column = 42 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST2, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 120, Column = 48 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST3, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 174, Column = 34 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST3, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 174, Column = 40 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST3, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 174, Column = 46 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST3, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 174, Column = 52 \n  The number of subscripts is smaller than the number of declared dimensions.\n\nCray Fortran : Version 14.0.1 (20220526224428_3a8780657c742829e80f36338fb6ec6578642bb7)\nCray Fortran : Compile time:  0.0088 seconds\nCray Fortran : 267 source lines\nCray Fortran : 4 errors, 8 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11529041800531559
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "declare_function_scope_present.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/declare_function_scope_present.F90/declare_function_scope_present.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_present.F90",
                    "config": 1,
                    "errors": "\n\nftn-1725 ftn: ERROR PRESENT, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_present.F90, Line = 7, Column = 26 \n  Unexpected syntax while parsing the DIRECTIVE statement : \")\" was expected but found \"(\".\n\n\nftn-283 ftn: ERROR PRESENT, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_present.F90, Line = 18, Column = 14 \n  The name specified on the END FUNCTION statement must match the FUNCTION name \"PRESENT\".\n\n\nftn-375 ftn: WARNING TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_present.F90, Line = 52, Column = 22 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_present.F90, Line = 52, Column = 28 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_present.F90, Line = 52, Column = 34 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_present.F90, Line = 52, Column = 40 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST2, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_present.F90, Line = 107, Column = 24 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST2, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_present.F90, Line = 107, Column = 30 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST2, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_present.F90, Line = 107, Column = 36 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST2, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_present.F90, Line = 107, Column = 42 \n  The number of subscripts is smaller than the number of declared dimensions.\n\nCray Fortran : Version 14.0.1 (20220526224428_3a8780657c742829e80f36338fb6ec6578642bb7)\nCray Fortran : Compile time:  0.0084 seconds\nCray Fortran : 188 source lines\nCray Fortran : 2 errors, 8 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11543174101097975
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/declare_function_scope_present.F90/declare_function_scope_present.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_present.F90",
                    "config": 1,
                    "errors": "\n\nftn-1725 ftn: ERROR PRESENT, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_present.F90, Line = 7, Column = 26 \n  Unexpected syntax while parsing the DIRECTIVE statement : \")\" was expected but found \"(\".\n\n\nftn-283 ftn: ERROR PRESENT, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_present.F90, Line = 18, Column = 14 \n  The name specified on the END FUNCTION statement must match the FUNCTION name \"PRESENT\".\n\n\nftn-375 ftn: WARNING TEST2, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_present.F90, Line = 107, Column = 24 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST2, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_present.F90, Line = 107, Column = 30 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST2, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_present.F90, Line = 107, Column = 36 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST2, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_present.F90, Line = 107, Column = 42 \n  The number of subscripts is smaller than the number of declared dimensions.\n\nCray Fortran : Version 14.0.1 (20220526224428_3a8780657c742829e80f36338fb6ec6578642bb7)\nCray Fortran : Compile time:  0.0064 seconds\nCray Fortran : 179 source lines\nCray Fortran : 2 errors, 4 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11545122900861315
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT2 -o /global/u1/j/jarmusch/OpenACCV-V/build/declare_function_scope_present.F90/declare_function_scope_present.F902 /global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_present.F90",
                    "config": 1,
                    "errors": "\n\nftn-1725 ftn: ERROR PRESENT, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_present.F90, Line = 7, Column = 26 \n  Unexpected syntax while parsing the DIRECTIVE statement : \")\" was expected but found \"(\".\n\n\nftn-283 ftn: ERROR PRESENT, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_present.F90, Line = 18, Column = 14 \n  The name specified on the END FUNCTION statement must match the FUNCTION name \"PRESENT\".\n\n\nftn-375 ftn: WARNING TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_present.F90, Line = 52, Column = 22 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_present.F90, Line = 52, Column = 28 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_present.F90, Line = 52, Column = 34 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_present.F90, Line = 52, Column = 40 \n  The number of subscripts is smaller than the number of declared dimensions.\n\nCray Fortran : Version 14.0.1 (20220526224428_3a8780657c742829e80f36338fb6ec6578642bb7)\nCray Fortran : Compile time:  0.0058 seconds\nCray Fortran : 179 source lines\nCray Fortran : 2 errors, 4 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11566574400058016
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/declare_function_scope_present.F90/declare_function_scope_present.F903 /global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_present.F90",
                    "config": 1,
                    "errors": "\n\nftn-1725 ftn: ERROR PRESENT, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_present.F90, Line = 7, Column = 26 \n  Unexpected syntax while parsing the DIRECTIVE statement : \")\" was expected but found \"(\".\n\n\nftn-283 ftn: ERROR PRESENT, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_present.F90, Line = 18, Column = 14 \n  The name specified on the END FUNCTION statement must match the FUNCTION name \"PRESENT\".\n\n\nftn-375 ftn: WARNING TEST2, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_present.F90, Line = 107, Column = 24 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST2, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_present.F90, Line = 107, Column = 30 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST2, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_present.F90, Line = 107, Column = 36 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST2, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_present.F90, Line = 107, Column = 42 \n  The number of subscripts is smaller than the number of declared dimensions.\n\nCray Fortran : Version 14.0.1 (20220526224428_3a8780657c742829e80f36338fb6ec6578642bb7)\nCray Fortran : Compile time:  0.0062 seconds\nCray Fortran : 179 source lines\nCray Fortran : 2 errors, 4 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11573498700454365
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "enter_data_copyin_no_lower_bound.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/enter_data_copyin_no_lower_bound.F90/enter_data_copyin_no_lower_bound.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/enter_data_copyin_no_lower_bound.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11546961400017608
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/enter_data_copyin_no_lower_bound.F90/enter_data_copyin_no_lower_bound.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/enter_data_copyin_no_lower_bound.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11574187999940477
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "enter_data_create.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/enter_data_create.F90/enter_data_create.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/enter_data_create.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11463786699459888
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/enter_data_create.F90/enter_data_create.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/enter_data_create.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11600484899827279
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT2 -o /global/u1/j/jarmusch/OpenACCV-V/build/enter_data_create.F90/enter_data_create.F902 /global/u1/j/jarmusch/OpenACCV-V/Tests/enter_data_create.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11528360399825033
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/enter_data_create.F90/enter_data_create.F903 /global/u1/j/jarmusch/OpenACCV-V/Tests/enter_data_create.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11565400099789258
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT3 -o /global/u1/j/jarmusch/OpenACCV-V/build/enter_data_create.F90/enter_data_create.F904 /global/u1/j/jarmusch/OpenACCV-V/Tests/enter_data_create.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11564595399249811
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/enter_data_create.F90/enter_data_create.F905 /global/u1/j/jarmusch/OpenACCV-V/Tests/enter_data_create.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11542654100048821
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT2 -o /global/u1/j/jarmusch/OpenACCV-V/build/enter_data_create.F90/enter_data_create.F906 /global/u1/j/jarmusch/OpenACCV-V/Tests/enter_data_create.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11525845500000287
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/enter_data_create.F90/enter_data_create.F907 /global/u1/j/jarmusch/OpenACCV-V/Tests/enter_data_create.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11528681100753602
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "enter_data_create_no_lower_bound.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/enter_data_create_no_lower_bound.F90/enter_data_create_no_lower_bound.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/enter_data_create_no_lower_bound.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11572586899274029
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/enter_data_create_no_lower_bound.F90/enter_data_create_no_lower_bound.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/enter_data_create_no_lower_bound.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11588938599743415
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "enter_data_if.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -DT2 -DT3 -DT4 -DT5 -o /global/u1/j/jarmusch/OpenACCV-V/build/enter_data_if.F90/enter_data_if.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/enter_data_if.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1150081340019824
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT2 -DT3 -DT4 -DT5 -o /global/u1/j/jarmusch/OpenACCV-V/build/enter_data_if.F90/enter_data_if.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/enter_data_if.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11546352200093679
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -DT3 -DT4 -DT5 -o /global/u1/j/jarmusch/OpenACCV-V/build/enter_data_if.F90/enter_data_if.F902 /global/u1/j/jarmusch/OpenACCV-V/Tests/enter_data_if.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11569260600663256
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -DT2 -DT4 -DT5 -o /global/u1/j/jarmusch/OpenACCV-V/build/enter_data_if.F90/enter_data_if.F903 /global/u1/j/jarmusch/OpenACCV-V/Tests/enter_data_if.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11510441900463775
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -DT2 -DT3 -DT5 -o /global/u1/j/jarmusch/OpenACCV-V/build/enter_data_if.F90/enter_data_if.F904 /global/u1/j/jarmusch/OpenACCV-V/Tests/enter_data_if.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11554961900401395
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -DT2 -DT3 -DT4 -o /global/u1/j/jarmusch/OpenACCV-V/build/enter_data_if.F90/enter_data_if.F905 /global/u1/j/jarmusch/OpenACCV-V/Tests/enter_data_if.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11576646799221635
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT5 -DT1 -DT2 -DT3 -DT4 -DT5 -o /global/u1/j/jarmusch/OpenACCV-V/build/enter_data_if.F90/enter_data_if.F906 /global/u1/j/jarmusch/OpenACCV-V/Tests/enter_data_if.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11588793199916836
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "exit_data.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/exit_data.F90/exit_data.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/exit_data.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11548553500324488
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/exit_data.F90/exit_data.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/exit_data.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11612870800308883
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT2 -o /global/u1/j/jarmusch/OpenACCV-V/build/exit_data.F90/exit_data.F902 /global/u1/j/jarmusch/OpenACCV-V/Tests/exit_data.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11620785099512432
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/exit_data.F90/exit_data.F903 /global/u1/j/jarmusch/OpenACCV-V/Tests/exit_data.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11548393199336715
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "exit_data_copyout_no_lower_bound.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/exit_data_copyout_no_lower_bound.F90/exit_data_copyout_no_lower_bound.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/exit_data_copyout_no_lower_bound.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11592245000065304
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/exit_data_copyout_no_lower_bound.F90/exit_data_copyout_no_lower_bound.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/exit_data_copyout_no_lower_bound.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1162093629973242
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "exit_data_copyout_reference_counts.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/exit_data_copyout_reference_counts.F90/exit_data_copyout_reference_counts.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11582073300087359
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/exit_data_copyout_reference_counts.F90/exit_data_copyout_reference_counts.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11528451599588152
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT2 -o /global/u1/j/jarmusch/OpenACCV-V/build/exit_data_copyout_reference_counts.F90/exit_data_copyout_reference_counts.F902 /global/u1/j/jarmusch/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11538720500539057
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/exit_data_copyout_reference_counts.F90/exit_data_copyout_reference_counts.F903 /global/u1/j/jarmusch/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11535662600363139
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT3 -o /global/u1/j/jarmusch/OpenACCV-V/build/exit_data_copyout_reference_counts.F90/exit_data_copyout_reference_counts.F904 /global/u1/j/jarmusch/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11580462199344765
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/exit_data_copyout_reference_counts.F90/exit_data_copyout_reference_counts.F905 /global/u1/j/jarmusch/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11591573599434923
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT2 -o /global/u1/j/jarmusch/OpenACCV-V/build/exit_data_copyout_reference_counts.F90/exit_data_copyout_reference_counts.F906 /global/u1/j/jarmusch/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1155009640060598
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/exit_data_copyout_reference_counts.F90/exit_data_copyout_reference_counts.F907 /global/u1/j/jarmusch/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11527400600607507
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "exit_data_delete_no_lower_bound.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/exit_data_delete_no_lower_bound.F90/exit_data_delete_no_lower_bound.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/exit_data_delete_no_lower_bound.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11564911200548522
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/exit_data_delete_no_lower_bound.F90/exit_data_delete_no_lower_bound.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/exit_data_delete_no_lower_bound.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11542817400186323
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT2 -o /global/u1/j/jarmusch/OpenACCV-V/build/exit_data_delete_no_lower_bound.F90/exit_data_delete_no_lower_bound.F902 /global/u1/j/jarmusch/OpenACCV-V/Tests/exit_data_delete_no_lower_bound.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11528963599994313
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/exit_data_delete_no_lower_bound.F90/exit_data_delete_no_lower_bound.F903 /global/u1/j/jarmusch/OpenACCV-V/Tests/exit_data_delete_no_lower_bound.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11569319599948358
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "exit_data_finalize.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/exit_data_finalize.F90/exit_data_finalize.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/exit_data_finalize.F90",
                    "config": 1,
                    "errors": "\n\nftn-1519 ftn: ERROR TEST2, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/exit_data_finalize.F90, Line = 92, Column = 88 \n  Invalid clause \"FINALIZE\" for directive !$ACC EXIT_DATA.  Valid clauses: IF, PRIVATE, FIRSTPRIVATE, REDUCTION, COLLAPSE, ASYNC, WAIT, NUM_GANGS, VECTOR_LENGTH, DEVICE_TYPE, COPY, DELETE.\n\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11539289599750191
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/exit_data_finalize.F90/exit_data_finalize.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/exit_data_finalize.F90",
                    "config": 1,
                    "errors": "\n\nftn-1519 ftn: ERROR TEST2, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/exit_data_finalize.F90, Line = 92, Column = 88 \n  Invalid clause \"FINALIZE\" for directive !$ACC EXIT_DATA.  Valid clauses: IF, PRIVATE, FIRSTPRIVATE, REDUCTION, COLLAPSE, ASYNC, WAIT, NUM_GANGS, VECTOR_LENGTH, DEVICE_TYPE, COPY, DELETE.\n\nCray Fortran : Version 14.0.1 (20220526224428_3a8780657c742829e80f36338fb6ec6578642bb7)\nCray Fortran : Compile time:  0.0036 seconds\nCray Fortran : 157 source lines\nCray Fortran : 1 errors, 0 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11566889900132082
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT2 -o /global/u1/j/jarmusch/OpenACCV-V/build/exit_data_finalize.F90/exit_data_finalize.F902 /global/u1/j/jarmusch/OpenACCV-V/Tests/exit_data_finalize.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11558361400966533
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/exit_data_finalize.F90/exit_data_finalize.F903 /global/u1/j/jarmusch/OpenACCV-V/Tests/exit_data_finalize.F90",
                    "config": 1,
                    "errors": "\n\nftn-1519 ftn: ERROR TEST2, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/exit_data_finalize.F90, Line = 92, Column = 88 \n  Invalid clause \"FINALIZE\" for directive !$ACC EXIT_DATA.  Valid clauses: IF, PRIVATE, FIRSTPRIVATE, REDUCTION, COLLAPSE, ASYNC, WAIT, NUM_GANGS, VECTOR_LENGTH, DEVICE_TYPE, COPY, DELETE.\n\nCray Fortran : Version 14.0.1 (20220526224428_3a8780657c742829e80f36338fb6ec6578642bb7)\nCray Fortran : Compile time:  0.0035 seconds\nCray Fortran : 157 source lines\nCray Fortran : 1 errors, 0 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11551176600914914
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "init.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/init.F90/init.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/init.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11566142499214038
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/init.F90/init.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/init.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11572011800308246
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "init_device_num.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/init_device_num.F90/init_device_num.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/init_device_num.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11562049599888269
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/init_device_num.F90/init_device_num.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/init_device_num.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11582489099237137
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "init_device_type.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/init_device_type.F90/init_device_type.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/init_device_type.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11539857699244749
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/init_device_type.F90/init_device_type.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/init_device_type.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11555045099521521
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT2 -o /global/u1/j/jarmusch/OpenACCV-V/build/init_device_type.F90/init_device_type.F902 /global/u1/j/jarmusch/OpenACCV-V/Tests/init_device_type.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11556551900866907
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/init_device_type.F90/init_device_type.F903 /global/u1/j/jarmusch/OpenACCV-V/Tests/init_device_type.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11549358000047505
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT3 -o /global/u1/j/jarmusch/OpenACCV-V/build/init_device_type.F90/init_device_type.F904 /global/u1/j/jarmusch/OpenACCV-V/Tests/init_device_type.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1158757890079869
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/init_device_type.F90/init_device_type.F905 /global/u1/j/jarmusch/OpenACCV-V/Tests/init_device_type.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11585543998808134
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT2 -o /global/u1/j/jarmusch/OpenACCV-V/build/init_device_type.F90/init_device_type.F906 /global/u1/j/jarmusch/OpenACCV-V/Tests/init_device_type.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11536518299544696
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/init_device_type.F90/init_device_type.F907 /global/u1/j/jarmusch/OpenACCV-V/Tests/init_device_type.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11556725199625362
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "init_device_type_num.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/init_device_type_num.F90/init_device_type_num.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/init_device_type_num.F90",
                    "config": 1,
                    "errors": "\n\nftn-1307 ftn: ERROR TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/init_device_type_num.F90, Line = 12, Column = 41 \n  The kind (4) of this actual argument does not match that of its associated dummy argument (8).\n\n\nftn-790 ftn: WARNING TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/init_device_type_num.F90, Line = 13, Column = 15 \n  Unknown or unsupported compiler directive or syntax error.\n\n\nftn-1307 ftn: ERROR TEST2, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/init_device_type_num.F90, Line = 33, Column = 41 \n  The kind (4) of this actual argument does not match that of its associated dummy argument (8).\n\n\nftn-790 ftn: WARNING TEST2, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/init_device_type_num.F90, Line = 34, Column = 15 \n  Unknown or unsupported compiler directive or syntax error.\n\n\nftn-1307 ftn: ERROR TEST3, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/init_device_type_num.F90, Line = 54, Column = 41 \n  The kind (4) of this actual argument does not match that of its associated dummy argument (8).\n\n\nftn-790 ftn: WARNING TEST3, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/init_device_type_num.F90, Line = 55, Column = 15 \n  Unknown or unsupported compiler directive or syntax error.\n\nCray Fortran : Version 14.0.1 (20220526224428_3a8780657c742829e80f36338fb6ec6578642bb7)\nCray Fortran : Compile time:  0.0080 seconds\nCray Fortran : 145 source lines\nCray Fortran : 3 errors, 3 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11536417900060769
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/init_device_type_num.F90/init_device_type_num.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/init_device_type_num.F90",
                    "config": 1,
                    "errors": "\n\nftn-1307 ftn: ERROR TEST2, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/init_device_type_num.F90, Line = 33, Column = 41 \n  The kind (4) of this actual argument does not match that of its associated dummy argument (8).\n\n\nftn-790 ftn: WARNING TEST2, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/init_device_type_num.F90, Line = 34, Column = 15 \n  Unknown or unsupported compiler directive or syntax error.\n\n\nftn-1307 ftn: ERROR TEST3, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/init_device_type_num.F90, Line = 54, Column = 41 \n  The kind (4) of this actual argument does not match that of its associated dummy argument (8).\n\n\nftn-790 ftn: WARNING TEST3, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/init_device_type_num.F90, Line = 55, Column = 15 \n  Unknown or unsupported compiler directive or syntax error.\n\nCray Fortran : Version 14.0.1 (20220526224428_3a8780657c742829e80f36338fb6ec6578642bb7)\nCray Fortran : Compile time:  0.0072 seconds\nCray Fortran : 136 source lines\nCray Fortran : 2 errors, 2 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11586940700362902
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT2 -o /global/u1/j/jarmusch/OpenACCV-V/build/init_device_type_num.F90/init_device_type_num.F902 /global/u1/j/jarmusch/OpenACCV-V/Tests/init_device_type_num.F90",
                    "config": 1,
                    "errors": "\n\nftn-1307 ftn: ERROR TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/init_device_type_num.F90, Line = 12, Column = 41 \n  The kind (4) of this actual argument does not match that of its associated dummy argument (8).\n\n\nftn-790 ftn: WARNING TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/init_device_type_num.F90, Line = 13, Column = 15 \n  Unknown or unsupported compiler directive or syntax error.\n\n\nftn-1307 ftn: ERROR TEST3, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/init_device_type_num.F90, Line = 54, Column = 41 \n  The kind (4) of this actual argument does not match that of its associated dummy argument (8).\n\n\nftn-790 ftn: WARNING TEST3, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/init_device_type_num.F90, Line = 55, Column = 15 \n  Unknown or unsupported compiler directive or syntax error.\n\nCray Fortran : Version 14.0.1 (20220526224428_3a8780657c742829e80f36338fb6ec6578642bb7)\nCray Fortran : Compile time:  0.0064 seconds\nCray Fortran : 136 source lines\nCray Fortran : 2 errors, 2 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.1157248579984298
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/init_device_type_num.F90/init_device_type_num.F903 /global/u1/j/jarmusch/OpenACCV-V/Tests/init_device_type_num.F90",
                    "config": 1,
                    "errors": "\n\nftn-1307 ftn: ERROR TEST2, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/init_device_type_num.F90, Line = 33, Column = 41 \n  The kind (4) of this actual argument does not match that of its associated dummy argument (8).\n\n\nftn-790 ftn: WARNING TEST2, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/init_device_type_num.F90, Line = 34, Column = 15 \n  Unknown or unsupported compiler directive or syntax error.\n\n\nftn-1307 ftn: ERROR TEST3, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/init_device_type_num.F90, Line = 54, Column = 41 \n  The kind (4) of this actual argument does not match that of its associated dummy argument (8).\n\n\nftn-790 ftn: WARNING TEST3, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/init_device_type_num.F90, Line = 55, Column = 15 \n  Unknown or unsupported compiler directive or syntax error.\n\nCray Fortran : Version 14.0.1 (20220526224428_3a8780657c742829e80f36338fb6ec6578642bb7)\nCray Fortran : Compile time:  0.0063 seconds\nCray Fortran : 136 source lines\nCray Fortran : 2 errors, 2 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11555525999574456
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT3 -o /global/u1/j/jarmusch/OpenACCV-V/build/init_device_type_num.F90/init_device_type_num.F904 /global/u1/j/jarmusch/OpenACCV-V/Tests/init_device_type_num.F90",
                    "config": 1,
                    "errors": "\n\nftn-1307 ftn: ERROR TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/init_device_type_num.F90, Line = 12, Column = 41 \n  The kind (4) of this actual argument does not match that of its associated dummy argument (8).\n\n\nftn-790 ftn: WARNING TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/init_device_type_num.F90, Line = 13, Column = 15 \n  Unknown or unsupported compiler directive or syntax error.\n\n\nftn-1307 ftn: ERROR TEST2, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/init_device_type_num.F90, Line = 33, Column = 41 \n  The kind (4) of this actual argument does not match that of its associated dummy argument (8).\n\n\nftn-790 ftn: WARNING TEST2, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/init_device_type_num.F90, Line = 34, Column = 15 \n  Unknown or unsupported compiler directive or syntax error.\n\nCray Fortran : Version 14.0.1 (20220526224428_3a8780657c742829e80f36338fb6ec6578642bb7)\nCray Fortran : Compile time:  0.0066 seconds\nCray Fortran : 136 source lines\nCray Fortran : 2 errors, 2 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11540720400807913
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/init_device_type_num.F90/init_device_type_num.F905 /global/u1/j/jarmusch/OpenACCV-V/Tests/init_device_type_num.F90",
                    "config": 1,
                    "errors": "\n\nftn-1307 ftn: ERROR TEST2, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/init_device_type_num.F90, Line = 33, Column = 41 \n  The kind (4) of this actual argument does not match that of its associated dummy argument (8).\n\n\nftn-790 ftn: WARNING TEST2, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/init_device_type_num.F90, Line = 34, Column = 15 \n  Unknown or unsupported compiler directive or syntax error.\n\n\nftn-1307 ftn: ERROR TEST3, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/init_device_type_num.F90, Line = 54, Column = 41 \n  The kind (4) of this actual argument does not match that of its associated dummy argument (8).\n\n\nftn-790 ftn: WARNING TEST3, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/init_device_type_num.F90, Line = 55, Column = 15 \n  Unknown or unsupported compiler directive or syntax error.\n\nCray Fortran : Version 14.0.1 (20220526224428_3a8780657c742829e80f36338fb6ec6578642bb7)\nCray Fortran : Compile time:  0.0065 seconds\nCray Fortran : 136 source lines\nCray Fortran : 2 errors, 2 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11537222500192001
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT2 -o /global/u1/j/jarmusch/OpenACCV-V/build/init_device_type_num.F90/init_device_type_num.F906 /global/u1/j/jarmusch/OpenACCV-V/Tests/init_device_type_num.F90",
                    "config": 1,
                    "errors": "\n\nftn-1307 ftn: ERROR TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/init_device_type_num.F90, Line = 12, Column = 41 \n  The kind (4) of this actual argument does not match that of its associated dummy argument (8).\n\n\nftn-790 ftn: WARNING TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/init_device_type_num.F90, Line = 13, Column = 15 \n  Unknown or unsupported compiler directive or syntax error.\n\n\nftn-1307 ftn: ERROR TEST3, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/init_device_type_num.F90, Line = 54, Column = 41 \n  The kind (4) of this actual argument does not match that of its associated dummy argument (8).\n\n\nftn-790 ftn: WARNING TEST3, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/init_device_type_num.F90, Line = 55, Column = 15 \n  Unknown or unsupported compiler directive or syntax error.\n\nCray Fortran : Version 14.0.1 (20220526224428_3a8780657c742829e80f36338fb6ec6578642bb7)\nCray Fortran : Compile time:  0.0071 seconds\nCray Fortran : 136 source lines\nCray Fortran : 2 errors, 2 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.1154335750034079
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/init_device_type_num.F90/init_device_type_num.F907 /global/u1/j/jarmusch/OpenACCV-V/Tests/init_device_type_num.F90",
                    "config": 1,
                    "errors": "\n\nftn-1307 ftn: ERROR TEST2, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/init_device_type_num.F90, Line = 33, Column = 41 \n  The kind (4) of this actual argument does not match that of its associated dummy argument (8).\n\n\nftn-790 ftn: WARNING TEST2, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/init_device_type_num.F90, Line = 34, Column = 15 \n  Unknown or unsupported compiler directive or syntax error.\n\n\nftn-1307 ftn: ERROR TEST3, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/init_device_type_num.F90, Line = 54, Column = 41 \n  The kind (4) of this actual argument does not match that of its associated dummy argument (8).\n\n\nftn-790 ftn: WARNING TEST3, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/init_device_type_num.F90, Line = 55, Column = 15 \n  Unknown or unsupported compiler directive or syntax error.\n\nCray Fortran : Version 14.0.1 (20220526224428_3a8780657c742829e80f36338fb6ec6578642bb7)\nCray Fortran : Compile time:  0.0066 seconds\nCray Fortran : 136 source lines\nCray Fortran : 2 errors, 2 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11516608799865935
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "init_device_type_num_nvidia.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/init_device_type_num_nvidia.F90/init_device_type_num_nvidia.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/init_device_type_num_nvidia.F90",
                    "config": 1,
                    "errors": "\n\nftn-1307 ftn: ERROR TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/init_device_type_num_nvidia.F90, Line = 12, Column = 41 \n  The kind (4) of this actual argument does not match that of its associated dummy argument (8).\n\n\nftn-790 ftn: WARNING TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/init_device_type_num_nvidia.F90, Line = 13, Column = 15 \n  Unknown or unsupported compiler directive or syntax error.\n\nCray Fortran : Version 14.0.1 (20220526224428_3a8780657c742829e80f36338fb6ec6578642bb7)\nCray Fortran : Compile time:  0.0047 seconds\nCray Fortran : 61 source lines\nCray Fortran : 1 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11567881899827626
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/init_device_type_num_nvidia.F90/init_device_type_num_nvidia.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/init_device_type_num_nvidia.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11551110500295181
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "init_device_type_nvidia.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/init_device_type_nvidia.F90/init_device_type_nvidia.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/init_device_type_nvidia.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11529726099979598
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/init_device_type_nvidia.F90/init_device_type_nvidia.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/init_device_type_nvidia.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11554261499259155
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "kernels_async.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_async.F90/kernels_async.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_async.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11563065600057598
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_async.F90/kernels_async.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_async.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11561494499619585
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "kernels_copy.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_copy.F90/kernels_copy.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_copy.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11528626999643166
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_copy.F90/kernels_copy.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_copy.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11578064599598292
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT2 -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_copy.F90/kernels_copy.F902 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_copy.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11553185399679933
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_copy.F90/kernels_copy.F903 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_copy.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11545144900446758
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT3 -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_copy.F90/kernels_copy.F904 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_copy.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11556227300025057
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_copy.F90/kernels_copy.F905 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_copy.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11538824799936265
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT2 -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_copy.F90/kernels_copy.F906 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_copy.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11548196799412835
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_copy.F90/kernels_copy.F907 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_copy.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11600645200815052
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "kernels_copyin.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_copyin.F90/kernels_copyin.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_copyin.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11552260699681938
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_copyin.F90/kernels_copyin.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_copyin.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11603206099243835
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT2 -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_copyin.F90/kernels_copyin.F902 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_copyin.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11556746400310658
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_copyin.F90/kernels_copyin.F903 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_copyin.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11545711000508163
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT3 -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_copyin.F90/kernels_copyin.F904 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_copyin.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1152578339970205
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_copyin.F90/kernels_copyin.F905 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_copyin.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11538906900386792
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT2 -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_copyin.F90/kernels_copyin.F906 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_copyin.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11538364799343981
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_copyin.F90/kernels_copyin.F907 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_copyin.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.115500564003014
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "kernels_copyout.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_copyout.F90/kernels_copyout.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_copyout.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11537447100272402
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_copyout.F90/kernels_copyout.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_copyout.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11526164300448727
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT2 -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_copyout.F90/kernels_copyout.F902 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_copyout.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11553929900401272
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_copyout.F90/kernels_copyout.F903 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_copyout.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11557878600433469
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "kernels_create.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_create.F90/kernels_create.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_create.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11637157799850684
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_create.F90/kernels_create.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_create.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1155354309885297
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT2 -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_create.F90/kernels_create.F902 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_create.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11593721799727064
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_create.F90/kernels_create.F903 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_create.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1157466690056026
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT3 -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_create.F90/kernels_create.F904 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_create.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11709446299937554
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_create.F90/kernels_create.F905 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_create.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11618769099004567
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT2 -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_create.F90/kernels_create.F906 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_create.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11584425900946371
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_create.F90/kernels_create.F907 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_create.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11599397800455336
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "kernels_default_copy.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_default_copy.F90/kernels_default_copy.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_default_copy.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11588308299542405
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_default_copy.F90/kernels_default_copy.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_default_copy.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11561342199274804
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT2 -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_default_copy.F90/kernels_default_copy.F902 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_default_copy.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11530094899353571
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_default_copy.F90/kernels_default_copy.F903 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_default_copy.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11562521499581635
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "kernels_default_present.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_default_present.F90/kernels_default_present.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_default_present.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11530589799804147
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_default_present.F90/kernels_default_present.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_default_present.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11559276099433191
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "kernels_if.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -DT2 -DT3 -DT4 -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_if.F90/kernels_if.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_if.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11541895699338056
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT2 -DT3 -DT4 -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_if.F90/kernels_if.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_if.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11574623800697736
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -DT3 -DT4 -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_if.F90/kernels_if.F902 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_if.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11536646400054451
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -DT2 -DT4 -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_if.F90/kernels_if.F903 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_if.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11537483100255486
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -DT2 -DT3 -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_if.F90/kernels_if.F904 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_if.F90",
                    "config": 1,
                    "errors": "\n\nftn-303 ftn: ERROR TEST4, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_if.F90, Line = 188, Column = 24 \n  Data type LOGICAL is not allowed with INTEGER for the operation \"eq\".\n\nCray Fortran : Version 14.0.1 (20220526224428_3a8780657c742829e80f36338fb6ec6578642bb7)\nCray Fortran : Compile time:  0.0036 seconds\nCray Fortran : 299 source lines\nCray Fortran : 1 errors, 0 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06593943999905605
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT4 -DT1 -DT2 -DT3 -DT4 -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_if.F90/kernels_if.F905 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_if.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.115669049002463
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "kernels_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_loop.F90/kernels_loop.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_loop.F90",
                    "config": 1,
                    "errors": "\n\nftn-1725 ftn: ERROR TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_loop.F90, Line = 6, Column = 23 \n  Unexpected syntax while parsing the type-declaration statement : \"object-name\" was expected but found \"_\".\n\n\nftn-1725 ftn: ERROR TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_loop.F90, Line = 6, Column = 27 \n  Unexpected syntax while parsing the type-declaration statement : \"object-name\" was expected but found \"_\".\n\n\nftn-1725 ftn: ERROR TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_loop.F90, Line = 6, Column = 31 \n  Unexpected syntax while parsing the type-declaration statement : \"object-name\" was expected but found \"_\".\n\n\nftn-1725 ftn: ERROR TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_loop.F90, Line = 6, Column = 35 \n  Unexpected syntax while parsing the type-declaration statement : \"object-name\" was expected but found \"_\".\n\n\nftn-1725 ftn: ERROR TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_loop.F90, Line = 6, Column = 39 \n  Unexpected syntax while parsing the type-declaration statement : \"object-name\" was expected but found \"_\".\n\n\nftn-1725 ftn: ERROR TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_loop.F90, Line = 6, Column = 43 \n  Unexpected syntax while parsing the type-declaration statement : \"object-name\" was expected but found \"_\".\n\n\nftn-1725 ftn: ERROR TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_loop.F90, Line = 6, Column = 47 \n  Unexpected syntax while parsing the type-declaration statement : \"object-name\" was expected but found \"_\".\n\n\nftn-1725 ftn: ERROR TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_loop.F90, Line = 6, Column = 51 \n  Unexpected syntax while parsing the type-declaration statement : \"object-name\" was expected but found \"_\".\n\n\nftn-1725 ftn: ERROR TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_loop.F90, Line = 6, Column = 55 \n  Unexpected syntax while parsing the type-declaration statement : \"object-name\" was expected but found \"_\".\n\n\nftn-1725 ftn: ERROR TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_loop.F90, Line = 6, Column = 59 \n  Unexpected syntax while parsing the type-declaration statement : \"object-name\" was expected but found \"_\".\n\n\nftn-515 ftn: ERROR TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_loop.F90, Line = 23, Column = 16 \n  Unexpected syntax:  A label, comma, identifier, WHILE or EOS was expected but found \"_\".\n\n\nftn-515 ftn: ERROR TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_loop.F90, Line = 25, Column = 18 \n  Unexpected syntax:  A label, comma, identifier, WHILE or EOS was expected but found \"_\".\n\n\nftn-515 ftn: ERROR TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_loop.F90, Line = 27, Column = 20 \n  Unexpected syntax:  A label, comma, identifier, WHILE or EOS was expected but found \"_\".\n\n\nftn-515 ftn: ERROR TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_loop.F90, Line = 29, Column = 22 \n  Unexpected syntax:  A label, comma, identifier, WHILE or EOS was expected but found \"_\".\n\n\nftn-515 ftn: ERROR TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_loop.F90, Line = 31, Column = 24 \n  Unexpected syntax:  A label, comma, identifier, WHILE or EOS was expected but found \"_\".\n\n\nftn-515 ftn: ERROR TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_loop.F90, Line = 33, Column = 26 \n  Unexpected syntax:  A label, comma, identifier, WHILE or EOS was expected but found \"_\".\n\n\nftn-515 ftn: ERROR TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_loop.F90, Line = 35, Column = 28 \n  Unexpected syntax:  A label, comma, identifier, WHILE or EOS was expected but found \"_\".\n\n\nftn-515 ftn: ERROR TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_loop.F90, Line = 37, Column = 30 \n  Unexpected syntax:  A label, comma, identifier, WHILE or EOS was expected but found \"_\".\n\n\nftn-515 ftn: ERROR TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_loop.F90, Line = 39, Column = 32 \n  Unexpected syntax:  A label, comma, identifier, WHILE or EOS was expected but found \"_\".\n\n\nftn-515 ftn: ERROR TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_loop.F90, Line = 41, Column = 34 \n  Unexpected syntax:  A label, comma, identifier, WHILE or EOS was expected but found \"_\".\n\n\nftn-1725 ftn: ERROR TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_loop.F90, Line = 42, Column = 35 \n  Unexpected syntax while parsing the assignment statement : \"operand\" was expected but found \"_\".\n\nCray Fortran : Version 14.0.1 (20220526224428_3a8780657c742829e80f36338fb6ec6578642bb7)\nCray Fortran : Compile time:  0.0038 seconds\nCray Fortran : 108 source lines\nCray Fortran : 21 errors, 0 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11562415200751275
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_loop.F90/kernels_loop.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_loop.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11544400500133634
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "kernels_loop_independent.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_loop_independent.F90/kernels_loop_independent.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_loop_independent.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11574886400194373
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_loop_independent.F90/kernels_loop_independent.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_loop_independent.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11615490799886174
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "kernels_loop_reduction_add_general.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_loop_reduction_add_general.F90/kernels_loop_reduction_add_general.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_add_general.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11552456000936218
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_loop_reduction_add_general.F90/kernels_loop_reduction_add_general.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_add_general.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1156065390096046
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "kernels_loop_reduction_add_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_loop_reduction_add_loop.F90/kernels_loop_reduction_add_loop.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_add_loop.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.115473252008087
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_loop_reduction_add_loop.F90/kernels_loop_reduction_add_loop.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_add_loop.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11527846500393935
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "kernels_loop_reduction_add_vector_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_loop_reduction_add_vector_loop.F90/kernels_loop_reduction_add_vector_loop.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_add_vector_loop.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11542911500146147
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_loop_reduction_add_vector_loop.F90/kernels_loop_reduction_add_vector_loop.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_add_vector_loop.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11595907100127079
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "kernels_loop_reduction_and_general.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_loop_reduction_and_general.F90/kernels_loop_reduction_and_general.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_and_general.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1155765510047786
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_loop_reduction_and_general.F90/kernels_loop_reduction_and_general.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_and_general.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11573502700775862
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "kernels_loop_reduction_and_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_loop_reduction_and_loop.F90/kernels_loop_reduction_and_loop.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_and_loop.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1156300540023949
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_loop_reduction_and_loop.F90/kernels_loop_reduction_and_loop.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_and_loop.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11517176899360493
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "kernels_loop_reduction_and_vector_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_loop_reduction_and_vector_loop.F90/kernels_loop_reduction_and_vector_loop.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_and_vector_loop.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11530478599888738
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_loop_reduction_and_vector_loop.F90/kernels_loop_reduction_and_vector_loop.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_and_vector_loop.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11548422300256789
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "kernels_loop_reduction_bitand_general.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_loop_reduction_bitand_general.F90/kernels_loop_reduction_bitand_general.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitand_general.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11541776498779655
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_loop_reduction_bitand_general.F90/kernels_loop_reduction_bitand_general.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitand_general.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11605037600384094
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "kernels_loop_reduction_bitand_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_loop_reduction_bitand_loop.F90/kernels_loop_reduction_bitand_loop.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitand_loop.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11517111799912527
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_loop_reduction_bitand_loop.F90/kernels_loop_reduction_bitand_loop.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitand_loop.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1157210289966315
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "kernels_loop_reduction_bitand_vector_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_loop_reduction_bitand_vector_loop.F90/kernels_loop_reduction_bitand_vector_loop.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitand_vector_loop.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11620648900861852
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_loop_reduction_bitand_vector_loop.F90/kernels_loop_reduction_bitand_vector_loop.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitand_vector_loop.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11546977399848402
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "kernels_loop_reduction_bitor_general.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_loop_reduction_bitor_general.F90/kernels_loop_reduction_bitor_general.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitor_general.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11562430299818516
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_loop_reduction_bitor_general.F90/kernels_loop_reduction_bitor_general.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitor_general.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1156937170017045
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "kernels_loop_reduction_bitor_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_loop_reduction_bitor_loop.F90/kernels_loop_reduction_bitor_loop.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitor_loop.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11589412498869933
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_loop_reduction_bitor_loop.F90/kernels_loop_reduction_bitor_loop.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitor_loop.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1159747600031551
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "kernels_loop_reduction_bitor_vector_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_loop_reduction_bitor_vector_loop.F90/kernels_loop_reduction_bitor_vector_loop.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitor_vector_loop.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11528497700055595
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_loop_reduction_bitor_vector_loop.F90/kernels_loop_reduction_bitor_vector_loop.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitor_vector_loop.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11527282399765681
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "kernels_loop_reduction_bitxor_general.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_loop_reduction_bitxor_general.F90/kernels_loop_reduction_bitxor_general.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitxor_general.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1152465229970403
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_loop_reduction_bitxor_general.F90/kernels_loop_reduction_bitxor_general.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitxor_general.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.115488601004472
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "kernels_loop_reduction_bitxor_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_loop_reduction_bitxor_loop.F90/kernels_loop_reduction_bitxor_loop.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitxor_loop.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11541468799987342
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_loop_reduction_bitxor_loop.F90/kernels_loop_reduction_bitxor_loop.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitxor_loop.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11567087299772538
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "kernels_loop_reduction_bitxor_vector_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_loop_reduction_bitxor_vector_loop.F90/kernels_loop_reduction_bitxor_vector_loop.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitxor_vector_loop.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11560517600446474
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_loop_reduction_bitxor_vector_loop.F90/kernels_loop_reduction_bitxor_vector_loop.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitxor_vector_loop.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11530863300140481
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "kernels_loop_reduction_max_general.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_loop_reduction_max_general.F90/kernels_loop_reduction_max_general.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_max_general.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11542923600063659
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_loop_reduction_max_general.F90/kernels_loop_reduction_max_general.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_max_general.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11555464800039772
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "kernels_loop_reduction_max_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_loop_reduction_max_loop.F90/kernels_loop_reduction_max_loop.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_max_loop.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11538821700378321
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_loop_reduction_max_loop.F90/kernels_loop_reduction_max_loop.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_max_loop.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11556176199519541
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "kernels_loop_reduction_max_vector_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_loop_reduction_max_vector_loop.F90/kernels_loop_reduction_max_vector_loop.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_max_vector_loop.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11529139999765903
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_loop_reduction_max_vector_loop.F90/kernels_loop_reduction_max_vector_loop.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_max_vector_loop.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11582509099389426
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "kernels_loop_reduction_min_general.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_loop_reduction_min_general.F90/kernels_loop_reduction_min_general.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_min_general.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11547513501136564
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_loop_reduction_min_general.F90/kernels_loop_reduction_min_general.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_min_general.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11602454600506462
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "kernels_loop_reduction_min_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_loop_reduction_min_loop.F90/kernels_loop_reduction_min_loop.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_min_loop.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11565313900064211
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_loop_reduction_min_loop.F90/kernels_loop_reduction_min_loop.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_min_loop.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11567167499742936
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "kernels_loop_reduction_min_vector_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_loop_reduction_min_vector_loop.F90/kernels_loop_reduction_min_vector_loop.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_min_vector_loop.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11553827700845432
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_loop_reduction_min_vector_loop.F90/kernels_loop_reduction_min_vector_loop.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_min_vector_loop.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11541531998955179
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "kernels_loop_reduction_multiply_general.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_loop_reduction_multiply_general.F90/kernels_loop_reduction_multiply_general.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_multiply_general.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11560246000590269
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_loop_reduction_multiply_general.F90/kernels_loop_reduction_multiply_general.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_multiply_general.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11600466800155118
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "kernels_loop_reduction_multiply_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_loop_reduction_multiply_loop.F90/kernels_loop_reduction_multiply_loop.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_multiply_loop.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11550629499834031
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_loop_reduction_multiply_loop.F90/kernels_loop_reduction_multiply_loop.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_multiply_loop.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11569655199127737
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "kernels_loop_reduction_multiply_vector_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_loop_reduction_multiply_vector_loop.F90/kernels_loop_reduction_multiply_vector_loop.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_multiply_vector_loop.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1153770349919796
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_loop_reduction_multiply_vector_loop.F90/kernels_loop_reduction_multiply_vector_loop.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_multiply_vector_loop.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11536620400147513
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "kernels_loop_reduction_or_general.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_loop_reduction_or_general.F90/kernels_loop_reduction_or_general.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_or_general.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11618178999924567
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_loop_reduction_or_general.F90/kernels_loop_reduction_or_general.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_or_general.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11573986599978525
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "kernels_loop_reduction_or_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_loop_reduction_or_loop.F90/kernels_loop_reduction_or_loop.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_or_loop.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1152661310043186
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_loop_reduction_or_loop.F90/kernels_loop_reduction_or_loop.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_or_loop.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1155702179967193
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "kernels_loop_reduction_or_vector_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_loop_reduction_or_vector_loop.F90/kernels_loop_reduction_or_vector_loop.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_or_vector_loop.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11569678399246186
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_loop_reduction_or_vector_loop.F90/kernels_loop_reduction_or_vector_loop.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_or_vector_loop.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11573863399098627
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "kernels_loop_seq.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_loop_seq.F90/kernels_loop_seq.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_loop_seq.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11611504100437742
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_loop_seq.F90/kernels_loop_seq.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_loop_seq.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11584837600821629
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "kernels_loop_tile.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_loop_tile.F90/kernels_loop_tile.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_loop_tile.F90",
                    "config": 1,
                    "errors": "\n\nftn-1342 ftn: ERROR TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_loop_tile.F90, Line = 28, Column = 15 \n  Loop nests following an OpenMP or OpenACC construct with a TILE clause must be perfectly nested.\n\n\nftn-1342 ftn: ERROR TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_loop_tile.F90, Line = 31, Column = 15 \n  Loop nests following an OpenMP or OpenACC construct with a TILE clause must be perfectly nested.\n\nCray Fortran : Version 14.0.1 (20220526224428_3a8780657c742829e80f36338fb6ec6578642bb7)\nCray Fortran : Compile time:  0.0036 seconds\nCray Fortran : 94 source lines\nCray Fortran : 2 errors, 0 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11553816699597519
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_loop_tile.F90/kernels_loop_tile.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_loop_tile.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11541432800004259
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "kernels_loop_vector_blocking.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_loop_vector_blocking.F90/kernels_loop_vector_blocking.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_loop_vector_blocking.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11531129899958614
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_loop_vector_blocking.F90/kernels_loop_vector_blocking.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_loop_vector_blocking.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1154240559990285
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "kernels_loop_worker_blocking.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_loop_worker_blocking.F90/kernels_loop_worker_blocking.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_loop_worker_blocking.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11524155299412087
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_loop_worker_blocking.F90/kernels_loop_worker_blocking.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_loop_worker_blocking.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11537310801213607
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "kernels_num_gangs.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_num_gangs.F90/kernels_num_gangs.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_num_gangs.F90",
                    "config": 1,
                    "errors": "\n\nftn-1370 ftn: ERROR TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_num_gangs.F90, Line = 12, Column = 23 \n  The NUM_GANGS clause is not allowed with directive !$ACC KERNELS.\n\nCray Fortran : Version 14.0.1 (20220526224428_3a8780657c742829e80f36338fb6ec6578642bb7)\nCray Fortran : Compile time:  0.0033 seconds\nCray Fortran : 69 source lines\nCray Fortran : 1 errors, 0 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11563916200248059
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_num_gangs.F90/kernels_num_gangs.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_num_gangs.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11548800999298692
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "kernels_num_workers.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_num_workers.F90/kernels_num_workers.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_num_workers.F90",
                    "config": 1,
                    "errors": "\n\nftn-1370 ftn: ERROR TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_num_workers.F90, Line = 21, Column = 30 \n  The NUM_WORKERS clause is not allowed with directive !$ACC KERNELS LOOP.\n\n\nftn-289 ftn: ERROR TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_num_workers.F90, Line = 25, Column = 12 \n  This !$ACC END KERNELS statement has no matching !$ACC KERNELS statement.\n\nCray Fortran : Version 14.0.1 (20220526224428_3a8780657c742829e80f36338fb6ec6578642bb7)\nCray Fortran : Compile time:  0.0032 seconds\nCray Fortran : 80 source lines\nCray Fortran : 2 errors, 0 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.0651575999945635
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_num_workers.F90/kernels_num_workers.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_num_workers.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11542065000685398
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "kernels_present.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_present.F90/kernels_present.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_present.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11541014899557922
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_present.F90/kernels_present.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_present.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11561344200163148
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "kernels_scalar_default_copy.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_scalar_default_copy.F90/kernels_scalar_default_copy.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_scalar_default_copy.F90",
                    "config": 1,
                    "errors": "\n\nftn-1370 ftn: ERROR TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_scalar_default_copy.F90, Line = 24, Column = 25 \n  The NUM_GANGS clause is not allowed with directive !$ACC KERNELS.\n\nCray Fortran : Version 14.0.1 (20220526224428_3a8780657c742829e80f36338fb6ec6578642bb7)\nCray Fortran : Compile time:  0.0034 seconds\nCray Fortran : 85 source lines\nCray Fortran : 1 errors, 0 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06542835300206207
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_scalar_default_copy.F90/kernels_scalar_default_copy.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_scalar_default_copy.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11554388799413573
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "kernels_vector_length.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_vector_length.F90/kernels_vector_length.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_vector_length.F90",
                    "config": 1,
                    "errors": "\n\nftn-1370 ftn: ERROR TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_vector_length.F90, Line = 21, Column = 25 \n  The VECTOR_LENGTH clause is not allowed with directive !$ACC KERNELS.\n\nCray Fortran : Version 14.0.1 (20220526224428_3a8780657c742829e80f36338fb6ec6578642bb7)\nCray Fortran : Compile time:  0.0033 seconds\nCray Fortran : 81 source lines\nCray Fortran : 1 errors, 0 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06508584099356085
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_vector_length.F90/kernels_vector_length.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_vector_length.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11514136999903712
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "kernels_wait.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_wait.F90/kernels_wait.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_wait.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1154026750009507
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_wait.F90/kernels_wait.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_wait.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1152851179940626
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "loop_collapse.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/loop_collapse.F90/loop_collapse.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/loop_collapse.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11540710400731768
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/loop_collapse.F90/loop_collapse.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/loop_collapse.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11563619700609706
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT2 -o /global/u1/j/jarmusch/OpenACCV-V/build/loop_collapse.F90/loop_collapse.F902 /global/u1/j/jarmusch/OpenACCV-V/Tests/loop_collapse.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11584444799518678
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/loop_collapse.F90/loop_collapse.F903 /global/u1/j/jarmusch/OpenACCV-V/Tests/loop_collapse.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11586767299741041
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "loop_no_collapse.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/loop_no_collapse.F90/loop_no_collapse.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/loop_no_collapse.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11547560499457177
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/loop_no_collapse.F90/loop_no_collapse.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/loop_no_collapse.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11561215999245178
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT2 -o /global/u1/j/jarmusch/OpenACCV-V/build/loop_no_collapse.F90/loop_no_collapse.F902 /global/u1/j/jarmusch/OpenACCV-V/Tests/loop_no_collapse.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1158487570064608
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/loop_no_collapse.F90/loop_no_collapse.F903 /global/u1/j/jarmusch/OpenACCV-V/Tests/loop_no_collapse.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11564755799190607
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "parallel.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel.F90/parallel.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11554028101090807
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel.F90/parallel.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11571281400392763
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "parallel_async.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_async.F90/parallel_async.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_async.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11545455499435775
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_async.F90/parallel_async.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_async.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11605683898960706
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "parallel_copy.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_copy.F90/parallel_copy.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_copy.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11546771100256592
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_copy.F90/parallel_copy.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_copy.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11565264798991848
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "parallel_copyin.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_copyin.F90/parallel_copyin.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_copyin.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11606818999280222
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_copyin.F90/parallel_copyin.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_copyin.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11526479800522793
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "parallel_copyout.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_copyout.F90/parallel_copyout.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_copyout.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11577556499105413
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_copyout.F90/parallel_copyout.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_copyout.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11572668098961003
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT2 -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_copyout.F90/parallel_copyout.F902 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_copyout.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11567298699810635
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_copyout.F90/parallel_copyout.F903 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_copyout.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11571931700746063
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT3 -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_copyout.F90/parallel_copyout.F904 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_copyout.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11551890999544412
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_copyout.F90/parallel_copyout.F905 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_copyout.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11565257799520623
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT2 -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_copyout.F90/parallel_copyout.F906 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_copyout.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11532328100292943
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_copyout.F90/parallel_copyout.F907 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_copyout.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11515459600195754
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "parallel_create.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_create.F90/parallel_create.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_create.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11577253999712411
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_create.F90/parallel_create.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_create.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.115682575997198
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "parallel_default_copy.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_default_copy.F90/parallel_default_copy.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_default_copy.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11523205500270706
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_default_copy.F90/parallel_default_copy.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_default_copy.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11573452599986922
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT2 -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_default_copy.F90/parallel_default_copy.F902 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_default_copy.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11551132499880623
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_default_copy.F90/parallel_default_copy.F903 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_default_copy.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11578854000254069
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "parallel_default_present.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_default_present.F90/parallel_default_present.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_default_present.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11525418800010812
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_default_present.F90/parallel_default_present.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_default_present.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11579612499917857
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "parallel_firstprivate.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_firstprivate.F90/parallel_firstprivate.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_firstprivate.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11567405999812763
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_firstprivate.F90/parallel_firstprivate.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_firstprivate.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11561146800522693
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT2 -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_firstprivate.F90/parallel_firstprivate.F902 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_firstprivate.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11548620699613821
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_firstprivate.F90/parallel_firstprivate.F903 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_firstprivate.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11527913699683268
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "parallel_if.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_if.F90/parallel_if.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_if.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11562159800087102
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_if.F90/parallel_if.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_if.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11535560300399084
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT2 -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_if.F90/parallel_if.F902 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_if.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11558322299970314
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_if.F90/parallel_if.F903 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_if.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11575950500264298
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT3 -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_if.F90/parallel_if.F904 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_if.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11559097899589688
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_if.F90/parallel_if.F905 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_if.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11567280699091498
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT2 -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_if.F90/parallel_if.F906 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_if.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11551828899246175
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_if.F90/parallel_if.F907 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_if.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11547671799780801
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "parallel_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_loop.F90/parallel_loop.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_loop.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11521202699805144
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_loop.F90/parallel_loop.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_loop.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11548920199857093
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT2 -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_loop.F90/parallel_loop.F902 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_loop.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11535940000612754
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_loop.F90/parallel_loop.F903 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_loop.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11552159499842674
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "parallel_loop_async.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_loop_async.F90/parallel_loop_async.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_loop_async.F90",
                    "config": 1,
                    "errors": "\n\nftn-802 ftn: ERROR TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_loop_async.F90, Line = 30, Column = 66 \n  Variable subobjects are not allowed as arguments for this clause or directive.\n\nCray Fortran : Version 14.0.1 (20220526224428_3a8780657c742829e80f36338fb6ec6578642bb7)\nCray Fortran : Compile time:  0.0034 seconds\nCray Fortran : 91 source lines\nCray Fortran : 1 errors, 0 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11568263699882664
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_loop_async.F90/parallel_loop_async.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_loop_async.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11543098000402097
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "parallel_loop_auto.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_loop_auto.F90/parallel_loop_auto.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_loop_auto.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11511278500256594
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_loop_auto.F90/parallel_loop_auto.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_loop_auto.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11526962800417095
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "parallel_loop_gang.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_loop_gang.F90/parallel_loop_gang.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_loop_gang.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11555200400471222
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_loop_gang.F90/parallel_loop_gang.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_loop_gang.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11609329900238663
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "parallel_loop_reduction_add_general.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_loop_reduction_add_general.F90/parallel_loop_reduction_add_general.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_add_general.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11574835299688857
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_loop_reduction_add_general.F90/parallel_loop_reduction_add_general.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_add_general.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11594858999887947
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "parallel_loop_reduction_add_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_loop_reduction_add_loop.F90/parallel_loop_reduction_add_loop.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_add_loop.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11512315399886575
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_loop_reduction_add_loop.F90/parallel_loop_reduction_add_loop.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_add_loop.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11591966300329659
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "parallel_loop_reduction_add_vector_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_loop_reduction_add_vector_loop.F90/parallel_loop_reduction_add_vector_loop.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_add_vector_loop.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11543940599949565
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_loop_reduction_add_vector_loop.F90/parallel_loop_reduction_add_vector_loop.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_add_vector_loop.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1154164320032578
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "parallel_loop_reduction_and_general.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_loop_reduction_and_general.F90/parallel_loop_reduction_and_general.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_and_general.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11572412600798998
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_loop_reduction_and_general.F90/parallel_loop_reduction_and_general.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_and_general.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11563937200116925
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "parallel_loop_reduction_and_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_loop_reduction_and_loop.F90/parallel_loop_reduction_and_loop.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_and_loop.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11568498999986332
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_loop_reduction_and_loop.F90/parallel_loop_reduction_and_loop.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_and_loop.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11532832199009135
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "parallel_loop_reduction_and_vector_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_loop_reduction_and_vector_loop.F90/parallel_loop_reduction_and_vector_loop.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_and_vector_loop.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11530708000645973
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_loop_reduction_and_vector_loop.F90/parallel_loop_reduction_and_vector_loop.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_and_vector_loop.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11557440699834842
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "parallel_loop_reduction_bitand_general.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_loop_reduction_bitand_general.F90/parallel_loop_reduction_bitand_general.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitand_general.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11538520100293681
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_loop_reduction_bitand_general.F90/parallel_loop_reduction_bitand_general.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitand_general.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11530392400163691
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "parallel_loop_reduction_bitand_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_loop_reduction_bitand_loop.F90/parallel_loop_reduction_bitand_loop.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitand_loop.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11628096200001892
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_loop_reduction_bitand_loop.F90/parallel_loop_reduction_bitand_loop.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitand_loop.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11531806099810638
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "parallel_loop_reduction_bitand_vector_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_loop_reduction_bitand_vector_loop.F90/parallel_loop_reduction_bitand_vector_loop.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitand_vector_loop.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11534812000172678
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_loop_reduction_bitand_vector_loop.F90/parallel_loop_reduction_bitand_vector_loop.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitand_vector_loop.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1156142640102189
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "parallel_loop_reduction_bitor_general.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_loop_reduction_bitor_general.F90/parallel_loop_reduction_bitor_general.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitor_general.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11549035400093999
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_loop_reduction_bitor_general.F90/parallel_loop_reduction_bitor_general.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitor_general.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11543500699917786
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "parallel_loop_reduction_bitor_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_loop_reduction_bitor_loop.F90/parallel_loop_reduction_bitor_loop.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitor_loop.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11517756000102963
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_loop_reduction_bitor_loop.F90/parallel_loop_reduction_bitor_loop.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitor_loop.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11554686399176717
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "parallel_loop_reduction_bitor_vector_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_loop_reduction_bitor_vector_loop.F90/parallel_loop_reduction_bitor_vector_loop.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitor_vector_loop.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11657705401012208
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_loop_reduction_bitor_vector_loop.F90/parallel_loop_reduction_bitor_vector_loop.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitor_vector_loop.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11523684399435297
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "parallel_loop_reduction_bitxor_general.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_loop_reduction_bitxor_general.F90/parallel_loop_reduction_bitxor_general.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitxor_general.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11599515000125393
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_loop_reduction_bitxor_general.F90/parallel_loop_reduction_bitxor_general.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitxor_general.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11585076000483241
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "parallel_loop_reduction_bitxor_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_loop_reduction_bitxor_loop.F90/parallel_loop_reduction_bitxor_loop.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitxor_loop.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11536697600968182
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_loop_reduction_bitxor_loop.F90/parallel_loop_reduction_bitxor_loop.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitxor_loop.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11554625300050247
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "parallel_loop_reduction_bitxor_vector_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_loop_reduction_bitxor_vector_loop.F90/parallel_loop_reduction_bitxor_vector_loop.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitxor_vector_loop.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11557434700080194
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_loop_reduction_bitxor_vector_loop.F90/parallel_loop_reduction_bitxor_vector_loop.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitxor_vector_loop.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11556913699314464
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "parallel_loop_reduction_max_general.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_loop_reduction_max_general.F90/parallel_loop_reduction_max_general.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_max_general.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11543380600051023
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_loop_reduction_max_general.F90/parallel_loop_reduction_max_general.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_max_general.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1155230870062951
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "parallel_loop_reduction_max_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_loop_reduction_max_loop.F90/parallel_loop_reduction_max_loop.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_max_loop.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11552439999650232
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_loop_reduction_max_loop.F90/parallel_loop_reduction_max_loop.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_max_loop.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11575422500027344
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "parallel_loop_reduction_max_vector_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_loop_reduction_max_vector_loop.F90/parallel_loop_reduction_max_vector_loop.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_max_vector_loop.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11564511300821323
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_loop_reduction_max_vector_loop.F90/parallel_loop_reduction_max_vector_loop.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_max_vector_loop.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11575931400875561
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "parallel_loop_reduction_min_general.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_loop_reduction_min_general.F90/parallel_loop_reduction_min_general.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_min_general.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11550275799527299
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_loop_reduction_min_general.F90/parallel_loop_reduction_min_general.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_min_general.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11597068198898342
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "parallel_loop_reduction_min_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_loop_reduction_min_loop.F90/parallel_loop_reduction_min_loop.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_min_loop.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.115620836004382
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_loop_reduction_min_loop.F90/parallel_loop_reduction_min_loop.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_min_loop.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11539706400071736
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "parallel_loop_reduction_min_vector_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_loop_reduction_min_vector_loop.F90/parallel_loop_reduction_min_vector_loop.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_min_vector_loop.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11567142399144359
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_loop_reduction_min_vector_loop.F90/parallel_loop_reduction_min_vector_loop.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_min_vector_loop.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1152326970041031
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "parallel_loop_reduction_multiply_general.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_loop_reduction_multiply_general.F90/parallel_loop_reduction_multiply_general.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_multiply_general.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11609627500001807
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_loop_reduction_multiply_general.F90/parallel_loop_reduction_multiply_general.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_multiply_general.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11556221300270408
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "parallel_loop_reduction_multiply_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_loop_reduction_multiply_loop.F90/parallel_loop_reduction_multiply_loop.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_multiply_loop.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1155560909974156
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_loop_reduction_multiply_loop.F90/parallel_loop_reduction_multiply_loop.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_multiply_loop.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11647985599120148
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "parallel_loop_reduction_multiply_vector_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_loop_reduction_multiply_vector_loop.F90/parallel_loop_reduction_multiply_vector_loop.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_multiply_vector_loop.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11525348700524773
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_loop_reduction_multiply_vector_loop.F90/parallel_loop_reduction_multiply_vector_loop.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_multiply_vector_loop.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11638867099827621
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "parallel_loop_reduction_or_general.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_loop_reduction_or_general.F90/parallel_loop_reduction_or_general.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_or_general.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11554389800585341
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_loop_reduction_or_general.F90/parallel_loop_reduction_or_general.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_or_general.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11546596699918155
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "parallel_loop_reduction_or_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_loop_reduction_or_loop.F90/parallel_loop_reduction_or_loop.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_or_loop.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11544715099444147
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_loop_reduction_or_loop.F90/parallel_loop_reduction_or_loop.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_or_loop.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11529720199177973
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "parallel_loop_reduction_or_vector_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_loop_reduction_or_vector_loop.F90/parallel_loop_reduction_or_vector_loop.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_or_vector_loop.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11550734699994791
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_loop_reduction_or_vector_loop.F90/parallel_loop_reduction_or_vector_loop.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_or_vector_loop.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11541677200875711
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "parallel_loop_seq.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_loop_seq.F90/parallel_loop_seq.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_loop_seq.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11574408499291167
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_loop_seq.F90/parallel_loop_seq.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_loop_seq.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11546003600233234
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "parallel_loop_tile.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_loop_tile.F90/parallel_loop_tile.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_loop_tile.F90",
                    "config": 1,
                    "errors": "\n\nftn-1342 ftn: ERROR TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_loop_tile.F90, Line = 28, Column = 15 \n  Loop nests following an OpenMP or OpenACC construct with a TILE clause must be perfectly nested.\n\n\nftn-1342 ftn: ERROR TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_loop_tile.F90, Line = 31, Column = 15 \n  Loop nests following an OpenMP or OpenACC construct with a TILE clause must be perfectly nested.\n\nCray Fortran : Version 14.0.1 (20220526224428_3a8780657c742829e80f36338fb6ec6578642bb7)\nCray Fortran : Compile time:  0.0034 seconds\nCray Fortran : 94 source lines\nCray Fortran : 2 errors, 0 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11586720201012213
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_loop_tile.F90/parallel_loop_tile.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_loop_tile.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11545079800998792
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "parallel_loop_vector.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_loop_vector.F90/parallel_loop_vector.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_loop_vector.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11544379399856552
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_loop_vector.F90/parallel_loop_vector.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_loop_vector.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11552949000906665
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "parallel_loop_vector_blocking.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_loop_vector_blocking.F90/parallel_loop_vector_blocking.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_loop_vector_blocking.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11529540800256655
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_loop_vector_blocking.F90/parallel_loop_vector_blocking.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_loop_vector_blocking.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11558722099289298
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "parallel_loop_worker.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_loop_worker.F90/parallel_loop_worker.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_loop_worker.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11534342999220826
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_loop_worker.F90/parallel_loop_worker.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_loop_worker.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11587415701069403
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "parallel_loop_worker_blocking.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_loop_worker_blocking.F90/parallel_loop_worker_blocking.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_loop_worker_blocking.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1151142169983359
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_loop_worker_blocking.F90/parallel_loop_worker_blocking.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_loop_worker_blocking.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11552617399138398
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "parallel_present.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_present.F90/parallel_present.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_present.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11554297601105645
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_present.F90/parallel_present.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_present.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11535820900462568
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "parallel_private.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_private.F90/parallel_private.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_private.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11526505900837947
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_private.F90/parallel_private.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_private.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11601358599727973
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "parallel_reduction.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_reduction.F90/parallel_reduction.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_reduction.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11568194400751963
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_reduction.F90/parallel_reduction.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_reduction.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11544580799818505
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "parallel_scalar_default_firstprivate.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_scalar_default_firstprivate.F90/parallel_scalar_default_firstprivate.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_scalar_default_firstprivate.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11545675899833441
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_scalar_default_firstprivate.F90/parallel_scalar_default_firstprivate.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_scalar_default_firstprivate.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11572556900500786
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "parallel_switch.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_switch.F90/parallel_switch.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_switch.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11545462500362191
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_switch.F90/parallel_switch.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_switch.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11569534099544398
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "parallel_wait.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_wait.F90/parallel_wait.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_wait.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11559219099581242
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_wait.F90/parallel_wait.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_wait.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11548872099956498
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "parallel_while_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_while_loop.F90/parallel_while_loop.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_while_loop.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11543427599826828
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_while_loop.F90/parallel_while_loop.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_while_loop.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11564833899319638
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "serial.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/serial.F90/serial.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/serial.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11548540400690399
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/serial.F90/serial.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/serial.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11568244599038735
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "serial_async.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/serial_async.F90/serial_async.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/serial_async.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11549923100392334
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/serial_async.F90/serial_async.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/serial_async.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11587882500316482
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "serial_copy.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/serial_copy.F90/serial_copy.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/serial_copy.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11554587200225797
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/serial_copy.F90/serial_copy.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/serial_copy.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11566203599795699
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "serial_copyin.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/serial_copyin.F90/serial_copyin.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/serial_copyin.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11553764599375427
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/serial_copyin.F90/serial_copyin.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/serial_copyin.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11525636201258749
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT2 -o /global/u1/j/jarmusch/OpenACCV-V/build/serial_copyin.F90/serial_copyin.F902 /global/u1/j/jarmusch/OpenACCV-V/Tests/serial_copyin.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1157176129927393
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/serial_copyin.F90/serial_copyin.F903 /global/u1/j/jarmusch/OpenACCV-V/Tests/serial_copyin.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11573057899659034
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "serial_copyout.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/serial_copyout.F90/serial_copyout.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/serial_copyout.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11636166900279932
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/serial_copyout.F90/serial_copyout.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/serial_copyout.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11614207399543375
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT2 -o /global/u1/j/jarmusch/OpenACCV-V/build/serial_copyout.F90/serial_copyout.F902 /global/u1/j/jarmusch/OpenACCV-V/Tests/serial_copyout.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11546773000736721
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/serial_copyout.F90/serial_copyout.F903 /global/u1/j/jarmusch/OpenACCV-V/Tests/serial_copyout.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11562551600218285
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT3 -o /global/u1/j/jarmusch/OpenACCV-V/build/serial_copyout.F90/serial_copyout.F904 /global/u1/j/jarmusch/OpenACCV-V/Tests/serial_copyout.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1153847299865447
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/serial_copyout.F90/serial_copyout.F905 /global/u1/j/jarmusch/OpenACCV-V/Tests/serial_copyout.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11531828199804295
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT2 -o /global/u1/j/jarmusch/OpenACCV-V/build/serial_copyout.F90/serial_copyout.F906 /global/u1/j/jarmusch/OpenACCV-V/Tests/serial_copyout.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11562435299856588
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/serial_copyout.F90/serial_copyout.F907 /global/u1/j/jarmusch/OpenACCV-V/Tests/serial_copyout.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11570603100699373
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "serial_create.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/serial_create.F90/serial_create.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/serial_create.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1155392189975828
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/serial_create.F90/serial_create.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/serial_create.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11556304500845727
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "serial_default_copy.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/serial_default_copy.F90/serial_default_copy.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/serial_default_copy.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11546517499664333
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/serial_default_copy.F90/serial_default_copy.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/serial_default_copy.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11549556399404537
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT2 -o /global/u1/j/jarmusch/OpenACCV-V/build/serial_default_copy.F90/serial_default_copy.F902 /global/u1/j/jarmusch/OpenACCV-V/Tests/serial_default_copy.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11560145799012389
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/serial_default_copy.F90/serial_default_copy.F903 /global/u1/j/jarmusch/OpenACCV-V/Tests/serial_default_copy.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.115621356992051
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "serial_default_present.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/serial_default_present.F90/serial_default_present.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/serial_default_present.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11541962799674366
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/serial_default_present.F90/serial_default_present.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/serial_default_present.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11580680600309279
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "serial_firstprivate.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/serial_firstprivate.F90/serial_firstprivate.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/serial_firstprivate.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11545501500950195
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/serial_firstprivate.F90/serial_firstprivate.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/serial_firstprivate.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11570082099933643
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT2 -o /global/u1/j/jarmusch/OpenACCV-V/build/serial_firstprivate.F90/serial_firstprivate.F902 /global/u1/j/jarmusch/OpenACCV-V/Tests/serial_firstprivate.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11546968399488833
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/serial_firstprivate.F90/serial_firstprivate.F903 /global/u1/j/jarmusch/OpenACCV-V/Tests/serial_firstprivate.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11623065499588847
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "serial_if.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/serial_if.F90/serial_if.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/serial_if.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11523301700071897
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/serial_if.F90/serial_if.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/serial_if.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11566932099231053
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT2 -o /global/u1/j/jarmusch/OpenACCV-V/build/serial_if.F90/serial_if.F902 /global/u1/j/jarmusch/OpenACCV-V/Tests/serial_if.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11546505500155035
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/serial_if.F90/serial_if.F903 /global/u1/j/jarmusch/OpenACCV-V/Tests/serial_if.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11516985599882901
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT3 -o /global/u1/j/jarmusch/OpenACCV-V/build/serial_if.F90/serial_if.F904 /global/u1/j/jarmusch/OpenACCV-V/Tests/serial_if.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11558580798737239
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/serial_if.F90/serial_if.F905 /global/u1/j/jarmusch/OpenACCV-V/Tests/serial_if.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11563474300783128
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT2 -o /global/u1/j/jarmusch/OpenACCV-V/build/serial_if.F90/serial_if.F906 /global/u1/j/jarmusch/OpenACCV-V/Tests/serial_if.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11546565699973144
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/serial_if.F90/serial_if.F907 /global/u1/j/jarmusch/OpenACCV-V/Tests/serial_if.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11528516799444333
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "serial_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/serial_loop.F90/serial_loop.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/serial_loop.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11515710000821855
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/serial_loop.F90/serial_loop.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/serial_loop.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11579051399894524
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "serial_loop_async.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/serial_loop_async.F90/serial_loop_async.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/serial_loop_async.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11525821599934716
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/serial_loop_async.F90/serial_loop_async.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/serial_loop_async.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11587567899550777
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "serial_loop_auto.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/serial_loop_auto.F90/serial_loop_auto.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/serial_loop_auto.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11569605099793989
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/serial_loop_auto.F90/serial_loop_auto.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/serial_loop_auto.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11572554899612442
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "serial_loop_gang.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/serial_loop_gang.F90/serial_loop_gang.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/serial_loop_gang.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11526427700300701
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/serial_loop_gang.F90/serial_loop_gang.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/serial_loop_gang.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11540591099765152
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "serial_loop_reduction_add_general.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/serial_loop_reduction_add_general.F90/serial_loop_reduction_add_general.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/serial_loop_reduction_add_general.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11576533499464858
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/serial_loop_reduction_add_general.F90/serial_loop_reduction_add_general.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/serial_loop_reduction_add_general.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11548969299474265
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "serial_loop_reduction_add_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/serial_loop_reduction_add_loop.F90/serial_loop_reduction_add_loop.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/serial_loop_reduction_add_loop.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11560796099365689
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/serial_loop_reduction_add_loop.F90/serial_loop_reduction_add_loop.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/serial_loop_reduction_add_loop.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11538455000845715
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "serial_loop_reduction_add_vector_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/serial_loop_reduction_add_vector_loop.F90/serial_loop_reduction_add_vector_loop.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/serial_loop_reduction_add_vector_loop.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11538676399504766
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/serial_loop_reduction_add_vector_loop.F90/serial_loop_reduction_add_vector_loop.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/serial_loop_reduction_add_vector_loop.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11592768999980763
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "serial_loop_reduction_and_general.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/serial_loop_reduction_and_general.F90/serial_loop_reduction_and_general.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/serial_loop_reduction_and_general.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11589466599980369
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/serial_loop_reduction_and_general.F90/serial_loop_reduction_and_general.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/serial_loop_reduction_and_general.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11569946799136233
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "serial_loop_reduction_and_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/serial_loop_reduction_and_loop.F90/serial_loop_reduction_and_loop.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/serial_loop_reduction_and_loop.F90",
                    "config": 1,
                    "errors": "\n\nftn-303 ftn: ERROR TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/serial_loop_reduction_and_loop.F90, Line = 47, Column = 23 \n  Data type LOGICAL is not allowed with INTEGER for the operation \"eq\".\n\nCray Fortran : Version 14.0.1 (20220526224428_3a8780657c742829e80f36338fb6ec6578642bb7)\nCray Fortran : Compile time:  0.0036 seconds\nCray Fortran : 113 source lines\nCray Fortran : 1 errors, 0 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.06516613598796539
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/serial_loop_reduction_and_loop.F90/serial_loop_reduction_and_loop.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/serial_loop_reduction_and_loop.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11578895099228248
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "serial_loop_reduction_and_vector_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/serial_loop_reduction_and_vector_loop.F90/serial_loop_reduction_and_vector_loop.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/serial_loop_reduction_and_vector_loop.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11551029300608207
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/serial_loop_reduction_and_vector_loop.F90/serial_loop_reduction_and_vector_loop.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/serial_loop_reduction_and_vector_loop.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11522887799947057
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "serial_loop_reduction_bitand_general.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/serial_loop_reduction_bitand_general.F90/serial_loop_reduction_bitand_general.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/serial_loop_reduction_bitand_general.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11544835299719125
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/serial_loop_reduction_bitand_general.F90/serial_loop_reduction_bitand_general.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/serial_loop_reduction_bitand_general.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11558543800492771
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "serial_loop_reduction_bitand_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/serial_loop_reduction_bitand_loop.F90/serial_loop_reduction_bitand_loop.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/serial_loop_reduction_bitand_loop.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11526706299628131
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/serial_loop_reduction_bitand_loop.F90/serial_loop_reduction_bitand_loop.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/serial_loop_reduction_bitand_loop.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11545559699879959
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "serial_loop_reduction_bitand_vector_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/serial_loop_reduction_bitand_vector_loop.F90/serial_loop_reduction_bitand_vector_loop.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/serial_loop_reduction_bitand_vector_loop.F90",
                    "config": 1,
                    "errors": "\n\nftn-100 ftn: ERROR TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/serial_loop_reduction_bitand_vector_loop.F90, Line = 16, Column = 3 \n  This statement must begin with a label, a keyword, or an identifier.\n\n\nftn-113 ftn: ERROR TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/serial_loop_reduction_bitand_vector_loop.F90, Line = 17, Column = 16 \n  IMPLICIT NONE is specified in the local scope, therefore an explicit type must be specified for data object \"SEED\".\n\n\nftn-100 ftn: ERROR TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/serial_loop_reduction_bitand_vector_loop.F90, Line = 18, Column = 3 \n  This statement must begin with a label, a keyword, or an identifier.\n\nCray Fortran : Version 14.0.1 (20220526224428_3a8780657c742829e80f36338fb6ec6578642bb7)\nCray Fortran : Compile time:  0.0036 seconds\nCray Fortran : 104 source lines\nCray Fortran : 3 errors, 0 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11535894000553526
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/serial_loop_reduction_bitand_vector_loop.F90/serial_loop_reduction_bitand_vector_loop.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/serial_loop_reduction_bitand_vector_loop.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11548410200339276
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "serial_loop_reduction_bitor_general.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/serial_loop_reduction_bitor_general.F90/serial_loop_reduction_bitor_general.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/serial_loop_reduction_bitor_general.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11536463101219852
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/serial_loop_reduction_bitor_general.F90/serial_loop_reduction_bitor_general.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/serial_loop_reduction_bitor_general.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11626429999887478
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "serial_loop_reduction_bitor_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/serial_loop_reduction_bitor_loop.F90/serial_loop_reduction_bitor_loop.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/serial_loop_reduction_bitor_loop.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11529597900516819
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/serial_loop_reduction_bitor_loop.F90/serial_loop_reduction_bitor_loop.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/serial_loop_reduction_bitor_loop.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11584438900172245
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "serial_loop_reduction_bitor_vector_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/serial_loop_reduction_bitor_vector_loop.F90/serial_loop_reduction_bitor_vector_loop.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/serial_loop_reduction_bitor_vector_loop.F90",
                    "config": 1,
                    "errors": "\n\nftn-100 ftn: ERROR TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/serial_loop_reduction_bitor_vector_loop.F90, Line = 15, Column = 3 \n  This statement must begin with a label, a keyword, or an identifier.\n\n\nftn-113 ftn: ERROR TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/serial_loop_reduction_bitor_vector_loop.F90, Line = 16, Column = 16 \n  IMPLICIT NONE is specified in the local scope, therefore an explicit type must be specified for data object \"SEED\".\n\n\nftn-100 ftn: ERROR TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/serial_loop_reduction_bitor_vector_loop.F90, Line = 17, Column = 3 \n  This statement must begin with a label, a keyword, or an identifier.\n\nCray Fortran : Version 14.0.1 (20220526224428_3a8780657c742829e80f36338fb6ec6578642bb7)\nCray Fortran : Compile time:  0.0039 seconds\nCray Fortran : 100 source lines\nCray Fortran : 3 errors, 0 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11578148799890187
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/serial_loop_reduction_bitor_vector_loop.F90/serial_loop_reduction_bitor_vector_loop.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/serial_loop_reduction_bitor_vector_loop.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11540441800025292
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "serial_loop_reduction_bitxor_general.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/serial_loop_reduction_bitxor_general.F90/serial_loop_reduction_bitxor_general.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/serial_loop_reduction_bitxor_general.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11535499300225638
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/serial_loop_reduction_bitxor_general.F90/serial_loop_reduction_bitxor_general.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/serial_loop_reduction_bitxor_general.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1154621799942106
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "serial_loop_reduction_bitxor_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/serial_loop_reduction_bitxor_loop.F90/serial_loop_reduction_bitxor_loop.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/serial_loop_reduction_bitxor_loop.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11568074199021794
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/serial_loop_reduction_bitxor_loop.F90/serial_loop_reduction_bitxor_loop.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/serial_loop_reduction_bitxor_loop.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11552393899182789
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "serial_loop_reduction_bitxor_vector_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/serial_loop_reduction_bitxor_vector_loop.F90/serial_loop_reduction_bitxor_vector_loop.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/serial_loop_reduction_bitxor_vector_loop.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11539545100822579
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/serial_loop_reduction_bitxor_vector_loop.F90/serial_loop_reduction_bitxor_vector_loop.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/serial_loop_reduction_bitxor_vector_loop.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1153455540043069
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "serial_loop_reduction_max_general.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/serial_loop_reduction_max_general.F90/serial_loop_reduction_max_general.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/serial_loop_reduction_max_general.F90",
                    "config": 1,
                    "errors": "\n\nftn-100 ftn: ERROR TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/serial_loop_reduction_max_general.F90, Line = 11, Column = 3 \n  This statement must begin with a label, a keyword, or an identifier.\n\n\nftn-113 ftn: ERROR TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/serial_loop_reduction_max_general.F90, Line = 12, Column = 16 \n  IMPLICIT NONE is specified in the local scope, therefore an explicit type must be specified for data object \"SEED\".\n\n\nftn-100 ftn: ERROR TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/serial_loop_reduction_max_general.F90, Line = 13, Column = 3 \n  This statement must begin with a label, a keyword, or an identifier.\n\nCray Fortran : Version 14.0.1 (20220526224428_3a8780657c742829e80f36338fb6ec6578642bb7)\nCray Fortran : Compile time:  0.0035 seconds\nCray Fortran : 82 source lines\nCray Fortran : 3 errors, 0 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11570514900085982
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/serial_loop_reduction_max_general.F90/serial_loop_reduction_max_general.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/serial_loop_reduction_max_general.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11529557700851001
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "serial_loop_reduction_max_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/serial_loop_reduction_max_loop.F90/serial_loop_reduction_max_loop.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/serial_loop_reduction_max_loop.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11524104299314786
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/serial_loop_reduction_max_loop.F90/serial_loop_reduction_max_loop.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/serial_loop_reduction_max_loop.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1157197080028709
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "serial_loop_reduction_max_vector_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/serial_loop_reduction_max_vector_loop.F90/serial_loop_reduction_max_vector_loop.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/serial_loop_reduction_max_vector_loop.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11576608699397184
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/serial_loop_reduction_max_vector_loop.F90/serial_loop_reduction_max_vector_loop.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/serial_loop_reduction_max_vector_loop.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11537332899752073
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "serial_loop_reduction_min_general.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/serial_loop_reduction_min_general.F90/serial_loop_reduction_min_general.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/serial_loop_reduction_min_general.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11535090500547085
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/serial_loop_reduction_min_general.F90/serial_loop_reduction_min_general.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/serial_loop_reduction_min_general.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.115599425000255
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "serial_loop_reduction_min_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/serial_loop_reduction_min_loop.F90/serial_loop_reduction_min_loop.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/serial_loop_reduction_min_loop.F90",
                    "config": 1,
                    "errors": "\n\nftn-100 ftn: ERROR TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/serial_loop_reduction_min_loop.F90, Line = 14, Column = 3 \n  This statement must begin with a label, a keyword, or an identifier.\n\n\nftn-113 ftn: ERROR TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/serial_loop_reduction_min_loop.F90, Line = 15, Column = 16 \n  IMPLICIT NONE is specified in the local scope, therefore an explicit type must be specified for data object \"SEED\".\n\n\nftn-100 ftn: ERROR TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/serial_loop_reduction_min_loop.F90, Line = 16, Column = 3 \n  This statement must begin with a label, a keyword, or an identifier.\n\nCray Fortran : Version 14.0.1 (20220526224428_3a8780657c742829e80f36338fb6ec6578642bb7)\nCray Fortran : Compile time:  0.0037 seconds\nCray Fortran : 104 source lines\nCray Fortran : 3 errors, 0 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11556580000615213
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/serial_loop_reduction_min_loop.F90/serial_loop_reduction_min_loop.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/serial_loop_reduction_min_loop.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11530498600041028
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "serial_loop_reduction_min_vector_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/serial_loop_reduction_min_vector_loop.F90/serial_loop_reduction_min_vector_loop.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/serial_loop_reduction_min_vector_loop.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11533036599576008
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/serial_loop_reduction_min_vector_loop.F90/serial_loop_reduction_min_vector_loop.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/serial_loop_reduction_min_vector_loop.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11612469999818131
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "serial_loop_reduction_multiply_general.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/serial_loop_reduction_multiply_general.F90/serial_loop_reduction_multiply_general.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/serial_loop_reduction_multiply_general.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11518643700401299
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/serial_loop_reduction_multiply_general.F90/serial_loop_reduction_multiply_general.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/serial_loop_reduction_multiply_general.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11589408401050605
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "serial_loop_reduction_multiply_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/serial_loop_reduction_multiply_loop.F90/serial_loop_reduction_multiply_loop.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/serial_loop_reduction_multiply_loop.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1155445390031673
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/serial_loop_reduction_multiply_loop.F90/serial_loop_reduction_multiply_loop.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/serial_loop_reduction_multiply_loop.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11573126999428496
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "serial_loop_reduction_multiply_vector_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/serial_loop_reduction_multiply_vector_loop.F90/serial_loop_reduction_multiply_vector_loop.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/serial_loop_reduction_multiply_vector_loop.F90",
                    "config": 1,
                    "errors": "\n\nftn-100 ftn: ERROR TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/serial_loop_reduction_multiply_vector_loop.F90, Line = 14, Column = 3 \n  This statement must begin with a label, a keyword, or an identifier.\n\n\nftn-113 ftn: ERROR TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/serial_loop_reduction_multiply_vector_loop.F90, Line = 15, Column = 16 \n  IMPLICIT NONE is specified in the local scope, therefore an explicit type must be specified for data object \"SEED\".\n\n\nftn-100 ftn: ERROR TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/serial_loop_reduction_multiply_vector_loop.F90, Line = 16, Column = 3 \n  This statement must begin with a label, a keyword, or an identifier.\n\nCray Fortran : Version 14.0.1 (20220526224428_3a8780657c742829e80f36338fb6ec6578642bb7)\nCray Fortran : Compile time:  0.0036 seconds\nCray Fortran : 93 source lines\nCray Fortran : 3 errors, 0 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11607016499328893
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/serial_loop_reduction_multiply_vector_loop.F90/serial_loop_reduction_multiply_vector_loop.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/serial_loop_reduction_multiply_vector_loop.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11585292500967626
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "serial_loop_reduction_or_general.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/serial_loop_reduction_or_general.F90/serial_loop_reduction_or_general.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/serial_loop_reduction_or_general.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11535294899658766
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/serial_loop_reduction_or_general.F90/serial_loop_reduction_or_general.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/serial_loop_reduction_or_general.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11561428300046828
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "serial_loop_reduction_or_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/serial_loop_reduction_or_loop.F90/serial_loop_reduction_or_loop.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/serial_loop_reduction_or_loop.F90",
                    "config": 1,
                    "errors": "\n\nftn-100 ftn: ERROR TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/serial_loop_reduction_or_loop.F90, Line = 16, Column = 3 \n  This statement must begin with a label, a keyword, or an identifier.\n\n\nftn-113 ftn: ERROR TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/serial_loop_reduction_or_loop.F90, Line = 17, Column = 16 \n  IMPLICIT NONE is specified in the local scope, therefore an explicit type must be specified for data object \"SEED\".\n\n\nftn-100 ftn: ERROR TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/serial_loop_reduction_or_loop.F90, Line = 18, Column = 3 \n  This statement must begin with a label, a keyword, or an identifier.\n\nCray Fortran : Version 14.0.1 (20220526224428_3a8780657c742829e80f36338fb6ec6578642bb7)\nCray Fortran : Compile time:  0.0036 seconds\nCray Fortran : 124 source lines\nCray Fortran : 3 errors, 0 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11551586299901828
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/serial_loop_reduction_or_loop.F90/serial_loop_reduction_or_loop.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/serial_loop_reduction_or_loop.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11571475799428299
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "serial_loop_reduction_or_vector_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/serial_loop_reduction_or_vector_loop.F90/serial_loop_reduction_or_vector_loop.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/serial_loop_reduction_or_vector_loop.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11545952499727719
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/serial_loop_reduction_or_vector_loop.F90/serial_loop_reduction_or_vector_loop.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/serial_loop_reduction_or_vector_loop.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11551039198820945
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "serial_loop_seq.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/serial_loop_seq.F90/serial_loop_seq.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/serial_loop_seq.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11571695198654197
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/serial_loop_seq.F90/serial_loop_seq.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/serial_loop_seq.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11559551701066084
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "serial_loop_tile.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/serial_loop_tile.F90/serial_loop_tile.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/serial_loop_tile.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1160883999982616
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/serial_loop_tile.F90/serial_loop_tile.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/serial_loop_tile.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11620350200973917
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "serial_loop_vector.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/serial_loop_vector.F90/serial_loop_vector.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/serial_loop_vector.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11542453699803445
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/serial_loop_vector.F90/serial_loop_vector.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/serial_loop_vector.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11584091199620161
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "serial_loop_vector_blocking.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/serial_loop_vector_blocking.F90/serial_loop_vector_blocking.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/serial_loop_vector_blocking.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11558168000192381
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/serial_loop_vector_blocking.F90/serial_loop_vector_blocking.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/serial_loop_vector_blocking.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11577635699359234
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "serial_loop_worker.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/serial_loop_worker.F90/serial_loop_worker.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/serial_loop_worker.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11542153199843597
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/serial_loop_worker.F90/serial_loop_worker.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/serial_loop_worker.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11551748700730968
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "serial_loop_worker_blocking.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/serial_loop_worker_blocking.F90/serial_loop_worker_blocking.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/serial_loop_worker_blocking.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11631857400061563
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/serial_loop_worker_blocking.F90/serial_loop_worker_blocking.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/serial_loop_worker_blocking.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11628295600530691
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "serial_present.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/serial_present.F90/serial_present.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/serial_present.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11549182700400706
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/serial_present.F90/serial_present.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/serial_present.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11561375198652968
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "serial_private.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/serial_private.F90/serial_private.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/serial_private.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11544016799598467
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/serial_private.F90/serial_private.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/serial_private.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11652600500383414
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "serial_reduction.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/serial_reduction.F90/serial_reduction.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/serial_reduction.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11549719799950253
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/serial_reduction.F90/serial_reduction.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/serial_reduction.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11649831199611071
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "serial_scalar_default_firstprivate.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/serial_scalar_default_firstprivate.F90/serial_scalar_default_firstprivate.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/serial_scalar_default_firstprivate.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11541059998853598
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/serial_scalar_default_firstprivate.F90/serial_scalar_default_firstprivate.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/serial_scalar_default_firstprivate.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11569851600506809
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "serial_switch.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/serial_switch.F90/serial_switch.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/serial_switch.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11543029799940996
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/serial_switch.F90/serial_switch.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/serial_switch.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.115708244004054
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "serial_wait.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/serial_wait.F90/serial_wait.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/serial_wait.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11601553899527062
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/serial_wait.F90/serial_wait.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/serial_wait.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1156059069908224
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "serial_while_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/serial_while_loop.F90/serial_while_loop.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/serial_while_loop.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11556974799896125
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/serial_while_loop.F90/serial_while_loop.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/serial_while_loop.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11582454000017606
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "set_default_async.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/set_default_async.F90/set_default_async.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/set_default_async.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11593047399946954
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/set_default_async.F90/set_default_async.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/set_default_async.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11548405198846012
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "set_device_num.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/set_device_num.F90/set_device_num.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/set_device_num.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11560981599905062
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/set_device_num.F90/set_device_num.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/set_device_num.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11568199499743059
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "set_device_type.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/set_device_type.F90/set_device_type.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/set_device_type.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11538178400951438
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/set_device_type.F90/set_device_type.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/set_device_type.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11594054401211906
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT2 -o /global/u1/j/jarmusch/OpenACCV-V/build/set_device_type.F90/set_device_type.F902 /global/u1/j/jarmusch/OpenACCV-V/Tests/set_device_type.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11549459298839793
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/set_device_type.F90/set_device_type.F903 /global/u1/j/jarmusch/OpenACCV-V/Tests/set_device_type.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11553965999337379
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT3 -o /global/u1/j/jarmusch/OpenACCV-V/build/set_device_type.F90/set_device_type.F904 /global/u1/j/jarmusch/OpenACCV-V/Tests/set_device_type.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11561801200150512
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/set_device_type.F90/set_device_type.F905 /global/u1/j/jarmusch/OpenACCV-V/Tests/set_device_type.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1155582960054744
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT2 -o /global/u1/j/jarmusch/OpenACCV-V/build/set_device_type.F90/set_device_type.F906 /global/u1/j/jarmusch/OpenACCV-V/Tests/set_device_type.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11554654300562106
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/set_device_type.F90/set_device_type.F907 /global/u1/j/jarmusch/OpenACCV-V/Tests/set_device_type.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11564251799427439
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "set_device_type_nvidia.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/set_device_type_nvidia.F90/set_device_type_nvidia.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/set_device_type_nvidia.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11546819200157188
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/set_device_type_nvidia.F90/set_device_type_nvidia.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/set_device_type_nvidia.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11585280401050113
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "shutdown.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/shutdown.F90/shutdown.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/shutdown.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11552715601283126
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/shutdown.F90/shutdown.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/shutdown.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11551340800360776
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "shutdown_device_num.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/shutdown_device_num.F90/shutdown_device_num.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/shutdown_device_num.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11539661399729084
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/shutdown_device_num.F90/shutdown_device_num.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/shutdown_device_num.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11559116900025401
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "shutdown_device_type.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/shutdown_device_type.F90/shutdown_device_type.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/shutdown_device_type.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11525341600645334
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/shutdown_device_type.F90/shutdown_device_type.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/shutdown_device_type.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11612350700306706
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT2 -o /global/u1/j/jarmusch/OpenACCV-V/build/shutdown_device_type.F90/shutdown_device_type.F902 /global/u1/j/jarmusch/OpenACCV-V/Tests/shutdown_device_type.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11592174800171051
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/shutdown_device_type.F90/shutdown_device_type.F903 /global/u1/j/jarmusch/OpenACCV-V/Tests/shutdown_device_type.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11569864599732682
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT3 -o /global/u1/j/jarmusch/OpenACCV-V/build/shutdown_device_type.F90/shutdown_device_type.F904 /global/u1/j/jarmusch/OpenACCV-V/Tests/shutdown_device_type.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11562588599917945
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/shutdown_device_type.F90/shutdown_device_type.F905 /global/u1/j/jarmusch/OpenACCV-V/Tests/shutdown_device_type.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11580862999835517
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT2 -o /global/u1/j/jarmusch/OpenACCV-V/build/shutdown_device_type.F90/shutdown_device_type.F906 /global/u1/j/jarmusch/OpenACCV-V/Tests/shutdown_device_type.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11553450900828466
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/shutdown_device_type.F90/shutdown_device_type.F907 /global/u1/j/jarmusch/OpenACCV-V/Tests/shutdown_device_type.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11542922600347083
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "shutdown_device_type_num.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/shutdown_device_type_num.F90/shutdown_device_type_num.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/shutdown_device_type_num.F90",
                    "config": 1,
                    "errors": "\n\nftn-1307 ftn: ERROR TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/shutdown_device_type_num.F90, Line = 12, Column = 41 \n  The kind (4) of this actual argument does not match that of its associated dummy argument (8).\n\n\nftn-790 ftn: WARNING TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/shutdown_device_type_num.F90, Line = 13, Column = 15 \n  Unknown or unsupported compiler directive or syntax error.\n\n\nftn-1307 ftn: ERROR TEST2, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/shutdown_device_type_num.F90, Line = 33, Column = 41 \n  The kind (4) of this actual argument does not match that of its associated dummy argument (8).\n\n\nftn-790 ftn: WARNING TEST2, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/shutdown_device_type_num.F90, Line = 34, Column = 15 \n  Unknown or unsupported compiler directive or syntax error.\n\n\nftn-1307 ftn: ERROR TEST3, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/shutdown_device_type_num.F90, Line = 54, Column = 41 \n  The kind (4) of this actual argument does not match that of its associated dummy argument (8).\n\n\nftn-790 ftn: WARNING TEST3, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/shutdown_device_type_num.F90, Line = 55, Column = 15 \n  Unknown or unsupported compiler directive or syntax error.\n\nCray Fortran : Version 14.0.1 (20220526224428_3a8780657c742829e80f36338fb6ec6578642bb7)\nCray Fortran : Compile time:  0.0084 seconds\nCray Fortran : 145 source lines\nCray Fortran : 3 errors, 3 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.1152835150132887
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/shutdown_device_type_num.F90/shutdown_device_type_num.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/shutdown_device_type_num.F90",
                    "config": 1,
                    "errors": "\n\nftn-1307 ftn: ERROR TEST2, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/shutdown_device_type_num.F90, Line = 33, Column = 41 \n  The kind (4) of this actual argument does not match that of its associated dummy argument (8).\n\n\nftn-790 ftn: WARNING TEST2, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/shutdown_device_type_num.F90, Line = 34, Column = 15 \n  Unknown or unsupported compiler directive or syntax error.\n\n\nftn-1307 ftn: ERROR TEST3, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/shutdown_device_type_num.F90, Line = 54, Column = 41 \n  The kind (4) of this actual argument does not match that of its associated dummy argument (8).\n\n\nftn-790 ftn: WARNING TEST3, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/shutdown_device_type_num.F90, Line = 55, Column = 15 \n  Unknown or unsupported compiler directive or syntax error.\n\nCray Fortran : Version 14.0.1 (20220526224428_3a8780657c742829e80f36338fb6ec6578642bb7)\nCray Fortran : Compile time:  0.0066 seconds\nCray Fortran : 136 source lines\nCray Fortran : 2 errors, 2 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.1153279399877647
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT2 -o /global/u1/j/jarmusch/OpenACCV-V/build/shutdown_device_type_num.F90/shutdown_device_type_num.F902 /global/u1/j/jarmusch/OpenACCV-V/Tests/shutdown_device_type_num.F90",
                    "config": 1,
                    "errors": "\n\nftn-1307 ftn: ERROR TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/shutdown_device_type_num.F90, Line = 12, Column = 41 \n  The kind (4) of this actual argument does not match that of its associated dummy argument (8).\n\n\nftn-790 ftn: WARNING TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/shutdown_device_type_num.F90, Line = 13, Column = 15 \n  Unknown or unsupported compiler directive or syntax error.\n\n\nftn-1307 ftn: ERROR TEST3, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/shutdown_device_type_num.F90, Line = 54, Column = 41 \n  The kind (4) of this actual argument does not match that of its associated dummy argument (8).\n\n\nftn-790 ftn: WARNING TEST3, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/shutdown_device_type_num.F90, Line = 55, Column = 15 \n  Unknown or unsupported compiler directive or syntax error.\n\nCray Fortran : Version 14.0.1 (20220526224428_3a8780657c742829e80f36338fb6ec6578642bb7)\nCray Fortran : Compile time:  0.0070 seconds\nCray Fortran : 136 source lines\nCray Fortran : 2 errors, 2 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11527140199905261
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/shutdown_device_type_num.F90/shutdown_device_type_num.F903 /global/u1/j/jarmusch/OpenACCV-V/Tests/shutdown_device_type_num.F90",
                    "config": 1,
                    "errors": "\n\nftn-1307 ftn: ERROR TEST2, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/shutdown_device_type_num.F90, Line = 33, Column = 41 \n  The kind (4) of this actual argument does not match that of its associated dummy argument (8).\n\n\nftn-790 ftn: WARNING TEST2, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/shutdown_device_type_num.F90, Line = 34, Column = 15 \n  Unknown or unsupported compiler directive or syntax error.\n\n\nftn-1307 ftn: ERROR TEST3, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/shutdown_device_type_num.F90, Line = 54, Column = 41 \n  The kind (4) of this actual argument does not match that of its associated dummy argument (8).\n\n\nftn-790 ftn: WARNING TEST3, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/shutdown_device_type_num.F90, Line = 55, Column = 15 \n  Unknown or unsupported compiler directive or syntax error.\n\nCray Fortran : Version 14.0.1 (20220526224428_3a8780657c742829e80f36338fb6ec6578642bb7)\nCray Fortran : Compile time:  0.0070 seconds\nCray Fortran : 136 source lines\nCray Fortran : 2 errors, 2 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.1156381490000058
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT3 -o /global/u1/j/jarmusch/OpenACCV-V/build/shutdown_device_type_num.F90/shutdown_device_type_num.F904 /global/u1/j/jarmusch/OpenACCV-V/Tests/shutdown_device_type_num.F90",
                    "config": 1,
                    "errors": "\n\nftn-1307 ftn: ERROR TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/shutdown_device_type_num.F90, Line = 12, Column = 41 \n  The kind (4) of this actual argument does not match that of its associated dummy argument (8).\n\n\nftn-790 ftn: WARNING TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/shutdown_device_type_num.F90, Line = 13, Column = 15 \n  Unknown or unsupported compiler directive or syntax error.\n\n\nftn-1307 ftn: ERROR TEST2, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/shutdown_device_type_num.F90, Line = 33, Column = 41 \n  The kind (4) of this actual argument does not match that of its associated dummy argument (8).\n\n\nftn-790 ftn: WARNING TEST2, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/shutdown_device_type_num.F90, Line = 34, Column = 15 \n  Unknown or unsupported compiler directive or syntax error.\n\nCray Fortran : Version 14.0.1 (20220526224428_3a8780657c742829e80f36338fb6ec6578642bb7)\nCray Fortran : Compile time:  0.0068 seconds\nCray Fortran : 136 source lines\nCray Fortran : 2 errors, 2 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.1157241460023215
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/shutdown_device_type_num.F90/shutdown_device_type_num.F905 /global/u1/j/jarmusch/OpenACCV-V/Tests/shutdown_device_type_num.F90",
                    "config": 1,
                    "errors": "\n\nftn-1307 ftn: ERROR TEST2, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/shutdown_device_type_num.F90, Line = 33, Column = 41 \n  The kind (4) of this actual argument does not match that of its associated dummy argument (8).\n\n\nftn-790 ftn: WARNING TEST2, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/shutdown_device_type_num.F90, Line = 34, Column = 15 \n  Unknown or unsupported compiler directive or syntax error.\n\n\nftn-1307 ftn: ERROR TEST3, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/shutdown_device_type_num.F90, Line = 54, Column = 41 \n  The kind (4) of this actual argument does not match that of its associated dummy argument (8).\n\n\nftn-790 ftn: WARNING TEST3, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/shutdown_device_type_num.F90, Line = 55, Column = 15 \n  Unknown or unsupported compiler directive or syntax error.\n\nCray Fortran : Version 14.0.1 (20220526224428_3a8780657c742829e80f36338fb6ec6578642bb7)\nCray Fortran : Compile time:  0.0072 seconds\nCray Fortran : 136 source lines\nCray Fortran : 2 errors, 2 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.1156783980113687
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT2 -o /global/u1/j/jarmusch/OpenACCV-V/build/shutdown_device_type_num.F90/shutdown_device_type_num.F906 /global/u1/j/jarmusch/OpenACCV-V/Tests/shutdown_device_type_num.F90",
                    "config": 1,
                    "errors": "\n\nftn-1307 ftn: ERROR TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/shutdown_device_type_num.F90, Line = 12, Column = 41 \n  The kind (4) of this actual argument does not match that of its associated dummy argument (8).\n\n\nftn-790 ftn: WARNING TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/shutdown_device_type_num.F90, Line = 13, Column = 15 \n  Unknown or unsupported compiler directive or syntax error.\n\n\nftn-1307 ftn: ERROR TEST3, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/shutdown_device_type_num.F90, Line = 54, Column = 41 \n  The kind (4) of this actual argument does not match that of its associated dummy argument (8).\n\n\nftn-790 ftn: WARNING TEST3, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/shutdown_device_type_num.F90, Line = 55, Column = 15 \n  Unknown or unsupported compiler directive or syntax error.\n\nCray Fortran : Version 14.0.1 (20220526224428_3a8780657c742829e80f36338fb6ec6578642bb7)\nCray Fortran : Compile time:  0.0066 seconds\nCray Fortran : 136 source lines\nCray Fortran : 2 errors, 2 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11592874099733308
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/shutdown_device_type_num.F90/shutdown_device_type_num.F907 /global/u1/j/jarmusch/OpenACCV-V/Tests/shutdown_device_type_num.F90",
                    "config": 1,
                    "errors": "\n\nftn-1307 ftn: ERROR TEST2, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/shutdown_device_type_num.F90, Line = 33, Column = 41 \n  The kind (4) of this actual argument does not match that of its associated dummy argument (8).\n\n\nftn-790 ftn: WARNING TEST2, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/shutdown_device_type_num.F90, Line = 34, Column = 15 \n  Unknown or unsupported compiler directive or syntax error.\n\n\nftn-1307 ftn: ERROR TEST3, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/shutdown_device_type_num.F90, Line = 54, Column = 41 \n  The kind (4) of this actual argument does not match that of its associated dummy argument (8).\n\n\nftn-790 ftn: WARNING TEST3, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/shutdown_device_type_num.F90, Line = 55, Column = 15 \n  Unknown or unsupported compiler directive or syntax error.\n\nCray Fortran : Version 14.0.1 (20220526224428_3a8780657c742829e80f36338fb6ec6578642bb7)\nCray Fortran : Compile time:  0.0071 seconds\nCray Fortran : 136 source lines\nCray Fortran : 2 errors, 2 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11525628200615756
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "shutdown_device_type_num_nvidia.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/shutdown_device_type_num_nvidia.F90/shutdown_device_type_num_nvidia.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/shutdown_device_type_num_nvidia.F90",
                    "config": 1,
                    "errors": "\n\nftn-1307 ftn: ERROR TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/shutdown_device_type_num_nvidia.F90, Line = 12, Column = 41 \n  The kind (4) of this actual argument does not match that of its associated dummy argument (8).\n\n\nftn-790 ftn: WARNING TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/shutdown_device_type_num_nvidia.F90, Line = 13, Column = 15 \n  Unknown or unsupported compiler directive or syntax error.\n\nCray Fortran : Version 14.0.1 (20220526224428_3a8780657c742829e80f36338fb6ec6578642bb7)\nCray Fortran : Compile time:  0.0043 seconds\nCray Fortran : 61 source lines\nCray Fortran : 1 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11563382101303432
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/shutdown_device_type_num_nvidia.F90/shutdown_device_type_num_nvidia.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/shutdown_device_type_num_nvidia.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11586959700798616
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "shutdown_device_type_nvidia.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/shutdown_device_type_nvidia.F90/shutdown_device_type_nvidia.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/shutdown_device_type_nvidia.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11571744200773537
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/shutdown_device_type_nvidia.F90/shutdown_device_type_nvidia.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/shutdown_device_type_nvidia.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11600778400315903
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ],
        "template.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -o /global/u1/j/jarmusch/OpenACCV-V/build/template.F90/template.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/template.F90",
                    "config": 1,
                    "errors": "\n\nftn-1403 ftn: ERROR TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/template.F90, Line = 25, Column = 17 \n  OpenMP or OpenACC construct PARALLEL should have a structured block between the directive and the END directive.\n\nCray Fortran : Version 14.0.1 (20220526224428_3a8780657c742829e80f36338fb6ec6578642bb7)\nCray Fortran : Compile time:  0.0032 seconds\nCray Fortran : 79 source lines\nCray Fortran : 1 errors, 0 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11532388199702837
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 2
            },
            {
                "compilation": {
                    "command": "ftn -h acc -target-accel=nvidia80 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/template.F90/template.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/template.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11563773899979424
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 2
            }
        ]
    },
    "summary": {
        "1": {
            "1": {
                "2": {
                    "acc_async_test.F90": {
                        "1": {
                            "result": "Unknown Section Result",
                            "run_index": -1
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        },
                        "3": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        }
                    },
                    "acc_async_test_all.F90": {
                        "1": {
                            "result": "Unknown Section Result",
                            "run_index": -1
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        },
                        "3": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        }
                    },
                    "acc_copyin.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 1
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "3": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        },
                        "4": {
                            "result": "Compilation Failure",
                            "run_index": 4
                        },
                        "5": {
                            "result": "Compilation Failure",
                            "run_index": 5
                        },
                        "6": {
                            "result": "Compilation Failure",
                            "run_index": 6
                        },
                        "7": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        }
                    },
                    "acc_copyin_async.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 1
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "3": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        },
                        "4": {
                            "result": "Compilation Failure",
                            "run_index": 4
                        },
                        "5": {
                            "result": "Compilation Failure",
                            "run_index": 5
                        }
                    },
                    "acc_copyin_async_with_len.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 1
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "3": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        },
                        "4": {
                            "result": "Compilation Failure",
                            "run_index": 4
                        },
                        "5": {
                            "result": "Compilation Failure",
                            "run_index": 5
                        }
                    },
                    "acc_copyin_with_len.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 1
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "3": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        },
                        "4": {
                            "result": "Compilation Failure",
                            "run_index": 4
                        },
                        "5": {
                            "result": "Compilation Failure",
                            "run_index": 5
                        },
                        "6": {
                            "result": "Compilation Failure",
                            "run_index": 6
                        },
                        "7": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        }
                    },
                    "acc_copyout.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 1
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "3": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        },
                        "4": {
                            "result": "Compilation Failure",
                            "run_index": 4
                        },
                        "5": {
                            "result": "Compilation Failure",
                            "run_index": 5
                        }
                    },
                    "acc_copyout_async.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "acc_copyout_async_with_len.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "acc_copyout_finalize.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "acc_copyout_finalize_async.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "acc_copyout_finalize_async_with_len.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "acc_copyout_finalize_with_len.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "acc_copyout_with_len.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        }
                    },
                    "acc_create.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 1
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "3": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        },
                        "4": {
                            "result": "Compilation Failure",
                            "run_index": 4
                        }
                    },
                    "acc_create_async.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "acc_create_async_with_len.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "acc_create_with_len.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 1
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "3": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        },
                        "4": {
                            "result": "Compilation Failure",
                            "run_index": 4
                        }
                    },
                    "acc_delete.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        }
                    },
                    "acc_delete_async.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        }
                    },
                    "acc_delete_async_with_len.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        }
                    },
                    "acc_delete_finalize.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        }
                    },
                    "acc_delete_finalize_async.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        }
                    },
                    "acc_delete_finalize_async_with_len.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        }
                    },
                    "acc_delete_finalize_with_len.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        }
                    },
                    "acc_delete_with_len.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        }
                    },
                    "acc_get_default_async.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "acc_get_device_num.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "acc_get_num_devices.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "acc_get_property.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "acc_get_property_string.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "acc_init.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "acc_is_present.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "acc_is_present_with_len.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "acc_on_device.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "acc_set_default_async.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "acc_set_device_num.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "acc_set_device_type.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "acc_shutdown.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "acc_update_device.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        }
                    },
                    "acc_update_device_async.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        }
                    },
                    "acc_update_device_async_with_len.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        }
                    },
                    "acc_update_device_with_len.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        }
                    },
                    "acc_update_self.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        }
                    },
                    "acc_update_self_async.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        }
                    },
                    "acc_update_self_async_with_len.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        }
                    },
                    "acc_update_self_with_len.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        }
                    },
                    "acc_wait.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "acc_wait_all.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "acc_wait_all_async.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "acc_wait_async.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_assign_expr_and_x.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_assign_expr_divided_x.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_assign_expr_eqv_x.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_assign_expr_minus_x.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_assign_expr_neqv_x.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_assign_expr_or_x.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_assign_expr_plus_x.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_assign_expr_times_x.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_assign_iand_expr_x.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_assign_iand_x_expr.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_assign_ior_expr_x.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_assign_ior_x_expr.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_assign_ixor_expr_x.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_assign_ixor_x_expr.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_assign_max_expr_list_x.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_assign_max_expr_x.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_assign_max_x_expr.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_assign_max_x_expr_list.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_assign_min_expr_list_x.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_assign_min_expr_x.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_assign_min_x_expr.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_assign_min_x_expr_list.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_assign_x_and_expr.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_assign_x_divided_expr.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_assign_x_eqv_expr.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_assign_x_minus_expr.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_assign_x_neqv_expr.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_assign_x_or_expr.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_assign_x_plus_expr.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_assign_x_times_expr.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_expr_and_x_assign.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_expr_divided_x_assign.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_expr_eqv_x_assign.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_expr_minus_x_assign.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_expr_neqv_x_assign.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_expr_or_x_assign.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_expr_plus_x_assign.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_expr_times_x_assign.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_iand_expr_x_assign.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_iand_x_expr_assign.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_ior_expr_x_assign.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_ior_x_expr_assign.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_ixor_expr_x_assign.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_ixor_x_expr_assign.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_max_expr_list_x_assign.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_max_expr_x_assign.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_max_x_expr_assign.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_max_x_expr_list_assign.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_min_expr_list_x_assign.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_min_expr_x_assign.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_min_x_expr_assign.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_min_x_expr_list_assign.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_x_and_expr_assign.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_x_divided_expr_assign.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_x_eqv_expr_assign.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_x_minus_expr_assign.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_x_neqv_expr_assign.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_x_or_expr_assign.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_x_plus_expr_assign.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_x_times_expr_assign.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_expr_and_x.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_expr_and_x_end.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_expr_divided_x.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_expr_divided_x_end.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_expr_eqv_x.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_expr_eqv_x_end.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_expr_minus_x.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_expr_minus_x_end.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_expr_neqv_x.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_expr_neqv_x_end.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_expr_or_x.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_expr_or_x_end.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_expr_plus_x.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_expr_plus_x_end.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_expr_times_x.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_expr_times_x_end.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_iand_expr_x.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_iand_expr_x_end.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_iand_x_expr.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_iand_x_expr_end.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_ior_expr_x.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_ior_expr_x_end.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_ior_x_expr.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_ior_x_expr_end.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_ixor_expr_x.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_ixor_expr_x_end.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_ixor_x_expr.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_ixor_x_expr_end.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_max_expr_list_x.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_max_expr_list_x_end.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_max_expr_x.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_max_expr_x_end.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_max_x_expr.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_max_x_expr_end.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_max_x_expr_list.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_max_x_expr_list_end.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_min_expr_list_x.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_min_expr_list_x_end.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_min_expr_x.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_min_expr_x_end.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_min_x_expr.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_min_x_expr_end.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_min_x_expr_list.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_min_x_expr_list_end.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_update_expr_and_x.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_update_expr_and_x_end.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_update_expr_divided_x.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_update_expr_divided_x_end.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_update_expr_eqv_x.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_update_expr_eqv_x_end.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_update_expr_minus_x.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_update_expr_minus_x_end.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_update_expr_neqv_x.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_update_expr_neqv_x_end.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_update_expr_or_x.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_update_expr_or_x_end.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_update_expr_plus_x.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_update_expr_plus_x_end.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_update_expr_times_x.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_update_expr_times_x_end.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_update_iand_expr_x.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_update_iand_expr_x_end.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_update_iand_x_expr.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_update_iand_x_expr_end.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_update_ior_expr_x.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_update_ior_expr_x_end.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_update_ior_x_expr.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_update_ior_x_expr_end.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_update_ixor_expr_x.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_update_ixor_expr_x_end.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_update_ixor_x_expr.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_update_ixor_x_expr_end.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_update_max_expr_list_x.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_update_max_expr_list_x_end.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_update_max_expr_x.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_update_max_expr_x_end.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_update_max_x_expr.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_update_max_x_expr_end.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_update_max_x_expr_list.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_update_max_x_expr_list_end.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_update_min_expr_list_x.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_update_min_expr_list_x_end.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_update_min_expr_x.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_update_min_expr_x_end.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_update_min_x_expr.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_update_min_x_expr_end.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_update_min_x_expr_list.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_update_min_x_expr_list_end.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_update_x_and_expr.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_update_x_and_expr_end.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_update_x_divided_expr.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_update_x_divided_expr_end.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_update_x_eqv_expr.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_update_x_eqv_expr_end.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_update_x_minus_expr.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_update_x_minus_expr_end.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_update_x_neqv_expr.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_update_x_neqv_expr_end.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_update_x_or_expr.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_update_x_or_expr_end.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_update_x_plus_expr.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_update_x_plus_expr_end.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_update_x_times_expr.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_update_x_times_expr_end.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_x_and_expr.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_x_and_expr_end.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_x_divided_expr.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_x_divided_expr_end.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_x_eqv_expr.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_x_eqv_expr_end.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_x_minus_expr.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_x_minus_expr_end.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_x_neqv_expr.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_x_neqv_expr_end.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_x_or_expr.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_x_or_expr_end.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_x_plus_expr.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_x_plus_expr_end.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_x_times_expr.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_x_times_expr_end.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "data_copy_no_lower_bound.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "data_copyin_no_lower_bound.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "data_copyout_no_lower_bound.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "data_copyout_reference_counts.F90": {
                        "1": {
                            "result": "Unknown Section Result",
                            "run_index": -1
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        },
                        "3": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        }
                    },
                    "data_create.F90": {
                        "1": {
                            "result": "Unknown Section Result",
                            "run_index": -1
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        },
                        "3": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        }
                    },
                    "data_create_no_lower_bound.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "data_present_no_lower_bound.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "data_with_changing_subscript.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "data_with_derived_type.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "declare_copyin.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 1
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "3": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        },
                        "4": {
                            "result": "Compilation Failure",
                            "run_index": 4
                        }
                    },
                    "declare_create.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 1
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "3": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        },
                        "4": {
                            "result": "Compilation Failure",
                            "run_index": 4
                        }
                    },
                    "declare_function_scope_copy.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 1
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "3": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        },
                        "4": {
                            "result": "Compilation Failure",
                            "run_index": 4
                        }
                    },
                    "declare_function_scope_copyin.F90": {
                        "1": {
                            "result": "Unknown Section Result",
                            "run_index": -1
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        },
                        "3": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        }
                    },
                    "declare_function_scope_copyout.F90": {
                        "1": {
                            "result": "Unknown Section Result",
                            "run_index": -1
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        },
                        "3": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        }
                    },
                    "declare_function_scope_create.F90": {
                        "1": {
                            "result": "Unknown Section Result",
                            "run_index": -1
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        },
                        "3": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        }
                    },
                    "declare_function_scope_present.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        }
                    },
                    "enter_data_copyin_no_lower_bound.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "enter_data_create.F90": {
                        "1": {
                            "result": "Unknown Section Result",
                            "run_index": -1
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        },
                        "3": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        }
                    },
                    "enter_data_create_no_lower_bound.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "enter_data_if.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 1
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "3": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        },
                        "4": {
                            "result": "Compilation Failure",
                            "run_index": 4
                        },
                        "5": {
                            "result": "Compilation Failure",
                            "run_index": 5
                        }
                    },
                    "exit_data.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        }
                    },
                    "exit_data_copyout_no_lower_bound.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "exit_data_copyout_reference_counts.F90": {
                        "1": {
                            "result": "Unknown Section Result",
                            "run_index": -1
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        },
                        "3": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        }
                    },
                    "exit_data_delete_no_lower_bound.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        }
                    },
                    "exit_data_finalize.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        }
                    },
                    "init.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "init_device_num.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "init_device_type.F90": {
                        "1": {
                            "result": "Unknown Section Result",
                            "run_index": -1
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        },
                        "3": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        }
                    },
                    "init_device_type_num.F90": {
                        "1": {
                            "result": "Unknown Section Result",
                            "run_index": -1
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        },
                        "3": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        }
                    },
                    "init_device_type_num_nvidia.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "init_device_type_nvidia.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "kernels_async.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "kernels_copy.F90": {
                        "1": {
                            "result": "Unknown Section Result",
                            "run_index": -1
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        },
                        "3": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        }
                    },
                    "kernels_copyin.F90": {
                        "1": {
                            "result": "Unknown Section Result",
                            "run_index": -1
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        },
                        "3": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        }
                    },
                    "kernels_copyout.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        }
                    },
                    "kernels_create.F90": {
                        "1": {
                            "result": "Unknown Section Result",
                            "run_index": -1
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        },
                        "3": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        }
                    },
                    "kernels_default_copy.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        }
                    },
                    "kernels_default_present.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "kernels_if.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 1
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "3": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        },
                        "4": {
                            "result": "Compilation Failure",
                            "run_index": 4
                        }
                    },
                    "kernels_loop.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_independent.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_add_general.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_add_loop.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_add_vector_loop.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_and_general.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_and_loop.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_and_vector_loop.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_bitand_general.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_bitand_loop.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_bitand_vector_loop.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_bitor_general.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_bitor_loop.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_bitor_vector_loop.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_bitxor_general.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_bitxor_loop.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_bitxor_vector_loop.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_max_general.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_max_loop.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_max_vector_loop.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_min_general.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_min_loop.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_min_vector_loop.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_multiply_general.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_multiply_loop.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_multiply_vector_loop.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_or_general.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_or_loop.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_or_vector_loop.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_seq.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_tile.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_vector_blocking.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_worker_blocking.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "kernels_num_gangs.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "kernels_num_workers.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "kernels_present.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "kernels_scalar_default_copy.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "kernels_vector_length.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "kernels_wait.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "loop_collapse.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        }
                    },
                    "loop_no_collapse.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        }
                    },
                    "parallel.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "parallel_async.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "parallel_copy.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "parallel_copyin.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "parallel_copyout.F90": {
                        "1": {
                            "result": "Unknown Section Result",
                            "run_index": -1
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        },
                        "3": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        }
                    },
                    "parallel_create.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "parallel_default_copy.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        }
                    },
                    "parallel_default_present.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "parallel_firstprivate.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        }
                    },
                    "parallel_if.F90": {
                        "1": {
                            "result": "Unknown Section Result",
                            "run_index": -1
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        },
                        "3": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        }
                    },
                    "parallel_loop.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        }
                    },
                    "parallel_loop_async.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_auto.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_gang.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_reduction_add_general.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_reduction_add_loop.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_reduction_add_vector_loop.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_reduction_and_general.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_reduction_and_loop.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_reduction_and_vector_loop.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_reduction_bitand_general.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_reduction_bitand_loop.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_reduction_bitand_vector_loop.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_reduction_bitor_general.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_reduction_bitor_loop.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_reduction_bitor_vector_loop.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_reduction_bitxor_general.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_reduction_bitxor_loop.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_reduction_bitxor_vector_loop.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_reduction_max_general.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_reduction_max_loop.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_reduction_max_vector_loop.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_reduction_min_general.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_reduction_min_loop.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_reduction_min_vector_loop.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_reduction_multiply_general.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_reduction_multiply_loop.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_reduction_multiply_vector_loop.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_reduction_or_general.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_reduction_or_loop.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_reduction_or_vector_loop.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_seq.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_tile.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_vector.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_vector_blocking.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_worker.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_worker_blocking.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "parallel_present.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "parallel_private.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "parallel_reduction.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "parallel_scalar_default_firstprivate.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "parallel_switch.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "parallel_wait.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "parallel_while_loop.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "serial.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "serial_async.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "serial_copy.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "serial_copyin.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        }
                    },
                    "serial_copyout.F90": {
                        "1": {
                            "result": "Unknown Section Result",
                            "run_index": -1
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        },
                        "3": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        }
                    },
                    "serial_create.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "serial_default_copy.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        }
                    },
                    "serial_default_present.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "serial_firstprivate.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        }
                    },
                    "serial_if.F90": {
                        "1": {
                            "result": "Unknown Section Result",
                            "run_index": -1
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        },
                        "3": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        }
                    },
                    "serial_loop.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "serial_loop_async.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "serial_loop_auto.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "serial_loop_gang.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "serial_loop_reduction_add_general.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "serial_loop_reduction_add_loop.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "serial_loop_reduction_add_vector_loop.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "serial_loop_reduction_and_general.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "serial_loop_reduction_and_loop.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "serial_loop_reduction_and_vector_loop.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "serial_loop_reduction_bitand_general.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "serial_loop_reduction_bitand_loop.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "serial_loop_reduction_bitand_vector_loop.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "serial_loop_reduction_bitor_general.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "serial_loop_reduction_bitor_loop.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "serial_loop_reduction_bitor_vector_loop.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "serial_loop_reduction_bitxor_general.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "serial_loop_reduction_bitxor_loop.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "serial_loop_reduction_bitxor_vector_loop.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "serial_loop_reduction_max_general.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "serial_loop_reduction_max_loop.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "serial_loop_reduction_max_vector_loop.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "serial_loop_reduction_min_general.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "serial_loop_reduction_min_loop.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "serial_loop_reduction_min_vector_loop.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "serial_loop_reduction_multiply_general.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "serial_loop_reduction_multiply_loop.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "serial_loop_reduction_multiply_vector_loop.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "serial_loop_reduction_or_general.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "serial_loop_reduction_or_loop.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "serial_loop_reduction_or_vector_loop.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "serial_loop_seq.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "serial_loop_tile.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "serial_loop_vector.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "serial_loop_vector_blocking.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "serial_loop_worker.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "serial_loop_worker_blocking.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "serial_present.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "serial_private.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "serial_reduction.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "serial_scalar_default_firstprivate.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "serial_switch.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "serial_wait.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "serial_while_loop.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "set_default_async.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "set_device_num.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "set_device_type.F90": {
                        "1": {
                            "result": "Unknown Section Result",
                            "run_index": -1
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        },
                        "3": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        }
                    },
                    "set_device_type_nvidia.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "shutdown.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "shutdown_device_num.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "shutdown_device_type.F90": {
                        "1": {
                            "result": "Unknown Section Result",
                            "run_index": -1
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        },
                        "3": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        }
                    },
                    "shutdown_device_type_num.F90": {
                        "1": {
                            "result": "Unknown Section Result",
                            "run_index": -1
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        },
                        "3": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        }
                    },
                    "shutdown_device_type_num_nvidia.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "shutdown_device_type_nvidia.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "template.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    }
                }
            }
        }
    },
    "systems": [
        {
            "id": 1,
            "machine": "x86_64",
            "name": null,
            "node": "nid003524",
            "processor": "x86_64",
            "release": "5.3.18-150300.59.43_11.0.51-cray_shasta_c",
            "version": "#1 SMP Thu Mar 31 18:57:28 UTC 2022 (514bda1)"
        }
    ],
    "testsuites": [
        {
            "acc_async_test.F90": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,async,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, d, e !Data\n        INTEGER :: errors\n        errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        CALL RANDOM_NUMBER(d)\n        c = 0\n        e = 0\n        \n        !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) create(c(1:LOOPCOUNT)) async(1)\n        !$acc enter data copyin(d(1:LOOPCOUNT)) create(e(1:LOOPCOUNT)) async(2)\n        !$acc parallel present(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT)) async(1)\n          !$acc loop\n          DO x = 1, LOOPCOUNT\n            c(x) = a(x) + b(x)\n          END DO\n        !$acc end parallel\n        !$acc parallel present(c(1:LOOPCOUNT), d(1:LOOPCOUNT), e(1:LOOPCOUNT)) async(1) wait(2)\n          !$acc loop\n          DO x = 1, LOOPCOUNT\n            e(x) = c(x) + d(x)\n          END DO\n        !$acc end parallel\n        !$acc exit data copyout(e(1:LOOPCOUNT)) async(1)\n\n\n        DO WHILE (acc_async_test(1) .eqv. .FALSE.)\n          CONTINUE\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(e(x) - (a(x) + b(x) + d(x))) .GT. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n      LOGICAL :: test1\n#endif\n#ifndef T1\n      DO testrun = 1, NUM_TEST_CALLS\n        failed = failed .or. test1()\n      END DO\n      IF (failed) THEN\n        failcode = failcode + 2 ** 0\n        failed = .FALSE.\n      END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "async",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:async,runtime,construct-independent,V:1.0-2.7\n      LOGICAL FUNCTION test2()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, d, e\n        INTEGER :: errors\n        errors = 0\n        \n        !Initialization\n        CALL RANDOM_SEED()\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        CALL RANDOM_NUMBER(d)\n        c = 0\n        e = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), d(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT), e(1:LOOPCOUNT))\n          !$acc parallel present(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT)) async(1)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n          !$acc parallel present(c(1:LOOPCOUNT), d(1:LOOPCOUNT), e(1:LOOPCOUNT)) async(1)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              e(x) = c(x) + d(x)\n            END DO\n          !$acc end parallel\n          DO WHILE (acc_async_test(1) .eqv. .FALSE.)\n            CONTINUE\n          END DO\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(e(x) - (a(x) + b(x) + d(x))) .GT. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n      LOGICAL :: test2\n#endif\n#ifndef T2\n      DO testrun = 1, NUM_TEST_CALLS\n        failed = failed .or. test2()\n      END DO\n      IF (failed) THEN\n        failcode = failcode + 2 ** 1\n        failed = .FALSE.\n      END IF\n#endif\n",
                        "tags": [
                            "async",
                            "runtime",
                            "construct-independent"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n!T3:runtime,async,construct-independent,V:2.5-2.7\n      LOGICAL FUNCTION test3()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, d, e\n        INTEGER :: errors, async_val\n        INTEGER :: acc_get_default_async\n        async_val = acc_get_default_async()\n        errors = 0\n\n        !Initialization\n        CALL RANDOM_SEED()\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        CALL RANDOM_NUMBER(d)\n        c = 0\n        e = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), d(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT), e(1:LOOPCOUNT))\n          !$acc parallel present(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT)) async\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n          !$acc parallel present(c(1:LOOPCOUNT), d(1:LOOPCOUNT), e(1:LOOPCOUNT)) async\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              e(x) = c(x) + d(x)\n            END DO\n          !$acc end parallel\n          DO WHILE (acc_async_test(async_val) .eqv. .FALSE.)\n            CONTINUE\n          END DO\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(e(x) - (a(x) + b(x) + d(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test3 = .FALSE.\n        ELSE\n          test3 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T3\n      LOGICAL :: test3\n#endif\n#ifndef T3\n      DO testrun = 1, NUM_TEST_CALLS\n        failed = failed .or. test3()\n      END DO\n      IF (failed) THEN\n        failcode = failcode + 2 ** 2\n        failed = .FALSE.\n      END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "async",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_async_test_all.F90": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,async,construct-independent,update,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b, c, d, e !Data\n        INTEGER :: errors\n        errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        CALL RANDOM_NUMBER(d)\n        c = 0\n        e = 0\n\n        !$acc enter data create(a(1:LOOPCOUNT,1:10), b(1:LOOPCOUNT,1:10), c(1:LOOPCOUNT,1:10), d(1:LOOPCOUNT,1:10), e(1:LOOPCOUNT,1:10))\n        DO y = 1, 10\n          !$acc update device(a(1:LOOPCOUNT,y:y), b(1:LOOPCOUNT,y:y), d(1:LOOPCOUNT,y:y)) async(y)\n          !$acc parallel present(a(1:LOOPCOUNT,y:y), b(1:LOOPCOUNT,y:y), c(1:LOOPCOUNT,y:y)) async(y)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x, y) = a(x, y) + b(x, y)\n            END DO\n          !$acc end parallel\n          !$acc parallel present(c(1:LOOPCOUNT,y:y), d(1:LOOPCOUNT,y:y),e(1:LOOPCOUNT,y:y)) async(y)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              e(x, y) = c(x, y) + d(x, y)\n            END DO\n          !$acc end parallel\n          !$acc update host(e(1:LOOPCOUNT,y:y)) async(y)\n        END DO\n\n        DO WHILE (acc_async_test_all() .eqv. .FALSE.)\n          CONTINUE\n        END DO\n\n        DO y = 1, 10\n          DO x = 1, LOOPCOUNT\n            IF (abs(e(x, y) - (a(x, y) + b(x, y) + d(x, y))) .GT. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n      LOGICAL :: test1\n#endif\n#ifndef T1\n      DO testrun = 1, NUM_TEST_CALLS\n        failed = failed .or. test1()\n      END DO\n      IF (failed) THEN\n        failcode = failcode + 2 ** 0\n        failed = .FALSE.\n      END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "async",
                            "construct-independent",
                            "update"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:async,runtime,construct-independent,V:1.0-2.7\n      LOGICAL FUNCTION test2()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b, c, d, e !Data\n        INTEGER :: errors\n        errors = 0\n\n        !Initialization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        CALL RANDOM_NUMBER(d)\n        c = 0\n        e = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10), b(1:LOOPCOUNT,1:10), d(1:LOOPCOUNT, 1:10)) copyout(c(1:LOOPCOUNT, 1:10), e(1:LOOPCOUNT, 1:10))\n          DO x = 1, 10\n            !$acc parallel present(a(1:LOOPCOUNT, 1:10), b(1:LOOPCOUNT, 1:10), c(1:LOOPCOUNT, 1:10)) async(x)\n              !$acc loop\n              DO y = 1, LOOPCOUNT\n                c(y, x) = a(y, x) + b(y, x)\n              END DO\n            !$acc end parallel\n            !$acc parallel present(c(1:LOOPCOUNT, 1:10), d(1:LOOPCOUNT, 1:10), e(1:LOOPCOUNT, 1:10)) async(x)\n              !$acc loop\n              DO y = 1, LOOPCOUNT\n                e(y, x) = c(y, x) + d(y, x)\n              END DO\n            !$acc end parallel\n          END DO\n          DO WHILE (acc_async_test_all() .eqv. .FALSE.)\n            CONTINUE\n          END DO\n        !$acc end data\n\n        DO x = 1, 10\n          DO y = 1, LOOPCOUNT\n            IF (abs(e(y, x) - (a(y, x) + b(y, x) + d(y, x))) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n      LOGICAL :: test2\n#endif\n#ifndef T2\n      DO testrun = 1, NUM_TEST_CALLS\n        failed = failed .or. test2()\n      END DO\n      IF (failed) THEN\n        failcode = failcode + 2 ** 1\n        failed = .FALSE.\n      END IF\n#endif\n",
                        "tags": [
                            "async",
                            "runtime",
                            "construct-independent"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n!T3:async,runtime,construct-independent,V:2.5-2.7\n      LOGICAL FUNCTION test3()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b, c, d, e !Data\n        INTEGER :: errors\n        errors = 0\n\n        !Initialization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        CALL RANDOM_NUMBER(d)\n        c = 0\n        e = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10), b(1:LOOPCOUNT, 1:10), d(1:LOOPCOUNT, 1:10)) copyout(c(1:LOOPCOUNT, 1:10), e(1:LOOPCOUNT, 1:10))\n          DO x = 1, 10\n            CALL acc_set_default_async(x)\n            !$acc parallel present(a(1:LOOPCOUNT, 1:10), b(1:LOOPCOUNT, 1:10), c(1:LOOPCOUNT, 1:10)) async\n              !$acc loop\n              DO y = 1, LOOPCOUNT\n                c(y, x) = a(y, x) + b(y, x)\n              END DO\n            !$acc end parallel\n            !$acc parallel present(c(1:LOOPCOUNT, 1:10), d(1:LOOPCOUNT, 1:10), e(1:LOOPCOUNT, 1:10)) async\n              !$acc loop\n              DO y = 1, LOOPCOUNT\n                e(y, x) = c(y, x) + d(y, x)\n              END DO\n            !$acc end parallel\n          END DO\n          DO WHILE (acc_async_test_all() .eqv. .FALSE.)\n            CONTINUE\n          END DO\n        !$acc end data\n\n        DO x = 1, 10\n          DO y = 1, LOOPCOUNT\n            IF (abs(e(y, x) - (a(y, x) + b(y, x) + d(y, x))) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test3 = .FALSE.\n        ELSE\n          test3 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T3\n      LOGICAL :: test3\n#endif\n#ifndef T3\n      DO testrun = 1, NUM_TEST_CALLS\n        failed = failed .or. test3()\n      END DO\n      IF (failed) THEN\n        failcode = failcode + 2 ** 2\n        failed = .FALSE.\n      END IF\n#endif\n",
                        "tags": [
                            "async",
                            "runtime",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_copyin.F90": {
                "num tests": 7,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        CALL acc_copyin(a(1:LOOPCOUNT))\n        CALL acc_copyin(b(1:LOOPCOUNT))\n\n        !$acc data copy(c(1:LOOPCOUNT))\n          !$acc parallel present(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        !$acc exit data copyout(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END FUNCTION\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:runtime,data,executable-data,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test2()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 1\n\n        CALL acc_copyin(a(1:LOOPCOUNT))\n        CALL acc_copyin(b(1:LOOPCOUNT))\n\n        !$acc data copyout(c(1:LOOPCOUNT))\n          !$acc parallel present(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        CALL acc_copyout(a(1:LOOPCOUNT))\n        CALL acc_copyout(b(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END FUNCTION\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n!T3:runtime,data,executable-data,devonly,construct-independent,V:2.5-2.7\n      LOGICAL FUNCTION test3()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, a_copy, b_copy !Data\n        INTEGER :: errors = 0\n        LOGICAL,DIMENSION(1):: devtest\n\n        devtest(1) = .TRUE.\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel present(devtest(1:1))\n          devtest(1) = .FALSE.\n        !$acc end parallel\n\n        IF (devtest(1) .eqv. .TRUE.) THEN\n          SEEDDIM(1) = 1\n#         ifdef SEED\n          SEEDDIM(1) = SEED\n#         endif\n          CALL RANDOM_SEED(PUT=SEEDDIM)\n          CALL RANDOM_NUMBER(a)\n          a_copy(:) = a(:)\n          CALL RANDOM_NUMBER(b)\n          b_copy(:) = b(:)\n          c = 0\n\n          CALL acc_copyin(a(1:LOOPCOUNT))\n          CALL acc_copyin(b(1:LOOPCOUNT))\n\n          a = 0\n          b = 0\n\n          !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n            !$acc parallel\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                c(x) = a(x) + b(x)\n              END DO\n            !$acc end parallel\n          !$acc end data\n\n          !$acc exit data copyout(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n\n          DO x = 1, LOOPCOUNT\n            IF (abs(a(x) - a_copy(x)) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n            IF (abs(b(x) - b_copy(x)) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n            IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test3 = .FALSE.\n        ELSE\n          test3 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T3\n        LOGICAL :: test3\n#endif\n#ifndef T3\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test3()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 2\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "devonly",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "4": {
                        "content": "#ifndef T4\n!T4:runtime,executable-data,construct-independent,compatibility-features,V:2.0-2.7\n      LOGICAL FUNCTION test4()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n\n        !Initialization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        CALL acc_pcopyin(a(1:LOOPCOUNT))\n        CALL acc_pcopyin(b(1:LOOPCOUNT))\n\n        !$acc data copyout(c(1:LOOPCOUNT))\n          !$acc parallel present(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test4 = .FALSE.\n        ELSE\n          test4 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T4\n        LOGICAL :: test4\n#endif\n#ifndef T4\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test4()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 3\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "executable-data",
                            "construct-independent",
                            "compatibility-features"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "5": {
                        "content": "#ifndef T5\n!T5:runtime,executable-data,construct-independent,compatibility-features,V:2.0-2.7\n      LOGICAL FUNCTION test5()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n\n        !Initialization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        \n        CALL acc_present_or_copyin(a(1:LOOPCOUNT))\n        CALL acc_present_or_copyin(b(1:LOOPCOUNT))\n\n        !$acc data copyout(c(1:LOOPCOUNT))\n          !$acc parallel present(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test5 = .FALSE.\n        ELSE\n          test5 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T5\n        LOGICAL :: test5\n#endif\n#ifndef T5\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test5()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 4\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "executable-data",
                            "construct-independent",
                            "compatibility-features"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "6": {
                        "content": "#ifndef T6\n!T6:runtime,data,executable-data,construct-independent,reference-counting,V:2.5-2.7\n      LOGICAL FUNCTION test6()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n\n        !Initialization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        CALL acc_copyin(a(1:LOOPCOUNT))\n        CALL acc_copyin(a(1:LOOPCOUNT))\n        CALL acc_copyin(b(1:LOOPCOUNT))\n        CALL acc_copyin(b(1:LOOPCOUNT))\n\n        !$acc data copyout(c(1:LOOPCOUNT))\n          !$acc parallel present(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n        !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test6 = .FALSE.\n        ELSE\n          test6 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T6\n        LOGICAL :: test6\n#endif\n#ifndef T6\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test6()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 5\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent",
                            "reference-counting"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "7": {
                        "content": "#ifndef T7\n!T7:runtime,data,executable-data,construct-independent,reference-counting,devonly,V:2.5-2.7\n      LOGICAL FUNCTION test7()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, a_copy, b_copy !Data\n        INTEGER :: errors = 0\n        LOGICAL,DIMENSION(1):: devtest\n\n        devtest(1) = .TRUE.\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel present(devtest(1:1))\n          devtest(1) = .FALSE.\n        !$acc end parallel\n\n        IF (devtest(1) .eqv. .TRUE.) THEN\n          !Initialization\n          SEEDDIM(1) = 1\n#         ifdef SEED\n          SEEDDIM(1) = SEED\n#         endif\n          CALL RANDOM_SEED(PUT=SEEDDIM)\n          CALL RANDOM_NUMBER(a)\n          CALL RANDOM_NUMBER(b)\n          c = 0\n          a_copy = a\n          b_copy = b\n\n          CALL acc_copyin(a(1:LOOPCOUNT))\n          CALL acc_copyin(b(1:LOOPCOUNT))\n\n          a = 0\n          b = 0\n\n          CALL acc_copyin(a(1:LOOPCOUNT))\n          CALL acc_copyin(b(1:LOOPCOUNT))\n\n          !$acc data copyout(c(1:LOOPCOUNT))\n            !$acc parallel present(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                c(x) = a(x) + b(x)\n              END DO\n            !$acc end parallel\n          !$acc end data\n\n          !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n          !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n\n          DO x = 1, LOOPCOUNT\n            IF (abs(c(x) - (a_copy(x) + b_copy(x))) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test7 = .FALSE.\n        ELSE\n          test7 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T7\n        LOGICAL :: test7\n#endif\n#ifndef T7\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test7()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 6\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent",
                            "reference-counting",
                            "devonly"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_copyin_async.F90": {
                "num tests": 5,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,data,executable-data,async,construct-independent,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, a_host, b_host !Data\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        a_host = a\n        b_host = b\n\n        CALL acc_copyin_async(a(1:LOOPCOUNT), 1)\n        CALL acc_copyin_async(b(1:LOOPCOUNT), 2)\n\n        !$acc data copyout(c(1:LOOPCOUNT))\n          !$acc parallel async(1) present(a(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              a(x) = a(x) * a(x)\n            END DO\n          !$acc end parallel\n          !$acc parallel async(2) present(b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              b(x) = b(x) * b(x)\n            END DO\n          !$acc end parallel\n          !$acc parallel async(2) wait(1) present(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a_host(x)*a_host(x) + b_host(x)*b_host(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n      LOGICAL :: test1\n#endif\n#ifndef T1\n      DO testrun = 1, NUM_TEST_CALLS\n        failed = failed .or. test1()\n      END DO\n      IF (failed) THEN\n        failcode = failcode + 2 ** 0\n        failed = .FALSE.\n      END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "async",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:runtime,data,executable-data,async,construct-independent,V:2.5-2.7\n      LOGICAL FUNCTION test2()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, a_host, b_host !Data\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n\n        !Initialization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        CALL acc_copyin_async(a(1:LOOPCOUNT), 1)\n        CALL acc_copyin_async(b(1:LOOPCOUNT), 2)\n\n        !$acc data copyout(c(1:LOOPCOUNT))\n          DO WHILE (acc_async_test_all() .eqv. .FALSE.)\n            CONTINUE\n          END DO\n          !$acc parallel present(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n      LOGICAL :: test2\n#endif\n#ifndef T2\n      DO testrun = 1, NUM_TEST_CALLS\n        failed = failed .or. test2()\n      END DO\n      IF (failed) THEN\n        failcode = failcode + 2 ** 1\n        failed = .FALSE.\n      END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "async",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n!T3:runtime,data,executable-data,async,construct-independent,V:2.5-2.7\n      LOGICAL FUNCTION test3()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n\n        !Initialization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        CALL acc_copyin_async(a(1:LOOPCOUNT), 1)\n        CALL acc_copyin_async(b(1:LOOPCOUNT), 2)\n\n        !$acc data copyout(c(1:LOOPCOUNT))\n          !$acc wait\n          !$acc parallel present(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test3 = .FALSE.\n        ELSE\n          test3 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T3\n      LOGICAL :: test3\n#endif\n#ifndef T3\n      DO testrun = 1, NUM_TEST_CALLS\n        failed = failed .or. test3()\n      END DO\n      IF (failed) THEN\n        failcode = failcode + 2 ** 2\n        failed = .FALSE.\n      END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "async",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "4": {
                        "content": "#ifndef T4\n!T4:runtime,data,executable-data,async,construct-independent,reference-counting,V:2.5-2.7\n      LOGICAL FUNCTION test4()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, d, e !Data\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n\n        !Initialization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        CALL RANDOM_NUMBER(d)\n        e = 0\n\n        !$acc enter data create(c(1:LOOPCOUNT))\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), d(1:LOOPCOUNT)) copyout(e(1:LOOPCOUNT))\n          !$acc parallel present(c(1:LOOPCOUNT)) async(1)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n          CALL acc_copyin_async(c(1:LOOPCOUNT), 1)\n          !$acc exit data delete(c(1:LOOPCOUNT))\n          !$acc parallel present(c(1:LOOPCOUNT)) async(1)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              e(x) = c(x) + d(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n        !$acc exit data copyout(c(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n          IF (abs(e(x) - (a(x) + b(x) + d(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test4 = .FALSE.\n        ELSE\n          test4 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T4\n      LOGICAL :: test4\n#endif\n#ifndef T4\n      DO testrun = 1, NUM_TEST_CALLS\n        failed = failed .or. test4()\n      END DO\n      IF (failed) THEN\n        failcode = failcode + 2 ** 3\n        failed = .FALSE.\n      END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "async",
                            "construct-independent",
                            "reference-counting"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "5": {
                        "content": "#ifndef T5\n!T5:runtime,data,executable-data,async,construct-independent,reference-counting,V:2.5-2.7\n      LOGICAL FUNCTION test5()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, a_copy, b_copy !Data\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n\n        !Initialization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        a_copy = a\n        CALL RANDOM_NUMBER(b)\n        b_copy = b\n        c = 0\n\n        CALL acc_copyin_async(a(1:LOOPCOUNT), 1)\n        CALL acc_copyin_async(b(1:LOOPCOUNT), 2)\n\n        a = 0\n        b = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n          !$acc wait\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a_copy(x) + b_copy(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test5 = .FALSE.\n        ELSE\n          test5 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T5\n      LOGICAL :: test5\n#endif\n#ifndef T5\n      DO testrun = 1, NUM_TEST_CALLS\n        failed = failed .or. test5()\n      END DO\n      IF (failed) THEN\n        failcode = failcode + 2 ** 4\n        failed = .FALSE.\n      END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "async",
                            "construct-independent",
                            "reference-counting"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_copyin_async_with_len.F90": {
                "num tests": 5,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,data,executable-data,async,construct-independent,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, a_host, b_host !Data\n        INTEGER :: errors\n        errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        a_host = a\n        b_host = b\n\n        CALL acc_copyin_async(a(1), LOOPCOUNT*8, 1)\n        CALL acc_copyin_async(b(1), LOOPCOUNT*8, 2)\n\n        !$acc data copyout(c(1:LOOPCOUNT)) present(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n          !$acc parallel async(1)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              a(x) = a(x) * a(x)\n            END DO\n          !$acc end parallel\n          !$acc parallel async(2)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              b(x) = b(x) * b(x)\n            END DO\n          !$acc end parallel\n          !$acc parallel wait(1, 2)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a_host(x)*a_host(x) + b_host(x)*b_host(x))) .gt. 4*PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "async",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:runtime,data,executable-data,async,construct-independent,V:2.5-2.7\n      LOGICAL FUNCTION test2()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors\n        errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        CALL acc_copyin_async(a(1), LOOPCOUNT*8, 1)\n        CALL acc_copyin_async(b(1), LOOPCOUNT*8, 2)\n\n        !$acc data copyout(c(1:LOOPCOUNT))\n          DO WHILE (acc_async_test_all() .eqv. .FALSE.)\n            CONTINUE\n          END DO\n          !$acc parallel present(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "async",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n!T3:runtime,data,executable-data,async,construct-independent,V:2.5-2.7\n      LOGICAL FUNCTION test3()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors\n        errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        CALL acc_copyin_async(a(1), LOOPCOUNT*8, 1)\n        CALL acc_copyin_async(b(1), LOOPCOUNT*8, 2)\n\n        !$acc data copyout(c(1:LOOPCOUNT))\n          !$acc wait\n          !$acc parallel present(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEn\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test3 = .FALSE.\n        ELSE\n          test3 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T3\n        LOGICAL :: test3\n#endif\n#ifndef T3\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test3()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 2\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "async",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "4": {
                        "content": "#ifndef T4\n!T4:runtime,data,executable-data,async,construct-independent,reference-counting,V:2.5-2.7\n      LOGICAL FUNCTION test4()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, d, e !Data\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n\n        !Initialization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        CALL RANDOM_NUMBER(d)\n        e = 0\n\n        !$acc enter data create(c(1:LOOPCOUNT))\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), d(1:LOOPCOUNT)) copyout(e(1:LOOPCOUNT))\n          !$acc parallel present(c(1:LOOPCOUNT)) async(1)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n          CALL acc_copyin_async(c(1), LOOPCOUNT*8, 1)\n          !$acc exit data delete(c(1:LOOPCOUNT))\n          !$acc parallel present(c(1:LOOPCOUNT)) async(1)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              e(x) = c(x) + d(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n        !$acc exit data copyout(c(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n          IF (abs(e(x) - (a(x) + b(x) + d(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test4 = .FALSE.\n        ELSE\n          test4 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T4\n        LOGICAL :: test4\n#endif\n#ifndef T4\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test4()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 3\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "async",
                            "construct-independent",
                            "reference-counting"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "5": {
                        "content": "#ifndef T5\n!T5:runtime,data,executable-data,async,construct-independent,reference-counting,V:2.5-2.7\n      LOGICAL FUNCTION test5()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n\n        !Initialization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        CALL acc_copyin_async(a(1), LOOPCOUNT*8, 1)\n        CALL acc_copyin_async(b(1), LOOPCOUNT*8, 2)\n\n        !$acc data create(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n          !$acc wait\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test5 = .FALSE.\n        ELSE\n          test5 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T5\n        LOGICAL :: test5\n#endif\n#ifndef T5\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test5()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 4\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "async",
                            "construct-independent",
                            "reference-counting"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_copyin_with_len.F90": {
                "num tests": 7,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        CALL acc_copyin(a(1), LOOPCOUNT*8)\n        CALL acc_copyin(b(1), LOOPCOUNT*8)\n        !$acc data copy(c(1:LOOPCOUNT))\n          !$acc parallel present(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            !$acc Loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        CALL acc_copyout(a(1:LOOPCOUNT))\n        CALL acc_copyout(b(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END FUNCTION\n#endif\n#ifndef T1\n      LOGICAL :: test1\n#endif\n#ifndef T1\n      DO testrun = 1, NUM_TEST_CALLS\n        failed = failed .or. test1()\n      END DO\n      IF (failed) THEN\n        failcode = failcode + 2 ** 0\n        failed = .FALSE.\n      END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:runtime,data,executable-data,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test2()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        CALL acc_copyin(a(1), LOOPCOUNT*8)\n        CALL acc_copyin(b(1), LOOPCOUNT*8)\n        !$acc data copy(c(1:LOOPCOUNT))\n          !$acc parallel present(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        !$acc exit data copyout(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END FUNCTION\n#endif\n#ifndef T2\n      LOGICAL :: test2\n#endif\n#ifndef T2\n      DO testrun = 1, NUM_TEST_CALLS\n        failed = failed .or. test2()\n      END DO\n      IF (failed) THEN\n        failcode = failcode + 2 ** 1\n        failed = .FALSE.\n      END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n!T3:runtime,data,executable-data,devonly,construct-independent,V:2.5-2.7\n      LOGICAL FUNCTION test3()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, a_copy, b_copy !Data\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n        INTEGER,DIMENSION(1) :: devtest\n\n        devtest(1) = 1\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel present(devtest(1:1))\n          devtest(1) = 0\n        !$acc end parallel\n\n        IF (devtest(1) .eq. 1) THEN\n          SEEDDIM(1) = 1\n#         ifdef SEED\n          SEEDDIM(1) = SEED\n#         endif\n          CALL RANDOM_SEED(PUT=SEEDDIM)\n          CALL RANDOM_NUMBER(a)\n          CALL RANDOM_NUMBER(b)\n          a_copy = a\n          b_copy = b\n          c = 0\n\n          CALL acc_copyin(a(1), LOOPCOUNT*8)\n          CALL acc_copyin(b(1), LOOPCOUNT*8)\n\n          a = 0\n          b = 0\n\n          !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copy(c(1:LOOPCOUNT))\n            !$acc parallel\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                c(x) = a(x) + b(x)\n              END DO\n            !$acc end parallel\n          !$acc end data\n\n          CALL acc_copyout(a(1:LOOPCOUNT))\n          CALL acc_copyout(b(1:LOOPCOUNT))\n\n          DO x = 1, LOOPCOUNT\n            IF (abs(a(x) - a_copy(x)) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n            IF (abs(b(x) - b_copy(x)) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n            IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test3 = .FALSE.\n        ELSE\n          test3 = .TRUE.\n        END IF\n      END FUNCTION\n#endif\n#ifndef T3\n      LOGICAL :: test3\n#endif\n#ifndef T3\n      DO testrun = 1, NUM_TEST_CALLS\n        failed = failed .or. test3()\n      END DO\n      IF (failed) THEN\n        failcode = failcode + 2 ** 2\n        failed = .FALSE.\n      END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "devonly",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "4": {
                        "content": "#ifndef T4\n!T4:runtime,compatibility-features,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test4()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        CALL acc_pcopyin(a(1), LOOPCOUNT*8)\n        CALL acc_pcopyin(b(1), LOOPCOUNT*8)\n\n        !$acc data copyout(c(1:LOOPCOUNT)) present(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test4 = .FALSE.\n        ELSE\n          test4 = .TRUE.\n        END IF\n      END FUNCTION\n#endif\n#ifndef T4\n      LOGICAL :: test4\n#endif\n#ifndef T4\n      DO testrun = 1, NUM_TEST_CALLS\n        failed = failed .or. test4()\n      END DO\n      IF (failed) THEN\n        failcode = failcode + 2 ** 3\n        failed = .FALSE.\n      END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "compatibility-features",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "5": {
                        "content": "#ifndef T5\n!T5:runtime,compatibility-features,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test5()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        CALL acc_present_or_copyin(a(1), LOOPCOUNT*8)\n        CALL acc_present_or_copyin(b(1), LOOPCOUNT*8)\n\n        !$acc data copyout(c(1:LOOPCOUNT)) present(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test5 = .FALSE.\n        ELSE\n          test5 = .TRUE.\n        END IF\n      END FUNCTION\n#endif\n#ifndef T5\n      LOGICAL :: test5\n#endif\n#ifndef T5\n      DO testrun = 1, NUM_TEST_CALLS\n        failed = failed .or. test5()\n      END DO\n      IF (failed) THEN\n        failcode = failcode + 2 ** 4\n        failed = .FALSE.\n      END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "compatibility-features",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "6": {
                        "content": "#ifndef T6\n!T6:runtime,data,executable-data,construct-independent,reference-counting,V:2.5-2.7\n      LOGICAL FUNCTION test6()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        CALL acc_copyin(a(1), LOOPCOUNT*8)\n        CALL acc_copyin(a(1), LOOPCOUNT*8)\n        CALL acc_copyin(b(1), LOOPCOUNT*8)\n        CALL acc_copyin(b(1), LOOPCOUNT*8)\n\n        !$acc data copyout(c(1:LOOPCOUNT))\n          !$acc parallel present(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n        !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) + (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test6 = .FALSE.\n        ELSE\n          test6 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T6\n      LOGICAL :: test6\n#endif\n#ifndef T6\n      DO testrun = 1, NUM_TEST_CALLS\n        failed = failed .or. test6()\n      END DO\n      IF (failed) THEN\n        failcode = failcode + 2 ** 5\n        failed = .FALSE.\n      END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent",
                            "reference-counting"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "7": {
                        "content": "#ifndef T7\n!T7:runtime,data,executable-data,construct-independent,reference-counting,devonly,V:2.5-2.7\n      LOGICAL FUNCTION test7()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, a_copy, b_copy !Data\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n        LOGICAL,DIMENSION(1):: devtest\n\n        devtest(1) = .TRUE.\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel present(devtest(1:1))\n          devtest(1) = .FALSE.\n        !$acc end parallel\n\n        IF (devtest(1) .eqv. .TRUE.) THEN\n          SEEDDIM(1) = 1\n#         ifdef SEED\n          SEEDDIM(1) = SEED\n#         endif\n          CALL RANDOM_SEED(PUT=SEEDDIM)\n          CALL RANDOM_NUMBER(a)\n          CALL RANDOM_NUMBER(b)\n          c = 0\n          a_copy = a\n          b_copy = b\n\n          CALL acc_copyin(a(1), LOOPCOUNT*8)\n          CALL acc_copyin(b(1), LOOPCOUNT*8)\n\n          a = 0\n          b = 0\n\n          CALL acc_copyin(a(1), LOOPCOUNT*8)\n          CALL acc_copyin(b(1), LOOPCOUNT*8)\n\n          !$acc data copyout(c(1:LOOPCOUNT))\n            !$acc parallel present(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                c(x) = a(x) + b(x)\n              END DO\n            !$acc end parallel\n          !$acc end data\n\n          !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n          !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n\n          DO x = 1, LOOPCOUNT\n            IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END IF\n        IF (errors .eq. 0) THEN\n          test7 = .FALSE.\n        ELSE\n          test7 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T7\n      LOGICAL :: test7\n#endif\n#ifndef T7\n      DO testrun = 1, NUM_TEST_CALLS\n        failed = failed .or. test7()\n      END DO\n      IF (failed) THEN\n        failcode = failcode + 2 ** 6\n        failed = .FALSE.\n      END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent",
                            "reference-counting",
                            "devonly"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_copyout.F90": {
                "num tests": 5,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        CALL acc_create(c(1:LOOPCOUNT))\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) present(c(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        CALL acc_copyout(c(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END FUNCTION\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:runtime,data,executable-data,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test2()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c\n        INTEGER :: errors = 0\n\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc enter data create(c(1:LOOPCOUNT))\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) present(c(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        CALL acc_copyout(c(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n!T3:runtime,data,executable-data,construct-independent,devonly,reference-counting,V:2.5-2.7\n      LOGICAL FUNCTION test3()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c\n        INTEGER :: errors = 0\n        LOGICAL,DIMENSION(1):: devtest\n\n        devtest(1) = .TRUE.\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel present(devtest(1:1))\n          devtest(1) = .FALSE.\n        !$acc end parallel\n\n        IF (devtest(1) .eqv. .TRUE.) THEN\n          SEEDDIM(1) = 1\n#         ifdef SEED\n          SEEDDIM(1) = SEED\n#         endif\n          CALL RANDOM_SEED(PUT=SEEDDIM)\n          CALL RANDOM_NUMBER(a)\n          CALL RANDOM_NUMBER(b)\n          c = 0\n\n          !$acc enter data copyin(c(1:LOOPCOUNT))\n          !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n            !$acc parallel\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                c(x) = a(x) + b(x)\n              END DO\n            !$acc end parallel\n            CALL acc_copyout(c(1:LOOPCOUNT))\n          !$acc end data\n\n          DO x = 1, LOOPCOUNT\n            IF (abs(c(x)) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test3 = .FALSE.\n        ELSE\n          test3 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T3\n        LOGICAL :: test3\n#endif\n#ifndef T3\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test3()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 2\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent",
                            "devonly",
                            "reference-counting"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "4": {
                        "content": "#ifndef T4\n!T4:runtime,data,executable-data,construct-independent,reference-counting,V:2.5-2.7\n      LOGICAL FUNCTION test4()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c\n        INTEGER :: errors = 0\n\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc enter data create(c(1:LOOPCOUNT))\n        !$acc enter data create(c(1:LOOPCOUNT))\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) present(c(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n        !$acc exit data delete(c(1:LOOPCOUNT))\n        CALL acc_copyout(c(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test4 = .FALSE.\n        ELSE\n          test4 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T4\n        LOGICAL :: test4\n#endif\n#ifndef T4\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test4()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 3\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent",
                            "reference-counting"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "5": {
                        "content": "#ifndef T5\n!T5:runtime,data,executable-data,construct-independent,reference-counting,devonly,V:2.5-2.7\n      LOGICAL FUNCTION test5()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c\n        INTEGER :: errors = 0\n        LOGICAL,DIMENSION(1):: devtest\n        devtest(1) = .TRUE.\n\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel present(devtest(1:1))\n          devtest(1) = .FALSE.\n        !$acc end parallel\n\n        IF (devtest(1) .eqv. .TRUE.) THEN\n          SEEDDIM(1) = 1\n#         ifdef SEED\n          SEEDDIM(1) = SEED\n#         endif\n          CALL RANDOM_SEED(PUT=SEEDDIM)\n          CALL RANDOM_NUMBER(a)\n          CALL RANDOM_NUMBER(b)\n          c = 0\n\n          !$acc enter data create(c(1:LOOPCOUNT))\n          !$acc enter data create(c(1:LOOPCOUNT))\n          !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) present(c(1:LOOPCOUNT))\n            !$acc parallel\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                c(x) = a(x) + b(x)\n              END DO\n            !$acc end parallel\n          !$acc end data\n          CALL acc_copyout(c(1:LOOPCOUNT))\n          !$acc exit data delete(c(1:LOOPCOUNT))\n\n          DO x = 1, LOOPCOUNT\n            IF (abs(c(x)) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test5 = .FALSE.\n        ELSE\n          test5 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T5\n        LOGICAL :: test5\n#endif\n#ifndef T5\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test5()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 4\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent",
                            "reference-counting",
                            "devonly"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_copyout_async.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,data,executable-data,async,construct-independent,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, d, e, f !Data\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        CALL RANDOM_NUMBER(d)\n        CALL RANDOM_NUMBER(e)\n        f = 0\n\n        !$acc enter data create(c(1:LOOPCOUNT), f(1:LOOPCOUNT))\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), d(1:LOOPCOUNT), e(1:LOOPCOUNT)) present(c(1:LOOPCOUNT), f(1:LOOPCOUNT))\n          !$acc parallel async(1)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n          !$acc parallel async(2)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              f(x) = d(x) + e(x)\n            END DO\n          !$acc end parallel\n          CALL acc_copyout_async(c(1:LOOPCOUNT), 1)\n          CALL acc_copyout_async(f(1:LOOPCOUNT), 2)\n        !$acc end data\n        !$acc wait\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n          IF (abs(f(x) - (d(x) + e(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n      LOGICAL :: test1\n#endif\n#ifndef T1\n      DO testrun = 1, NUM_TEST_CALLS\n        failed = failed .or. test1()\n      END DO\n      IF (failed) THEN\n        failcode = failcode + 2 ** 0\n        failed = .FALSE.\n      END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "async",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_copyout_async_with_len.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,data,executable-data,async,construct-independent,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, d, e, f !Data\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        CALL RANDOM_NUMBER(d)\n        CALL RANDOM_NUMBER(e)\n        f = 0\n\n        !$acc enter data create(c(1:LOOPCOUNT), f(1:LOOPCOUNT))\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), d(1:LOOPCOUNT), e(1:LOOPCOUNT)) present(c(1:LOOPCOUNT), f(1:LOOPCOUNT))\n          !$acc parallel async(1)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n          !$acc parallel async(2)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              f(x) = d(x) + e(x)\n            END DO\n          !$acc end parallel\n          CALL acc_copyout_async(c(1), LOOPCOUNT*8, 1)\n          CALL acc_copyout_async(f(1), LOOPCOUNT*8, 2)\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n          IF (abs(f(x) - (d(x) + e(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "async",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_copyout_finalize.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,data,executable-data,construct-independent,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc enter data create(c(1:LOOPCOUNT))\n        !$acc enter data create(c(1:LOOPCOUNT))\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) present(c(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        CALL acc_copyout_finalize(c(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_copyout_finalize_async.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,data,executable-data,async,construct-independent,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, d, e, f !Data\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        CALL RANDOM_NUMBER(d)\n        CALL RANDOM_NUMBER(e)\n        f = 0\n\n        !$acc enter data create(c(1:LOOPCOUNT), f(1:LOOPCOUNT))\n        !$acc enter data create(c(1:LOOPCOUNT), f(1:LOOPCOUNT))\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), d(1:LOOPCOUNT), e(1:LOOPCOUNT)) present(c(1:LOOPCOUNT), f(1:LOOPCOUNT))\n          !$acc parallel async(1)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n          !$acc parallel async(2)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              f(x) = d(x) + e(x)\n            END DO\n          !$acc end parallel\n          CALL acc_copyout_finalize_async(c(1:LOOPCOUNT), 1)\n          CALL acc_copyout_finalize_async(f(1:LOOPCOUNT), 2)\n          !$acc wait\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n          IF (abs(f(x) - (d(x) + e(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n      LOGICAL :: test1\n#endif\n#ifndef T1\n      DO testrun = 1, NUM_TEST_CALLS\n        failed = failed .or. test1()\n      END DO\n      IF (failed) THEN\n        failcode = failcode + 2 ** 0\n        failed = .FALSE.\n      END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "async",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_copyout_finalize_async_with_len.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,data,executable-data,async,construct-independent,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, d, e, f !Data\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        CALL RANDOM_NUMBER(d)\n        CALL RANDOM_NUMBER(e)\n        f = 0\n\n        !$acc enter data create(c(1:LOOPCOUNT), f(1:LOOPCOUNT))\n        !$acc enter data create(c(1:LOOPCOUNT), f(1:LOOPCOUNT))\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), d(1:LOOPCOUNT), e(1:LOOPCOUNT)) present(c(1:LOOPCOUNT), f(1:LOOPCOUNT))\n          !$acc parallel async(1)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n          !$acc parallel async(2)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              f(x) = d(x) + e(x)\n            END DO\n          !$acc end parallel\n          CALL acc_copyout_finalize_async(c(1), LOOPCOUNT*8, 1)\n          CALL acc_copyout_finalize_async(f(1), LOOPCOUNT*8, 2)\n          !$acc wait\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n          IF (abs(f(x) - (d(x) + e(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n      LOGICAL :: test1\n#endif\n#ifndef T1\n      DO testrun = 1, NUM_TEST_CALLS\n        failed = failed .or. test1()\n      END DO\n      IF (failed) THEN\n        failcode = failcode + 2 ** 0\n        failed = .FALSE.\n      END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "async",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_copyout_finalize_with_len.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,data,executable-data,construct-independent,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc enter data create(c(1:LOOPCOUNT))\n        !$acc enter data create(c(1:LOOPCOUNT))\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) present(c(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        CALL acc_copyout_finalize(c(1), LOOPCOUNT*8)\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_copyout_with_len.F90": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        CALL acc_create(c(1:LOOPCOUNT))\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) present(c(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        CALL acc_copyout(c(1), LOOPCOUNT*8)\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:runtime,data,executable-data,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test2()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c\n        INTEGER :: errors = 0\n\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc enter data create(c(1:LOOPCOUNT))\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) present(c(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        CALL acc_copyout(c(1), LOOPCOUNT*8)\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2**1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_create.F90": {
                "num tests": 4,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors\n        errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        CALL acc_create(c(1:LOOPCOUNT))\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n          !$acc parallel present(c(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        CALL acc_copyout(c(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:runtime,data,executable-data,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test2()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c\n        INTEGER:: errors\n        errors = 0\n\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c= 0\n\n        CALL acc_create(c(1:LOOPCOUNT))\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n          !$acc parallel present(c(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        !$acc exit data copyout(c(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n!T3:runtime,compatibility-features,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test3()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER:: x\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c\n        INTEGER:: errors\n        errors = 0\n\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        CALL acc_pcreate(c(1:LOOPCOUNT))\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) present(c(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        !$acc exit data copyout(c(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test3 = .FALSE.\n        ELSE\n          test3 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T3\n        LOGICAL :: test3\n#endif\n#ifndef T3\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test3()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 2\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "compatibility-features",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "4": {
                        "content": "#ifndef T4\n!T4:runtime,compatibility-features,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test4()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER:: x\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c\n        INTEGER:: errors\n        errors = 0\n\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        CALL acc_present_or_create(c(1:LOOPCOUNT))\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) present(c(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        !$acc exit data copyout(c(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test4 = .FALSE.\n        ELSE\n          test4 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T4\n        LOGICAL :: test4\n#endif\n#ifndef T4\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test4()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 3\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "compatibility-features",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_create_async.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,data,executable-data,async,construct-independent,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, d, e, f !Data\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        CALL RANDOM_NUMBER(d)\n        CALL RANDOM_NUMBER(e)\n        f = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), d(1:LOOPCOUNT), e(1:LOOPCOUNT))\n          CALL acc_create_async(c(1:LOOPCOUNT), 1)\n          CALL acc_create_async(f(1:LOOPCOUNT), 2)\n          !$acc data present(c(1:LOOPCOUNT), f(1:LOOPCOUNT))\n            !$acc parallel async(1)\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                c(x) = a(x) + b(x)\n              END DO\n            !$acc end parallel\n            !$acc parallel async(2)\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                f(x) = d(x) + e(x)\n              END DO\n            !$acc end parallel\n            !$acc wait\n          !$acc end data\n        !$acc end data\n\n        !$acc exit data copyout(c(1:LOOPCOUNT), f(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n          IF (abs(f(x) - (d(x) + e(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "async",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_create_async_with_len.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,data,executable-data,async,construct-independent,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, d, e, f !Data\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        CALL RANDOM_NUMBER(d)\n        CALL RANDOM_NUMBER(e)\n        f = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), d(1:LOOPCOUNT), e(1:LOOPCOUNT))\n          CALL acc_create_async(c(1), LOOPCOUNT*8, 1)\n          CALL acc_create_async(f(1), LOOPCOUNT*8, 2)\n          !$acc data present(c(1:LOOPCOUNT), f(1:LOOPCOUNT))\n            !$acc parallel async(1)\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                c(x) = a(x) + b(x)\n              END DO\n            !$acc end parallel\n            !$acc parallel async(2)\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                f(x) = d(x) + e(x)\n              END DO\n            !$acc end parallel\n            !$acc wait\n          !$acc end data\n        !$acc end data\n\n        !$acc exit data copyout(c(1:LOOPCOUNT), f(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n          IF (abs(f(x) - (d(x) + e(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "async",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_create_with_len.F90": {
                "num tests": 4,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors\n        errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n        #ifdef SEED\n        SEEDDIM(1) = SEED\n        #endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        CALL acc_create(c(1), LOOPCOUNT*8)\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n          !$acc parallel present(c(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        CALL acc_copyout(c(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:runtime,data,executable-data,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test2()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER:: x\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c\n        INTEGER :: errors\n        errors = 0\n\n        SEEDDIM(1) = 1\n        #ifdef SEED\n        SEEDDIM(1) = SEED\n        #endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c= 0\n\n        CALL acc_create(c(1), LOOPCOUNT*8)\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n          !$acc parallel present(c(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        !$acc exit data copyout(c(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n!T3:runtime,compatibility-features,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test3()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER:: x\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c\n        INTEGER:: errors\n        errors = 0\n\n        SEEDDIM(1) = 1\n        #ifdef SEED\n        SEEDDIM(1) = SEED\n        #endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        CALL acc_pcreate(c(1), LOOPCOUNT*8)\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) present(c(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        !$acc exit data copyout(c(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test3 = .FALSE.\n        ELSE\n          test3 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T3\n        LOGICAL :: test3\n#endif\n#ifndef T3\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test3()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 2\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "compatibility-features",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "4": {
                        "content": "#ifndef T4\n!T4:runtime,compatibility-features,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test4()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER:: x\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c\n        INTEGER:: errors\n        errors = 0\n\n        SEEDDIM(1) = 1\n        #ifdef SEED\n        SEEDDIM(1) = SEED\n        #endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        CALL acc_present_or_create(c(1), LOOPCOUNT*8)\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) present(c(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        !$acc exit data copyout(c(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test4 = .FALSE.\n        ELSE\n          test4 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T4\n        LOGICAL :: test4\n#endif\n#ifndef T4\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test4()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 3\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "compatibility-features",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_delete.F90": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors\n        errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n\n        !$acc data copyout(c(1:LOOPCOUNT))\n          !$acc parallel present(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        CALL acc_delete(a(1:LOOPCOUNT))\n        CALL acc_delete(b(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:runtime,data,executable-data,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test2()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER:: x\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c\n        INTEGER:: errors\n        errors = 0\n\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        CALL acc_copyin(a(1:LOOPCOUNT))\n        CALL acc_copyin(b(1:LOOPCOUNT))\n\n        !$acc data copyout(c(1:LOOPCOUNT))\n          !$acc parallel present(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        CALL acc_delete(a(1:LOOPCOUNT))\n        CALL acc_delete(b(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2**1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_delete_async.F90": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,data,executable-data,async,construct-independent,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, d, e, f !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        CALL RANDOM_NUMBER(d)\n        CALL RANDOM_NUMBER(e)\n        f = 0\n\n        !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), d(1:LOOPCOUNT), e(1:LOOPCOUNT))\n\n        !$acc data present(a(1:LOOPCOUNT), b(1:LOOPCOUNT), d(1:LOOPCOUNT), e(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT), f(1:LOOPCOUNT))\n          !$acc parallel async(1)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n          !$acc parallel async(2)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              f(x) = d(x) + e(x)\n            END DO\n          !$acc end parallel\n          CALL acc_delete_async(a(1:LOOPCOUNT), 1)\n          CALL acc_delete_async(b(1:LOOPCOUNT), 1)\n          CALL acc_delete_async(d(1:LOOPCOUNT), 2)\n          CALL acc_delete_async(e(1:LOOPCOUNT), 2)\n          !$acc wait\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n          IF (abs(f(x) - (d(x) + e(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "async",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:runtime,data,executable-data,devonly,async,construct-independent,V:2.5-2.7\n      LOGICAL FUNCTION test2()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c!Data\n        INTEGER,DIMENSION(1) :: devtest\n        INTEGER :: errors = 0\n\n        devtest(1) = 1\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel present(devtest(1:1))\n          devtest(1) = 0\n        !$acc end parallel\n\n        IF (devtest(1) == 1) THEN\n          CALL RANDOM_NUMBER(a)\n          CALL RANDOM_NUMBER(b)\n          c = 0\n\n          !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n          !$acc data present(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n            !$acc parallel async(1)\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                c(x) = a(x) + b(x)\n              END DO\n            !$acc end parallel\n          !$acc end data\n          CALL acc_delete_async(c(1:LOOPCOUNT), 1)\n          !$acc enter data copyin(c(1:LOOPCOUNT)) async(1)\n          !$acc data present(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n            !$acc parallel async(1)\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                c(x) = c(x) + a(x) + b(x)\n              END DO\n            !$acc end parallel\n          !$acc end data\n          !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n\n          DO x = 1, LOOPCOUNT\n            IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2**1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "devonly",
                            "async",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_delete_async_with_len.F90": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,data,executable-data,async,construct-independent,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, d, e, f !Data\n        INTEGER :: errors = 0\n\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        CALL RANDOM_NUMBER(d)\n        CALL RANDOM_NUMBER(e)\n        f = 0\n\n        !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), d(1:LOOPCOUNT), e(1:LOOPCOUNT))\n\n        !$acc data present(a(1:LOOPCOUNT), b(1:LOOPCOUNT), d(1:LOOPCOUNT), e(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT), f(1:LOOPCOUNT))\n          !$acc parallel async(1)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n          !$acc parallel async(2)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              f(x) = d(x) + e(x)\n            END DO\n          !$acc end parallel\n          CALL acc_delete_async(a(1), LOOPCOUNT*8, 1)\n          CALL acc_delete_async(b(1), LOOPCOUNT*8, 1)\n          CALL acc_delete_async(d(1), LOOPCOUNT*8, 2)\n          CALL acc_delete_async(e(1), LOOPCOUNT*8, 2)\n          !$acc wait\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n          IF (abs(f(x) - (d(x) + e(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "async",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:runtime,data,executable-data,devonly,async,construct-independent,V:2.5-2.7\n      LOGICAL FUNCTION test2()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER,DIMENSION(1):: devtest\n        INTEGER :: errors = 0\n\n        devtest(1) = 1\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel present(devtest(1:1))\n          devtest(1) = 0\n        !$acc end parallel\n        IF (devtest(1) == 1) THEN\n          CALL RANDOM_NUMBER(a)\n          CALL RANDOM_NUMBER(b)\n          c = 0\n\n          !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n          !$acc data present(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n            !$acc parallel async(1)\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                c(x) = a(x) + b(x)\n              END DO\n            !$acc end parallel\n          !$acc end data\n          CALL acc_delete_async(c(1), LOOPCOUNT*8, 1)\n          !$acc enter data copyin(c(1:LOOPCOUNT)) async(1)\n          !$acc data present(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n            !$acc parallel async(1)\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                c(x) = c(x) + a(x) + b(x)\n              END DO\n            !$acc end parallel\n          !$acc end data\n          !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n\n          DO x = 1, LOOPCOUNT\n            IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2**1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "devonly",
                            "async",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_delete_finalize.F90": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,data,executable-data,construct-independent,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n        !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n\n        !$acc data copyout(c(1:LOOPCOUNT))\n          !$acc parallel present(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        CALL acc_delete_finalize(a(1:LOOPCOUNT))\n        CALL acc_delete_finalize(b(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:runtime,data,executable-data,construct-independent,V:2.5-2.7\n      LOGICAL FUNCTION test2()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        CALL acc_copyin(a(1:LOOPCOUNT))\n        CALL acc_copyin(a(1:LOOPCOUNT))\n        CALL acc_copyin(b(1:LOOPCOUNT))\n        CALL acc_copyin(b(1:LOOPCOUNT))\n\n        !$acc data copyout(c(1:LOOPCOUNT))\n          !$acc parallel present(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        CALL acc_delete_finalize(a(1:LOOPCOUNT))\n        CALL acc_delete_finalize(b(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2**1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_delete_finalize_async.F90": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,data,executable-data,async,construct-independent,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, d, e, f !Data\n        INTEGER :: errors\n        errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        CALL RANDOM_NUMBER(d)\n        CALL RANDOM_NUMBER(e)\n        f = 0\n\n        !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), d(1:LOOPCOUNT), e(1:LOOPCOUNT))\n        !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), d(1:LOOPCOUNT), e(1:LOOPCOUNT))\n\n        !$acc data present(a(1:LOOPCOUNT), b(1:LOOPCOUNT), d(1:LOOPCOUNT), e(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT), f(1:LOOPCOUNT))\n          !$acc parallel async(1)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n          !$acc parallel async(2)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              f(x) = d(x) + e(x)\n            END DO\n          !$acc end parallel\n          CALL acc_delete_finalize_async(a(1:LOOPCOUNT), 1)\n          CALL acc_delete_finalize_async(b(1:LOOPCOUNT), 1)\n          CALL acc_delete_finalize_async(d(1:LOOPCOUNT), 2)\n          CALL acc_delete_finalize_async(e(1:LOOPCOUNT), 2)\n          !$acc wait\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n          IF (abs(f(x) - (d(x) + e(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "async",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:runtime,data,executable-data,async,construct-independent,V:2.5-2.7\n      LOGICAL FUNCTION test2()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors\n        errors = 0\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n        !$acc enter data copyin(c(1:LOOPCOUNT))\n        !$acc data present(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n          !$acc parallel async(1)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        CALL acc_delete_finalize_async(c(1:LOOPCOUNT), 1)\n\n        !$acc enter data copyin(c(1:LOOPCOUNT)) async(1)\n        !$acc data present(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n          !$acc parallel async(1)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = c(x) + a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2**1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "async",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_delete_finalize_async_with_len.F90": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,data,executable-data,async,construct-independent,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, d, e, f !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        CALL RANDOM_NUMBER(d)\n        CALL RANDOM_NUMBER(e)\n        f = 0\n\n        !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), d(1:LOOPCOUNT), e(1:LOOPCOUNT))\n        !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), d(1:LOOPCOUNT), e(1:LOOPCOUNT))\n\n        !$acc data present(a(1:LOOPCOUNT), b(1:LOOPCOUNT), d(1:LOOPCOUNT), e(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT), f(1:LOOPCOUNT))\n          !$acc parallel async(1)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n          !$acc parallel async(2)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              f(x) = d(x) + e(x)\n            END DO\n          !$acc end parallel\n          CALL acc_delete_finalize_async(a(1), LOOPCOUNT*8, 1)\n          CALL acc_delete_finalize_async(b(1), LOOPCOUNT*8, 1)\n          CALL acc_delete_finalize_async(d(1), LOOPCOUNT*8, 2)\n          CALL acc_delete_finalize_async(e(1), LOOPCOUNT*8, 2)\n          !$acc wait\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n          IF (abs(f(x) - (d(x) + e(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "async",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:runtime,data,executable-data,async,construct-independent,V:2.5-2.7\n      LOGICAL FUNCTION test2()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n        !$acc enter data copyin(c(1:LOOPCOUNT))\n        !$acc data present(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n          !$acc parallel async(1)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        CALL acc_delete_finalize_async(c(1), LOOPCOUNT*8, 1)\n\n        !$acc enter data copyin(c(1:LOOPCOUNT)) async(1)\n        !$acc data present(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n          !$acc parallel async(1)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = c(x) + a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2**1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "async",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_delete_finalize_with_len.F90": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,data,executable-data,construct-independent,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors\n        errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n        !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n\n        !$acc data copyout(c(1:LOOPCOUNT))\n          !$acc parallel present(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        CALL acc_delete_finalize(a(1), LOOPCOUNT*8)\n        CALL acc_delete_finalize(b(1), LOOPCOUNT*8)\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:runtime,data,executable-data,construct-independent,V:2.5-2.7\n      LOGICAL FUNCTION test2()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors\n        errors = 0\n\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        CALL acc_copyin(a(1:LOOPCOUNT))\n        CALL acc_copyin(a(1:LOOPCOUNT))\n        CALL acc_copyin(b(1:LOOPCOUNT))\n        CALL acc_copyin(b(1:LOOPCOUNT))\n\n        !$acc data copyout(c(1:LOOPCOUNT))\n          !$acc parallel present(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        CALL acc_delete_finalize(a(1), LOOPCOUNT*8)\n        CALL acc_delete_finalize(b(1), LOOPCOUNT*8)\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2**1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_delete_with_len.F90": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors\n        errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n\n        !$acc data copyout(c(1:LOOPCOUNT))\n          !$acc parallel present(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        CALL acc_delete(a(1), LOOPCOUNT*8)\n        CALL acc_delete(b(1), LOOPCOUNT*8)\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:runtime,data,executable-data,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test2()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors\n        errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        CALL acc_copyin(a(1:LOOPCOUNT))\n        CALL acc_copyin(b(1:LOOPCOUNT))\n\n        !$acc data copyout(c(1:LOOPCOUNT))\n          !$acc parallel present(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        CALL acc_delete(a(1), LOOPCOUNT*8)\n        CALL acc_delete(b(1), LOOPCOUNT*8)\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2**1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_get_default_async.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,async,construct-independent,internal-control-values,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, holder !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors\n        INTEGER :: acc_get_default_async\n        errors = 0\n        holder = acc_get_default_async()\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n          !$acc parallel async\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n          !$acc wait(holder)\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (acc_get_default_async() .lt. 0) THEN\n          errors = errors + 1\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "async",
                            "construct-independent",
                            "internal-control-values"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_get_device_num.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,construct-independent,internal-control-values,set,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        INTEGER :: errors\n        errors = 0\n\n        IF (acc_get_device_type() .ne. acc_device_none) THEN\n          DO x = 1, acc_get_num_devices(acc_get_device_type())\n            CALL acc_set_device_num(x, acc_get_device_type())\n            IF (acc_get_device_num(acc_get_device_type()) .ne. x) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "construct-independent",
                            "internal-control-values",
                            "set"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_get_num_devices.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,construct-independent,internal-control-values,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: errors\n        errors = 0\n\n        IF (acc_get_device_type() .ne. acc_device_none) THEN\n          IF (acc_get_num_devices(acc_get_device_type()) .eq. 0) THEN\n            errors = errors + 1\n          END IF\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "construct-independent",
                            "internal-control-values"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_get_property.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,construct-independent,internal-control-values,nonvalidating,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: output\n        IF (acc_get_device_type() .ne. acc_device_none) THEN\n          output = acc_get_property(acc_get_device_num(acc_get_device_type()), acc_get_device_type(), acc_property_memory)\n          output = acc_get_property(acc_get_device_num(acc_get_device_type()), acc_get_device_type(), acc_property_free_memory)\n        END IF\n        test1 = .FALSE.\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "construct-independent",
                            "internal-control-values",
                            "nonvalidating"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_get_property_string.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,construct-independent,internal-control-values,nonvalidating,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        CHARACTER(len=:),ALLOCATABLE :: output1\n        CHARACTER(len=:),ALLOCATABLE :: output2\n        CHARACTER(len=:),ALLOCATABLE :: output3\n        IF (acc_get_device_type() .ne. acc_device_none) THEN\n          CALL acc_get_property_string(acc_get_device_num(acc_get_device_type()), acc_get_device_type, acc_property_name, output1)\n          CALL acc_get_property_string(acc_get_device_num(acc_get_device_type()), acc_get_device_type, acc_property_vendor, output2)\n          CALL acc_get_property_string(acc_get_device_num(acc_get_device_type()), acc_get_device_type, acc_property_driver, output3)\n        END IF\n        test1 = .FALSE.\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "construct-independent",
                            "internal-control-values",
                            "nonvalidating"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_init.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,construct-independent,internal-control-values,init,nonvalidating,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        IF (acc_get_device_type() .ne. acc_device_none) THEN\n          CALL acc_init(acc_get_device_type())\n        END IF\n\n        test1 = .FALSE.\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "construct-independent",
                            "internal-control-values",
                            "init",
                            "nonvalidating"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_is_present.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,devonly,construct-independent,present,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a !Data\n        INTEGER,DIMENSION(1):: devtest\n        INTEGER :: errors\n        errors = 0\n\n        devtest(1) = 1\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel present(devtest(1:1))\n          devtest(1) = 0\n        !$acc end parallel\n\n        !$acc enter data create(a(1:LOOPCOUNT))\n        IF (acc_is_present(a(1:LOOPCOUNT)) .eqv. .FALSE.) THEN\n          errors = errors + 1\n          PRINT*, 1\n        END IF\n        !$acc exit data delete(a(1:LOOPCOUNT))\n\n        IF (devtest(1) .eq. 1) THEN\n          IF (acc_is_present(a(1:LOOPCOUNT)) .eqv. .TRUE.) THEN\n            errors = errors + 1\n            PRINT*, 2\n          END IF\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "devonly",
                            "construct-independent",
                            "present"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_is_present_with_len.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,devonly,construct-independent,present,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a !Data\n        INTEGER,DIMENSION(1):: devtest\n        INTEGER :: errors = 0\n\n        devtest(1) = 1\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel present(devtest(1:1))\n          devtest(1) = 0\n        !$acc end parallel\n\n        !$acc enter data create(a(1:LOOPCOUNT))\n        IF (acc_is_present(a(1), LOOPCOUNT*8) .eqv. .FALSE.) THEN\n          errors = errors + 1\n        END IF\n        !$acc exit data delete(a(1:LOOPCOUNT))\n\n        IF (devtest(1) .eq. 1) THEN\n          IF (acc_is_present(a(1), LOOPCOUNT*8) .eqv. .TRUE.) THEN\n            errors = errors + 1\n          END IF\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "devonly",
                            "construct-independent",
                            "present"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_on_device.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,construct-independent,internal-control-values,present,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: errors\n        INTEGER :: device_type\n        errors = 0\n        device_type = acc_get_device_type()\n        IF (device_type .ne. acc_device_none) THEN\n          !$acc parallel\n            IF (acc_on_device(device_type) .eqv. .FALSE.) THEN\n              errors = errors + 1\n            END IF\n          !$acc end parallel\n        ELSE\n          !$acc parallel\n            IF (acc_on_device(acc_device_host) .eqv. .FALSE.) THEN\n              errors = errors + 1\n            END IF\n          !$acc end parallel\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "construct-independent",
                            "internal-control-values",
                            "present"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_set_default_async.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,async,construct-independent,internal-control-values,set,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, a_host, b_host !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        a_host = a\n        b_host = b\n        c = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n          CALL acc_set_default_async(1)\n          !$acc parallel async\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              a(x) = a(x) * a(x)\n            END DO\n          !$acc end parallel\n          CALL acc_set_default_async(2)\n          !$acc parallel async\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              b(x) = b(x) * b(x)\n            END DO\n          !$acc end parallel\n          !$acc parallel async(1) wait(2)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n          !$acc wait(1)\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a_host(x) * a_host(x) + b_host(x) * b_host(x))) .gt. 4 * PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "async",
                            "construct-independent",
                            "internal-control-values",
                            "set"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_set_device_num.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,construct-independent,internal-control-values,set,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(:, :),ALLOCATABLE :: host_copy\n        INTEGER :: errors = 0\n\n        CALL RANDOM_SEED\n        ALLOCATE(host_copy(acc_get_num_devices(acc_get_device_type()), LOOPCOUNT))\n\n        IF (acc_get_device_type() .ne. acc_device_none) THEN\n          !host_copy(acc_get_num_devices(acc_get_device_type()), LOOPCOUNT)\n          DO x = 1, acc_get_num_devices(acc_get_device_type())\n            DO y = 1, LOOPCOUNT\n              CALL RANDOM_NUMBER(a)\n              host_copy(x) = a\n            END DO\n            acc_set_device_num(x, acc_get_device_type())\n            !$acc enter data copyin(a(1:LOOPCOUNT))\n          END DO\n\n          DO x = 1, acc_get_num_devices(acc_get_device_type)\n            acc_set_device_num(x, acc_get_device_type())\n            !$acc data present(a(1:LOOPCOUNT))\n              !$acc parallel\n                !$acc loop\n                DO y = 1, LOOPCOUNT\n                  a(y) = a(y) + 1\n                END DO\n              !$acc end parallel\n            !$acc end data\n          END DO\n\n          DO x = 1, acc_get_num_devices(acc_get_device_type())\n            acc_set_device_num(x, acc_get_device_type())\n            !$acc exit data copyout(a(1:LOOPCOUNT))\n            DO y = 1, LOOPCOUNT\n              IF (abs(a(y) - (host_copy(x, y) + 1)) .gt. PRECISION) THEN\n                errors = errors + 1\n              END IF\n            END DO\n          END DO\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "construct-independent",
                            "internal-control-values",
                            "set"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_set_device_type.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,construct-independent,internal-control-values,set,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.fh\"\n        INTEGER :: errors = 0\n        INTEGER :: device_type\n\n        device_type = acc_get_device_type()\n        CALL acc_set_device_type(device_type)\n        IF (acc_get_device_type() .ne. device_type) THEN\n          errors = errors + 1\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "construct-independent",
                            "internal-control-values",
                            "set"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_shutdown.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,construct-independent,internal-control-values,shutdown,nonvalidating,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        IF (acc_get_device_type() .ne. acc_device_none) THEN\n          CALL acc_shutdown(acc_get_device_type())\n        END IF\n\n        test1 = .FALSE.\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "construct-independent",
                            "internal-control-values",
                            "shutdown",
                            "nonvalidating"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_update_device.F90": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,data,executable-data,construct-independent,update,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc data copyout(c(1:LOOPCOUNT)) create(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n          CALL acc_update_device(a(1:LOOPCOUNT))\n          CALL acc_update_device(b(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent",
                            "update"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:runtime,data,executable-data,devonly,construct-independent,update,V:2.0-2.7\n      LOGICAL FUNCTION test2()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER,DIMENSION(1):: devtest\n        INTEGER :: errors = 0\n\n        devtest(1) = 1\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel present(devtest(1:1))\n          devtest(1) = 0\n        !$acc end parallel\n\n        IF (devtest(1) .eq. 1) THEN\n          CALL RANDOM_NUMBER(a)\n          CALL RANDOM_NUMBER(b)\n          c = 0\n\n          !$acc data copyout(c(1:LOOPCOUNT)) copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            !$acc parallel\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                a(x) = a(x) * a(x)\n              END DO\n            !$acc end parallel\n            CALL acc_update_device(a(1:LOOPCOUNT))\n            !$acc parallel\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                b(x) = b(x) * b(x)\n              END DO\n            !$acc end parallel\n            CALL acc_update_device(b(1:LOOPCOUNT))\n            !$acc parallel\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                c(x) = a(x) + b(x)\n              END DO\n            !$acc end parallel\n          !$acc end data\n\n          DO x = 1, LOOPCOUNT\n            IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "devonly",
                            "construct-independent",
                            "update"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_update_device_async.F90": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,data,executable-data,async,construct-independent,update,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, a_host, b_host !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        a_host = a\n        b_host = b\n\n        !$acc data create(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n          CALL acc_update_device_async(a(1:LOOPCOUNT), 1)\n          !$acc parallel async(1)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              a(x) = a(x) * a(x)\n            END DO\n          !$acc end parallel\n          CALL acc_update_device_async(b(1:LOOPCOUNT), 2)\n          !$acc parallel async(2)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              b(x) = b(x) * b(x)\n            END DO\n          !$acc end parallel\n          !$acc parallel async(1) wait(2)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n          !$acc wait(1)\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - ((a_host(x) * a_host(x)) + (b_host(x) * b_host(x)))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "async",
                            "construct-independent",
                            "update"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:runtime,data,executable-data,devonly,async,construct-independent,update,V:2.5-2.7\n      LOGICAL FUNCTION test2()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER,DIMENSION(1):: devtest\n        INTEGER :: errors = 0\n\n        devtest(1) = 1\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel present(devtest(1:1))\n          devtest(1) = 0\n        !$acc end parallel\n        IF (devtest(1) .eq. 1) THEN\n          CALL RANDOM_NUMBER(a)\n          CALL RANDOM_NUMBER(b)\n          c = 0\n\n          !$acc data copyout(c(1:LOOPCOUNT)) copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            !$acc parallel async(1)\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                a(x) = a(x) * a(x)\n              END DO\n            !$acc end parallel\n            CALL acc_update_device_async(a(1:LOOPCOUNT), 1)\n            !$acc parallel async(2)\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                b(x) = b(x) * b(x)\n              END DO\n            !$acc end parallel\n            CALL acc_update_device_async(b(1:LOOPCOUNT), 2)\n            !$acc parallel async(1) wait(2)\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                c(x) = a(x) + b(x)\n              END DO\n            !$acc end parallel\n            !$acc wait(1)\n          !$acc end data\n\n          DO x = 1, LOOPCOUNT\n            IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "devonly",
                            "async",
                            "construct-independent",
                            "update"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_update_device_async_with_len.F90": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,data,executable-data,async,construct-independent,update,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, a_host, b_host !Data\n        INTEGER :: errors\n        errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        a_host = a\n        b_host = b\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n          CALL acc_update_device_async(a(1), LOOPCOUNT*8, 1)\n          !$acc parallel async(1)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              a(x) = a(x) * a(x)\n            END DO\n          !$acc end parallel\n          CALL acc_update_device_async(b(1), LOOPCOUNT*8, 2)\n          !$acc parallel async(2)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              b(x) = b(x) * b(x)\n            END DO\n          !$acc end parallel\n          !$acc parallel async(1) wait(2)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n          !$acc wait(1)\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - ((a_host(x) * a_host(x)) + (b_host(x) * b_host(x)))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "async",
                            "construct-independent",
                            "update"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:runtime,data,executable-data,devonly,async,construct-independent,update,V:2.5-2.7\n      LOGICAL FUNCTION test2()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER,DIMENSION(1):: devtest\n        INTEGER :: errors\n        errors = 0\n\n        devtest(1) = 1\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel present(devtest(1:1))\n          devtest(1) = 0\n        !$acc end parallel\n        IF (devtest(1) .eq. 1) THEN\n          CALL RANDOM_NUMBER(a)\n          CALL RANDOM_NUMBER(b)\n          c = 0\n\n          !$acc data copyout(c(1:LOOPCOUNT)) copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            !$acc parallel async(1)\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                a(x) = a(x) * a(x)\n              END DO\n            !$acc end parallel\n            CALL acc_update_device_async(a(1), LOOPCOUNT*8, 1)\n            !$acc parallel async(2)\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                b(x) = b(x) * b(x)\n              END DO\n            !$acc end parallel\n            CALL acc_update_device_async(b(1), LOOPCOUNT*8, 2)\n            !$acc parallel async(1), wait(2)\n              !$acc loop\n               DO x = 1, LOOPCOUNT\n                 c(x) = a(x) + b(x)\n               END DO\n            !$acc end parallel\n            !$acc wait(1)\n          !$acc end data\n\n          DO x = 1, LOOPCOUNT\n            IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "devonly",
                            "async",
                            "construct-independent",
                            "update"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_update_device_with_len.F90": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,data,executable-data,devonly,construct-independent,update,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER,DIMENSION(1):: devtest\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n\n        devtest(1) = 1\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel\n          devtest(1) = 0\n        !$acc end parallel\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc data copyout(c(1:LOOPCOUNT)) create(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n          CALL acc_update_device(a(1), LOOPCOUNT*8)\n          CALL acc_update_device(b(1), LOOPCOUNT*8)\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "devonly",
                            "construct-independent",
                            "update"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:runtime,data,executable-data,devonly,construct-independent,update,V:2.0-2.7\n      LOGICAL FUNCTION test2()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER,DIMENSION(1):: devtest\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n\n        devtest(1) = 1\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel\n          devtest(1) = 0\n        !$acc end parallel\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        IF (devtest(1) .eq. 1) THEN\n          CALL RANDOM_NUMBER(a)\n          CALL RANDOM_NUMBER(b)\n          c = 0\n\n          !$acc data copyout(c(1:LOOPCOUNT)) copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            !$acc parallel\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                a(x) = a(x) * a(x)\n              END DO\n            !$acc end parallel\n            CALL acc_update_device(a(1), LOOPCOUNT*8)\n            !$acc parallel\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                b(x) = b(x) * b(x)\n              END DO\n            !$acc end parallel\n            CALL acc_update_device(b(1), LOOPCOUNT*8)\n            !$acc parallel\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                c(x) = a(x) + b(x)\n              END DO\n            !$acc end parallel\n          !$acc end data\n\n          DO x = 1, LOOPCOUNT\n            IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "devonly",
                            "construct-independent",
                            "update"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_update_self.F90": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,data,executable-data,construct-independent,update,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) create(c(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n          CALL acc_update_self(c(1:LOOPCOUNT))\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent",
                            "update"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:runtime,data,executable-data,construct-independent,update,V:2.0-2.7\n      LOGICAL FUNCTION test2()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc data copyout(c(1:LOOPCOUNT)) copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              a(x) = a(x) * a(x)\n            END DO\n          !$acc end parallel\n          CALL acc_update_self(a(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              b(x) = b(x) * b(x)\n            END DO\n          !$acc end parallel\n          CALL acc_update_self(b(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent",
                            "update"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_update_self_async.F90": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,data,executable-data,devonly,async,construct-independent,update,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, d !Data\n        INTEGER,DIMENSION(1):: devtest\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n\n        devtest(1) = 1\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel\n          devtest(1) = 0\n        !$acc end parallel\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        d = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) create(c(1:LOOPCOUNT), d(1:LOOPCOUNT))\n          !$acc parallel async(1)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n          !$acc parallel async(2)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              d(x) = a(x) * b(x)\n            END DO\n          !$acc end parallel\n          CALL acc_update_self_async(c(1:LOOPCOUNT), 1)\n          CALL acc_update_self_async(d(1:LOOPCOUNT), 2)\n          !$acc wait\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n          IF (abs(d(x) - (a(x) * b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "devonly",
                            "async",
                            "construct-independent",
                            "update"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:runtime,data,executable-data,devonly,async,construct-independent,update,V:2.5-2.7\n      LOGICAL FUNCTION test2()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, d !Data\n        INTEGER,DIMENSION(1):: devtest\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n\n        devtest(1) = 1\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel\n          devtest(1) = 0\n        !$acc end parallel\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        IF (devtest(1) .eq. 1) THEN\n          CALL RANDOM_NUMBER(a)\n          CALL RANDOM_NUMBER(b)\n          c = 0\n\n          !$acc data copyout(c(1:LOOPCOUNT)) copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            !$acc parallel async(1)\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                a(x) = a(x) * a(x)\n              END DO\n            !$acc end parallel\n            CALL acc_update_self_async(a(1:LOOPCOUNT), 1)\n            !$acc parallel async(2)\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                b(x) = b(x) * b(x)\n              END DO\n            !$acc end parallel\n            CALL acc_update_self_async(b(1:LOOPCOUNT), 2)\n            !$acc parallel async(1)\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                a(x) = a(x) + 1\n              END DO\n            !$acc end parallel\n            !$acc parallel async(2)\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                b(x) = b(x) + 1\n              END DO\n            !$acc end parallel\n            !$acc parallel async(1) wait(2)\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                c(x) = a(x) * b(x)\n              END DO\n            !$acc end parallel\n          !$acc end data\n\n          DO x = 1, LOOPCOUNT\n            IF (abs(c(x) - ((a(x) + 1) * (b(x) + 1))) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "devonly",
                            "async",
                            "construct-independent",
                            "update"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_update_self_async_with_len.F90": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,data,executable-data,devonly,async,construct-independent,update,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, d !Data\n        INTEGER,DIMENSION(1):: devtest\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n\n        devtest(1) = 1\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel present(devtest(1:1))\n          devtest(1) = 0\n        !$acc end parallel\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        d = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) create(c(1:LOOPCOUNT), d(1:LOOPCOUNT))\n          !$acc parallel async(1)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n          !$acc parallel async(2)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              d(x) = a(x) * b(x)\n            END DO\n          !$acc end parallel\n          CALL acc_update_self_async(c(1), LOOPCOUNT*8, 1)\n          CALL acc_update_self_async(d(1), LOOPCOUNT*8, 2)\n          !$acc wait\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n          IF (abs(d(x) - (a(x) * b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "devonly",
                            "async",
                            "construct-independent",
                            "update"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:runtime,data,executable-data,devonly,async,construct-independent,update,V:2.5-2.7\n      LOGICAL FUNCTION test2()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, d !Data\n        INTEGER,DIMENSION(1):: devtest\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n\n        devtest(1) = 1\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel present(devtest(1:1))\n          devtest(1) = 0\n        !$acc end parallel\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        IF (devtest(1) .eq. 1) THEN\n          CALL RANDOM_NUMBER(a)\n          CALL RANDOM_NUMBER(b)\n          c = 0\n\n          !$acc data copyout(c(1:LOOPCOUNT)) copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            !$acc parallel async(1)\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                a(x) = a(x) * a(x)\n              END DO\n            !$acc end parallel\n            CALL acc_update_self_async(a(1), LOOPCOUNT*8, 1)\n            !$acc parallel async(2)\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                b(x) = b(x) * b(x)\n              END DO\n            !$acc end parallel\n            CALL acc_update_self_async(b(1), LOOPCOUNT*8, 2)\n            !$acc parallel async(1)\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                a(x) = a(x) + 1\n              END DO\n            !$acc end parallel\n            !$acc parallel async(2)\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                b(x) = b(x) + 1\n              END DO\n            !$acc end parallel\n            !$acc parallel async(1) wait(2)\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                c(x) = a(x) * b(x)\n              END DO\n            !$acc end parallel\n            !$acc wait(1)\n          !$acc end data\n\n          DO x = 1, LOOPCOUNT\n            IF (abs(c(x) - ((a(x) + 1) * (b(x) + 1))) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "devonly",
                            "async",
                            "construct-independent",
                            "update"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_update_self_with_len.F90": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,data,executable-data,construct-independent,update,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) create(c(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n          CALL acc_update_self(c(1), LOOPCOUNT*8)\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent",
                            "update"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:runtime,data,executable-data,construct-independent,update,V:2.0-2.7\n      LOGICAL FUNCTION test2()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc data copyout(c(1:LOOPCOUNT)) copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              a(x) = a(x) * a(x)\n            END DO\n          !$acc end parallel\n          CALL acc_update_self(a(1), LOOPCOUNT*8)\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              b(x) = b(x) * b(x)\n            END DO\n          !$acc end parallel\n          CALL acc_update_self(b(1), LOOPCOUNT*8)\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent",
                            "update"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_wait.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,async,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, d, e !Data\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        CALL RANDOM_NUMBER(d)\n        e = 0\n\n        !$acc enter data  copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) create(c(1:LOOPCOUNT)) async(1)\n        !$acc enter data copyin(d(1:LOOPCOUNT)) create(e(1:LOOPCOUNT)) async(2)\n        !$acc parallel present(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT)) async(1)\n          !$acc loop\n          DO x = 1, LOOPCOUNT\n            c(x) = a(x) + b(x)\n          END DO\n        !$acc end parallel\n        !$acc parallel present(c(1:LOOPCOUNT), d(1:LOOPCOUNT), e(1:LOOPCOUNT)) async(1) wait(2)\n          !$acc loop\n          DO x = 1, LOOPCOUNT\n            e(x) = c(x) + d(x)\n          END DO\n        !$acc end parallel\n        !$acc exit data copyout(e(1:LOOPCOUNT)) async(1)\n\n        CALL acc_wait(1)\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(e(x) - (a(x) + b(x) + d(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT), d(1:LOOPCOUNT))\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "async",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_wait_all.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,async,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, d, a_host, b_host, c_host !Data\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        CALL RANDOM_NUMBER(c)\n        d = 0\n        a_host = a\n        b_host = b\n        c_host = c\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT)) copyout(d(1:LOOPCOUNT))\n          !$acc parallel async(1)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              a(x) = a(x) * a(x)\n            END DO\n          !$acc end parallel\n          !$acc parallel async(2)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              b(x) = b(x) * b(x)\n            END DO\n          !$acc end parallel\n          !$acc parallel async(3)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = c(x) * c(x)\n            END DO\n          !$acc end parallel\n          CALL acc_wait_all()\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              d(x) = a(x) + b(x) + c(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(d(x) - ((a_host(x) * a_host(x)) + (b_host(x) * b_host(x)) + (c_host(x) * c_host(x)))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "async",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_wait_all_async.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,async,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, d, e, f, g, h, i, j, k !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: a_host, d_host, g_host\n        REAL(8) :: RAND\n        REAL(8) :: temp\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        CALL RANDOM_NUMBER(d)\n        CALL RANDOM_NUMBER(e)\n        f = 0\n        CALL RANDOM_NUMBER(g)\n        CALL RANDOM_NUMBER(h)\n        i = 0\n        j = 0\n        k = 0\n        a_host = a\n        d_host = d\n        g_host = g\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), d(1:LOOPCOUNT), e(1:LOOPCOUNT), g(1:LOOPCOUNT), h(1:LOOPCOUNT)) create(c(1:LOOPCOUNT), f(1:LOOPCOUNT), i(1:LOOPCOUNT), j(1:LOOPCOUNT)) copyout(k(1:LOOPCOUNT))\n          !$acc parallel async(1)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n          !$acc parallel async(2)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              f(x) = d(x) + e(x)\n            END DO\n          !$acc end parallel\n          !$acc parallel async(3)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              i(x) = g(x) + h(x)\n            END DO\n          !$acc end parallel\n          CALL acc_wait_all_async(4)\n          !$acc parallel async(4)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              j(x) = c(x) + f(x) + i(x)\n            END DO\n          !$acc end parallel\n          !$acc parallel async(1)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              a(x) = b(x) * c(x)\n            END DO\n          !$acc end parallel\n          !$acc parallel async(2)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              d(x) = e(x) * f(x)\n            END DO\n          !$acc end parallel\n          !$acc parallel async(3)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              g(x) = h(x) * i(x)\n            END DO\n          !$acc end parallel\n          CALL acc_wait_all_async(4)\n          !$acc parallel async(4)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              k(x) = j(x) + a(x) + d(x) + g(x)\n            END DO\n          !$acc end parallel\n          !$acc wait(4)\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          temp = a_host(x) + b(x) + d_host(x) + e(x) + g_host(x) + h(x)\n          temp = temp + (b(x) * (a_host(x) + b(x))) + (e(x) * (d_host(x) + e(x))) + (h(x) * (g_host(x) + h(x)))\n          IF (abs(k(x) - temp) .gt. PRECISION * 10) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "async",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_wait_async.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,async,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, d, e, f, g, h, i !Data\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        CALL RANDOM_NUMBER(d)\n        CALL RANDOM_NUMBER(e)\n        f = 0\n        CALL RANDOM_NUMBER(g)\n        h = 0\n        i = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), d(1:LOOPCOUNT), e(1:LOOPCOUNT), g(1:LOOPCOUNT)) create(c(1:LOOPCOUNT), f(1:LOOPCOUNT), h(1:LOOPCOUNT)) copyout(i(1:LOOPCOUNT))\n          !$acc parallel async(1)\n            !$acc loop\n              DO x = 1, LOOPCOUNT\n                c(x) = a(x) + b(x)\n              END DO\n          !$acc end parallel\n          CALL acc_wait_async(1, 2)\n          !$acc parallel async(2)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              h(x) = c(x) + g(x)\n            END DO\n          !$acc end parallel\n          !$acc parallel async(1)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              f(x) = d(x) + e(x)\n            END DO\n          !$acc end parallel\n          CALL acc_wait_async(1, 2)\n          !$acc parallel async(2)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              i(x) = h(x) + f(x)\n            END DO\n          !$acc end parallel\n          !$acc wait(2)\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(i(x) - (a(x) + b(x) + g(x) + d(x) + e(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "async",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_assign_expr_and_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a, b !Data\n        LOGICAL,DIMENSION(10):: passed_a, passed_b\n        LOGICAL IS_POSSIBLE\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n        LOGICAL :: init\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) < .933) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT,1:10))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic capture\n                  b(x, y) = totals(x)\n                  totals(x) = a(x, y) .AND. totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .AND. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed_a(y) = a(x, y)\n            passed_b(y) = b(x, y)\n          END DO\n          init = .FALSE.\n          IF (.FALSE. .eqv. IS_POSSIBLE(a(x, 1:10), b(x, 1:10), 10, .FALSE.)) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_assign_expr_divided_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: b\n        REAL(8),DIMENSION(LOOPCOUNT):: totals\n        REAL(8),DIMENSION(10):: passed\n        REAL(8),DIMENSION(10):: passed_b\n        REAL(8) :: holder\n        INTEGER :: errors = 0\n        LOGICAL IS_POSSIBLE\n        LOGICAL IS_POSSIBLE_2\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 1\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT,1:10))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic capture\n                  b(x, y) = totals(x)\n                  totals(x) = a(x, y) / totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed(y) = a(x, y)\n          END DO\n          holder = 1\n          IF (IS_POSSIBLE(passed, totals(x), 10, holder) .eqv. .FALSE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed(y) = a(x, y)\n            passed_b(y) = b(x, y)\n          END DO\n          holder = 1\n          IF (IS_POSSIBLE_2(passed, passed_b, 10, holder) .eqv. .FALSE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_assign_expr_eqv_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a, b !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        LOGICAL,DIMENSION(10):: passed_a, passed_b\n        LOGICAL:: init\n        INTEGER :: errors = 0\n        LOGICAL IS_POSSIBLE\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) > .5) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT,1:10))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic capture\n                  b(x, y) = totals(x)\n                  totals(x) = a(x, y) .EQV. totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .EQV. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed_a(y) = a(x, y)\n            passed_b(y) = b(x, y)\n          END DO\n          init = .FALSE.\n          IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .EQV. .FALSE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_assign_expr_minus_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        LOGICAL IS_POSSIBLE\n        LOGICAL IS_POSSIBLE_2\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals\n        REAL(8),DIMENSION(10):: passed_a, passed_b\n        REAL(8):: init\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT, 1:10))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic capture\n                  b(x, y) = totals(x)\n                  totals(x) = a(x, y) - totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed_a(y) = a(x, y)\n          END DO\n          IF (IS_POSSIBLE(passed_a, totals(x), 10, 0) .eqv. .FALSE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed_a(y) = a(x, y)\n            passed_b(y) = b(x, y)\n          END DO\n          init = 0\n          IF (IS_POSSIBLE_2(passed_a, passed_b, 10, init) .EQV. .FALSE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_assign_expr_neqv_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a, b !Data\n        LOGICAL,DIMENSION(10):: passed_a, passed_b\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        LOGICAL IS_POSSIBLE\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) > .5) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT,1:10))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic capture\n                  b(x, y) = totals(x)\n                  totals(x) = a(x, y) .NEQV. totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .NEQV. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed_a(y) = a(x, y)\n            passed_b(y) = b(x, y)\n          END DO\n          IF (IS_POSSIBLE(passed_a, passed_b, 10, .FALSE.) .eqv. .FALSE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_assign_expr_or_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a, b !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        LOGICAL,DIMENSION(10):: passed_a, passed_b\n        LOGICAL IS_POSSIBLE\n        LOGICAL:: init\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) > .933) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT,1:10))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic capture\n                  b(x, y) = totals(x)\n                  totals(x) = a(x, y) .OR. totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .OR. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed_a(y) = a(x, y)\n            passed_b(y) = b(x, y)\n          END DO\n          init = .FALSE.\n          IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .eqv. .FALSE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_assign_expr_plus_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        REAL(8),DIMENSION(10):: passed_a, passed_b\n        REAL(8):: init\n        LOGICAL IS_POSSIBLE\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT,1:10))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic capture\n                  b(x, y) = totals(x)\n                  totals(x) = a(x, y) + totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) + a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed_a(y) = a(x, y)\n            passed_b(y) = b(x, y)\n          END DO\n          init = 0\n          IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .eqv. .FALSE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_assign_expr_times_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        REAL(8),DIMENSION(10):: passed_a, passed_b\n        REAL(8):: init\n        LOGICAL IS_POSSIBLE\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 1\n        totals_comparison = 1\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT,1:10))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic capture\n                  b(x, y) = totals(x)\n                  totals(x) = a(x, y) * totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) * a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed_a(y) = a(x, y)\n            passed_b(y) = b(x, y)\n          END DO\n          init = 1\n          IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .eqv. .TRUE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_assign_iand_expr_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y, z !Iterators\n        INTEGER,DIMENSION(LOOPCOUNT, 10):: a, b !Data\n        REAL(8),DIMENSION(LOOPCOUNT, 10, 8):: randoms\n        INTEGER,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER,DIMENSION(10):: passed_a, passed_b\n        INTEGER:: init\n        LOGICAL IS_POSSIBLE\n        INTEGER :: errors = 0\n\n        CALL RANDOM_NUMBER(randoms)\n        a = 0\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            DO z = 1, 8\n              IF (randoms(x, y, z) .lt. .933) THEN\n                a(x, y) = a(x, y) + ISHFT(1, z - 1)\n              END IF\n            END DO\n          END DO\n        END DO\n        totals = 0\n        totals_comparison = 0\n        DO x = 1, LOOPCOUNT\n          DO y = 0, 7\n            totals(x) = totals(x) + ISHFT(1, y)\n            totals_comparison(x) = totals_comparison(x) + ISHFT(1, y)\n          END DO\n        END DO\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT, 1:10))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic capture\n                  b(x, y) = totals(x)\n                  totals(x) = iand(a(x, y), totals(x))\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = iand(totals_comparison(x), a(x, y))\n          END DO\n        END DO\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed_a(y) = a(x, y)\n            passed_b(y) = b(x, y)\n          END DO\n          init = 0\n          DO y = 0, 7\n            init = init + ISHFT(1, y)\n          END DO\n          IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .eqv. .FALSE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_assign_iand_x_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: x, y, z !Iterators\n  INTEGER,DIMENSION(LOOPCOUNT, 10):: a, b !Data\n  REAL(8),DIMENSION(LOOPCOUNT, 10, 8):: randoms\n  INTEGER,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n  INTEGER,DIMENSION(10):: passed_a, passed_b\n  INTEGER:: init\n  LOGICAL IS_POSSIBLE\n  INTEGER :: errors = 0\n\n  !Initilization\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(randoms)\n  a = 0\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      DO z = 1, 8\n        IF (randoms(x, y, z) .lt. .933) THEN\n          a(x, y) = a(x, y) + ISHFT(1, z - 1)\n        END IF\n      END DO\n    END DO\n  END DO\n  totals = 0\n  totals_comparison = 0\n  DO x = 1, LOOPCOUNT\n    DO y = 0, 7\n      totals(x) = totals(x) + ISHFT(1, y)\n      totals_comparison(x) = totals_comparison(x) + ISHFT(1, y)\n    END DO\n  END DO\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT, 1:10))\n    !$acc parallel\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        DO y = 1, 10\n          !$acc atomic capture\n            b(x, y) = totals(x)\n            totals(x) = iand(totals(x), a(x, y))\n          !$acc end atomic\n        END DO\n      END DO\n    !$acc end parallel\n  !$acc end data\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      totals_comparison(x) = iand(totals_comparison(x), a(x, y))\n    END DO\n  END DO\n  DO x = 1, LOOPCOUNT\n    IF (totals_comparison(x) .NE. totals(x)) THEN\n      errors = errors + 1\n      WRITE(*, *) totals_comparison(x)\n    END IF\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      passed_a(y) = a(x, y)\n      passed_b(y) = b(x, y)\n    END DO\n    init = 0\n    DO y = 0, 7\n      init = init + ISHFT(1, y)\n    END DO\n    IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .eqv. .FALSE.) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_assign_ior_expr_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: x, y, z !Iterators\n  INTEGER,DIMENSION(LOOPCOUNT, 10):: a, b !Data\n  REAL(8),DIMENSION(LOOPCOUNT, 10, 8):: randoms\n  INTEGER,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n  INTEGER,DIMENSION(10):: passed_a, passed_b\n  INTEGER:: init\n  LOGICAL IS_POSSIBLE\n  INTEGER :: errors = 0\n\n  !Initilization\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(randoms)\n  a = 0\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      DO z = 1, 8\n        IF (randoms(x, y, z) .gt. .933) THEN\n          a(x, y) = a(x, y) + ISHFT(1, z - 1)\n        END IF\n      END DO\n    END DO\n  END DO\n  totals = 0\n  totals_comparison = 0\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT, 1:10))\n    !$acc parallel\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        DO y = 1, 10\n          !$acc atomic capture\n            b(x, y) = totals(x)\n            totals(x) = ior(a(x, y), totals(x))\n          !$acc end atomic\n        END DO\n      END DO\n    !$acc end parallel\n  !$acc end data\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      totals_comparison(x) = ior(totals_comparison(x), a(x, y))\n    END DO\n  END DO\n  DO x = 1, LOOPCOUNT\n    IF (totals_comparison(x) .NE. totals(x)) THEN\n      errors = errors + 1\n      WRITE(*, *) totals_comparison(x)\n    END IF\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      passed_a(y) = a(x, y)\n      passed_b(y) = b(x, y)\n    END DO\n    init = 0\n    IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .eqv. .FALSE.) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_assign_ior_x_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: x, y, z !Iterators\n  INTEGER,DIMENSION(LOOPCOUNT, 10):: a, b !Data\n  REAL(8),DIMENSION(LOOPCOUNT, 10, 8):: randoms\n  INTEGER,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n  INTEGER,DIMENSION(10):: passed_a, passed_b\n  INTEGER:: init\n  LOGICAL IS_POSSIBLE\n  INTEGER :: errors = 0\n\n  !Initilization\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(randoms)\n  a = 0\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      DO z = 1, 8\n        IF (randoms(x, y, z) .gt. .933) THEN\n          a(x, y) = a(x, y) + ISHFT(1, z - 1)\n        END IF\n      END DO\n    END DO\n  END DO\n  totals = 0\n  totals_comparison = 0\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT, 1:10))\n    !$acc parallel\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        DO y = 1, 10\n          !$acc atomic capture\n            b(x, y) = totals(x)\n            totals(x) = ior(totals(x), a(x, y))\n          !$acc end atomic\n        END DO\n      END DO\n    !$acc end parallel\n  !$acc end data\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      totals_comparison(x) = ior(totals_comparison(x), a(x, y))\n    END DO\n  END DO\n  DO x = 1, LOOPCOUNT\n    IF (totals_comparison(x) .NE. totals(x)) THEN\n      errors = errors + 1\n      WRITE(*, *) totals_comparison(x)\n    END IF\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      passed_a(y) = a(x, y)\n      passed_b(y) = b(x, y)\n    END DO\n    init = 0\n    IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .eqv. .FALSE.) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_assign_ixor_expr_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: x, y, z !Iterators\n  INTEGER,DIMENSION(LOOPCOUNT, 10):: a, b !Data\n  REAL(8),DIMENSION(LOOPCOUNT, 10, 8):: randoms\n  INTEGER,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n  INTEGER,DIMENSION(10):: passed_a, passed_b\n  INTEGER:: init\n  LOGICAL IS_POSSIBLE\n  INTEGER :: errors = 0\n\n  !Initilization\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(randoms)\n  a = 0\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      DO z = 1, 8\n        IF (randoms(x, y, z) .gt. .5) THEN\n          a(x, y) = a(x, y) + ISHFT(1, z - 1)\n        END IF\n      END DO\n    END DO\n  END DO\n  totals = 0\n  totals_comparison = 0\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT, 1:10))\n    !$acc parallel\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        DO y = 1, 10\n          !$acc atomic capture\n            b(x, y) = totals(x)\n            totals(x) = ieor(a(x, y), totals(x))\n          !$acc end atomic\n        END DO\n      END DO\n    !$acc end parallel\n  !$acc end data\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      totals_comparison(x) = ieor(totals_comparison(x), a(x, y))\n    END DO\n  END DO\n  DO x = 1, LOOPCOUNT\n    IF (totals_comparison(x) .NE. totals(x)) THEN\n      errors = errors + 1\n      WRITE(*, *) totals_comparison(x)\n    END IF\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      passed_a(y) = a(x, y)\n      passed_b(y) = b(x, y)\n    END DO\n    init = 0\n    IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .eqv. .FALSE.) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_assign_ixor_x_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\nLOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: x, y, z !Iterators\n  INTEGER,DIMENSION(LOOPCOUNT, 10):: a, b !Data\n  REAL(8),DIMENSION(LOOPCOUNT, 10, 8):: randoms\n  INTEGER,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n  INTEGER,DIMENSION(10):: passed_a, passed_b\n  INTEGER:: init\n  LOGICAL IS_POSSIBLE\n  INTEGER :: errors = 0\n\n  !Initilization\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(randoms)\n  a = 0\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      DO z = 1, 8\n        IF (randoms(x, y, z) .gt. .5) THEN\n          a(x, y) = a(x, y) + ISHFT(1, z - 1)\n        END IF\n      END DO\n    END DO\n  END DO\n  totals = 0\n  totals_comparison = 0\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT, 1:10))\n    !$acc parallel\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        DO y = 1, 10\n          !$acc atomic capture\n            b(x, y) = totals(x)\n            totals(x) = ieor(totals(x), a(x, y))\n          !$acc end atomic\n        END DO\n      END DO\n    !$acc end parallel\n  !$acc end data\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      totals_comparison(x) = ieor(totals_comparison(x), a(x, y))\n    END DO\n  END DO\n  DO x = 1, LOOPCOUNT\n    IF (totals_comparison(x) .NE. totals(x)) THEN\n      errors = errors + 1\n      WRITE(*, *) totals_comparison(x)\n    END IF\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      passed_a(y) = a(x, y)\n      passed_b(y) = b(x, y)\n    END DO\n    init = 0\n    IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .eqv. .FALSE.) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_assign_max_expr_list_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b, c !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        REAL(8),DIMENSION(10):: passed_a, passed_b, passed_c\n        REAL(8):: init\n        LOGICAL IS_POSSIBLE\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10), b(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT, 1:10))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic capture\n                  c(x, y) = totals(x)\n                  totals(x) = max(a(x, y), b(x, y), totals(x))\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = max(totals_comparison(x), a(x, y), b(x, y))\n          END DO\n        END DO\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed_a(y) = a(x, y)\n            passed_b(y) = b(x, y)\n            passed_c(y) = c(x, y)\n          END DO\n          init = 0\n          IF (IS_POSSIBLE(passed_a, passed_b, passed_c, 10, init) .eqv. .FALSE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n      LOGICAL :: test1\n#endif\n#ifndef T1\n      DO testrun = 1, NUM_TEST_CALLS\n        failed = failed .or. test1()\n      END DO\n      IF (failed) THEN\n        failcode = failcode + 2 ** 0\n        failed = .FALSE.\n      END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_assign_max_expr_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: x, y !Iterators\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b !Data\n  REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n  REAL(8),DIMENSION(10):: passed_a, passed_b\n  REAL(8):: init\n  LOGICAL IS_POSSIBLE\n  INTEGER :: errors = 0\n\n  !Initilization\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n\n  totals = 0\n  totals_comparison = 0\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT, 1:10))\n    !$acc parallel\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        DO y = 1, 10\n          !$acc atomic capture\n            b(x, y) = totals(x)\n            totals(x) = max(a(x, y), totals(x))\n          !$acc end atomic\n        END DO\n      END DO\n    !$acc end parallel\n  !$acc end data\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      totals_comparison(x) = max(totals_comparison(x), a(x, y))\n    END DO\n  END DO\n  DO x = 1, LOOPCOUNT\n    IF (totals_comparison(x) .NE. totals(x)) THEN\n      errors = errors + 1\n      WRITE(*, *) totals_comparison(x)\n    END IF\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      passed_a(y) = a(x, y)\n      passed_b(y) = b(x, y)\n    END DO\n    init = 0\n    IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .eqv. .FALSE.) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_assign_max_x_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: x, y !Iterators\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b !Data\n  REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n  REAL(8),DIMENSION(10):: passed_a, passed_b\n  REAL(8):: init\n  LOGICAL IS_POSSIBLE\n  INTEGER :: errors = 0\n\n  !Initilization\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n\n  totals = 0\n  totals_comparison = 0\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT, 1:10))\n    !$acc parallel\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        DO y = 1, 10\n          !$acc atomic capture\n            b(x, y) = totals(x)\n            totals(x) = max(totals(x), a(x, y))\n          !$acc end atomic\n        END DO\n      END DO\n    !$acc end parallel\n  !$acc end data\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      totals_comparison(x) = max(totals_comparison(x), a(x, y))\n    END DO\n  END DO\n  DO x = 1, LOOPCOUNT\n    IF (totals_comparison(x) .NE. totals(x)) THEN\n      errors = errors + 1\n      WRITE(*, *) totals_comparison(x)\n    END IF\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      passed_a(y) = a(x, y)\n      passed_b(y) = b(x, y)\n    END DO\n    init = 0\n    IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .eqv. .FALSE.) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_assign_max_x_expr_list.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\nIMPLICIT NONE\nINCLUDE \"acc_testsuite.Fh\"\nINTEGER :: x, y !Iterators\nREAL(8),DIMENSION(LOOPCOUNT, 10):: a, b, c !Data\nREAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\nREAL(8),DIMENSION(10):: passed_a, passed_b, passed_c\nREAL(8):: init\nLOGICAL IS_POSSIBLE\nINTEGER :: errors = 0\n\n!Initilization\nSEEDDIM(1) = 1\n#ifdef SEED\nSEEDDIM(1) = SEED\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_assign_min_expr_list_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b, c !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        REAL(8),DIMENSION(10):: passed_a, passed_b, passed_c\n        REAL(8):: init\n        LOGICAL IS_POSSIBLE\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10), b(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT, 1:10))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic capture\n                  c(x, y) = totals(x)\n                  totals(x) = min(a(x, y), b(x, y), totals(x))\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = min(totals_comparison(x), a(x, y), b(x, y))\n          END DO\n        END DO\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed_a(y) = a(x, y)\n            passed_b(y) = b(x, y)\n            passed_c(y) = c(x, y)\n          END DO\n          init = 0\n          IF (IS_POSSIBLE(passed_a, passed_b, passed_c, 10, init) .eqv. .FALSE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_assign_min_expr_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        REAL(8),DIMENSION(10):: passed_a, passed_b\n        REAL(8):: init\n        LOGICAL IS_POSSIBLE\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT, 1:10))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic capture\n                  b(x, y) = totals(x)\n                  totals(x) = min(a(x, y), totals(x))\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = min(totals_comparison(x), a(x, y))\n          END DO\n        END DO\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed_a(y) = a(x, y)\n            passed_b(y) = b(x, y)\n          END DO\n          init = 0\n          IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .eqv. .FALSE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_assign_min_x_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        REAL(8),DIMENSION(10):: passed_a, passed_b\n        REAL(8):: init\n        LOGICAL IS_POSSIBLE\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT, 1:10))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic capture\n                  b(x, y) = totals(x)\n                  totals(x) = min(totals(x), a(x, y))\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = min(totals_comparison(x), a(x, y))\n          END DO\n        END DO\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed_a(y) = a(x, y)\n            passed_b(y) = b(x, y)\n          END DO\n          init = 0\n          IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .eqv. .FALSE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_assign_min_x_expr_list.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n      IMPLICIT NONE\n      INCLUDE \"acc_testsuite.Fh\"\n      INTEGER :: x, y !Iterators\n      REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b, c !Data\n      REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n      REAL(8),DIMENSION(10):: passed_a, passed_b, passed_c\n      REAL(8):: init\n      LOGICAL IS_POSSIBLE\n      INTEGER :: errors = 0\n\n      !Initilization\n      SEEDDIM(1) = 1\n#     ifdef SEED\n      SEEDDIM(1) = SEED\n#     endif\n      CALL RANDOM_SEED(PUT=SEEDDIM)\n\n      CALL RANDOM_NUMBER(a)\n      CALL RANDOM_NUMBER(b)\n\n      totals = 1\n      totals_comparison = 1\n\n      !$acc data copyin(a(1:LOOPCOUNT, 1:10), b(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT, 1:10))\n        !$acc parallel\n          !$acc loop\n          DO x = 1, LOOPCOUNT\n            DO y = 1, 10\n              !$acc atomic capture\n                c(x, y) = totals(x)\n                totals(x) = min(totals(x), a(x, y), b(x, y))\n              !$acc end atomic\n            END DO\n          END DO\n        !$acc end parallel\n      !$acc end data\n      DO x = 1, LOOPCOUNT\n        DO y = 1, 10\n          totals_comparison(x) = min(totals_comparison(x), a(x, y), b(x, y))\n        END DO\n      END DO\n      DO x = 1, LOOPCOUNT\n        IF (totals_comparison(x) .NE. totals(x)) THEN\n          errors = errors + 1\n          WRITE(*, *) totals_comparison(x)\n        END IF\n      END DO\n\n      DO x = 1, LOOPCOUNT\n        DO y = 1, 10\n          passed_a(y) = a(x, y)\n          passed_b(y) = b(x, y)\n          passed_c(y) = c(x, y)\n        END DO\n        init = 1\n        IF (IS_POSSIBLE(passed_a, passed_b, passed_c, 10, init) .eqv. .FALSE.) THEN\n          errors = errors + 1\n        END IF\n      END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_assign_x_and_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\nLOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: x, y !Iterators\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n  LOGICAL,DIMENSION(LOOPCOUNT, 10):: a, b !Data\n  LOGICAL,DIMENSION(10):: passed_a, passed_b\n  LOGICAL IS_POSSIBLE\n  LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n  INTEGER :: errors = 0\n  LOGICAL :: init\n\n  !Initilization\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(randoms)\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      IF (randoms(x, y) < .933) THEN\n        a(x, y) = .TRUE.\n      ELSE\n        a(x, y) = .FALSE.\n      END IF\n    END DO\n  END DO\n\n  totals = .FALSE.\n  totals_comparison = .FALSE.\n\n  !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT,1:10))\n    !$acc parallel\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        DO y = 1, 10\n          !$acc atomic capture\n            b(x, y) = totals(x)\n            totals(x) = totals(x) .AND. a(x, y)\n          !$acc end atomic\n        END DO\n      END DO\n    !$acc end parallel\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      totals_comparison(x) = totals_comparison(x) .AND. a(x, y)\n    END DO\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    IF (totals_comparison(x) .NEQV. totals(x)) THEN\n      errors = errors + 1\n      WRITE(*, *) totals_comparison(x)\n    END IF\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      passed_a(y) = a(x, y)\n      passed_b(y) = b(x, y)\n    END DO\n    init = .FALSE.\n    IF (.FALSE. .eqv. IS_POSSIBLE(a(x, 1:10), b(x, 1:10), 10, .FALSE.)) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_assign_x_divided_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: x, y !Iterators\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: b\n  REAL(8),DIMENSION(LOOPCOUNT):: totals\n  REAL(8),DIMENSION(10):: passed\n  REAL(8),DIMENSION(10):: passed_b\n  REAL(8) :: holder\n  INTEGER :: errors = 0\n  LOGICAL IS_POSSIBLE\n  LOGICAL IS_POSSIBLE_2\n\n  !Initilization\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n\n  totals = 1\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT,1:10))\n    !$acc parallel\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        DO y = 1, 10\n          !$acc atomic capture\n            b(x, y) = totals(x)\n            totals(x) = totals(x) / a(x, y)\n          !$acc end atomic\n        END DO\n      END DO\n    !$acc end parallel\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      passed(y) = a(x, y)\n    END DO\n    holder = 1\n    IF (IS_POSSIBLE(passed, totals(x), 10, holder) .eqv. .FALSE.) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      passed(y) = a(x, y)\n      passed_b(y) = b(x, y)\n    END DO\n    holder = 1\n    IF (IS_POSSIBLE_2(passed, passed_b, 10, holder) .eqv. .FALSE.) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_assign_x_eqv_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: x, y !Iterators\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n  LOGICAL,DIMENSION(LOOPCOUNT, 10):: a, b !Data\n  LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n  LOGICAL,DIMENSION(10):: passed_a, passed_b\n  LOGICAL:: init\n  INTEGER :: errors = 0\n  LOGICAL IS_POSSIBLE\n\n  !Initilization\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(randoms)\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      IF (randoms(x, y) > .5) THEN\n        a(x, y) = .TRUE.\n      ELSE\n        a(x, y) = .FALSE.\n      END IF\n    END DO\n  END DO\n\n  totals = .FALSE.\n  totals_comparison = .FALSE.\n\n  !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT,1:10))\n    !$acc parallel\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        DO y = 1, 10\n          !$acc atomic capture\n            b(x, y) = totals(x)\n            totals(x) = totals(x) .EQV. a(x, y)\n          !$acc end atomic\n        END DO\n      END DO\n    !$acc end parallel\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      totals_comparison(x) = totals_comparison(x) .EQV. a(x, y)\n    END DO\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      passed_a(y) = a(x, y)\n      passed_b(y) = b(x, y)\n    END DO\n    init = .FALSE.\n    IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .EQV. .FALSE.) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    IF (totals_comparison(x) .NEQV. totals(x)) THEN\n      errors = errors + 1\n      WRITE(*, *) totals_comparison(x)\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_assign_x_minus_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: x, y !Iterators\n  LOGICAL IS_POSSIBLE\n  LOGICAL IS_POSSIBLE_2\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b !Data\n  REAL(8),DIMENSION(LOOPCOUNT):: totals\n  REAL(8),DIMENSION(10):: passed_a, passed_b\n  REAL(8):: init\n  INTEGER :: errors = 0\n\n  !Initilization\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n\n  totals = 0\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT, 1:10))\n    !$acc parallel\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        DO y = 1, 10\n          !$acc atomic capture\n            b(x, y) = totals(x)\n            totals(x) = totals(x) - a(x, y)\n          !$acc end atomic\n        END DO\n      END DO\n    !$acc end parallel\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      passed_a(y) = a(x, y)\n    END DO\n    IF (IS_POSSIBLE(passed_a, totals(x), 10, 0) .eqv. .FALSE.) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      passed_a(y) = a(x, y)\n      passed_b(y) = b(x, y)\n    END DO\n    init = 0\n    IF (IS_POSSIBLE_2(passed_a, passed_b, 10, init) .EQV. .FALSE.) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_assign_x_neqv_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: x, y !Iterators\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n  LOGICAL,DIMENSION(LOOPCOUNT, 10):: a, b !Data\n  LOGICAL,DIMENSION(10):: passed_a, passed_b\n  LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n  LOGICAL IS_POSSIBLE\n  INTEGER :: errors = 0\n\n  !Initilization\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(randoms)\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      IF (randoms(x, y) > .5) THEN\n        a(x, y) = .TRUE.\n      ELSE\n        a(x, y) = .FALSE.\n      END IF\n    END DO\n  END DO\n\n  totals = .FALSE.\n  totals_comparison = .FALSE.\n\n  !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT,1:10))\n    !$acc parallel\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        DO y = 1, 10\n          !$acc atomic capture\n            b(x, y) = totals(x)\n            totals(x) = totals(x) .NEQV. a(x, y)\n          !$acc end atomic\n        END DO\n      END DO\n    !$acc end parallel\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      totals_comparison(x) = totals_comparison(x) .NEQV. a(x, y)\n    END DO\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    IF (totals_comparison(x) .NEQV. totals(x)) THEN\n      errors = errors + 1\n      WRITE(*, *) totals_comparison(x)\n    END IF\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      passed_a(y) = a(x, y)\n      passed_b(y) = b(x, y)\n    END DO\n    IF (IS_POSSIBLE(passed_a, passed_b, 10, .FALSE.) .eqv. .FALSE.) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_assign_x_or_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: x, y !Iterators\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n  LOGICAL,DIMENSION(LOOPCOUNT, 10):: a, b !Data\n  LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n  LOGICAL,DIMENSION(10):: passed_a, passed_b\n  LOGICAL IS_POSSIBLE\n  LOGICAL:: init\n  INTEGER :: errors = 0\n\n  !Initilization\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(randoms)\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      IF (randoms(x, y) > .933) THEN\n        a(x, y) = .TRUE.\n      ELSE\n        a(x, y) = .FALSE.\n      END IF\n    END DO\n  END DO\n\n  totals = .FALSE.\n  totals_comparison = .FALSE.\n\n  !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT,1:10))\n    !$acc parallel\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        DO y = 1, 10\n          !$acc atomic capture\n            b(x, y) = totals(x)\n            totals(x) = totals(x) .OR. a(x, y)\n          !$acc end atomic\n        END DO\n      END DO\n    !$acc end parallel\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      totals_comparison(x) = totals_comparison(x) .OR. a(x, y)\n    END DO\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    IF (totals_comparison(x) .NEQV. totals(x)) THEN\n      errors = errors + 1\n      WRITE(*, *) totals_comparison(x)\n    END IF\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      passed_a(y) = a(x, y)\n      passed_b(y) = b(x, y)\n    END DO\n    init = .FALSE.\n    IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .eqv. .FALSE.) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_assign_x_plus_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: x, y !Iterators\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b !Data\n  REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n  REAL(8),DIMENSION(10):: passed_a, passed_b\n  REAL(8):: init\n  LOGICAL IS_POSSIBLE\n  INTEGER :: errors = 0\n\n  !Initilization\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n\n  totals = 0\n  totals_comparison = 0\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT,1:10))\n    !$acc parallel\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        DO y = 1, 10\n          !$acc atomic capture\n            b(x, y) = totals(x)\n            totals(x) = totals(x) + a(x, y)\n          !$acc end atomic\n        END DO\n      END DO\n    !$acc end parallel\n  !$acc end data\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      totals_comparison(x) = totals_comparison(x) + a(x, y)\n    END DO\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    IF (totals_comparison(x) .NE. totals(x)) THEN\n      errors = errors + 1\n      WRITE(*, *) totals_comparison(x)\n    END IF\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      passed_a(y) = a(x, y)\n      passed_b(y) = b(x, y)\n    END DO\n    init = 0\n    IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .eqv. .FALSE.) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_assign_x_times_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: x, y !Iterators\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b !Data\n  REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n  REAL(8),DIMENSION(10):: passed_a, passed_b\n  REAL(8):: init\n  LOGICAL IS_POSSIBLE\n  INTEGER :: errors = 0\n\n  !Initilization\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n\n  totals = 1\n  totals_comparison = 1\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT,1:10))\n    !$acc parallel\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        DO y = 1, 10\n          !$acc atomic capture\n            b(x, y) = totals(x)\n            totals(x) = totals(x) * a(x, y)\n          !$acc end atomic\n        END DO\n      END DO\n    !$acc end parallel\n  !$acc end data\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      totals_comparison(x) = totals_comparison(x) * a(x, y)\n    END DO\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    IF (totals_comparison(x) .NE. totals(x)) THEN\n      errors = errors + 1\n      WRITE(*, *) totals_comparison(x)\n    END IF\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      passed_a(y) = a(x, y)\n      passed_b(y) = b(x, y)\n    END DO\n    init = 1\n    IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .eqv. .TRUE.) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_expr_and_x_assign.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a !Data\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: b\n        LOGICAL IS_POSSIBLE\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) < .933) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT,1:10))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic capture\n                  totals(x) = a(x, y) .AND. totals(x)\n                  b(x, y) = totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .AND. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (.FALSE. .eqv. IS_POSSIBLE(a(x, 1:10), b(x, 1:10), 10, .FALSE.)) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_expr_divided_x_assign.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: b\n        REAL(8),DIMENSION(LOOPCOUNT):: totals\n        REAL(8),DIMENSION(10):: passed\n        REAL(8),DIMENSION(10):: passed_b\n        REAL(8) :: holder\n        INTEGER :: errors = 0\n        LOGICAL IS_POSSIBLE\n        LOGICAL IS_POSSIBLE_2\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 1\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT,1:10))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic capture\n                  totals(x) = a(x, y) / totals(x)\n                  b(x, y) = totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed(y) = a(x, y)\n          END DO\n          holder = 1\n          IF (IS_POSSIBLE(passed, totals(x), 10, holder) .eqv. .FALSE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed(y) = a(x, y)\n            passed_b(y) = b(x, y)\n          END DO\n          holder = 1\n          IF (IS_POSSIBLE_2(passed, passed_b, 10, holder) .eqv. .FALSE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_expr_eqv_x_assign.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a, b !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        LOGICAL,DIMENSION(10):: passed_a, passed_b\n        LOGICAL:: init\n        INTEGER :: errors = 0\n        LOGICAL IS_POSSIBLE\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) > .5) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT,1:10))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic capture\n                  totals(x) = a(x, y) .EQV. totals(x)\n                  b(x, y) = totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .EQV. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed_a(y) = a(x, y)\n            passed_b(y) = b(x, y)\n          END DO\n          init = .FALSE.\n          IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .EQV. .FALSE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_expr_minus_x_assign.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        LOGICAL IS_POSSIBLE\n        LOGICAL IS_POSSIBLE_2\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals\n        REAL(8),DIMENSION(10):: passed_a, passed_b\n        REAL(8):: init\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT, 1:10))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic capture\n                  totals(x) = a(x, y) - totals(x)\n                  b(x, y) = totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed_a(y) = a(x, y)\n          END DO\n          IF (IS_POSSIBLE(passed_a, totals(x), 10, 0) .eqv. .FALSE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed_a(y) = a(x, y)\n            passed_b(y) = b(x, y)\n          END DO\n          init = 0\n          IF (IS_POSSIBLE_2(passed_a, passed_b, 10, init) .EQV. .FALSE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_expr_neqv_x_assign.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a, b !Data\n        LOGICAL,DIMENSION(10):: passed_a, passed_b\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        LOGICAL IS_POSSIBLE\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) > .5) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT,1:10))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic capture\n                  totals(x) = a(x, y) .NEQV. totals(x)\n                  b(x, y) = totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .NEQV. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed_a(y) = a(x, y)\n            passed_b(y) = b(x, y)\n          END DO\n          IF (IS_POSSIBLE(passed_a, passed_b, 10, .FALSE.) .eqv. .FALSE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_expr_or_x_assign.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a, b !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        LOGICAL,DIMENSION(10):: passed_a, passed_b\n        LOGICAL IS_POSSIBLE\n        LOGICAL:: init\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) > .933) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT,1:10))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic capture\n                  totals(x) = a(x, y) .OR. totals(x)\n                  b(x, y) = totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .OR. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed_a(y) = a(x, y)\n            passed_b(y) = b(x, y)\n          END DO\n          init = .FALSE.\n          IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .eqv. .FALSE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_expr_plus_x_assign.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        REAL(8),DIMENSION(10):: passed_a, passed_b\n        REAL(8):: init\n        LOGICAL IS_POSSIBLE\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT,1:10))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic capture\n                  totals(x) = a(x, y) + totals(x)\n                  b(x, y) = totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) + a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed_a(y) = a(x, y)\n            passed_b(y) = b(x, y)\n          END DO\n          init = 0\n          IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .eqv. .FALSE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_expr_times_x_assign.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        REAL(8),DIMENSION(10):: passed_a, passed_b\n        REAL(8):: init\n        LOGICAL IS_POSSIBLE\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 1\n        totals_comparison = 1\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT,1:10))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic capture\n                  totals(x) = a(x, y) * totals(x)\n                  b(x, y) = totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) * a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed_a(y) = a(x, y)\n            passed_b(y) = b(x, y)\n          END DO\n          init = 1\n          IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .eqv. .TRUE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_iand_expr_x_assign.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y, z !Iterators\n        INTEGER,DIMENSION(LOOPCOUNT, 10):: a, b !Data\n        REAL(8),DIMENSION(LOOPCOUNT, 10, 8):: randoms\n        INTEGER,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER,DIMENSION(10):: passed_a, passed_b\n        INTEGER:: init\n        LOGICAL IS_POSSIBLE\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        a = 0\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            DO z = 1, 8\n              IF (randoms(x, y, z) .lt. .933) THEN\n                a(x, y) = a(x, y) + ISHFT(1, z - 1)\n              END IF\n            END DO\n          END DO\n        END DO\n        totals = 0\n        totals_comparison = 0\n        DO x = 1, LOOPCOUNT\n          DO y = 0, 7\n            totals(x) = totals(x) + ISHFT(1, y)\n            totals_comparison(x) = totals_comparison(x) + ISHFT(1, y)\n          END DO\n        END DO\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT, 1:10))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic capture\n                  totals(x) = iand(a(x, y), totals(x))\n                  b(x, y) = totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = iand(totals_comparison(x), a(x, y))\n          END DO\n        END DO\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed_a(y) = a(x, y)\n            passed_b(y) = b(x, y)\n          END DO\n          init = 0\n          DO y = 0, 7\n            init = init + ISHFT(1, y)\n          END DO\n          IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .eqv. .FALSE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_iand_x_expr_assign.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: x, y, z !Iterators\n  INTEGER,DIMENSION(LOOPCOUNT, 10):: a, b !Data\n  REAL(8),DIMENSION(LOOPCOUNT, 10, 8):: randoms\n  INTEGER,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n  INTEGER,DIMENSION(10):: passed_a, passed_b\n  INTEGER:: init\n  LOGICAL IS_POSSIBLE\n  INTEGER :: errors = 0\n\n  !Initilization\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(randoms)\n  a = 0\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      DO z = 1, 8\n        IF (randoms(x, y, z) .lt. .933) THEN\n          a(x, y) = a(x, y) + ISHFT(1, z - 1)\n        END IF\n      END DO\n    END DO\n  END DO\n  totals = 0\n  totals_comparison = 0\n  DO x = 1, LOOPCOUNT\n    DO y = 0, 7\n      totals(x) = totals(x) + ISHFT(1, y)\n      totals_comparison(x) = totals_comparison(x) + ISHFT(1, y)\n    END DO\n  END DO\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT, 1:10))\n    !$acc parallel\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        DO y = 1, 10\n          !$acc atomic capture\n            totals(x) = iand(totals(x), a(x, y))\n            b(x, y) = totals(x)\n          !$acc end atomic\n        END DO\n      END DO\n    !$acc end parallel\n  !$acc end data\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      totals_comparison(x) = iand(totals_comparison(x), a(x, y))\n    END DO\n  END DO\n  DO x = 1, LOOPCOUNT\n    IF (totals_comparison(x) .NE. totals(x)) THEN\n      errors = errors + 1\n      WRITE(*, *) totals_comparison(x)\n    END IF\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      passed_a(y) = a(x, y)\n      passed_b(y) = b(x, y)\n    END DO\n    init = 0\n    DO y = 0, 7\n      init = init + ISHFT(1, y)\n    END DO\n    IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .eqv. .FALSE.) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_ior_expr_x_assign.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: x, y, z !Iterators\n  INTEGER,DIMENSION(LOOPCOUNT, 10):: a, b !Data\n  REAL(8),DIMENSION(LOOPCOUNT, 10, 8):: randoms\n  INTEGER,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n  INTEGER,DIMENSION(10):: passed_a, passed_b\n  INTEGER:: init\n  LOGICAL IS_POSSIBLE\n  INTEGER :: errors = 0\n\n  !Initilization\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(randoms)\n  a = 0\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      DO z = 1, 8\n        IF (randoms(x, y, z) .gt. .933) THEN\n          a(x, y) = a(x, y) + ISHFT(1, z - 1)\n        END IF\n      END DO\n    END DO\n  END DO\n  totals = 0\n  totals_comparison = 0\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT, 1:10))\n    !$acc parallel\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        DO y = 1, 10\n          !$acc atomic capture\n            totals(x) = ior(a(x, y), totals(x))\n            b(x, y) = totals(x)\n          !$acc end atomic\n        END DO\n      END DO\n    !$acc end parallel\n  !$acc end data\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      totals_comparison(x) = ior(totals_comparison(x), a(x, y))\n    END DO\n  END DO\n  DO x = 1, LOOPCOUNT\n    IF (totals_comparison(x) .NE. totals(x)) THEN\n      errors = errors + 1\n      WRITE(*, *) totals_comparison(x)\n    END IF\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      passed_a(y) = a(x, y)\n      passed_b(y) = b(x, y)\n    END DO\n    init = 0\n    IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .eqv. .FALSE.) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_ior_x_expr_assign.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: x, y, z !Iterators\n  INTEGER,DIMENSION(LOOPCOUNT, 10):: a, b !Data\n  REAL(8),DIMENSION(LOOPCOUNT, 10, 8):: randoms\n  INTEGER,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n  INTEGER,DIMENSION(10):: passed_a, passed_b\n  INTEGER:: init\n  LOGICAL IS_POSSIBLE\n  INTEGER :: errors = 0\n\n  !Initilization\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(randoms)\n  a = 0\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      DO z = 1, 8\n        IF (randoms(x, y, z) .gt. .933) THEN\n          a(x, y) = a(x, y) + ISHFT(1, z - 1)\n        END IF\n      END DO\n    END DO\n  END DO\n  totals = 0\n  totals_comparison = 0\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT, 1:10))\n    !$acc parallel\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        DO y = 1, 10\n          !$acc atomic capture\n            totals(x) = ior(totals(x), a(x, y))\n            b(x, y) = totals(x)\n          !$acc end atomic\n        END DO\n      END DO\n    !$acc end parallel\n  !$acc end data\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      totals_comparison(x) = ior(totals_comparison(x), a(x, y))\n    END DO\n  END DO\n  DO x = 1, LOOPCOUNT\n    IF (totals_comparison(x) .NE. totals(x)) THEN\n      errors = errors + 1\n      WRITE(*, *) totals_comparison(x)\n    END IF\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      passed_a(y) = a(x, y)\n      passed_b(y) = b(x, y)\n    END DO\n    init = 0\n    IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .eqv. .FALSE.) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_ixor_expr_x_assign.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: x, y, z !Iterators\n  INTEGER,DIMENSION(LOOPCOUNT, 10):: a, b !Data\n  REAL(8),DIMENSION(LOOPCOUNT, 10, 8):: randoms\n  INTEGER,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n  INTEGER,DIMENSION(10):: passed_a, passed_b\n  INTEGER:: init\n  LOGICAL IS_POSSIBLE\n  INTEGER :: errors = 0\n\n  !Initilization\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(randoms)\n  a = 0\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      DO z = 1, 8\n        IF (randoms(x, y, z) .gt. .5) THEN\n          a(x, y) = a(x, y) + ISHFT(1, z - 1)\n        END IF\n      END DO\n    END DO\n  END DO\n  totals = 0\n  totals_comparison = 0\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT, 1:10))\n    !$acc parallel\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        DO y = 1, 10\n          !$acc atomic capture\n            totals(x) = ieor(a(x, y), totals(x))\n            b(x, y) = totals(x)\n          !$acc end atomic\n        END DO\n      END DO\n    !$acc end parallel\n  !$acc end data\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      totals_comparison(x) = ieor(totals_comparison(x), a(x, y))\n    END DO\n  END DO\n  DO x = 1, LOOPCOUNT\n    IF (totals_comparison(x) .NE. totals(x)) THEN\n      errors = errors + 1\n      WRITE(*, *) totals_comparison(x)\n    END IF\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      passed_a(y) = a(x, y)\n      passed_b(y) = b(x, y)\n    END DO\n    init = 0\n    IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .eqv. .FALSE.) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_ixor_x_expr_assign.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: x, y, z !Iterators\n  INTEGER,DIMENSION(LOOPCOUNT, 10):: a, b !Data\n  REAL(8),DIMENSION(LOOPCOUNT, 10, 8):: randoms\n  INTEGER,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n  INTEGER,DIMENSION(10):: passed_a, passed_b\n  INTEGER:: init\n  LOGICAL IS_POSSIBLE\n  INTEGER :: errors = 0\n\n  !Initilization\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(randoms)\n  a = 0\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      DO z = 1, 8\n        IF (randoms(x, y, z) .gt. .5) THEN\n          a(x, y) = a(x, y) + ISHFT(1, z - 1)\n        END IF\n      END DO\n    END DO\n  END DO\n  totals = 0\n  totals_comparison = 0\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT, 1:10))\n    !$acc parallel\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        DO y = 1, 10\n          !$acc atomic capture\n            totals(x) = ieor(totals(x), a(x, y))\n            b(x, y) = totals(x)\n          !$acc end atomic\n        END DO\n      END DO\n    !$acc end parallel\n  !$acc end data\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      totals_comparison(x) = ieor(totals_comparison(x), a(x, y))\n    END DO\n  END DO\n  DO x = 1, LOOPCOUNT\n    IF (totals_comparison(x) .NE. totals(x)) THEN\n      errors = errors + 1\n      WRITE(*, *) totals_comparison(x)\n    END IF\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      passed_a(y) = a(x, y)\n      passed_b(y) = b(x, y)\n    END DO\n    init = 0\n    IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .eqv. .FALSE.) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_max_expr_list_x_assign.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b, c !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        REAL(8),DIMENSION(10):: passed_a, passed_b, passed_c\n        REAL(8):: init\n        LOGICAL IS_POSSIBLE\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10), b(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT, 1:10))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic capture\n                  totals(x) = max(a(x, y), b(x, y), totals(x))\n                  c(x, y) = totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = max(totals_comparison(x), a(x, y), b(x, y))\n          END DO\n        END DO\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed_a(y) = a(x, y)\n            passed_b(y) = b(x, y)\n            passed_c(y) = c(x, y)\n          END DO\n          init = 0\n          IF (IS_POSSIBLE(passed_a, passed_b, passed_c, 10, init) .eqv. .FALSE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_max_expr_x_assign.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: x, y !Iterators\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b !Data\n  REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n  REAL(8),DIMENSION(10):: passed_a, passed_b\n  REAL(8):: init\n  LOGICAL IS_POSSIBLE\n  INTEGER :: errors = 0\n\n  !Initilization\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n\n  totals = 0\n  totals_comparison = 0\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT, 1:10))\n    !$acc parallel\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        DO y = 1, 10\n          !$acc atomic capture\n            totals(x) = max(a(x, y), totals(x))\n            b(x, y) = totals(x)\n          !$acc end atomic\n        END DO\n      END DO\n    !$acc end parallel\n  !$acc end data\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      totals_comparison(x) = max(totals_comparison(x), a(x, y))\n    END DO\n  END DO\n  DO x = 1, LOOPCOUNT\n    IF (totals_comparison(x) .NE. totals(x)) THEN\n      errors = errors + 1\n      WRITE(*, *) totals_comparison(x)\n    END IF\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      passed_a(y) = a(x, y)\n      passed_b(y) = b(x, y)\n    END DO\n    init = 0\n    IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .eqv. .FALSE.) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_max_x_expr_assign.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: x, y !Iterators\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b !Data\n  REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n  REAL(8),DIMENSION(10):: passed_a, passed_b\n  REAL(8):: init\n  LOGICAL IS_POSSIBLE\n  INTEGER :: errors = 0\n\n  !Initilization\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n\n  totals = 0\n  totals_comparison = 0\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT, 1:10))\n    !$acc parallel\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        DO y = 1, 10\n          !$acc atomic capture\n            totals(x) = max(totals(x), a(x, y))\n            b(x, y) = totals(x)\n          !$acc end atomic\n        END DO\n      END DO\n    !$acc end parallel\n  !$acc end data\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      totals_comparison(x) = max(totals_comparison(x), a(x, y))\n    END DO\n  END DO\n  DO x = 1, LOOPCOUNT\n    IF (totals_comparison(x) .NE. totals(x)) THEN\n      errors = errors + 1\n      WRITE(*, *) totals_comparison(x)\n    END IF\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      passed_a(y) = a(x, y)\n      passed_b(y) = b(x, y)\n    END DO\n    init = 0\n    IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .eqv. .FALSE.) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_max_x_expr_list_assign.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\nIMPLICIT NONE\nINCLUDE \"acc_testsuite.Fh\"\nINTEGER :: x, y !Iterators\nREAL(8),DIMENSION(LOOPCOUNT, 10):: a, b, c !Data\nREAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\nREAL(8),DIMENSION(10):: passed_a, passed_b, passed_c\nREAL(8):: init\nLOGICAL IS_POSSIBLE\nINTEGER :: errors = 0\n\n!Initilization\nSEEDDIM(1) = 1\n#ifdef SEED\nSEEDDIM(1) = SEED\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_min_expr_list_x_assign.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b, c !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        REAL(8),DIMENSION(10):: passed_a, passed_b, passed_c\n        REAL(8):: init\n        LOGICAL IS_POSSIBLE\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10), b(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT, 1:10))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic capture\n                  totals(x) = min(a(x, y), b(x, y), totals(x))\n                  c(x, y) = totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = min(totals_comparison(x), a(x, y), b(x, y))\n          END DO\n        END DO\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed_a(y) = a(x, y)\n            passed_b(y) = b(x, y)\n            passed_c(y) = c(x, y)\n          END DO\n          init = 0\n          IF (IS_POSSIBLE(passed_a, passed_b, passed_c, 10, init) .eqv. .FALSE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_min_expr_x_assign.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        REAL(8),DIMENSION(10):: passed_a, passed_b\n        REAL(8):: init\n        LOGICAL IS_POSSIBLE\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT, 1:10))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic capture\n                  totals(x) = min(a(x, y), totals(x))\n                  b(x, y) = totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = min(totals_comparison(x), a(x, y))\n          END DO\n        END DO\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed_a(y) = a(x, y)\n            passed_b(y) = b(x, y)\n          END DO\n          init = 0\n          IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .eqv. .FALSE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_min_x_expr_assign.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        REAL(8),DIMENSION(10):: passed_a, passed_b\n        REAL(8):: init\n        LOGICAL IS_POSSIBLE\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT, 1:10))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic capture\n                  totals(x) = min(totals(x), a(x, y))\n                  b(x, y) = totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = min(totals_comparison(x), a(x, y))\n          END DO\n        END DO\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed_a(y) = a(x, y)\n            passed_b(y) = b(x, y)\n          END DO\n          init = 0\n          IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .eqv. .FALSE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_min_x_expr_list_assign.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n      IMPLICIT NONE\n      INCLUDE \"acc_testsuite.Fh\"\n      INTEGER :: x, y !Iterators\n      REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b, c !Data\n      REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n      REAL(8),DIMENSION(10):: passed_a, passed_b, passed_c\n      REAL(8):: init\n      LOGICAL IS_POSSIBLE\n      INTEGER :: errors = 0\n\n      !Initilization\n      SEEDDIM(1) = 1\n#     ifdef SEED\n      SEEDDIM(1) = SEED\n#     endif\n      CALL RANDOM_SEED(PUT=SEEDDIM)\n\n      CALL RANDOM_NUMBER(a)\n      CALL RANDOM_NUMBER(b)\n\n      totals = 1\n      totals_comparison = 1\n\n      !$acc data copyin(a(1:LOOPCOUNT, 1:10), b(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT, 1:10))\n        !$acc parallel\n          !$acc loop\n          DO x = 1, LOOPCOUNT\n            DO y = 1, 10\n              !$acc atomic capture\n                totals(x) = min(totals(x), a(x, y), b(x, y))\n                c(x, y) = totals(x)\n              !$acc end atomic\n            END DO\n          END DO\n        !$acc end parallel\n      !$acc end data\n      DO x = 1, LOOPCOUNT\n        DO y = 1, 10\n          totals_comparison(x) = min(totals_comparison(x), a(x, y), b(x, y))\n        END DO\n      END DO\n      DO x = 1, LOOPCOUNT\n        IF (totals_comparison(x) .NE. totals(x)) THEN\n          errors = errors + 1\n          WRITE(*, *) totals_comparison(x)\n        END IF\n      END DO\n\n      DO x = 1, LOOPCOUNT\n        DO y = 1, 10\n          passed_a(y) = a(x, y)\n          passed_b(y) = b(x, y)\n          passed_c(y) = c(x, y)\n        END DO\n        init = 1\n        IF (IS_POSSIBLE(passed_a, passed_b, passed_c, 10, init) .eqv. .FALSE.) THEN\n          errors = errors + 1\n        END IF\n      END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_x_and_expr_assign.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: x, y !Iterators\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n  LOGICAL,DIMENSION(LOOPCOUNT, 10):: a, b !Data\n  LOGICAL,DIMENSION(10):: passed_a, passed_b\n  LOGICAL IS_POSSIBLE\n  LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n  INTEGER :: errors = 0\n  LOGICAL :: init\n\n  !Initilization\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(randoms)\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      IF (randoms(x, y) < .933) THEN\n        a(x, y) = .TRUE.\n      ELSE\n        a(x, y) = .FALSE.\n      END IF\n    END DO\n  END DO\n\n  totals = .FALSE.\n  totals_comparison = .FALSE.\n\n  !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT,1:10))\n    !$acc parallel\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        DO y = 1, 10\n          !$acc atomic capture\n            totals(x) = totals(x) .AND. a(x, y)\n            b(x, y) = totals(x)\n          !$acc end atomic\n        END DO\n      END DO\n    !$acc end parallel\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      totals_comparison(x) = totals_comparison(x) .AND. a(x, y)\n    END DO\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    IF (totals_comparison(x) .NEQV. totals(x)) THEN\n      errors = errors + 1\n      WRITE(*, *) totals_comparison(x)\n    END IF\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      passed_a(y) = a(x, y)\n      passed_b(y) = b(x, y)\n    END DO\n    init = .FALSE.\n    IF (.FALSE. .eqv. IS_POSSIBLE(a(x, 1:10), b(x, 1:10), 10, .FALSE.)) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_x_divided_expr_assign.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: x, y !Iterators\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: b\n  REAL(8),DIMENSION(LOOPCOUNT):: totals\n  REAL(8),DIMENSION(10):: passed\n  REAL(8),DIMENSION(10):: passed_b\n  REAL(8) :: holder\n  INTEGER :: errors = 0\n  LOGICAL IS_POSSIBLE\n  LOGICAL IS_POSSIBLE_2\n\n  !Initilization\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n\n  totals = 1\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT,1:10))\n    !$acc parallel\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        DO y = 1, 10\n          !$acc atomic capture\n            totals(x) = totals(x) / a(x, y)\n            b(x, y) = totals(x)\n          !$acc end atomic\n        END DO\n      END DO\n    !$acc end parallel\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      passed(y) = a(x, y)\n    END DO\n    holder = 1\n    IF (IS_POSSIBLE(passed, totals(x), 10, holder) .eqv. .FALSE.) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      passed(y) = a(x, y)\n      passed_b(y) = b(x, y)\n    END DO\n    holder = 1\n    IF (IS_POSSIBLE_2(passed, passed_b, 10, holder) .eqv. .FALSE.) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_x_eqv_expr_assign.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: x, y !Iterators\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n  LOGICAL,DIMENSION(LOOPCOUNT, 10):: a, b !Data\n  LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n  LOGICAL,DIMENSION(10):: passed_a, passed_b\n  LOGICAL:: init\n  INTEGER :: errors = 0\n  LOGICAL IS_POSSIBLE\n\n  !Initilization\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(randoms)\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      IF (randoms(x, y) > .5) THEN\n        a(x, y) = .TRUE.\n      ELSE\n        a(x, y) = .FALSE.\n      END IF\n    END DO\n  END DO\n\n  totals = .FALSE.\n  totals_comparison = .FALSE.\n\n  !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT,1:10))\n    !$acc parallel\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        DO y = 1, 10\n          !$acc atomic capture\n            totals(x) = totals(x) .EQV. a(x, y)\n            b(x, y) = totals(x)\n          !$acc end atomic\n        END DO\n      END DO\n    !$acc end parallel\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      totals_comparison(x) = totals_comparison(x) .EQV. a(x, y)\n    END DO\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      passed_a(y) = a(x, y)\n      passed_b(y) = b(x, y)\n    END DO\n    init = .FALSE.\n    IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .EQV. .FALSE.) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    IF (totals_comparison(x) .NEQV. totals(x)) THEN\n      errors = errors + 1\n      WRITE(*, *) totals_comparison(x)\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_x_minus_expr_assign.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: x, y !Iterators\n  LOGICAL IS_POSSIBLE\n  LOGICAL IS_POSSIBLE_2\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b !Data\n  REAL(8),DIMENSION(LOOPCOUNT):: totals\n  REAL(8),DIMENSION(10):: passed_a, passed_b\n  REAL(8):: init\n  INTEGER :: errors = 0\n\n  !Initilization\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n\n  totals = 0\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT, 1:10))\n    !$acc parallel\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        DO y = 1, 10\n          !$acc atomic capture\n            totals(x) = totals(x) - a(x, y)\n            b(x, y) = totals(x)\n          !$acc end atomic\n        END DO\n      END DO\n    !$acc end parallel\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      passed_a(y) = a(x, y)\n    END DO\n    IF (IS_POSSIBLE(passed_a, totals(x), 10, 0) .eqv. .FALSE.) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      passed_a(y) = a(x, y)\n      passed_b(y) = b(x, y)\n    END DO\n    init = 0\n    IF (IS_POSSIBLE_2(passed_a, passed_b, 10, init) .EQV. .FALSE.) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_x_neqv_expr_assign.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: x, y !Iterators\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n  LOGICAL,DIMENSION(LOOPCOUNT, 10):: a, b !Data\n  LOGICAL,DIMENSION(10):: passed_a, passed_b\n  LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n  LOGICAL IS_POSSIBLE\n  INTEGER :: errors = 0\n\n  !Initilization\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(randoms)\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      IF (randoms(x, y) > .5) THEN\n        a(x, y) = .TRUE.\n      ELSE\n        a(x, y) = .FALSE.\n      END IF\n    END DO\n  END DO\n\n  totals = .FALSE.\n  totals_comparison = .FALSE.\n\n  !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT,1:10))\n    !$acc parallel\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        DO y = 1, 10\n          !$acc atomic capture\n            totals(x) = totals(x) .NEQV. a(x, y)\n            b(x, y) = totals(x)\n          !$acc end atomic\n        END DO\n      END DO\n    !$acc end parallel\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      totals_comparison(x) = totals_comparison(x) .NEQV. a(x, y)\n    END DO\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    IF (totals_comparison(x) .NEQV. totals(x)) THEN\n      errors = errors + 1\n      WRITE(*, *) totals_comparison(x)\n    END IF\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      passed_a(y) = a(x, y)\n      passed_b(y) = b(x, y)\n    END DO\n    IF (IS_POSSIBLE(passed_a, passed_b, 10, .FALSE.) .eqv. .FALSE.) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_x_or_expr_assign.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: x, y !Iterators\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n  LOGICAL,DIMENSION(LOOPCOUNT, 10):: a, b !Data\n  LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n  LOGICAL,DIMENSION(10):: passed_a, passed_b\n  LOGICAL IS_POSSIBLE\n  LOGICAL:: init\n  INTEGER :: errors = 0\n\n  !Initilization\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(randoms)\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      IF (randoms(x, y) > .933) THEN\n        a(x, y) = .TRUE.\n      ELSE\n        a(x, y) = .FALSE.\n      END IF\n    END DO\n  END DO\n\n  totals = .FALSE.\n  totals_comparison = .FALSE.\n\n  !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT,1:10))\n    !$acc parallel\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        DO y = 1, 10\n          !$acc atomic capture\n            totals(x) = totals(x) .OR. a(x, y)\n            b(x, y) = totals(x)\n          !$acc end atomic\n        END DO\n      END DO\n    !$acc end parallel\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      totals_comparison(x) = totals_comparison(x) .OR. a(x, y)\n    END DO\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    IF (totals_comparison(x) .NEQV. totals(x)) THEN\n      errors = errors + 1\n      WRITE(*, *) totals_comparison(x)\n    END IF\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      passed_a(y) = a(x, y)\n      passed_b(y) = b(x, y)\n    END DO\n    init = .FALSE.\n    IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .eqv. .FALSE.) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_x_plus_expr_assign.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: x, y !Iterators\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b !Data\n  REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n  REAL(8),DIMENSION(10):: passed_a, passed_b\n  REAL(8):: init\n  LOGICAL IS_POSSIBLE\n  INTEGER :: errors = 0\n\n  !Initilization\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n\n  totals = 0\n  totals_comparison = 0\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT,1:10))\n    !$acc parallel\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        DO y = 1, 10\n          !$acc atomic capture\n            totals(x) = totals(x) + a(x, y)\n            b(x, y) = totals(x)\n          !$acc end atomic\n        END DO\n      END DO\n    !$acc end parallel\n  !$acc end data\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      totals_comparison(x) = totals_comparison(x) + a(x, y)\n    END DO\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    IF (totals_comparison(x) .NE. totals(x)) THEN\n      errors = errors + 1\n      WRITE(*, *) totals_comparison(x)\n    END IF\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      passed_a(y) = a(x, y)\n      passed_b(y) = b(x, y)\n    END DO\n    init = 0\n    IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .eqv. .FALSE.) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_x_times_expr_assign.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: x, y !Iterators\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b !Data\n  REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n  REAL(8),DIMENSION(10):: passed_a, passed_b\n  REAL(8):: init\n  LOGICAL IS_POSSIBLE\n  INTEGER :: errors = 0\n\n  !Initilization\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n\n  totals = 1\n  totals_comparison = 1\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT,1:10))\n    !$acc parallel\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        DO y = 1, 10\n          !$acc atomic capture\n            totals(x) = totals(x) * a(x, y)\n            b(x, y) = totals(x)\n          !$acc end atomic\n        END DO\n      END DO\n    !$acc end parallel\n  !$acc end data\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      totals_comparison(x) = totals_comparison(x) * a(x, y)\n    END DO\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    IF (totals_comparison(x) .NE. totals(x)) THEN\n      errors = errors + 1\n      WRITE(*, *) totals_comparison(x)\n    END IF\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      passed_a(y) = a(x, y)\n      passed_b(y) = b(x, y)\n    END DO\n    init = 1\n    IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .eqv. .TRUE.) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_expr_and_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) < .933) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic\n                  totals(x) = a(x, y) .AND. totals(x)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .AND. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_expr_and_x_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) < .933) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic\n                  totals(x) = a(x, y) .AND. totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .AND. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_expr_divided_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals\n        REAL(8),DIMENSION(10):: passed\n        INTEGER :: errors = 0\n        LOGICAL IS_POSSIBLE\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 1\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic\n                  totals(x) = a(x, y) / totals(x)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed(y) = a(x, y)\n          END DO\n          IF (IS_POSSIBLE(passed, totals(x), 10, 1) .eqv. .FALSE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_expr_divided_x_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals\n        REAL(8),DIMENSION(10):: passed\n        INTEGER :: errors = 0\n        LOGICAL IS_POSSIBLE\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 1\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic\n                  totals(x) = a(x, y) / totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed(y) = a(x, y)\n          END DO\n          IF (IS_POSSIBLE(passed, totals(x), 10, 1) .eqv. .FALSE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_expr_eqv_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) > .5) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic\n                  totals(x) = a(x, y) .EQV. totals(x)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .EQV. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_expr_eqv_x_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) > .5) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic\n                  totals(x) = a(x, y) .EQV. totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .EQV. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_expr_minus_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        LOGICAL IS_POSSIBLE\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals\n        INTEGER :: errors = 0\n        REAL(8),DIMENSION(10):: passed\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic\n                  totals(x) = a(x, y) - totals(x)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed(y) = a(x, y)\n          END DO\n          IF (IS_POSSIBLE(passed, totals(x), 10, 0) .eqv. .FALSE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_expr_minus_x_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        LOGICAL IS_POSSIBLE\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals\n        INTEGER :: errors = 0\n        REAL(8),DIMENSION(10):: passed\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic\n                  totals(x) = a(x, y) - totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed(y) = a(x, y)\n          END DO\n          IF (IS_POSSIBLE(passed, totals(x), 10, 0) .eqv. .FALSE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_expr_neqv_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) > .5) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic\n                  totals(x) = a(x, y) .NEQV. totals(x)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .NEQV. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_expr_neqv_x_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) > .5) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic\n                  totals(x) = a(x, y) .NEQV. totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .NEQV. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_expr_or_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) > .933) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic\n                  totals(x) = a(x, y) .OR. totals(x)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .OR. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_expr_or_x_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) > .933) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic\n                  totals(x) = a(x, y) .OR. totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .OR. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_expr_plus_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic\n                  totals(x) = a(x, y) + totals(x)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) + a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_expr_plus_x_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic\n                  totals(x) = a(x, y) + totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) + a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_expr_times_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 1\n        totals_comparison = 1\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic\n                  totals(x) = a(x, y) * totals(x)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) * a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_expr_times_x_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 1\n        totals_comparison = 1\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic\n                  totals(x) = a(x, y) * totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) * a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_iand_expr_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        INTEGER,DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT, 8):: randoms\n        INTEGER,DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        a = 0\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 8\n            IF (randoms(x, y) .gt. .933) THEN\n              a(x) = a(x) + ISHFT(1, y - 1)\n            END IF\n          END DO\n        END DO\n        totals = 0\n        totals_comparison = 0\n        DO x = 1, LOOPCOUNT/10 + 1\n          DO y = 0, 7\n            totals(x) = totals(x) + ISHFT(1, y)\n            totals_comparison(x) = totals_comparison(x) + ISHFT(1, y)\n          END DO\n        END DO\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = iand(a(x), totals(MOD(x, LOOPCOUNT/10 + 1) + 1))\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = iand(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_iand_expr_x_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        INTEGER,DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT, 8):: randoms\n        INTEGER,DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        a = 0\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 8\n            IF (randoms(x, y) .gt. .933) THEN\n              a(x) = a(x) + ISHFT(1, y - 1)\n            END IF\n          END DO\n        END DO\n        totals = 0\n        totals_comparison = 0\n        DO x = 1, LOOPCOUNT/10 + 1\n          DO y = 0, 7\n            totals(x) = totals(x) + ISHFT(1, y)\n            totals_comparison(x) = totals_comparison(x) + ISHFT(1, y)\n          END DO\n        END DO\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = iand(a(x), totals(MOD(x, LOOPCOUNT/10 + 1) + 1))\n              !$acc end atomic\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = iand(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_iand_x_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        INTEGER,DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT, 8):: randoms\n        INTEGER,DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        a = 0\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 8\n            IF (randoms(x, y) .gt. .933) THEN\n              a(x) = a(x) + ISHFT(1, y - 1)\n            END IF\n          END DO\n        END DO\n        totals = 0\n        totals_comparison = 0\n        DO x = 1, LOOPCOUNT/10 + 1\n          DO y = 0, 7\n            totals(x) = totals(x) + ISHFT(1, y)\n            totals_comparison(x) = totals_comparison(x) + ISHFT(1, y)\n          END DO\n        END DO\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = iand(totals(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = iand(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_iand_x_expr_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        INTEGER,DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT, 8):: randoms\n        INTEGER,DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        a = 0\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 8\n            IF (randoms(x, y) .gt. .933) THEN\n              a(x) = a(x) + ISHFT(1, y - 1)\n            END IF\n          END DO\n        END DO\n        totals = 0\n        totals_comparison = 0\n        DO x = 1, LOOPCOUNT/10 + 1\n          DO y = 0, 7\n            totals(x) = totals(x) + ISHFT(1, y)\n            totals_comparison(x) = totals_comparison(x) + ISHFT(1, y)\n          END DO\n        END DO\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = iand(totals(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n              !$acc end atomic\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = iand(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_ior_expr_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        INTEGER,DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT, 8):: randoms\n        INTEGER,DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        a = 0\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 8\n            IF (randoms(x, y) .lt. .933) THEN\n              a(x) = a(x) + ISHFT(1, y - 1)\n            END IF\n          END DO\n        END DO\n        totals = 0\n        totals_comparison = 0\n        DO x = 1, LOOPCOUNT/10 + 1\n          totals(x) = 0\n          totals_comparison(x) = 0\n        END DO\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = ior(a(x), totals(MOD(x, LOOPCOUNT/10 + 1) + 1))\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = ior(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_ior_expr_x_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        INTEGER,DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT, 8):: randoms\n        INTEGER,DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        a = 0\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 8\n            IF (randoms(x, y) .lt. .933) THEN\n              a(x) = a(x) + ISHFT(1, y - 1)\n            END IF\n          END DO\n        END DO\n        totals = 0\n        totals_comparison = 0\n        DO x = 1, LOOPCOUNT/10 + 1\n          totals(x) = 0\n          totals_comparison(x) = 0\n        END DO\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = ior(a(x), totals(MOD(x, LOOPCOUNT/10 + 1) + 1))\n              !$acc end atomic\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = ior(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_ior_x_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        INTEGER,DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT, 8):: randoms\n        INTEGER,DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        a = 0\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 8\n            IF (randoms(x, y) .lt. .933) THEN\n              a(x) = a(x) + ISHFT(1, y - 1)\n            END IF\n          END DO\n        END DO\n        totals = 0\n        totals_comparison = 0\n        DO x = 1, LOOPCOUNT/10 + 1\n          totals(x) = 0\n          totals_comparison(x) = 0\n        END DO\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = ior(totals(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = ior(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_ior_x_expr_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        INTEGER,DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT, 8):: randoms\n        INTEGER,DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        a = 0\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 8\n            IF (randoms(x, y) .lt. .933) THEN\n              a(x) = a(x) + ISHFT(1, y - 1)\n            END IF\n          END DO\n        END DO\n        totals = 0\n        totals_comparison = 0\n        DO x = 1, LOOPCOUNT/10 + 1\n          totals(x) = 0\n          totals_comparison(x) = 0\n        END DO\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = ior(totals(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n              !$acc end atomic\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = ior(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_ixor_expr_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        INTEGER,DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT, 8):: randoms\n        INTEGER,DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        a = 0\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 8\n            IF (randoms(x, y) .lt. .5) THEN\n              a(x) = a(x) + ISHFT(1, y - 1)\n            END IF\n          END DO\n        END DO\n        totals = 0\n        totals_comparison = 0\n        DO x = 1, LOOPCOUNT/10 + 1\n          totals(x) = 0\n          totals_comparison(x) = 0\n        END DO\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = ieor(a(x), totals(MOD(x, LOOPCOUNT/10 + 1) + 1))\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = ieor(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_ixor_expr_x_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        INTEGER,DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT, 8):: randoms\n        INTEGER,DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        a = 0\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 8\n            IF (randoms(x, y) .lt. .5) THEN\n              a(x) = a(x) + ISHFT(1, y - 1)\n            END IF\n          END DO\n        END DO\n        totals = 0\n        totals_comparison = 0\n        DO x = 1, LOOPCOUNT/10 + 1\n          totals(x) = 0\n          totals_comparison(x) = 0\n        END DO\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = ieor(a(x), totals(MOD(x, LOOPCOUNT/10 + 1) + 1))\n              !$acc end atomic\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = ieor(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_ixor_x_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        INTEGER,DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT, 8):: randoms\n        INTEGER,DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        a = 0\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 8\n            IF (randoms(x, y) .lt. .5) THEN\n              a(x) = a(x) + ISHFT(1, y - 1)\n            END IF\n          END DO\n        END DO\n        totals = 0\n        totals_comparison = 0\n        DO x = 1, LOOPCOUNT/10 + 1\n          totals(x) = 0\n          totals_comparison(x) = 0\n        END DO\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = ieor(totals(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = ieor(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_ixor_x_expr_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        INTEGER,DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT, 8):: randoms\n        INTEGER,DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        a = 0\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 8\n            IF (randoms(x, y) .lt. .5) THEN\n              a(x) = a(x) + ISHFT(1, y - 1)\n            END IF\n          END DO\n        END DO\n        totals = 0\n        totals_comparison = 0\n        DO x = 1, LOOPCOUNT/10 + 1\n          totals(x) = 0\n          totals_comparison(x) = 0\n        END DO\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = ieor(totals(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n              !$acc end atomic\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = ieor(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_max_expr_list_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        REAL(8),DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = max(a(x), b(x), totals(MOD(x, LOOPCOUNT/10 + 1) + 1))\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = max(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x), b(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_max_expr_list_x_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        REAL(8),DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = max(a(x), b(x), totals(MOD(x, LOOPCOUNT/10 + 1) + 1))\n              !$acc end atomic\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = max(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x), b(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_max_expr_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = max(a(x), totals(MOD(x, LOOPCOUNT/10 + 1) + 1))\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = max(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_max_expr_x_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = max(a(x), totals(MOD(x, LOOPCOUNT/10 + 1) + 1))\n              !$acc end atomic\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = max(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_max_x_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = max(totals(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = max(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_max_x_expr_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = max(totals(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n              !$acc end atomic\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = max(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_max_x_expr_list.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        REAL(8),DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = max(totals(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x), b(x))\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = max(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x), b(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_max_x_expr_list_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        REAL(8),DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = max(totals(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x), b(x))\n              !$acc end atomic\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = max(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x), b(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_min_expr_list_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        REAL(8),DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n\n        totals = 1\n        totals_comparison = 1\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = min(a(x), b(x), totals(MOD(x, LOOPCOUNT/10 + 1) + 1))\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = min(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x), b(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_min_expr_list_x_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        REAL(8),DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n\n        totals = 1\n        totals_comparison = 1\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = min(a(x), b(x), totals(MOD(x, LOOPCOUNT/10 + 1) + 1))\n              !$acc end atomic\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = min(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x), b(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_min_expr_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 1\n        totals_comparison = 1\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = min(a(x), totals(MOD(x, LOOPCOUNT/10 + 1) + 1))\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = min(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_min_expr_x_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 1\n        totals_comparison = 1\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = min(a(x), totals(MOD(x, LOOPCOUNT/10 + 1) + 1))\n              !$acc end atomic\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = min(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_min_x_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = min(totals(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = min(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_min_x_expr_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = min(totals(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n              !$acc end atomic\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = min(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_min_x_expr_list.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        REAL(8),DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n\n        totals = 1\n        totals_comparison = 1\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = min(totals(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x), b(x))\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = min(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x), b(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_min_x_expr_list_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        REAL(8),DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n\n        totals = 1\n        totals_comparison = 1\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = min(totals(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x), b(x))\n              !$acc end atomic\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = min(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x), b(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_expr_and_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) < .933) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic update\n                  totals(x) = a(x, y) .AND. totals(x)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .AND. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_expr_and_x_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) < .933) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic update\n                  totals(x) = a(x, y) .AND. totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .AND. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_expr_divided_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals\n        REAL(8),DIMENSION(10):: passed\n        INTEGER :: errors = 0\n        LOGICAL IS_POSSIBLE\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 1\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic update\n                  totals(x) = a(x, y) / totals(x)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed(y) = a(x, y)\n          END DO\n          IF (IS_POSSIBLE(passed, totals(x), 10, 1) .eqv. .FALSE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_expr_divided_x_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals\n        REAL(8),DIMENSION(10):: passed\n        INTEGER :: errors = 0\n        LOGICAL IS_POSSIBLE\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 1\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic update\n                  totals(x) = a(x, y) / totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed(y) = a(x, y)\n          END DO\n          IF (IS_POSSIBLE(passed, totals(x), 10, 1) .eqv. .FALSE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_expr_eqv_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) > .5) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic update\n                  totals(x) = a(x, y) .EQV. totals(x)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .EQV. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_expr_eqv_x_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) > .5) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic update\n                  totals(x) = a(x, y) .EQV. totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .EQV. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_expr_minus_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        LOGICAL IS_POSSIBLE\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals\n        INTEGER :: errors = 0\n        REAL(8),DIMENSION(10):: passed\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic update\n                  totals(x) = a(x, y) - totals(x)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed(y) = a(x, y)\n          END DO\n          IF (IS_POSSIBLE(passed, totals(x), 10, 0) .eqv. .FALSE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_expr_minus_x_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        LOGICAL IS_POSSIBLE\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals\n        INTEGER :: errors = 0\n        REAL(8),DIMENSION(10):: passed\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic update\n                  totals(x) = a(x, y) - totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed(y) = a(x, y)\n          END DO\n          IF (IS_POSSIBLE(passed, totals(x), 10, 0) .eqv. .FALSE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_expr_neqv_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) > .5) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic update\n                  totals(x) = a(x, y) .NEQV. totals(x)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .NEQV. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_expr_neqv_x_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) > .5) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic update\n                  totals(x) = a(x, y) .NEQV. totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .NEQV. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_expr_or_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) > .933) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic update\n                  totals(x) = a(x, y) .OR. totals(x)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .OR. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_expr_or_x_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) > .933) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic update\n                  totals(x) = a(x, y) .OR. totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .OR. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_expr_plus_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic update\n                  totals(x) = a(x, y) + totals(x)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) + a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_expr_plus_x_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic update\n                  totals(x) = a(x, y) + totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) + a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_expr_times_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 1\n        totals_comparison = 1\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic update\n                  totals(x) = a(x, y) * totals(x)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) * a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_expr_times_x_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 1\n        totals_comparison = 1\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic update\n                  totals(x) = a(x, y) * totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) * a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_iand_expr_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        INTEGER,DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT, 8):: randoms\n        INTEGER,DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        a = 0\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 8\n            IF (randoms(x, y) .gt. .933) THEN\n              a(x) = a(x) + ISHFT(1, y - 1)\n            END IF\n          END DO\n        END DO\n        totals = 0\n        totals_comparison = 0\n        DO x = 1, LOOPCOUNT/10 + 1\n          DO y = 0, 7\n            totals(x) = totals(x) + ISHFT(1, y)\n            totals_comparison(x) = totals_comparison(x) + ISHFT(1, y)\n          END DO\n        END DO\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic update\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = iand(a(x), totals(MOD(x, LOOPCOUNT/10 + 1) + 1))\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = iand(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_iand_expr_x_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        INTEGER,DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT, 8):: randoms\n        INTEGER,DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        a = 0\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 8\n            IF (randoms(x, y) .gt. .933) THEN\n              a(x) = a(x) + ISHFT(1, y - 1)\n            END IF\n          END DO\n        END DO\n        totals = 0\n        totals_comparison = 0\n        DO x = 1, LOOPCOUNT/10 + 1\n          DO y = 0, 7\n            totals(x) = totals(x) + ISHFT(1, y)\n            totals_comparison(x) = totals_comparison(x) + ISHFT(1, y)\n          END DO\n        END DO\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic update\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = iand(a(x), totals(MOD(x, LOOPCOUNT/10 + 1) + 1))\n              !$acc end atomic\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = iand(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_iand_x_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        INTEGER,DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT, 8):: randoms\n        INTEGER,DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        a = 0\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 8\n            IF (randoms(x, y) .gt. .933) THEN\n              a(x) = a(x) + ISHFT(1, y - 1)\n            END IF\n          END DO\n        END DO\n        totals = 0\n        totals_comparison = 0\n        DO x = 1, LOOPCOUNT/10 + 1\n          DO y = 0, 7\n            totals(x) = totals(x) + ISHFT(1, y)\n            totals_comparison(x) = totals_comparison(x) + ISHFT(1, y)\n          END DO\n        END DO\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic update\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = iand(totals(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = iand(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_iand_x_expr_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        INTEGER,DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT, 8):: randoms\n        INTEGER,DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        a = 0\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 8\n            IF (randoms(x, y) .gt. .933) THEN\n              a(x) = a(x) + ISHFT(1, y - 1)\n            END IF\n          END DO\n        END DO\n        totals = 0\n        totals_comparison = 0\n        DO x = 1, LOOPCOUNT/10 + 1\n          DO y = 0, 7\n            totals(x) = totals(x) + ISHFT(1, y)\n            totals_comparison(x) = totals_comparison(x) + ISHFT(1, y)\n          END DO\n        END DO\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic update\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = iand(totals(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n              !$acc end atomic\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = iand(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_ior_expr_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        INTEGER,DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT, 8):: randoms\n        INTEGER,DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        a = 0\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 8\n            IF (randoms(x, y) .lt. .933) THEN\n              a(x) = a(x) + ISHFT(1, y - 1)\n            END IF\n          END DO\n        END DO\n        totals = 0\n        totals_comparison = 0\n        DO x = 1, LOOPCOUNT/10 + 1\n          totals(x) = 0\n          totals_comparison(x) = 0\n        END DO\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic update\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = ior(a(x), totals(MOD(x, LOOPCOUNT/10 + 1) + 1))\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = ior(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_ior_expr_x_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        INTEGER,DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT, 8):: randoms\n        INTEGER,DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        a = 0\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 8\n            IF (randoms(x, y) .lt. .933) THEN\n              a(x) = a(x) + ISHFT(1, y - 1)\n            END IF\n          END DO\n        END DO\n        totals = 0\n        totals_comparison = 0\n        DO x = 1, LOOPCOUNT/10 + 1\n          totals(x) = 0\n          totals_comparison(x) = 0\n        END DO\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic update\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = ior(a(x), totals(MOD(x, LOOPCOUNT/10 + 1) + 1))\n              !$acc end atomic\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = ior(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_ior_x_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        INTEGER,DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT, 8):: randoms\n        INTEGER,DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        a = 0\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 8\n            IF (randoms(x, y) .lt. .933) THEN\n              a(x) = a(x) + ISHFT(1, y - 1)\n            END IF\n          END DO\n        END DO\n        totals = 0\n        totals_comparison = 0\n        DO x = 1, LOOPCOUNT/10 + 1\n          totals(x) = 0\n          totals_comparison(x) = 0\n        END DO\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic update\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = ior(totals(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = ior(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_ior_x_expr_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        INTEGER,DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT, 8):: randoms\n        INTEGER,DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        a = 0\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 8\n            IF (randoms(x, y) .lt. .933) THEN\n              a(x) = a(x) + ISHFT(1, y - 1)\n            END IF\n          END DO\n        END DO\n        totals = 0\n        totals_comparison = 0\n        DO x = 1, LOOPCOUNT/10 + 1\n          totals(x) = 0\n          totals_comparison(x) = 0\n        END DO\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic update\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = ior(totals(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n              !$acc end atomic\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = ior(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_ixor_expr_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        INTEGER,DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT, 8):: randoms\n        INTEGER,DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        a = 0\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 8\n            IF (randoms(x, y) .lt. .5) THEN\n              a(x) = a(x) + ISHFT(1, y - 1)\n            END IF\n          END DO\n        END DO\n        totals = 0\n        totals_comparison = 0\n        DO x = 1, LOOPCOUNT/10 + 1\n          totals(x) = 0\n          totals_comparison(x) = 0\n        END DO\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic update\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = ieor(a(x), totals(MOD(x, LOOPCOUNT/10 + 1) + 1))\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = ieor(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_ixor_expr_x_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        INTEGER,DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT, 8):: randoms\n        INTEGER,DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        a = 0\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 8\n            IF (randoms(x, y) .lt. .5) THEN\n              a(x) = a(x) + ISHFT(1, y - 1)\n            END IF\n          END DO\n        END DO\n        totals = 0\n        totals_comparison = 0\n        DO x = 1, LOOPCOUNT/10 + 1\n          totals(x) = 0\n          totals_comparison(x) = 0\n        END DO\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic update\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = ieor(a(x), totals(MOD(x, LOOPCOUNT/10 + 1) + 1))\n              !$acc end atomic\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = ieor(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_ixor_x_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        INTEGER,DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT, 8):: randoms\n        INTEGER,DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        a = 0\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 8\n            IF (randoms(x, y) .lt. .5) THEN\n              a(x) = a(x) + ISHFT(1, y - 1)\n            END IF\n          END DO\n        END DO\n        totals = 0\n        totals_comparison = 0\n        DO x = 1, LOOPCOUNT/10 + 1\n          totals(x) = 0\n          totals_comparison(x) = 0\n        END DO\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic update\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = ieor(totals(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = ieor(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_ixor_x_expr_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        INTEGER,DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT, 8):: randoms\n        INTEGER,DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        a = 0\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 8\n            IF (randoms(x, y) .lt. .5) THEN\n              a(x) = a(x) + ISHFT(1, y - 1)\n            END IF\n          END DO\n        END DO\n        totals = 0\n        totals_comparison = 0\n        DO x = 1, LOOPCOUNT/10 + 1\n          totals(x) = 0\n          totals_comparison(x) = 0\n        END DO\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic update\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = ieor(totals(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n              !$acc end atomic\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = ieor(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_max_expr_list_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        REAL(8),DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic update\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = max(a(x), b(x), totals(MOD(x, LOOPCOUNT/10 + 1) + 1))\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = max(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x), b(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_max_expr_list_x_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        REAL(8),DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic update\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = max(a(x), b(x), totals(MOD(x, LOOPCOUNT/10 + 1) + 1))\n              !$acc end atomic\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = max(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x), b(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_max_expr_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic update\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = max(a(x), totals(MOD(x, LOOPCOUNT/10 + 1) + 1))\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = max(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_max_expr_x_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic update\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = max(a(x), totals(MOD(x, LOOPCOUNT/10 + 1) + 1))\n              !$acc end atomic\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = max(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_max_x_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic update\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = max(totals(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = max(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_max_x_expr_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic update\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = max(totals(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n              !$acc end atomic\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = max(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_max_x_expr_list.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        REAL(8),DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic update\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = max(totals(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x), b(x))\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = max(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x), b(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_max_x_expr_list_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        REAL(8),DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic update\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = max(totals(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x), b(x))\n              !$acc end atomic\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = max(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x), b(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_min_expr_list_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        REAL(8),DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n\n        totals = 1\n        totals_comparison = 1\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic update\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = min(a(x), b(x), totals(MOD(x, LOOPCOUNT/10 + 1) + 1))\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = min(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x), b(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_min_expr_list_x_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        REAL(8),DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n\n        totals = 1\n        totals_comparison = 1\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic update\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = min(a(x), b(x), totals(MOD(x, LOOPCOUNT/10 + 1) + 1))\n              !$acc end atomic\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = min(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x), b(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_min_expr_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 1\n        totals_comparison = 1\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic update\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = min(a(x), totals(MOD(x, LOOPCOUNT/10 + 1) + 1))\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = min(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_min_expr_x_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 1\n        totals_comparison = 1\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic update\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = min(a(x), totals(MOD(x, LOOPCOUNT/10 + 1) + 1))\n              !$acc end atomic\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = min(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_min_x_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic update\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = min(totals(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = min(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_min_x_expr_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic update\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = min(totals(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n              !$acc end atomic\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = min(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_min_x_expr_list.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        REAL(8),DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n\n        totals = 1\n        totals_comparison = 1\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic update\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = min(totals(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x), b(x))\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = min(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x), b(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_min_x_expr_list_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        REAL(8),DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n\n        totals = 1\n        totals_comparison = 1\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic update\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = min(totals(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x), b(x))\n              !$acc end atomic\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = min(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x), b(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_x_and_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) < .933) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic update\n                  totals(x) = totals(x) .AND. a(x, y)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .AND. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_x_and_expr_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) < .933) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic update\n                  totals(x) = totals(x) .AND. a(x, y)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .AND. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_x_divided_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 1\n        totals_comparison = 1\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic update\n                  totals(x) = totals(x) / a(x, y)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) / a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_x_divided_expr_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 1\n        totals_comparison = 1\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic update\n                  totals(x) = totals(x) / a(x, y)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) / a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_x_eqv_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) > .5) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic update\n                  totals(x) = totals(x) .EQV. a(x, y)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .EQV. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_x_eqv_expr_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) > .5) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic update\n                  totals(x) = totals(x) .EQV. a(x, y)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .EQV. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_x_minus_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic update\n                  totals(x) = totals(x) - a(x, y)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) - a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_x_minus_expr_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic update\n                  totals(x) = totals(x) - a(x, y)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) - a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_x_neqv_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) > .5) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic update\n                  totals(x) = totals(x) .NEQV. a(x, y)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .NEQV. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_x_neqv_expr_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) > .5) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic update\n                  totals(x) = totals(x) .NEQV. a(x, y)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .NEQV. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_x_or_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) > .933) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic update\n                  totals(x) = totals(x) .OR. a(x, y)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .OR. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_x_or_expr_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) > .933) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic update\n                  totals(x) = totals(x) .OR. a(x, y)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .OR. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_x_plus_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic update\n                  totals(x) = totals(x) + a(x, y)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) + a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_x_plus_expr_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic update\n                  totals(x) = totals(x) + a(x, y)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) + a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_x_times_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 1\n        totals_comparison = 1\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic update\n                  totals(x) = totals(x) * a(x, y)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) * a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_x_times_expr_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 1\n        totals_comparison = 1\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic update\n                  totals(x) = totals(x) * a(x, y)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) * a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_x_and_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) < .933) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic\n                  totals(x) = totals(x) .AND. a(x, y)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .AND. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_x_and_expr_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) < .933) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic\n                  totals(x) = totals(x) .AND. a(x, y)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .AND. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_x_divided_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 1\n        totals_comparison = 1\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic\n                  totals(x) = totals(x) / a(x, y)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) / a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_x_divided_expr_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 1\n        totals_comparison = 1\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic\n                  totals(x) = totals(x) / a(x, y)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) / a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_x_eqv_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) > .5) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic\n                  totals(x) = totals(x) .EQV. a(x, y)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .EQV. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_x_eqv_expr_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) > .5) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic\n                  totals(x) = totals(x) .EQV. a(x, y)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .EQV. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_x_minus_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic\n                  totals(x) = totals(x) - a(x, y)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) - a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_x_minus_expr_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic\n                  totals(x) = totals(x) - a(x, y)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) - a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_x_neqv_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) > .5) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic\n                  totals(x) = totals(x) .NEQV. a(x, y)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .NEQV. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_x_neqv_expr_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) > .5) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic\n                  totals(x) = totals(x) .NEQV. a(x, y)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .NEQV. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_x_or_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) > .933) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic\n                  totals(x) = totals(x) .OR. a(x, y)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .OR. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_x_or_expr_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) > .933) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic\n                  totals(x) = totals(x) .OR. a(x, y)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .OR. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_x_plus_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic\n                  totals(x) = totals(x) + a(x, y)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) + a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_x_plus_expr_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic\n                  totals(x) = totals(x) + a(x, y)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) + a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_x_times_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 1\n        totals_comparison = 1\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic\n                  totals(x) = totals(x) * a(x, y)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) * a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_x_times_expr_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 1\n        totals_comparison = 1\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic\n                  totals(x) = totals(x) * a(x, y)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) * a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "data_copy_no_lower_bound.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:data,data_region,construct-independent,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copy(c(:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = c(x) + a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "data",
                            "data_region",
                            "construct-independent"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "data_copyin_no_lower_bound.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:data,data_region,construct-independent,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc data copyin(a(:LOOPCOUNT), b(:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "data",
                            "data_region",
                            "construct-independent"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "data_copyout_no_lower_bound.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:data,data_region,construct-independent,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "data",
                            "data_region",
                            "construct-independent"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "data_copyout_reference_counts.F90": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:data,data_region,devonly,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n        INTEGER,DIMENSION(1)::devtest\n\n        devtest(1) = 1\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel present(devtest(1:1))\n          devtest(1) = 0\n        !$acc end parallel\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        IF (devtest(1) .eq. 1) THEN\n          CALL RANDOM_NUMBER(a)\n          CALL RANDOM_NUMBER(b)\n          c = 0\n          !$acc data copyin(c(1:LOOPCOUNT))\n            !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n              !$acc parallel\n                !$acc loop\n                DO x = 1, LOOPCOUNT\n                  c(x) = c(x) + a(x) + b(x)\n                END DO\n              !$acc end parallel\n            !$acc end data\n          !$acc end data\n\n          DO x = 1, LOOPCOUNT\n            IF (abs(c(x)) .gt. PRECISION) THEN\n              errors = errors + 1\n              EXIT\n            END IF\n          END DO\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "data",
                            "data_region",
                            "devonly",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:data,data_region,devonly,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test2()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n        INTEGER,DIMENSION(1)::devtest\n\n        devtest(1) = 1\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel present(devtest(1:1))\n          devtest(1) = 0\n        !$acc end parallel\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc enter data copyin(c(1:LOOPCOUNT))\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = c(x) + a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n        IF (devtest(1) .eq. 1) THEN\n          DO x = 1, LOOPCOUNT\n            IF (abs(c(x)) .gt. PRECISION) THEN\n              errors = errors + 2\n              EXIT\n            END IF\n          END DO\n        END IF\n        !$acc exit data copyout(c(1:LOOPCOUNT))\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 4\n            EXIT\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "data",
                            "data_region",
                            "devonly",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n!T3:data,data_region,devonly,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test3()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n        INTEGER,DIMENSION(1)::devtest\n\n        devtest(1) = 1\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel present(devtest(1:1))\n          devtest(1) = 0\n        !$acc end parallel\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc enter data copyin(c(1:LOOPCOUNT))\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = c(x) + a(x) + b(x)\n            END DO\n          !$acc end parallel\n          !$acc exit data delete(c(1:LOOPCOUNT))\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 8\n            EXIT\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test3 = .FALSE.\n        ELSE\n          test3 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T3\n        LOGICAL :: test3\n#endif\n#ifndef T3\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test3()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 2\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "data",
                            "data_region",
                            "devonly",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "data_create.F90": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:data,data_region,construct-independent,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        b = 0\n        c = 0 \n\n        !$acc data create(b(1:LOOPCOUNT))\n          !$acc data copyin(a(1:LOOPCOUNT))\n            !$acc parallel\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                b(x) = a(x)\n              END DO\n            !$acc end parallel\n          !$acc end data\n          !$acc data copyout(c(1:LOOPCOUNT))\n            !$acc parallel\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                c(x) = b(x)\n              END DO\n            !$acc end parallel\n          !$acc end data\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(a(x) - c(x)) .gt. PRECISION) THEN\n            errors = errors + 1\n            EXIT\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "data",
                            "data_region",
                            "construct-independent"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:data,data_region,construct-independent,V:1.0-2.7\n      LOGICAL FUNCTION test2()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        b = 0\n        c = 0\n \n        !$acc data present_or_create(b(1:LOOPCOUNT))\n          !$acc data copyin(a(1:LOOPCOUNT))\n            !$acc parallel\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                b(x) = a(x)\n              END DO\n            !$acc end parallel\n          !$acc end data\n          !$acc data copyout(c(1:LOOPCOUNT))\n            !$acc parallel\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                c(x) = b(x)\n              END DO\n            !$acc end parallel\n          !$acc end data\n        !$acc end data\n \n        DO x = 1, LOOPCOUNT\n          IF (abs(a(x) - c(x)) .gt. PRECISION) THEN\n            errors = errors + 2\n            EXIT\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "data",
                            "data_region",
                            "construct-independent"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n!T3:data,data_region,construct-independent,V:1.0-2.7\n      LOGICAL FUNCTION test3()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        b = 0\n        c = 0\n \n        !$acc data pcreate(b(1:LOOPCOUNT))\n          !$acc data copyin(a(1:LOOPCOUNT))\n            !$acc parallel\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                b(x) = a(x)\n              END DO\n            !$acc end parallel\n          !$acc end data\n          !$acc data copyout(c(1:LOOPCOUNT))\n            !$acc parallel\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                c(x) = b(x)\n              END DO\n            !$acc end parallel\n          !$acc end data\n        !$acc end data\n     \n        DO x = 1, LOOPCOUNT\n          IF (abs(a(x) - c(x)) .gt. PRECISION) THEN\n            errors = errors + 4\n            EXIT\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test3 = .FALSE.\n        ELSE\n          test3 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T3\n        LOGICAL :: test3\n#endif\n#ifndef T3\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test3()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 2\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "data",
                            "data_region",
                            "construct-independent"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "data_create_no_lower_bound.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:data,data_region,construct-independent,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, d, e !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        CALL RANDOM_NUMBER(d)\n        e = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), d(1:LOOPCOUNT)) create(c(:LOOPCOUNT)) copyout(e(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              e(x) = c(x) + d(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          IF (abs(e(x) - (a(x) + b(x) + d(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "data",
                            "data_region",
                            "construct-independent"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "data_present_no_lower_bound.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:data,data_region,construct-independent,present,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n \n        !$acc enter data copyin(c(1:LOOPCOUNT))\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) present(c(:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n        !$acc exit data copyout(c(1:LOOPCOUNT))\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "data",
                            "data_region",
                            "construct-independent",
                            "present"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "data_with_changing_subscript.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:data,data_region,construct-independent,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, indexer !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n\n        indexer = LOOPCOUNT\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc data copyin(a(1:indexer), b(1:indexer)) copyout(c(1:indexer))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, indexer\n              c(x) = a(x) + b(x)\n            END DO\n            indexer = 1\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "data",
                            "data_region",
                            "construct-independent"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "data_with_derived_type.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:data,data_region,construct-independent,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        TYPE multi_item\n          REAL(8) :: a\n          REAL(8) :: b\n          REAL(8) :: c\n        END TYPE multi_item\n        INTEGER :: x !Iterators\n        TYPE (multi_item),DIMENSION(LOOPCOUNT):: a !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        DO x = 1, LOOPCOUNT\n          CALL RANDOM_NUMBER(a(x)%a)\n          CALL RANDOM_NUMBER(a(x)%b)\n          a(x)%c = 0.0\n        END DO\n\n        !$acc data copy(a(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              a(x)%c = a(x)%a + a(x)%b\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          IF (abs(a(x)%c - (a(x)%a + a(x)%b)) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "data",
                            "data_region",
                            "construct-independent"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "declare_copyin.F90": {
                "num tests": 4,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,declare,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  USE OPENACC\n  USE DECLARE_COPYIN_MOD\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: errors = 0\n  INTEGER :: mult = 2\n  INTEGER :: x\n  REAL(8),DIMENSION(LOOPCOUNT) :: a, b\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  b = 0\n\n  !$acc data copyin(a(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT)) present(fixed_size_array)\n    !$acc parallel\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        b(x) = a(x) + fixed_size_array(MOD(x, 10))\n      END DO\n    !$acc end parallel\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    IF (abs(b(x) - (a(x) + fixed_size_array(MOD(x, 10)))) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "declare"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:construct-independent,declare,V:1.0-2.7\n      LOGICAL FUNCTION test2()\n  USE OPENACC\n  USE DECLARE_COPYIN_MOD\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: errors = 0\n  INTEGER :: mult = 2\n  REAL(8),DIMENSION(LOOPCOUNT) :: a, b\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  b = 0\n\n  !$acc data copyin(a(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT)) present(scalar)\n    !$acc parallel\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        b(x) = a(x) + scalar\n      END DO\n    !$acc end parallel\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    IF (abs(b(x) - (a(x) + scalar)) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "declare"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n!T3:construct-independent,declare,V:1.0-2.7\n      LOGICAL FUNCTION test3()\n  USE OPENACC\n  USE DECLARE_COPYIN_MOD\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: errors = 0\n  INTEGER :: mult = 2\n  REAL(8),DIMENSION(LOOPCOUNT) :: a, b\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  b = a\n\n  !$acc data copy(a(1:LOOPCOUNT))\n    !$acc parallel\n      !$acc loop\n      DO x = 1, 1\n        CALL externMultiplyData(a, LOOPCOUNT)\n      END DO\n    !$acc end parallel\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    IF (abs(a(x) - (b(x) * 2)) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test3 = .FALSE.\n        ELSE\n          test3 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T3\n        LOGICAL :: test3\n#endif\n#ifndef T3\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test3()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 2\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "declare"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "4": {
                        "content": "#ifndef T4\n!T4:construct-independent,declare,V:1.0-2.7\n      LOGICAL FUNCTION test4()\n  USE OPENACC\n  USE DECLARE_COPYIN_MOD\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: errors = 0\n  INTEGER :: mult = 2\n  REAL(8),DIMENSION(LOOPCOUNT) :: a, b\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  b = a\n\n  !$acc data copy(a(1:LOOPCOUNT))\n    !$acc parallel\n      !$acc loop\n      DO x = 1, 1\n        CALL multiplyData(a)\n      END DO\n    !$acc end parallel\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    IF (abs(a(x) - (b(x) * 2)) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test4 = .FALSE.\n        ELSE\n          test4 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T4\n        LOGICAL :: test4\n#endif\n#ifndef T4\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test4()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 3\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "declare"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "declare_copyin_mod.F90": {
                "num tests": 0,
                "tests": {}
            },
            "declare_create.F90": {
                "num tests": 4,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,declare,update,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  USE OPENACC\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: errors = 0\n  INTEGER :: mult = 2\n  REAL(8),DIMENSION(LOOPCOUNT) :: a, b\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  b = 0\n  !$acc update device(n)\n  !$acc data copyin(a(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT)) present(fixed_size_array)\n    !$acc parallel\n      !$acc loop\n      DO x = 1, 10\n        fixed_size_array(x) = x * x\n      END DO\n    !$acc end parallel\n    !$acc parallel\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        b(x) = a(x) + fixed_size_array(MOD(x, 10))\n      END DO\n    !$acc end parallel\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    IF (abs(b(x) - (a(x) + (MOD(x, 10) * MOD(x, 10)))) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "declare",
                            "update"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:construct-independent,declare,update,V:2.0-2.7\n      LOGICAL FUNCTION test2()\n  USE OPENACC\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: errors = 0\n  INTEGER :: mult = 2\n  REAL(8),DIMENSION(LOOPCOUNT) :: a, b\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  b = 0\n  scalar = 10\n  !$acc update device(scalar)\n  !$acc data copyin(a(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT)) present(scalar)\n    !$acc parallel\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        b(x) = a(x) + scalar\n      END DO\n    !$acc end parallel\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    IF (abs(b(x) - (a(x) + scalar)) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "declare",
                            "update"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n!T3:construct-independent,declare,V:2.0-2.7\n      LOGICAL FUNCTION test3()\n  USE OPENACC\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: errors = 0\n  INTEGER :: mult = 2\n  REAL(8),DIMENSION(LOOPCOUNT) :: a, b\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  b = a\n  !$acc update\n  !$acc data copy(a(1:LOOPCOUNT))\n    !$acc parallel\n      !$acc loop\n      DO x = 1, 1\n        CALL externMultiplyData(a, LOOPCOUNT)\n      END DO\n    !$acc end parallel\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    IF (abs(a(x) - (b(x) * 2)) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test3 = .FALSE.\n        ELSE\n          test3 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T3\n        LOGICAL :: test3\n#endif\n#ifndef T3\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test3()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 2\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "declare"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "4": {
                        "content": "#ifndef T4\n!T4:construct-independent,declare,V:2.0-2.7\n      LOGICAL FUNCTION test4()\n  USE OPENACC\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: errors = 0\n  INTEGER :: mult = 2\n  REAL(8),DIMENSION(LOOPCOUNT) :: a, b\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  b = a\n\n  !$acc data copy(a(1:LOOPCOUNT))\n    !$acc parallel\n      !$acc loop\n      DO x = 1, 1\n        CALL multiplyData(a)\n      END DO\n    !$acc end parallel\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    IF (abs(a(x) - (b(x) * 2)) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test4 = .FALSE.\n        ELSE\n          test4 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T4\n        LOGICAL :: test4\n#endif\n#ifndef T4\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test4()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 3\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "declare"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "declare_function_scope_copy.F90": {
                "num tests": 4,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:devonly,construct-independent,declare,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  USE OPENACC\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: errors = 0\n  INTEGER :: mult = 2\n  REAL(8),DIMENSION(LOOPCOUNT, LOOPCOUNT) :: a, b, c\n  INTEGER,DIMENSION(1) :: devtest\n  INTEGER :: x, y\n\n  devtest(1) = 1\n  !$acc enter data copyin(devtest(1:1))\n  !$acc parallel present(devtest(1:1))\n    devtest(1) = 0\n  !$acc end parallel\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n  c = 1\n  !$acc data copyin(a(1:LOOPCOUNT, 1:LOOPCOUNT), b(1:LOOPCOUNT, 1:LOOPCOUNT))\n    DO x = 1, LOOPCOUNT\n      CALL copyin_copyout_test(a(:,x), b(:,x), c(:,x), LOOPCOUNT)\n    END DO\n  !$acc end data\n  DO x = 1, LOOPCOUNT\n    DO y = 1, LOOPCOUNT\n      IF (abs(c(x, y) - (1 + a(x, y) + b(x, y))) .gt. PRECISION) THEN\n        errors = errors + 1\n      END IF\n    END DO\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "construct-independent",
                            "declare"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:devonly,construct-independent,declare,V:2.0-2.7\n      LOGICAL FUNCTION test2()\n  USE OPENACC\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: errors = 0\n  INTEGER :: mult = 2\n  REAL(8),DIMENSION(LOOPCOUNT, LOOPCOUNT) :: a, b, c\n  INTEGER,DIMENSION(1) :: devtest\n  INTEGER :: x, y\n\n  devtest(1) = 1\n  !$acc enter data copyin(devtest(1:1))\n  !$acc parallel present(devtest(1:1))\n    devtest(1) = 0\n  !$acc end parallel\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n  c = 2\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:LOOPCOUNT), b(1:LOOPCOUNT, 1:LOOPCOUNT))\n    DO x = 1, LOOPCOUNT\n      !$acc data copy(c(1:LOOPCOUNT, x:x))\n        CALL copyin_copyout_test(a(:,x), b(:,x), c(:,x), LOOPCOUNT)\n      !$acc end data\n    END DO\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, LOOPCOUNT\n      IF (abs(c(x, y) - (2 + a(x, y) + b(x, y))) .gt. PRECISION) THEN\n        errors = errors + 1\n      END IF\n    END DO\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "construct-independent",
                            "declare"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n!T3:devonly,construct-independent,declare,V:2.0-2.7\n      LOGICAL FUNCTION test3()\n  USE OPENACC\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: errors = 0\n  INTEGER :: mult = 2\n  REAL(8),DIMENSION(LOOPCOUNT, LOOPCOUNT) :: a, b, c\n  INTEGER,DIMENSION(1) :: devtest\n  INTEGER :: x, y\n\n  devtest(1) = 1\n  !$acc enter data copyin(devtest(1:1))\n  !$acc parallel present(devtest(1:1))\n    devtest(1) = 0\n  !$acc end parallel\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  IF (devtest(1) .eq. 1) THEN\n    CALL RANDOM_NUMBER(a)\n    CALL RANDOM_NUMBER(b)\n    c = 3\n\n    !$acc data copyin(a(1:LOOPCOUNT, 1:LOOPCOUNT), b(1:LOOPCOUNT, 1:LOOPCOUNT))\n      DO x = 1, LOOPCOUNT\n        !$acc data copyin(c(1:LOOPCOUNT, x:x))\n          CALL copyin_copyout_test(a(:,x), b(:,x), c(:,x), LOOPCOUNT)\n          DO y = 1, LOOPCOUNT\n            IF (abs(c(y, x) - 3) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        !$acc end data\n        DO y = 1, LOOPCOUNT\n          IF (abs(c(y, x) - 3) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n      END DO\n    !$acc end data\n  END IF\n\n        IF (errors .eq. 0) THEN\n          test3 = .FALSE.\n        ELSE\n          test3 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T3\n        LOGICAL :: test3\n#endif\n#ifndef T3\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test3()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 2\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "construct-independent",
                            "declare"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "4": {
                        "content": "#ifndef T4\n!T4:devonly,construct-independent,declare,V:2.0-2.7\n      LOGICAL FUNCTION test4()\n  USE OPENACC\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: errors = 0\n  INTEGER :: mult = 2\n  REAL(8),DIMENSION(LOOPCOUNT, LOOPCOUNT) :: a, b, c\n  INTEGER,DIMENSION(1) :: devtest\n  INTEGER :: x, y\n\n  devtest(1) = 1\n  !$acc enter data copyin(devtest(1:1))\n  !$acc parallel present(devtest(1:1))\n    devtest(1) = 0\n  !$acc end parallel\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  IF (devtest(1) .eq. 1) THEN\n    CALL RANDOM_NUMBER(a)\n    CALL RANDOM_NUMBER(b)\n    c = 4\n\n    !$acc data copyin(a(1:LOOPCOUNT, 1:LOOPCOUNT), b(1:LOOPCOUNT, 1:LOOPCOUNT))\n      DO x = 1, LOOPCOUNT\n        !$acc data copy(c(1:LOOPCOUNT, x:x))\n          CALL copyin_copyout_test(a(:,x), b(:,x), c(:,x), LOOPCOUNT)\n          DO y = 1, LOOPCOUNT\n            IF (abs(c(y, x) - 4) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        !$acc end data\n        DO y = 1, LOOPCOUNT\n          IF (abs(c(y, x) - (4 + a(y, x) + b(y, x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n      END DO\n    !$acc end data\n  END IF\n\n        IF (errors .eq. 0) THEN\n          test4 = .FALSE.\n        ELSE\n          test4 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T4\n        LOGICAL :: test4\n#endif\n#ifndef T4\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test4()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 3\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "construct-independent",
                            "declare"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "declare_function_scope_copyin.F90": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:devonly,construct-independent,declare,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  USE OPENACC\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: errors = 0\n  INTEGER :: mult = 2\n  REAL(8),DIMENSION(LOOPCOUNT, LOOPCOUNT) :: a, b, c, a_host, b_host\n  INTEGER,DIMENSION(1) :: devtest\n  INTEGER :: x, y\n\n  devtest(1) = 1\n  !$acc enter data copyin(devtest(1:1))\n  !$acc parallel present(devtest(1:1))\n    devtest(1) = 0\n  !$acc end parallel\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n  c = 1\n\n  !$acc data copy(c(1:LOOPCOUNT, 1:LOOPCOUNT))\n    DO x = 1, LOOPCOUNT\n      CALL function_test(a(:,x), b(:,x), c(:,x), LOOPCOUNT)\n    END DO\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, LOOPCOUNT\n      IF (abs(c(x, y) - (1 + a(x, y) + b(x, y))) .gt. PRECISION) THEN\n        errors = errors + 1\n        PRINT*, \"1\"\n      END IF\n    END DO\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "construct-independent",
                            "declare"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:devonly,construct-independent,declare,V:2.0-2.7\n      LOGICAL FUNCTION test2()\n  USE OPENACC\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: errors = 0\n  INTEGER :: mult = 2\n  REAL(8),DIMENSION(LOOPCOUNT, LOOPCOUNT) :: a, b, c, a_host, b_host\n  INTEGER,DIMENSION(1) :: devtest\n  INTEGER :: x, y\n\n  devtest(1) = 1\n  !$acc enter data copyin(devtest(1:1))\n  !$acc parallel present(devtest(1:1))\n    devtest(1) = 0\n  !$acc end parallel\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  IF (devtest(1) .eq. 1) THEN\n    CALL RANDOM_NUMBER(a)\n    CALL RANDOM_NUMBER(b)\n    c = 0\n    a_host = a\n    b_host = b\n\n    !$acc data copy(a(1:LOOPCOUNT, 1:LOOPCOUNT), b(1:LOOPCOUNT, 1:LOOPCOUNT), c(1:LOOPCOUNT, 1:LOOPCOUNT))\n      DO x = 1, LOOPCOUNT\n        CALL function_test_dev_only(a(:,x), b(:,x), c(:,x), LOOPCOUNT)\n      END DO\n    !$acc end data\n\n    DO x = 1, LOOPCOUNT\n      DO y = 1, LOOPCOUNT\n        IF (abs(a(x, y) + 1) .gt. PRECISION) THEN\n          errors = errors + 1\n          PRINT*, \"2\"\n        END IF\n        IF (abs(b(x, y) + 1) .gt. PRECISION) THEN\n          errors = errors + 1\n          PRINT*, \"3\"\n        END IF\n        IF (abs(c(x, y) - (a_host(x, y) + b_host(x, y))) .gt. PRECISION) THEN\n          errors = errors + 1\n          PRINT*, \"4\"\n        END IF\n      END DO\n    END DO\n  END IF\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "construct-independent",
                            "declare"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n!T3:devonly,construct-independent,declare,V:2.0-2.7\n      LOGICAL FUNCTION test3()\n  USE OPENACC\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: errors = 0\n  INTEGER :: mult = 2\n  REAL(8),DIMENSION(LOOPCOUNT, LOOPCOUNT) :: a, b, c, a_host, b_host\n  INTEGER,DIMENSION(1) :: devtest\n  INTEGER :: x, y\n\n  devtest(1) = 1\n  !$acc enter data copyin(devtest(1:1))\n  !$acc parallel present(devtest(1:1))\n    devtest(1) = 0\n  !$acc end parallel\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  IF (devtest(1) .eq. 1) THEN\n    CALL RANDOM_NUMBER(a)\n    CALL RANDOM_NUMBER(b)\n    c = 1\n    a_host = a\n    b_host = b\n\n    !$acc data copy(c(1:LOOPCOUNT, 1:LOOPCOUNt))\n      DO x = 1, LOOPCOUNT\n        CALL function_test_dev_only(a(:,x), b(:,x), c(:,x), LOOPCOUNT)\n      END DO\n    !$acc end data\n\n    DO x = 1, LOOPCOUNT\n      DO y = 1, LOOPCOUNT\n        IF (abs(a(x, y) - a_host(x, y)) .gt. PRECISION) THEN\n          errors = errors + 1\n          PRINT*, \"5\"\n        END IF\n        IF (abs(b(x, y) - b_host(x, y)) .gt. PRECISION) THEN\n          errors = errors + 1\n          PRINT*, \"6\"\n        END IF\n        IF (abs(c(x, y) - (1 + a(x, y) + b(x, y))) .gt. PRECISION) THEN\n          errors = errors + 1\n          PRINT*, \"7\"\n        END IF\n      END DO\n    END DO\n  END IF\n\n        IF (errors .eq. 0) THEN\n          test3 = .FALSE.\n        ELSE\n          test3 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T3\n        LOGICAL :: test3\n#endif\n#ifndef T3\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test3()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 2\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "construct-independent",
                            "declare"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "declare_function_scope_copyout.F90": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:devonly,construct-independent,declare,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  USE OPENACC\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: errors = 0\n  INTEGER :: mult = 2\n  REAL(8),DIMENSION(LOOPCOUNT, LOOPCOUNT) :: a, b, c\n  INTEGER,DIMENSION(1) :: devtest\n  INTEGER :: x, y\n\n  devtest(1) = 1\n  !$acc enter data copyin(devtest(1:1))\n  !$acc parallel present(devtest(1:1))\n    devtest(1) = 0\n  !$acc end parallel\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n  c = 1\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:LOOPCOUNT), b(1:LOOPCOUNT, 1:LOOPCOUNT))\n    DO x = 1, LOOPCOUNT\n      CALL copyout_test(a(:,x), b(:,x), c(:,x), LOOPCOUNT)\n    END DO\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, LOOPCOUNT\n      IF (abs(c(x, y) - (a(x, y) + b(x, y))) .gt. PRECISION) THEN\n        errors = errors + 1\n      END IF\n    END DO\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "construct-independent",
                            "declare"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:devonly,construct-independent,declare,V:2.0-2.7\n      LOGICAL FUNCTION test2()\n  USE OPENACC\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: errors = 0\n  INTEGER :: mult = 2\n  REAL(8),DIMENSION(LOOPCOUNT, LOOPCOUNT) :: a, b, c\n  INTEGER,DIMENSION(1) :: devtest\n  INTEGER :: x, y\n\n  devtest(1) = 1\n  !$acc enter data copyin(devtest(1:1))\n  !$acc parallel present(devtest(1:1))\n    devtest(1) = 0\n  !$acc end parallel\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n  c = 2\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:LOOPCOUNT), b(1:LOOPCOUNT, 1:LOOPCOUNT))\n    DO x = 1, LOOPCOUNT\n      !$acc data copy(c(1:LOOPCOUNT, x:x))\n        CALL copyout_test(a(:,x), b(:,x), c(:,x), LOOPCOUNT)\n      !$acc end data\n    END DO\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, LOOPCOUNT\n      IF (abs(c(x, y) - (a(x, y) + b(x, y))) .gt. PRECISION) THEN\n        errors = errors + 1\n      END IF\n    END DO\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "construct-independent",
                            "declare"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n!T3:devonly,construct-independent,declare,V:2.0-2.7\n      LOGICAL FUNCTION test3()\n  USE OPENACC\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: errors = 0\n  INTEGER :: mult = 2\n  REAL(8),DIMENSION(LOOPCOUNT, LOOPCOUNT) :: a, b, c\n  INTEGER,DIMENSION(1) :: devtest\n  INTEGER :: x, y\n\n  devtest(1) = 1\n  !$acc enter data copyin(devtest(1:1))\n  !$acc parallel present(devtest(1:1))\n    devtest(1) = 0\n  !$acc end parallel\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  IF (devtest(1) .eq. 1) THEN\n    CALL RANDOM_NUMBER(a)\n    CALL RANDOM_NUMBER(b)\n    c = 3\n\n    !$acc data copyin(a(1:LOOPCOUNT, 1:LOOPCOUNT), b(1:LOOPCOUNT, 1:LOOPCOUNT))\n      DO x = 1, LOOPCOUNT\n        !$acc data copyin(c(1:LOOPCOUNT, x:x))\n          CALL copyout_test(a(:,x), b(:,x), c(:,x), LOOPCOUNT)\n        !$acc end data\n        DO y = 1, LOOPCOUNT\n          IF (abs(c(y, x) - 3) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n      END DO\n    !$acc end data\n  END IF\n\n        IF (errors .eq. 0) THEN\n          test3 = .FALSE.\n        ELSE\n          test3 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T3\n        LOGICAL :: test3\n#endif\n#ifndef T3\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test3()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 2\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "construct-independent",
                            "declare"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "declare_function_scope_create.F90": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:devonly,construct-independent,declare,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  USE OPENACC\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: errors = 0\n  INTEGER :: mult = 2\n  REAL(8),DIMENSION(LOOPCOUNT, LOOPCOUNT) :: a, b, c, d\n  INTEGER,DIMENSION(1) :: devtest\n  INTEGER :: x, y\n\n  devtest(1) = 1\n  !$acc enter data copyin(devtest(1:1))\n  !$acc parallel present(devtest(1:1))\n    devtest(1) = 0\n  !$acc end parallel\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n  c = 1\n  d = 0\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:LOOPCOUNT), b(1:LOOPCOUNT, 1:LOOPCOUNT)) copyout(d(1:LOOPCOUNT, 1:LOOPCOUNT))\n    DO x = 1, LOOPCOUNT\n      CALL create_test(a(x), b(x), c(x), d(x), LOOPCOUNT)\n    END DO\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, LOOPCOUNT\n      IF (abs(d(x, y) - (a(x, y) * (a(x, y) + b(x, y)))) .gt. PRECISION) THEN\n        errors = errors + 1\n      END IF\n    END DO\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "construct-independent",
                            "declare"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:devonly,construct-independent,declare,V:2.0-2.7\n      LOGICAL FUNCTION test2()\n  USE OPENACC\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: errors = 0\n  INTEGER :: mult = 2\n  REAL(8),DIMENSION(LOOPCOUNT, LOOPCOUNT) :: a, b, c, d\n  INTEGER,DIMENSION(1) :: devtest\n  INTEGER :: x, y\n\n  devtest(1) = 1\n  !$acc enter data copyin(devtest(1:1))\n  !$acc parallel present(devtest(1:1))\n    devtest(1) = 0\n  !$acc end parallel\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n  c = 2\n  d = 0\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:LOOPCOUNT), b(1:LOOPCOUNT, 1:LOOPCOUNT)) copy(c(1:LOOPCOUNT, 1:LOOPCOUNT)) copyout(d(1:LOOPCOUNT, 1:LOOPCOUNT))\n    DO x = 1, LOOPCOUNT\n      CALL create_as_present(a(x), b(x), c(x), d(x), LOOPCOUNT)\n    END DO\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, LOOPCOUNT\n      IF (abs(c(x, y) - (2 + a(x, y) + b(x, y))) .gt. PRECISION) THEN\n        errors = errors + 1\n      END IF\n      IF (abs(d(x, y) - (a(x, y) * c(x, y))) .gt. PRECISION * 2) THEN\n        errors = errors + 1\n      END IF\n    END DO\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "construct-independent",
                            "declare"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n!T3:devonly,construct-independent,declare,V:2.0-2.7\n      LOGICAL FUNCTION test3()\n  USE OPENACC\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: errors = 0\n  INTEGER :: mult = 2\n  REAL(8),DIMENSION(LOOPCOUNT, LOOPCOUNT) :: a, b, c, d\n  INTEGER,DIMENSION(1) :: devtest\n  INTEGER :: x, y\n\n  devtest(1) = 1\n  !$acc enter data copyin(devtest(1:1))\n  !$acc parallel present(devtest(1:1))\n    devtest(1) = 0\n  !$acc end parallel\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  IF (devtest(1) .eq. 1) THEN\n    CALL RANDOM_NUMBER(a)\n    CALL RANDOM_NUMBER(b)\n    c = 3\n\n    !$acc data copyin(a(1:LOOPCOUNT, 1:LOOPCOUNT), b(1:LOOPCOUNT, 1:LOOPCOUNT))\n      DO x = 1, LOOPCOUNT\n        !$acc data copyin(c(x:x, 1:LOOPCOUNT)) copyout(d(x:x, 1:LOOPCOUNT))\n          CALL create_as_present(a(x), b(x), c(x), d(x), LOOPCOUNT)\n        !$acc end data\n        DO y = 1, LOOPCOUNT\n          IF (abs(c(x, y) - 3) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n          IF (abs(d(x, y) - (a(x, y) * (3 + a(x, y) + b(x, y)))) .gt. PRECISION * 2) THEN\n            errors = errors + 1\n          END IF\n        END DO\n      END DO\n    !$acc end data\n  END IF\n\n        IF (errors .eq. 0) THEN\n          test3 = .FALSE.\n        ELSE\n          test3 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T3\n        LOGICAL :: test3\n#endif\n#ifndef T3\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test3()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 2\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "construct-independent",
                            "declare"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "declare_function_scope_present.F90": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:devonly,construct-independent,declare,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  USE OPENACC\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: errors = 0\n  INTEGER :: mult = 2\n  REAL(8),DIMENSION(LOOPCOUNT, LOOPCOUNT) :: a, b, c, d\n  INTEGER,DIMENSION(1) :: devtest\n  INTEGER :: x, y\n\n  devtest(1) = 1\n  !$acc enter data copyin(devtest(1:1))\n  !$acc parallel present(devtest(1:1))\n    devtest(1) = 0\n  !$acc end parallel\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n  c = 1\n  d = 0\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:LOOPCOUNT), b(1:LOOPCOUNT, 1:LOOPCOUNT)) copyout(d(1:LOOPCOUNT, 1:LOOPCOUNT))\n    DO x = 1, LOOPCOUNT\n      !$acc data copy(c(x:x, 1:LOOPCOUNT))\n        CALL present(a(x), b(x), c(x), d(x), LOOPCOUNT)\n      !$acc end data\n    END DO\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, LOOPCOUNT\n      IF (abs(c(x, y) - (1 + a(x, y) + b(x, y))) .gt. PRECISION) THEN\n        errors = errors + 1\n      END IF\n      IF (abs(d(x, y) - (a(x, y) * c(x, y))) .gt. PRECISION * 2) THEN\n        errors = errors + 1\n      END IF\n    END DO\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "construct-independent",
                            "declare"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:devonly,construct-independent,declare,V:2.0-2.7\n      LOGICAL FUNCTION test2()\n  USE OPENACC\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: errors = 0\n  INTEGER :: mult = 2\n  REAL(8),DIMENSION(LOOPCOUNT, LOOPCOUNT) :: a, b, c, d\n  INTEGER,DIMENSION(1) :: devtest\n  INTEGER :: x, y\n\n  devtest(1) = 1\n  !$acc enter data copyin(devtest(1:1))\n  !$acc parallel present(devtest(1:1))\n    devtest(1) = 0\n  !$acc end parallel\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  IF (devtest(1) .eq. 1) THEN\n    CALL RANDOM_NUMBER(a)\n    CALL RANDOM_NUMBER(b)\n    c = 3\n\n    !$acc data copyin(a(1:LOOPCOUNT, 1:LOOPCOUNT), b(1:LOOPCOUNT, 1:LOOPCOUNT))\n      DO x = 1, LOOPCOUNT\n        !$acc data copyin(c(x:x, 1:LOOPCOUNT)) copyout(d(x:x, 1:LOOPCOUNT))\n          CALL present(a(x), b(x), c(x), d(x), LOOPCOUNT)\n        !$acc end data\n        DO y = 1, LOOPCOUNT\n          IF (abs(c(x, y) - 3) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n          IF (abs(d(x, y) - (a(x, y) * (3 + a(x, y) + b(x, y)))) .gt. PRECISION * 2) THEN\n            errors = errors + 1\n          END IF\n        END DO\n      END DO\n    !$acc end data\n  END IF\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "construct-independent",
                            "declare"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "enter_data_copyin_no_lower_bound.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:data,executable-data,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc enter data copyin(a(:LOOPCOUNT), b(:LOOPCOUNT))\n        !$acc data copyout(c(1:LOOPCOUNT)) present(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n        !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "enter_data_create.F90": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:data,executable-data,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        b = 0\n        c = 0\n\n        !$acc enter data create(b(1:LOOPCOUNT))\n        !$acc data copyin(a(1:LOOPCOUNT))\n          !$acc parallel present(b(1:LOOPCOUNT))\n            !$acc loop \n            DO x = 1, LOOPCOUNT\n              b(x) = a(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n        !$acc data copyout(c(1:LOOPCOUNT))\n          !$acc parallel present(b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n        !$acc exit data delete(b(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(a(x) - c(x)) .gt. PRECISION) THEN\n            errors = errors + 1\n            EXIT\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:data,executable-data,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test2()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        b = 0\n        c = 0\n        !$acc enter data present_or_create(b(1:LOOPCOUNT))\n        !$acc data copyin(a(1:LOOPCOUNT))\n          !$acc parallel present(b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              b(x) = a(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n        !$acc data copyout(c(1:LOOPCOUNT))\n          !$acc parallel present(b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n        !$acc exit data delete(b(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(a(x) - c(x)) .gt. PRECISION) THEN\n            errors = errors + 2\n            EXIT\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n!T3:data,executable-data,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test3()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        b = 0\n        c = 0\n \n        !$acc enter data pcreate(b(1:LOOPCOUNT))\n        !$acc data copyin(a(1:LOOPCOUNT))\n          !$acc parallel present(b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              b(x) = a(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n        !$acc data copyout(c(1:LOOPCOUNT))\n          !$acc parallel present(b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n        !$acc exit data delete(b(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(a(x) - c(x)) .gt. PRECISION) THEN\n            errors = errors + 4\n            EXIT\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test3 = .FALSE.\n        ELSE\n          test3 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T3\n        LOGICAL :: test3\n#endif\n#ifndef T3\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test3()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 2\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "enter_data_create_no_lower_bound.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:data,executable-data,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, d, e !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        CALL RANDOM_NUMBER(d)\n        e = 0\n\n        !$acc enter data create(c(:LOOPCOUNT))\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), d(1:LOOPCOUNT)) copyout(e(1:LOOPCOUNT)) present(c(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              e(x) = c(x) + d(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          IF (abs(e(x) - (a(x) + b(x) + d(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "enter_data_if.F90": {
                "num tests": 5,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:data,executable-data,devonly,construct-independent,if,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, a_copy, b, b_copy, c !Data\n        INTEGER :: errors = 0\n        INTEGER,DIMENSION(1):: devtest\n        LOGICAL :: dev = .TRUE.\n        LOGICAL :: cpu = .FALSE.\n        devtest(1) = 1\n\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel\n          devtest(1) = 0\n        !$acc end parallel\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) if(dev)\n        !$acc data create(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n        !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) if(dev)\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "data",
                            "executable-data",
                            "devonly",
                            "construct-independent",
                            "if"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:data,executable-data,devonly,construct-independent,if,V:2.0-2.7\n      LOGICAL FUNCTION test2()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, a_copy, b, b_copy, c !Data\n        INTEGER :: errors = 0\n        INTEGER,DIMENSION(1):: devtest\n        LOGICAL :: dev = .TRUE.\n        LOGICAL :: cpu = .FALSE.\n        devtest(1) = 1\n\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel\n          devtest(1) = 0\n        !$acc end parallel\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc enter data create(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) if(cpu)\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n        !$acc exit data copyout(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) if(cpu)\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "data",
                            "executable-data",
                            "devonly",
                            "construct-independent",
                            "if"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n!T3:data,executable-data,devonly,construct-independent,if,V:2.0-2.7\n      LOGICAL FUNCTION test3()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, a_copy, b, b_copy, c !Data\n        INTEGER :: errors = 0\n        INTEGER,DIMENSION(1):: devtest\n        LOGICAL :: dev = .TRUE.\n        LOGICAL :: cpu = .FALSE.\n        devtest(1) = 1\n\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel\n          devtest(1) = 0\n        !$acc end parallel\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        IF (devtest(1) .eq. 1) THEN\n          CALL RANDOM_NUMBER(a)\n          a_copy = a\n          CALL RANDOM_NUMBER(b)\n          b_copy = b\n          c = 0\n\n          !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) if(dev)\n\n          a = 0\n          b = 0\n\n          !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n            !$acc parallel\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                c(x) = a(x) + b(x)\n              END DO\n            !$acc end parallel\n          !$acc end data\n          !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) if(dev)\n\n          DO x = 1, LOOPCOUNT\n            IF (abs(c(x) - (a_copy(x) + b_copy(x))) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test3 = .FALSE.\n        ELSE\n          test3 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T3\n        LOGICAL :: test3\n#endif\n#ifndef T3\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test3()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 2\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "data",
                            "executable-data",
                            "devonly",
                            "construct-independent",
                            "if"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "4": {
                        "content": "#ifndef T4\n!T4:data,executable-data,devonly,construct-independent,if,V:2.0-2.7\n      LOGICAL FUNCTION test4()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, a_copy, b, b_copy, c !Data\n        INTEGER :: errors = 0\n        INTEGER,DIMENSION(1):: devtest\n        LOGICAL :: dev = .TRUE.\n        LOGICAL :: cpu = .FALSE.\n        devtest(1) = 1\n\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel\n          devtest(1) = 0\n        !$acc end parallel\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        IF (devtest(1) .eq. 1) THEN\n          CALL RANDOM_NUMBER(a)\n          CALL RANDOM_NUMBER(b)\n          c = 0\n\n          !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) if(cpu)\n          CALL RANDOM_NUMBER(a)\n          a_copy = a\n          CALL RANDOM_NUMBER(b)\n          b_copy = b\n\n          !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n            !$acc parallel\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                c(x) = a(x) + b(x)\n              END DO\n            !$acc end parallel\n          !$acc end data\n          !$acc exit data copyout(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) if(cpu)\n\n          DO x = 1, LOOPCOUNT\n            IF (abs(c(x) - (a_copy(x) + b_copy(x))) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test4 = .FALSE.\n        ELSE\n          test4 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T4\n        LOGICAL :: test4\n#endif\n#ifndef T4\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test4()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 3\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "data",
                            "executable-data",
                            "devonly",
                            "construct-independent",
                            "if"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "5": {
                        "content": "#ifndef T5\n!T5:data,executable-data,devonly,construct-independent,if,V:2.0-2.7\n      LOGICAL FUNCTION test5()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, a_copy, b, b_copy, c !Data\n        INTEGER :: errors = 0\n        INTEGER,DIMENSION(1):: devtest\n        LOGICAL :: dev = .TRUE.\n        LOGICAL :: cpu = .FALSE.\n        devtest(1) = 1\n\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel\n          devtest(1) = 0\n        !$acc end parallel\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        IF (devtest(1) .eq. 1) THEN\n          CALL RANDOM_NUMBER(a)\n          CALL RANDOM_NUMBER(b)\n          c = 0\n\n          !$acc enter data create(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) if(cpu)\n          !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n            !$acc parallel\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                c(x) = a(x) + b(x)\n              END DO\n            !$acc end parallel\n          !$acc end data\n\n          DO x = 1, LOOPCOUNT\n            IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test5 = .FALSE.\n        ELSE\n          test5 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T5\n        LOGICAL :: test5\n#endif\n#ifndef T5\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test5()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 4\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "data",
                            "executable-data",
                            "devonly",
                            "construct-independent",
                            "if"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "exit_data.F90": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:data,executable-data,devonly,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, a_copy !Data\n        INTEGER :: errors = 0\n        INTEGER,DIMENSION(1):: devtest\n        devtest(1) = 1\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel\n          devtest(1) = 0\n        !$acc end parallel\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        a_copy = a\n\n        IF (devtest(1) .eq. 1) THEN\n          !$acc enter data copyin(a(1:LOOPCOUNT))\n          !$acc parallel present(a(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              a(x) = a(x) + 1\n            END DO\n          !$acc end parallel\n          !$acc exit data delete(a(1:LOOPCOUNT))\n\n          DO x = 1, LOOPCOUNT\n            IF (abs(a(x) - a_copy(x)) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "data",
                            "executable-data",
                            "devonly",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:data,executable-data,devonly,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test2()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, a_copy !Data\n        INTEGER :: errors = 0\n        INTEGER,DIMENSION(1):: devtest\n        devtest(1) = 1\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel\n          devtest(1) = 0\n        !$acc end parallel\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        a_copy = a\n        !$acc enter data copyin(a(1:LOOPCOUNT))\n        !$acc parallel present(a(1:LOOPCOUNT))\n          !$acc loop\n          DO x = 1, LOOPCOUNT\n            a(x) = a(x) + 1\n          END DO\n        !$acc end parallel\n        !$acc exit data copyout(a(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(a(x) - (a_copy(x) + 1)) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "data",
                            "executable-data",
                            "devonly",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "exit_data_copyout_no_lower_bound.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:data,executable-data,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        !$acc enter data create(c(1:LOOPCOUNT))\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) present(c(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n        !$acc exit data copyout(c(:LOOPCOUNT))\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "exit_data_copyout_reference_counts.F90": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:data,executable-data,devonly,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n        INTEGER,DIMENSION(1):: devtest\n\n        devtest(1) = 1\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel present(devtest(1:1))\n          devtest(1) = 0\n        !$acc end parallel\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        IF (devtest(1) .eq. 1) THEN\n          !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n          !$acc data copyin(c(1:LOOPCOUNT))\n            !$acc parallel\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                c(x) = c(x) + a(x) + b(x)\n              END DO\n            !$acc end parallel\n            !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n          !$acc end data\n\n          DO x = 1, LOOPCOUNT\n            IF (abs(c(x)) .gt. PRECISION) THEN\n              errors = errors + 1\n              EXIT\n            END IF\n          END DO \n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "data",
                            "executable-data",
                            "devonly",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:data,executable-data,devonly,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test2()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n        INTEGER,DIMENSION(1):: devtest\n\n        devtest(1) = 1\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel present(devtest(1:1))\n          devtest(1) = 0\n        !$acc end parallel\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n        !$acc data copyin(c(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = c(x) + a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n        !$acc exit data copyout(c(1:LOOPCOUNT)) delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 2\n            EXIT\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "data",
                            "executable-data",
                            "devonly",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n!T3:data,executable-data,devonly,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test3()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n        INTEGER,DIMENSION(1):: devtest\n\n        devtest(1) = 1\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel present(devtest(1:1))\n          devtest(1) = 0\n        !$acc end parallel\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n        !$acc enter data copyin(c(1:LOOPCOUNT))\n        !$acc parallel\n          !$acc loop\n          DO x = 1, LOOPCOUNT\n            c(x) = c(x) + a(x) + b(x)\n          END DO\n        !$acc end parallel\n        !$acc exit data delete(c(1:LOOPCOUNT))\n        !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 4\n            EXIT\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test3 = .FALSE.\n        ELSE\n          test3 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T3\n        LOGICAL :: test3\n#endif\n#ifndef T3\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test3()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 2\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "data",
                            "executable-data",
                            "devonly",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "exit_data_delete_no_lower_bound.F90": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:data,executable-data,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n        LOGICAL,DIMENSION(1):: has_device\n\n        has_device(1) = .TRUE.\n        !$acc enter data copyin(has_device(1:1))\n        !$acc parallel present(has_device(1:1))\n          has_device(1) = .FALSE.\n        !$acc end parallel\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n        !$acc data copyout(c(1:LOOPCOUNT)) present(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n        !$acc exit data delete(a(:LOOPCOUNT), b(:LOOPCOUNT))\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:data,executable-data,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test2()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n        LOGICAL,DIMENSION(1):: has_device\n\n        has_device(1) = .TRUE.\n        !$acc enter data copyin(has_device(1:1))\n        !$acc parallel present(has_device(1:1))\n          has_device(1) = .FALSE.\n        !$acc end parallel\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        IF (has_device(1) .eqv. .TRUE.) THEN\n          CALL RANDOM_NUMBER(a)\n          CALL RANDOM_NUMBER(b)\n          c = 0\n          \n          !$acc enter data copyin(c(1:LOOPCOUNT))\n          !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) present(c(1:LOOPCOUNT))\n            !$acc parallel\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                c(x) = a(x) + b(x)\n              END DO\n            !$acc end parallel\n          !$acc end data\n          !$acc exit data delete(c(:LOOPCOUNT))\n\n          DO x = 1, LOOPCOUNT\n            IF (abs(c(x)) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "exit_data_finalize.F90": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:data,executable-data,devonly,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n        INTEGER,DIMENSION(1) :: devtest\n\n        devtest(1) = 1\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel present(devtest(1:1))\n          devtest(1) = 0\n        !$acc end parallel\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n        !$acc enter data create(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n        !$acc parallel present(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n          !$acc loop\n          DO x = 1, LOOPCOUNT\n            c(x) = a(x) + b(x)\n          END DO\n        !$acc end parallel\n        !$acc exit data copyout(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n        IF (devtest(1) .eq. 1) THEN\n          DO x = 1, LOOPCOUNT\n            IF (abs(c(x)) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END IF\n        !$acc exit data copyout(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "data",
                            "executable-data",
                            "devonly",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:data,executable-data,devonly,construct-independent,V:2.5-2.7\n      LOGICAL FUNCTION test2()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n        INTEGER,DIMENSION(1) :: devtest\n\n        devtest(1) = 1\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel present(devtest(1:1))\n          devtest(1) = 0\n        !$acc end parallel\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n        !$acc enter data create(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n        !$acc parallel present(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n          !$acc loop\n          DO x = 1, LOOPCOUNT\n            c(x) = a(x) + b(x)\n          END DO\n        !$acc end parallel\n        !$acc exit data copyout(c(1:LOOPCOUNT)) delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) finalize\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "data",
                            "executable-data",
                            "devonly",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "id": 1,
            "init.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,init,nonvalidating,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: errors = 0\n\n        !$acc init\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "init",
                            "nonvalidating"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "init_device_num.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,construct-independent,internal-control-values,init,nonvalidating,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: device_num\n        INTEGER :: device_type\n        INTEGER :: errors = 0\n\n        device_num = acc_get_device_num(acc_get_device_type())\n        !$acc init device_num(device_num)\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "construct-independent",
                            "internal-control-values",
                            "init",
                            "nonvalidating"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "init_device_type.F90": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,construct-independent,internal-control-values,init,nonvalidating,V:2.5-3.2\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: errors = 0\n\n        !$acc init device_type(host)\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "construct-independent",
                            "internal-control-values",
                            "init",
                            "nonvalidating"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:runtime,construct-independent,internal-control-values,init,nonvalidating,V:2.5-3.2\n      LOGICAL FUNCTION test2()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: errors = 0\n\n        !$acc init device_type(multicore)\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "construct-independent",
                            "internal-control-values",
                            "init",
                            "nonvalidating"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n!T3:runtime,construct-independent,internal-control-values,init,nonvalidating,V:2.5-3.2\n      LOGICAL FUNCTION test3()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: errors = 0\n\n        !$acc init device_type(default)\n\n        IF (errors .eq. 0) THEN\n          test3 = .FALSE.\n        ELSE\n          test3 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T3\n        LOGICAL :: test3\n#endif\n#ifndef T3\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test3()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 2\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "construct-independent",
                            "internal-control-values",
                            "init",
                            "nonvalidating"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "init_device_type_num.F90": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,construct-independent,internal-control-values,init,nonvalidating,V:2.5-3.2\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: device_num\n        INTEGER :: device_type\n        INTEGER :: errors = 0\n\n        device_type = acc_get_device_type()\n        device_num = acc_get_device_num(device_type)\n        !$acc init device_type(host) device_num(device_num)\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "construct-independent",
                            "internal-control-values",
                            "init",
                            "nonvalidating"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:runtime,construct-independent,internal-control-values,init,nonvalidating,V:2.5-3.2\n      LOGICAL FUNCTION test2()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: device_num\n        INTEGER :: device_type\n        INTEGER :: errors = 0\n\n        device_type = acc_get_device_type()\n        device_num = acc_get_device_num(device_type)\n        !$acc init device_type(multicore) device_num(device_num)\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "construct-independent",
                            "internal-control-values",
                            "init",
                            "nonvalidating"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n!T3:runtime,construct-independent,internal-control-values,init,nonvalidating,V:2.5-3.2\n      LOGICAL FUNCTION test3()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: device_num\n        INTEGER :: device_type\n        INTEGER :: errors = 0\n\n        device_type = acc_get_device_type()\n        device_num = acc_get_device_num(device_type)\n        !$acc init device_type(default) device_num(device_num)\n\n        IF (errors .eq. 0) THEN\n          test3 = .FALSE.\n        ELSE\n          test3 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T3\n        LOGICAL :: test3\n#endif\n#ifndef T3\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test3()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 2\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "construct-independent",
                            "internal-control-values",
                            "init",
                            "nonvalidating"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "init_device_type_num_nvidia.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,construct-independent,internal-control-values,init,nonvalidating,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: device_num\n        INTEGER :: device_type\n        INTEGER :: errors = 0\n\n        device_type = acc_get_device_type()\n        device_num = acc_get_device_num(device_type)\n        !$acc init device_type(nvidia) device_num(device_num)\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "construct-independent",
                            "internal-control-values",
                            "init",
                            "nonvalidating"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "init_device_type_nvidia.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,construct-independent,internal-control-values,init,nonvalidating,V:2.5-3.2\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: errors = 0\n\n        !$acc init device_type(nvidia)\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "construct-independent",
                            "internal-control-values",
                            "init",
                            "nonvalidating"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_async.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:async,kernels,update,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, d, e, f, g !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        CALL RANDOM_NUMBER(d)\n        CALL RANDOM_NUMBER(e)\n        f = 0\n        g = 0\n        !$acc enter data create(g(1:LOOPCOUNT), c(1:LOOPCOUNT), f(1:LOOPCOUNT))\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), d(1:LOOPCOUNT), e(1:LOOPCOUNT))\n          !$acc kernels async(1)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end kernels\n          !$acc kernels async(2)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              f(x) = d(x) + e(x)\n            END DO\n          !$acc end kernels\n          !$acc kernels wait(1, 2) async(3)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              g(x) = c(x) + f(x)\n            END DO\n          !$acc end kernels\n        !$acc end data\n        !$acc wait(1, 2)\n        !$acc update host(c(1:LOOPCOUNT), f(1:LOOPCOUNT))\n        !$acc exit data copyout(g(1:LOOPCOUNT)) async(3)\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n            WRITE(*, *) x, \" a: \", c(x), \" = \", a(x), \" + \", b(x)\n          END IF\n          IF (abs(f(x) - (d(x) + e(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n            WRITE(*, *) x, \" b: \", f(x), \" = \", d(x), \" + \", e(x)\n          END IF\n        END DO\n        !$acc wait(3)\n        DO x = 1, LOOPCOUNT\n          IF (abs(g(x) - (c(x) + f(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n            WRITE(*, *) x, \" c: \", g(x), \" = \", c(x), \" + \", f(x)\n          END IF\n        END DO\n        !$acc exit data delete(c(1:LOOPCOUNT), f(1:LOOPCOUNT))\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "async",
                            "kernels",
                            "update"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_copy.F90": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:devonly,kernels,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n        INTEGER,DIMENSION(1):: devtest\n        devtest(1) = 1\n\n        !$acc enter data copyin(devtest(1:1))\n        !$acc kernels present(devtest)\n          devtest(1) = 0\n        !$acc end kernels\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 1\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n          !$acc kernels copy(c(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = c(x) + a(x) + b(x)\n            END DO\n          !$acc end kernels\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x) + 1)) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "kernels"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:devonly,kernels,V:2.0-2.7\n      LOGICAL FUNCTION test2()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n        INTEGER,DIMENSION(1):: devtest\n        devtest(1) = 1\n\n        !$acc enter data copyin(devtest(1:1))\n        !$acc kernels present(devtest)\n          devtest(1) = 0\n        !$acc end kernels\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        IF (devtest(1) .eq. 1) THEN\n          CALL RANDOM_NUMBER(a)\n          CALL RANDOM_NUMBER(b)\n          c = 1\n\n          !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n            !$acc kernels copy(c(1:LOOPCOUNT))\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                c(x) = c(x) + a(x) + b(x)\n              END DO\n            !$acc end kernels\n          !$acc end data\n\n          DO x = 1, LOOPCOUNT\n            IF (abs(c(x) - 1) .gt. PRECISION) THEN\n              IF ((a(x) + b(x)) .gt. PRECISION) THEN\n                errors = errors + 1\n              END IF\n            END IF\n          END DO\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "kernels"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n!T3:devonly,kernels,V:2.0-2.7\n      LOGICAL FUNCTION test3()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n        INTEGER,DIMENSION(1):: devtest\n        devtest(1) = 1\n\n        !$acc enter data copyin(devtest(1:1))\n        !$acc kernels present(devtest)\n          devtest(1) = 0\n        !$acc end kernels\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        IF (devtest(1) .eq. 1) THEN\n          CALL RANDOM_NUMBER(a)\n          CALL RANDOM_NUMBER(b)\n          c = 1\n\n          !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copy(c(1:LOOPCOUNT))\n            DO x = 1, LOOPCOUNT\n              c(x) = 0\n            END DO\n            !$acc kernels copy(c(1:LOOPCOUNT))\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                c(x) = c(x) + a(x) + b(x)\n              END DO\n            !$acc end kernels\n            DO x = 1, LOOPCOUNT\n              IF (abs(c(x)) .gt. PRECISION) THEN\n                errors = errors + 1\n              END IF\n            END DO\n          !$acc end data\n\n          DO x = 1, LOOPCOUNT\n            IF (abs(c(x) - (1 + a(x) + b(x))) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test3 = .FALSE.\n        ELSE\n          test3 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T3\n        LOGICAL :: test3\n#endif\n#ifndef T3\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test3()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 2\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "kernels"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_copyin.F90": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:devonly,kernels,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        INTEGER :: errors = 0\n        INTEGER,DIMENSION(1):: devtest\n        devtest(1) = 1\n\n        !$acc enter data copyin(devtest(1:1))\n        !$acc kernels\n          devtest(1) = 0\n        !$acc end kernels\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        b = 0\n\n        !$acc data copy(b(1:LOOPCOUNT))\n          !$acc kernels copyin(a(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              b(x) = b(x) + a(x)\n            END DO\n          !$acc end kernels\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(a(x) - b(x)) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "kernels"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:devonly,kernels,V:2.0-2.7\n      LOGICAL FUNCTION test2()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        INTEGER :: errors = 0\n        INTEGER,DIMENSION(1):: devtest\n        devtest(1) = 1\n\n        !$acc enter data copyin(devtest(1:1))\n        !$acc kernels\n          devtest(1) = 0\n        !$acc end kernels\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        IF (devtest(1) .eq. 1) THEN\n          CALL RANDOM_NUMBER(a)\n          b = 0\n          !$acc data copy(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            DO x = 1, LOOPCOUNT\n              a(x) = -1\n            END DO\n            !$acc kernels copyin(a(1:LOOPCOUNT))\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                b(x) = a(x)\n              END DO\n            !$acc end kernels\n            DO x = 1, LOOPCOUNT\n              IF (abs(a(x) + 1) .gt. PRECISION) THEN\n                errors = errors + 1\n              END IF\n            END DO\n          !$acc end data\n          DO x = 1, LOOPCOUNT\n            IF (abs(a(x) - b(x)) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "kernels"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n!T3:devonly,kernels,V:2.0-2.7\n      LOGICAL FUNCTION test3()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        INTEGER :: errors = 0\n        INTEGER,DIMENSION(1):: devtest\n        devtest(1) = 1\n\n        !$acc enter data copyin(devtest(1:1))\n        !$acc kernels\n          devtest(1) = 0\n        !$acc end kernels\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        IF (devtest(1) .eq. 1) THEN\n          CALL RANDOM_NUMBER(a)\n          b = 0\n\n          !$acc kernels copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              b(x) = a(x)\n            END DO\n          !$acc end kernels\n\n          DO x = 1, LOOPCOUNT\n            IF (abs(b(x)) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test3 = .FALSE.\n        ELSE\n          test3 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T3\n        LOGICAL :: test3\n#endif\n#ifndef T3\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test3()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 2\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "kernels"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_copyout.F90": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:devonly,kernels,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        INTEGER :: errors = 0\n        INTEGER,DIMENSION(1):: devtest\n        devtest(1) = 1\n\n        !$acc enter data copyin(devtest(1:1))\n        !$acc kernels present(devtest(1:1))\n          devtest(1) = 0\n        !$acc end kernels\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        b = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT))\n          !$acc kernels copyout(b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              b(x) = a(x)\n            END DO\n          !$acc end kernels\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(a(x) - b(x)) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "kernels"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:devonly,kernels,V:2.0-2.7\n      LOGICAL FUNCTION test2()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        INTEGER :: errors = 0\n        INTEGER,DIMENSION(1):: devtest\n        devtest(1) = 1\n\n        !$acc enter data copyin(devtest(1:1))\n        !$acc kernels present(devtest(1:1))\n          devtest(1) = 0\n        !$acc end kernels\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        IF (devtest(1) .eq. 1) THEN\n          CALL RANDOM_NUMBER(a)\n          b = 0\n          \n          !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            !$acc kernels copyout(b(1:LOOPCOUNT))\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                b(x) = a(x)\n              END DO\n            !$acc end kernels\n          !$acc end data\n          \n          DO x = 1, LOOPCOUNT\n            IF (abs(b(x)) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "kernels"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_create.F90": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:devonly,kernels,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n        INTEGER,DIMENSION(1):: devtest\n        devtest(1) = 1\n\n        !$acc enter data copyin(devtest(1:1))\n        !$acc kernels present(devtest(1:1))\n          devtest(1) = 0\n        !$acc end kernels\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        IF (devtest(1) .eq. 1) THEN\n          CALL RANDOM_NUMBER(a)\n          b = 0\n          c = 0\n          !$acc data copyin(a(1:LOOPCOUNT))\n            !$acc kernels create(b(1:LOOPCOUNT))\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                b(x) = a(x)\n              END DO\n            !$acc end kernels\n          !$acc end data\n          DO x = 1, LOOPCOUNT\n            IF (abs(b(x)) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "kernels"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:devonly,kernels,V:2.0-2.7\n      LOGICAL FUNCTION test2()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n        INTEGER,DIMENSION(1):: devtest\n        devtest(1) = 1\n\n        !$acc enter data copyin(devtest(1:1))\n        !$acc kernels present(devtest(1:1))\n          devtest(1) = 0\n        !$acc end kernels\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        b = 0\n        !$acc data copyin(a(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT))\n          !$acc kernels create(b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              b(x) = a(x)\n            END DO\n          !$acc end kernels\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          IF (abs(b(x) - a(x)) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "kernels"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n!T3:devonly,kernels,V:2.0-2.7\n      LOGICAL FUNCTION test3()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n        INTEGER,DIMENSION(1):: devtest\n        devtest(1) = 1\n\n        !$acc enter data copyin(devtest(1:1))\n        !$acc kernels present(devtest(1:1))\n          devtest(1) = 0\n        !$acc end kernels\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        b = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n          !$acc kernels create(b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              b(x) = a(x)\n            END DO\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = b(x)\n            END DO\n          !$acc end kernels\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - a(x)) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test3 = .FALSE.\n        ELSE\n          test3 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T3\n        LOGICAL :: test3\n#endif\n#ifndef T3\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test3()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 2\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "kernels"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_default_copy.F90": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:devonly,kernels,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n        LOGICAL,DIMENSION(1):: devtest\n        devtest(1) = .TRUE.\n\n        !$acc enter data copyin(devtest(1:1))\n        !$acc kernels\n          devtest(1) = .FALSE.\n        !$acc end kernels\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n          !$acc kernels\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = c(x) + a(x) + b(x)\n            END DO\n          !$acc end kernels\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "kernels"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:devonly,kernels,V:2.0-2.7\n      LOGICAL FUNCTION test2()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n        LOGICAL,DIMENSION(1):: devtest\n        devtest(1) = .TRUE.\n\n        !$acc enter data copyin(devtest(1:1))\n        !$acc kernels\n          devtest(1) = .FALSE.\n        !$acc end kernels\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        IF (devtest(1)) THEN\n          CALL RANDOM_NUMBER(a)\n          CALL RANDOM_NUMBER(b)\n          c = 1\n\n          !$acc enter data copyin(c(1:LOOPCOUNT))\n          c = 0\n          !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            !$acc kernels\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                c(x) = c(x) + a(x) + b(x)\n              END DO\n            !$acc end kernels\n          !$acc end data\n          DO x = 1, LOOPCOUNT\n            IF (abs(c(x)) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n          !$acc exit data copyout(c(1:LOOPCOUNT))\n          DO x = 1, LOOPCOUNT\n            IF (abs(c(x) - (a(x) + b(x) + 1)) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "kernels"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_default_present.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,default,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        b = 0\n\n        !$acc enter data copyin(a(1:LOOPCOUNT)) create(b(1:LOOPCOUNT))\n        !$acc kernels default(present)\n          !$acc loop\n          DO x = 1, LOOPCOUNT\n            b(x) = a(x)\n          END DO\n        !$acc end kernels\n        !$acc exit data delete(a(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT)) \n        DO x = 1, LOOPCOUNT\n          IF (abs(a(x) - b(x)) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "default"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_if.F90": {
                "num tests": 4,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:devonly,kernels,if,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        INTEGER :: errors = 0\n        LOGICAL,DIMENSION(1):: devtest\n        LOGICAL:: data_on_device = .FALSE.\n        devtest(1) = .TRUE.\n\n        !$acc enter data copyin(devtest(1:1))\n        !$acc kernels present(devtest(1:1))\n          devtest(1) = .FALSE.\n        !$acc end kernels\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        b = 0\n\n        !$acc kernels if(data_on_device) present(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n          !$acc loop\n          DO x = 1, LOOPCOUNT\n            b(x) = a(x)\n          END DO\n        !$acc end kernels\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(a(x) - b(x)) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "kernels",
                            "if"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:devonly,kernels,if,V:2.0-2.7\n      LOGICAL FUNCTION test2()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        INTEGER :: errors = 0\n        LOGICAL,DIMENSION(1):: devtest\n        LOGICAL:: data_on_device = .FALSE.\n        devtest(1) = .TRUE.\n\n        !$acc enter data copyin(devtest(1:1))\n        !$acc kernels present(devtest(1:1))\n          devtest(1) = .FALSE.\n        !$acc end kernels\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        b = 0\n\n        data_on_device = .TRUE.\n        !$acc enter data copyin(a(1:LOOPCOUNT)) create(b(1:LOOPCOUNT))\n        !$acc kernels if(data_on_device) present(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n          !$acc loop\n          DO x = 1, LOOPCOUNT\n            b(x) = a(x)\n          END DO\n        !$acc end kernels\n        !$acc exit data copyout(b(1:LOOPCOUNT)) delete(a(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(b(x) - a(x)) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "kernels",
                            "if"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n!T3:devonly,kernels,if,V:2.0-2.7\n      LOGICAL FUNCTION test3()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        INTEGER :: errors = 0\n        LOGICAL,DIMENSION(1):: devtest\n        LOGICAL:: data_on_device = .FALSE.\n        devtest(1) = .TRUE.\n\n        !$acc enter data copyin(devtest(1:1))\n        !$acc kernels present(devtest(1:1))\n          devtest(1) = .FALSE.\n        !$acc end kernels\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        IF (devtest(1) .eqv. .TRUE.) THEN\n          CALL RANDOM_NUMBER(a)\n          b = 0\n\n          !$acc enter data copyin(a(1:LOOPCOUNT)) create(b(1:LOOPCOUNT))\n          DO x = 1, LOOPCOUNT\n            a(x) = -1\n          END DO\n\n          !$acc kernels if(data_on_device) present(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              b(x) = a(x)\n            END DO\n          !$acc end kernels\n\n          DO x = 1, LOOPCOUNT\n            IF (abs(a(x) + 1) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n            IF (abs(b(x)) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n\n          !$acc exit data copyout(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n          data_on_device = .FALSE.\n\n          DO x = 1, LOOPCOUNT\n            IF (abs(a(x) - b(x)) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test3 = .FALSE.\n        ELSE\n          test3 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T3\n        LOGICAL :: test3\n#endif\n#ifndef T3\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test3()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 2\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "kernels",
                            "if"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "4": {
                        "content": "#ifndef T4\n!T4:devonly,kernels,if,V:2.0-2.7\n      LOGICAL FUNCTION test4()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        INTEGER :: errors = 0\n        LOGICAL,DIMENSION(1):: devtest\n        LOGICAL:: data_on_device = .FALSE.\n        devtest(1) = .TRUE.\n\n        !$acc enter data copyin(devtest(1:1))\n        !$acc kernels present(devtest(1:1))\n          devtest(1) = .FALSE.\n        !$acc end kernels\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        IF (devtest(1) .eq. 1) THEN\n          CALL RANDOM_NUMBER(a)\n          b = 0\n\n          !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n          !$acc kernels if(data_on_device) present(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              b(x) = a(x)\n            END DO\n          !$acc end kernels\n\n          DO x = 1, LOOPCOUNT\n            IF (abs(a(x) - b(x)) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n\n          !$acc exit data copyout(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n\n          DO x = 1, LOOPCOUNT\n            IF (abs(b(x)) .gt. PRECISION) THEN\n              IF (abs(b(x) - a(x)) .gt. PRECISION) THEN\n                errors = errors + 1\n              END IF\n            END IF\n          END DO\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test4 = .FALSE.\n        ELSE\n          test4 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T4\n        LOGICAL :: test4\n#endif\n#ifndef T4\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test4()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 3\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "kernels",
                            "if"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, _0, _1, _2, _3, _4, _5, _6, _7, _8, _9 !Iterators\n        REAL(8),DIMENSION(1024):: a, b !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        b = 0\n\n        !$acc data copyin(a(1:1024)) copyout(b(1:1024))\n          !$acc kernels\n            !$acc loop\n            DO _0 = 0, 1\n              !$acc loop\n              DO _1 = 0, 1\n                !$acc loop\n                DO _2 = 0, 1\n                  !$acc loop\n                  DO _3 = 0, 1\n                    !$acc loop\n                    DO _4 = 0, 1\n                      !$acc loop\n                      DO _5 = 0, 1\n                        !$acc loop\n                        DO _6 = 0, 1\n                          !$acc loop\n                          DO _7 = 0, 1\n                            !$acc loop\n                            DO _8 = 0, 1\n                              !$acc loop\n                              DO _9 = 1, 2\n                                b(_0*512+_1*256+_2*128+_3*64+_4*32+_5*16+_6*8+_7*4+_8*2+_9)=a(_0*512+_1*256+_2*128+_3*64+_4*32+_5*16+_6*8+_7*4+_8*2+_9)\n                              END DO\n                            END DO\n                          END DO\n                        END DO\n                      END DO\n                    END DO\n                  END DO\n                END DO\n              END DO\n            END DO\n          !$acc end kernels\n        !$acc end data\n\n        DO x = 1, 1024\n          IF (abs(a(x) - b(x)) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_independent.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        b = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(b(1:LOOPCOUNT))\n          !$acc kernels loop independent\n          DO x = 1, LOOPCOUNT\n            b(x) = b(x) + a(x)\n          END DO\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(a(x) - b(x)) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_add_general.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        REAL(8) :: total\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        total = 0\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copy(total)\n          !$acc parallel loop reduction(+:total)\n          DO x = 1, LOOPCOUNT\n            total = total + a(x) + b(x)\n          END DO\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          total = total - (a(x) + b(x))\n        END DO\n        IF (abs(total) .gt. LOOPCOUNT * PRECISION) THEN\n          WRITE(*, *) total\n          errors = 1\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_add_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,private,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(10*LOOPCOUNT):: a, b, c, d !Data\n        REAL(8) :: avg\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        avg = 0\n        !$acc data copyin(a(1:10*LOOPCOUNT), b(1:10*LOOPCOUNT)) create(c(1:10*LOOPCOUNT)) copyout(d(1:10*LOOPCOUNT))\n          !$acc kernels loop gang private(avg)\n          DO x = 0, 9\n            avg = 0\n            !$acc loop worker reduction(+:avg)\n            DO y = 1, LOOPCOUNT\n              avg = avg + a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y)\n              c(x * LOOPCOUNT + y) = a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y)\n            END DO\n            avg = avg / LOOPCOUNT\n            !$acc loop worker\n            DO y = 1, LOOPCOUNT\n              d(x * LOOPCOUNT + y) = c(x * LOOPCOUNT + y) / avg\n            END DO\n          END DO\n        !$acc end data\n        DO x = 0, 9\n          avg = 0\n          DO y = 1, LOOPCOUNT\n            avg = avg + a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y)\n          END DO\n          avg = avg / LOOPCOUNT\n          DO y = 1, LOOPCOUNT\n            IF (abs(d(x * LOOPCOUNT + y) - ((a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y)) / avg)) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_add_vector_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,private,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(10*LOOPCOUNT):: a, b !Data\n        REAL(8),DIMENSION(10) :: c\n        REAL(8) :: temp\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n\n        !$acc data copyin(a(1:10*LOOPCOUNT), b(1:10*LOOPCOUNT)) copyout(c(1:10))\n          !$acc kernels loop private(temp)\n          DO x = 0, 9\n            temp = 0.0\n            !$acc loop vector reduction(+:temp)\n            DO y = 1, LOOPCOUNT\n              temp = temp + a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y)\n            END DO\n            c(x + 1) = temp\n          END DO\n        !$acc end data\n\n        DO x = 0, 9\n          temp = 0\n          DO y = 1, LOOPCOUNT\n            temp = temp + a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y)\n          END DO\n          IF (abs(temp - c(x + 1)) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_and_general.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT):: a !Data\n        LOGICAL :: results = .TRUE.\n        LOGICAL :: host_results = .TRUE.\n        REAL(8) :: false_margin\n        INTEGER :: errors = 0\n        false_margin = exp(log(.5) / LOOPCOUNT)\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          IF (randoms(x) .lt. false_margin) THEN\n            a(x) = .TRUE.\n          ELSE\n            a(x) = .FALSE.\n          END IF\n        END DO\n\n        !$acc data copyin(a(1:LOOPCOUNT))\n          !$acc kernels loop reduction(.and.:results)\n          DO x = 1, LOOPCOUNT\n            results = results .and. a(x)\n          END DO\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          host_results = host_results .and. a(x)\n        END DO\n        IF (host_results .neqv. results) THEN\n          errors = 1\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_and_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        LOGICAL,DIMENSION(10*LOOPCOUNT):: a, a_copy !Data\n        LOGICAL,DIMENSION(10) :: results, has_false\n        LOGICAL :: host_results = .TRUE.\n        LOGICAL :: temp = .TRUE.\n        REAL(8),DIMENSION(10*LOOPCOUNT):: randoms\n        REAL(8) :: false_margin = exp(log(.5) / LOOPCOUNT)\n        INTEGER :: errors = 0\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, 10\n          results(x) = .TRUE.\n          has_false(x) = .FALSE.\n        END DO\n        DO x = 1, 10*LOOPCOUNT\n          IF (randoms(x) .lt. false_margin) THEN\n            a(x) = .TRUE.\n            a_copy(x) = .TRUE.\n          ELSE\n            a(x) = .FALSE.\n            a_copy(x) = .FALSE.\n            has_false(x / LOOPCOUNT) = .TRUE.\n          END IF\n        END DO\n\n        !$acc data copy(a(1:10*LOOPCOUNT), results(1:10))\n          !$acc kernels loop gang\n          DO x = 0, 9\n            temp = .TRUE.\n            !$acc loop worker reduction(.AND.:temp)\n            DO y = 1, LOOPCOUNT\n              temp = temp .AND. a(x * LOOPCOUNT + y)\n            END DO\n            results(x + 1) = temp\n            !$acc loop worker\n            DO y = 1, LOOPCOUNT\n              IF (temp .eqv. .TRUE.) THEN\n                IF (a(x * LOOPCOUNT + y) .eqv. .TRUE.) THEN\n                  a(x * LOOPCOUNT + y) = .FALSE.\n                ELSE\n                  a(x * LOOPCOUNT + y) = .TRUE.\n                END IF\n              END IF\n            END DO\n          END DO\n        !$acc end data\n        DO x = 0, 9\n          temp = .TRUE.\n          DO y = 1, LOOPCOUNT\n            temp = temp .AND. a_copy(x * LOOPCOUNT + y)\n          END DO\n          IF (temp .neqv. results(x + 1)) THEN\n            errors = errors + 1\n          END IF\n          DO y = 1, LOOPCOUNT\n            IF (temp .eqv. .TRUE.) THEN\n              IF (a(x * LOOPCOUNT + y) .eqv. a_copy(x * LOOPCOUNT + y)) THEN\n                errors = errors + 1\n              END IF\n            ELSE\n              IF (a(x * LOOPCOUNT + y) .neqv. a_copy(x * LOOPCOUNT + y)) THEN\n                errors = errors + 1\n              END IF\n            END IF\n          END DO\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_and_vector_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,private,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        LOGICAL,DIMENSION(10*LOOPCOUNT):: a !Data\n        LOGICAL,DIMENSION(10):: b\n        LOGICAL,DIMENSION(10):: has_false\n        LOGICAL :: temp\n        REAL(8) :: false_margin\n        REAL(8),DIMENSION(10*LOOPCOUNT) :: randoms\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        false_margin = exp(log(.5) / LOOPCOUNT)\n        DO x = 1, 10\n          has_false(x) = .FALSE.\n          b(x) = .TRUE.\n        END DO\n\n        DO x = 0, 9\n          DO y = 1, LOOPCOUNT\n            IF (randoms(x * LOOPCOUNT + y) .lt. false_margin) THEN\n              a(x * LOOPCOUNT + y) = .TRUE.\n            ELSE\n              a(x * LOOPCOUNT + y) = .FALSE.\n              has_false(x + 1) = .TRUE.\n            END IF\n          END DO\n        END DO\n\n        !$acc data copyin(a(1:10*LOOPCOUNT)) copy(b(1:10))\n          !$acc kernels loop private(temp)\n          DO x = 0, 9\n            temp = .TRUE.\n            !$acc loop vector reduction(.AND.:temp)\n            DO y = 1, LOOPCOUNT\n              temp = temp .AND. a(x * LOOPCOUNT + y)\n            END DO\n            b(x + 1) = temp\n          END DO\n        !$acc end data\n\n        DO x = 0, 9\n          temp = .FALSE.\n          DO y = 1, LOOPCOUNT\n            IF (a(x * LOOPCOUNT + y) .eqv. .FALSE.) THEN\n              temp = .TRUE.\n            END IF\n          END DO\n          IF (temp .neqv. has_false(x + 1)) THEN\n            errors = 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_bitand_general.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y, z !Iterators\n        INTEGER,DIMENSION(LOOPCOUNT):: a !Data\n        INTEGER :: b\n        REAL(8),DIMENSION(16 * LOOPCOUNT):: randoms\n        REAL(8) :: false_margin\n        INTEGER :: errors = 0\n        INTEGER :: temp = 1\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        false_margin = exp(log(.5)/n)\n        DO x = 1, LOOPCOUNT\n          DO y = 0, 15\n            IF (randoms(y * LOOPCOUNT + x) .lt. false_margin) THEN\n              temp = 1\n              DO z = 0, y\n                temp = temp * 2\n              END DO\n              a(x) = a(x) + temp\n            END IF\n          END DO\n        END DO\n\n        b = a(1)\n\n        !$acc data copyin(a(1:LOOPCOUNT))\n          !$acc kernels loop reduction(iand:b)\n          DO x = 1, LOOPCOUNT\n            b = iand(b, a(x))\n          END DO\n        !$acc end data\n\n        temp = a(1)\n        DO x = 2, LOOPCOUNT\n          temp = iand(a(x), temp)\n        END DO\n        IF (temp .ne. b) THEN\n          WRITE(*, *) temp\n          WRITE(*, *) b\n          errors = 1\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_bitand_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,private,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y, z !Iterators\n        INTEGER,DIMENSION(10*LOOPCOUNT):: a, b, b_copy !Data\n        REAL(8),DIMENSION(10*LOOPCOUNT):: randoms2\n        INTEGER,DIMENSION(10) :: c\n        REAL(8) :: false_margin\n        REAL(8),DIMENSION(160*LOOPCOUNT)::randoms\n        INTEGER :: errors = 0\n        INTEGER :: temp\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        CALL RANDOM_NUMBER(randoms2)\n        b = FLOOR(10000 * randoms2)\n        b_copy = b\n        false_margin = exp(log(.5)/LOOPCOUNT)\n        DO x = 1, 10 * LOOPCOUNT\n          DO y = 1, 16\n            IF (randoms((y - 1) * 10 * LOOPCOUNT + x) < false_margin) THEN\n              temp = 1\n              DO z = 1, y\n                temp = temp * 2\n              END DO\n              a(x) = a(x) + temp\n            END IF\n          END DO\n        END DO\n\n        DO x = 1, 10\n         c(x) = a((x - 1) * LOOPCOUNT + x)\n        END DO\n\n        !$acc data copyin(a(1:10*LOOPCOUNT)) copy(b(1:10*LOOPCOUNT), c(1:10))\n          !$acc kernels loop gang private(temp)\n          DO x = 1, 10\n            temp = a((x - 1) * LOOPCOUNT + 1)\n            !$acc loop worker reduction(iand:temp)\n            DO y = 2, LOOPCOUNT\n              temp = iand(temp, a((x - 1) * LOOPCOUNT + y))\n            END DO\n            c(x) = temp\n            !$acc loop worker\n            DO y = 1, LOOPCOUNT\n              b((x - 1) * LOOPCOUNT + y) = b((x - 1) * LOOPCOUNT + y) + c(x)\n            END DO\n          END DO\n        !$acc end data\n\n       DO x = 1, 10\n         temp = a((x - 1) * LOOPCOUNT + 1)\n         DO y = 2, LOOPCOUNT\n           temp = iand(temp, a((x - 1) * LOOPCOUNT + y))\n         END DO\n         IF (temp .ne. c(x)) THEN\n           errors = errors + 1\n         END IF\n         DO y = 1, LOOPCOUNT\n           IF (b((x - 1) * LOOPCOUNT + y) .ne. b_copy((x - 1) * LOOPCOUNT + y) + temp) THEN\n             errors = errors + 1\n           END IF\n         END DO\n       END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_bitand_vector_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,private,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y, z, i !Iterators\n        INTEGER,DIMENSION(10*LOOPCOUNT):: a !Data\n        INTEGER,DIMENSION(10):: b\n        INTEGER :: c\n        REAL(8),DIMENSION(160*LOOPCOUNT):: random\n        REAL(8) :: false_margin\n        INTEGER :: errors = 0\n        INTEGER :: temp\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(random)\n        false_margin = exp(log(.5) / n)\n        DO x = 0, 9\n          DO y = 1, LOOPCOUNT\n            DO z = 1, 16\n              IF (random(x * 16 * LOOPCOUNT + (y - 1) * 16 + z - 1) < false_margin) THEN\n                temp = 1\n                DO i = 1, z\n                  temp = temp * 2\n                END DO\n                a(x * LOOPCOUNT + y) = a(x * LOOPCOUNT + y) + temp\n              END IF\n            END DO\n          END DO\n        END DO\n\n        !$acc data copyin(a(1:10*LOOPCOUNT)), copy(b(1:10))\n          !$acc kernels loop private(c)\n          DO x = 0, 9\n            c = a(x * LOOPCOUNT + 1)\n            !$acc loop vector reduction(iand:c)\n            DO y = 1, LOOPCOUNT\n              c = iand(c, a(x * LOOPCOUNT + y))\n            END DO\n            b(x + 1) = c\n          END DO\n        !$acc end data\n\n        DO x = 0, 9\n          temp = a(x * LOOPCOUNT + 1)\n          DO y = 2, LOOPCOUNT\n            temp = iand(temp, a(x * LOOPCOUNT + y))\n          END DO\n          IF (b(x + 1) .ne. temp) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_bitor_general.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y, z !Iterators\n        INTEGER,DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8) :: false_margin\n        REAL(8),DIMENSION(16*LOOPCOUNT):: random\n        INTEGER :: errors = 0\n        INTEGER :: temp\n        INTEGER :: b\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(random)\n        false_margin = exp(log(.5)/n)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 16\n            IF (random((y - 1) * LOOPCOUNT + x) < false_margin) THEN\n              temp = 1\n              DO z = 1, y\n                temp = temp * 2\n              END DO\n              a(x) = a(x) + temp\n            END IF\n          END DO\n        END DO\n        b = a(1)\n        !$acc data copyin(a(1:LOOPCOUNT))\n          !$acc kernels loop reduction(ior:b)\n          DO x = 2, LOOPCOUNT\n            b = ior(b, a(x))\n          END DO\n        !$acc end data\n        temp = a(1)\n        DO x = 2, LOOPCOUNT\n          temp = ior(temp, a(x))\n        END DO\n        IF (temp .ne. b) THEN\n          errors = errors + 1\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_bitor_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,private,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y, z, i !Iterators\n        INTEGER,DIMENSION(10*LOOPCOUNT):: a, b, b_copy !Data\n        REAL(8),DIMENSION(10*LOOPCOUNT):: randoms2\n        INTEGER,DIMENSION(10) :: c\n        REAL(8),DIMENSION(160*LOOPCOUNT):: randoms\n        REAL(8) :: false_margin\n        INTEGER :: errors = 0\n        INTEGER :: temp\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        CALL RANDOM_NUMBER(randoms2)\n        false_margin = exp(log(.5)/n)\n        b = FLOOR(6*randoms2)\n        b_copy = b\n        DO x = 0, 9\n          DO y = 1, LOOPCOUNT\n            DO z = 1, 16\n              IF (randoms(x * 16 * LOOPCOUNT + y * 16 + z - 1) .gt. false_margin) THEN\n                temp = 1\n                DO i = 1, z\n                  temp = temp * 2\n                END DO\n                a(x * LOOPCOUNT + y) = a(x * LOOPCOUNT + y) + temp\n              END IF\n            END DO\n          END DO\n        END DO\n\n        !$acc data copyin(a(1:10*LOOPCOUNT)) copy(b(1:10*LOOPCOUNT), c(1:10))\n          !$acc kernels loop gang private(temp)\n          DO x = 0, 9\n            temp = 0\n            !$acc loop worker reduction(ior:temp)\n            DO y = 1, LOOPCOUNT\n              temp = ior(temp, a(x * LOOPCOUNT + y))\n            END DO\n            c(x + 1) = temp\n            !$acc loop worker\n            DO y = 1, LOOPCOUNT\n              b(x * LOOPCOUNT + y) = b(x * LOOPCOUNT + y) + c(x + 1)\n            END DO\n          END DO\n        !$acc end data\n\n        DO x = 0, 9\n          temp = 0\n          DO y = 1, LOOPCOUNT\n            temp = ior(temp, a(x * LOOPCOUNT + y))\n          END DO\n          IF (temp .ne. c(x + 1)) THEN\n            errors = errors + 1\n          END IF\n          DO y = 1, LOOPCOUNT\n            IF (b(x * LOOPCOUNT + y) .ne. b_copy(x * LOOPCOUNT + y) + c(x + 1)) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_bitor_vector_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,private,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y, z !Iterators\n        INTEGER,DIMENSION(10 * LOOPCOUNT):: a !Data\n        INTEGER,DIMENSION(10) :: b\n        REAL(8) :: false_margin\n        REAL(8),DIMENSION(160 * LOOPCOUNT) :: randoms\n        INTEGER :: errors = 0\n        INTEGER :: temp\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        false_margin = exp(log(.5) / n)\n        DO x = 1, 10 * LOOPCOUNT\n          DO y = 1, 16\n            IF (randoms(y * 10 * LOOPCOUNT + y - 1) .gt. false_margin) THEN\n              temp = 1\n              DO z = 1, y\n                temp = temp * 2\n              END DO\n              a(x) = a(x) + temp\n            END IF\n          END DO\n        END DO\n\n        !$acc data copyin(a(1:10*LOOPCOUNT)) copy(b(1:10))\n          !$acc kernels loop private(temp)\n          DO x = 0, 9\n            temp = 0\n            !$acc loop vector reduction(ior:temp)\n            DO y = 1, LOOPCOUNT\n              temp = ior(temp, a(x * LOOPCOUNT + y))\n            END DO\n            b(x + 1) = temp\n          END DO\n        !$acc end data\n\n        DO x = 0, 9\n          temp = 0\n          DO y = 1, LOOPCOUNT\n            temp = ior(temp, a(x * LOOPCOUNT + y))\n          END DO\n          IF (temp .ne. b(x + 1)) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_bitxor_general.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        INTEGER,DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: randoms\n        INTEGER :: errors = 0\n        INTEGER :: b = 0\n        INTEGER :: temp = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        a = FLOOR(randoms*1000000)\n\n        !$acc data copyin(a(1:LOOPCOUNT))\n          !$acc kernels loop reduction(ieor:b)\n          DO x = 1, LOOPCOUNT\n            b = ieor(b, a(x))\n          END DO\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          temp = ieor(temp, a(x))\n        END DO\n        IF (temp .ne. b) THEN\n          errors = errors + 1\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_bitxor_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,private,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        INTEGER,DIMENSION(10*LOOPCOUNT):: a, b, b_copy !Data\n        REAL(8),DIMENSION(10*LOOPCOUNT):: randoms, randoms2\n        INTEGER,DIMENSION(10):: c\n        REAL*8 :: RAND\n        INTEGER :: errors = 0\n        INTEGER :: temp\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        a = FLOOR(randoms*1000000)\n        CALL RANDOM_NUMBER(randoms2)\n        b = FLOOR(randoms2*1000000)\n        b_copy = b\n        c = 0\n\n        !$acc data copyin(a(1:10*LOOPCOUNT)) copy(b(1:10*LOOPCOUNT), c(1:10))\n          !$acc kernels loop gang private(temp)\n          DO x = 0, 9\n            temp = 0\n            !$acc loop worker reduction(ieor:temp)\n            DO y = 1, LOOPCOUNT\n              temp = ieor(temp, a(x * LOOPCOUNT + y))\n            END DO\n            c(x + 1) = temp\n            !$acc loop worker\n            DO y = 1, LOOPCOUNT\n              b(x * LOOPCOUNT + y) = b(x * LOOPCOUNT + y) + c(x + 1)\n            END DO\n          END DO\n        !$acc end data\n\n        DO x = 0, 9\n          temp = 0\n          DO y = 1, LOOPCOUNT\n            temp = ieor(temp, a(x * LOOPCOUNT + y))\n          END DO\n          IF (temp .ne. c(x + 1)) THEN\n            errors = errors + 1\n          END IF\n          DO y = 1, LOOPCOUNT\n            IF (b(x * LOOPCOUNT + y) .ne. b_copy(x * LOOPCOUNT + y) + c(x + 1)) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_bitxor_vector_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,private,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        INTEGER,DIMENSION(10*LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(10*LOOPCOUNT):: randoms\n        INTEGER,DIMENSION(10):: b\n        INTEGER :: errors = 0\n        INTEGER :: temp\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        a = FLOOR(randoms*1000000)\n\n        !$acc data copyin(a(1:10*LOOPCOUNT)) copy(b(1:10))\n          !$acc kernels loop gang private(temp)\n          DO x = 0, 9\n            temp = 0\n            !$acc loop vector reduction(ieor:temp)\n            DO y = 1, LOOPCOUNT\n              temp = ieor(temp, a(x * LOOPCOUNT + y))\n            END DO\n            b(x + 1) = temp\n          END DO\n        !$acc end data\n\n        DO x = 0, 9\n          temp = 0\n          DO y = 1, LOOPCOUNT\n            temp = ieor(temp, a(x * LOOPCOUNT + y))\n          END DO\n          IF (temp .ne. b(x + 1)) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_max_general.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        REAL(8) :: maximum, temp\n        INTEGER :: errors = 0\n\n        !Initilization\n        maximum = 0\n        temp = 0\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n          !$acc kernels loop reduction(max:maximum)\n          DO x = 1, LOOPCOUNT\n            maximum = max(maximum, a(x) * b(x))\n          END DO\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          temp = max(temp, a(x) * b(x))\n        END DO\n        IF (abs(temp - maximum) .gt. PRECISION) THEN\n          errors = errors + 1\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_max_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,private,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(10 * LOOPCOUNT):: a, b, c !Data\n        REAL(8),DIMENSION(10):: maximum\n        REAL(8) :: temp\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc data copyin(a(1:10*LOOPCOUNT), b(1:10*LOOPCOUNT)) copy(c(1:10*LOOPCOUNT))\n          !$acc kernels loop gang private(temp)\n          DO x = 0, 9\n            temp = 0\n            !$acc loop worker reduction(max:temp)\n            DO y = 1, LOOPCOUNT\n              temp = max(temp, a(x * LOOPCOUNT + y) * b(x * LOOPCOUNT + y))\n            END DO\n            maximum(x + 1) = temp\n            !$acc loop worker\n            DO y = 1, LOOPCOUNT\n              c(x * LOOPCOUNT + y) = (a(x * LOOPCOUNT + y) * b(x * LOOPCOUNT + y)) / maximum(x + 1)\n            END DO\n          END DO\n        !$acc end data\n\n        DO x = 0, 9\n          DO y = 1, LOOPCOUNT\n            IF (a(x * LOOPCOUNT + y) * b(x * LOOPCOUNT + y) - maximum(x + 1) .gt. PRECISION) THEN\n              errors = errors + 1\n            ELSE IF ((c(x * LOOPCOUNT + y) - 1) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_max_vector_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,private,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(10 * LOOPCOUNT):: a, b !Data\n        REAL(8),DIMENSION(10):: maximum\n        INTEGER :: errors = 0\n        REAL(8) :: temp\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        maximum = 0\n\n        !$acc data copyin(a(1:10*LOOPCOUNT), b(1:10*LOOPCOUNT)) copy(maximum(1:10))\n          !$acc kernels loop private(temp)\n          DO x = 0, 9\n            temp = 0\n            !$acc loop vector reduction(max:temp)\n            DO y = 1, LOOPCOUNT\n              temp = max(temp, a(x * LOOPCOUNT + y) * b(x * LOOPCOUNT + y))\n            END DO\n            maximum(x + 1) = temp\n          END DO\n        !$acc end data\n\n        DO x = 0, 9\n          temp = 0\n          DO y = 1, LOOPCOUNT\n            temp = max(temp, a(x * LOOPCOUNT + y) * b(x * LOOPCOUNT + y))\n          END DO\n          IF (abs(temp - maximum(x + 1)) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_min_general.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        REAL(8):: minimum = 1000\n        REAL(8):: temp = 1000\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n          !$acc kernels loop reduction(min:minimum)\n          DO x = 1, LOOPCOUNT\n            minimum = min(minimum, a(x) * b(x))\n          END DO\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          temp = min(temp, a(x) * b(x))\n        END DO\n        IF (abs(temp - minimum) .gt. PRECISION) THEN\n          errors = errors + 1\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_min_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,private,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(10 * LOOPCOUNT):: a, b, c !Data\n        REAL(8),DIMENSION(10):: minimum\n        REAL(8):: temp\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        a = a + 1\n        b = b + 1\n\n        !$acc data copyin(a(1:10*LOOPCOUNT), b(1:10*LOOPCOUNT)) copy(c(1:10*LOOPCOUNT)) copy(minimum(1:10))\n          !$acc kernels loop gang independent private(temp)\n          DO x = 0, 9\n            temp = 1000\n            !$acc loop worker independent reduction(min:temp)\n            DO y = 1, LOOPCOUNT\n              temp = min(temp, a(x * LOOPCOUNT + y) * b(x * LOOPCOUNT + y))\n            END DO\n            minimum(x + 1) = temp\n            !$acc loop independent\n            DO y = 1, LOOPCOUNT\n              c(x * LOOPCOUNT + y) = (a(x * LOOPCOUNT + y) * b(x * LOOPCOUNT + y)) / minimum(x + 1)\n            END DO\n          END DO\n        !$acc end data\n\n        DO x = 0, 9\n          temp = 1000\n          DO y = 1, LOOPCOUNT\n            temp = min(temp, a(x * LOOPCOUNT + y) * b(x * LOOPCOUNT + y))\n          END DO\n          IF (abs(temp - minimum(x + 1)) .gt. PRECISION) THEN\n            errors = errors + 1\n            WRITE(*, *) minimum(x + 1)\n          END IF\n          DO y = 1, LOOPCOUNT\n            IF (abs(c(x * LOOPCOUNT + y) - (a(x * LOOPCOUNT + y) * b(x * LOOPCOUNT + y) / temp)) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_min_vector_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,private,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y!Iterators\n        REAL(8),DIMENSION(10*LOOPCOUNT):: a, b !Data\n        REAL(8),DIMENSION(10):: minimum\n        REAL(8):: temp = 1000\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n\n        !$acc data copyin(a(1:10*LOOPCOUNT), b(1:10*LOOPCOUNT)) copy(minimum(1:10))\n          !$acc kernels loop gang private(temp)\n          DO x = 0, 9\n            temp = 1000\n            !$acc loop vector reduction(min:temp)\n            DO y = 1, LOOPCOUNT\n              temp = min(temp, a(x * LOOPCOUNT + y) * b(x * LOOPCOUNT + y))\n            END DO\n            minimum(x + 1) = temp\n          END DO\n        !$acc end data\n\n        DO x = 0, 9\n          temp = 1000\n          DO y = 1, LOOPCOUNT\n            temp = min(temp, a(x * LOOPCOUNT + y) * b(x * LOOPCOUNT + y))\n          END DO\n          IF (abs(temp - minimum(x + 1)) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_multiply_general.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        INTEGER :: errors = 0\n        REAL(8) :: temp = 1\n        REAL(8) :: multiplied_total = 1\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        a = (999.4 + a)/1000\n        b = (999.4 + b)/1000\n\n        !$acc data copyin(a(1:LOOPCOUNT))\n          !$acc kernels loop reduction(*:multiplied_total)\n          DO x = 1, LOOPCOUNT\n            multiplied_total = multiplied_total * (a(x) + b(x))\n          END DO\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          temp = temp * (a(x) + b(x))\n        END DO\n        IF (abs(temp - multiplied_total) .gt. ((temp / 2) + (multiplied_total / 2)) * PRECISION) THEN\n          WRITE(*, *) temp\n          WRITE(*, *) multiplied_total\n          errors = errors + 1\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_multiply_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,private,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(10*LOOPCOUNT):: a, b, c !Data\n        REAL(8),DIMENSION(10):: totals\n        REAL(8) :: temp\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        a = (999.4 + a) / 2000\n        b = (999.4 + b) / 2000\n\n        !$acc data copyin(a(1:10*LOOPCOUNT), b(1:10*LOOPCOUNT)) copy(c(1:10*LOOPCOUNT), totals(1:10))\n          !$acc kernels loop gang private(temp)\n          DO x = 0, 9\n            temp = 1\n            !$acc loop worker reduction(*:temp)\n            DO y = 1, LOOPCOUNT\n              temp = temp * (a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y))\n            END DO\n            totals(x + 1) = temp\n            !$acc loop worker\n            DO y = 1, LOOPCOUNT\n              c(x * LOOPCOUNT + y) = (a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y)) / totals(x + 1)\n            END DO\n          END DO\n        !$acc end data\n\n        DO x = 0, 9\n          temp = 1\n          DO y = 1, LOOPCOUNT\n            temp = temp * (a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y))\n          END DO\n          IF (abs(temp - totals(x + 1)) .gt. ((temp / 2) + (totals(x + 1) / 2)) * PRECISION) THEN\n            errors = errors + 1\n            WRITE(*, *) temp\n            WRITE(*, *) totals(x + 1)\n            WRITE(*, *) \" \"\n          END IF\n          DO y = 1, LOOPCOUNT\n            IF (abs(c(x * LOOPCOUNT + y) - ((a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y)) / totals(x + 1))) .gt. c(x * LOOPCOUNT + y) * PRECISION) THEN\n              errors = errors + 1\n              WRITE(*, *) c(x * LOOPCOUNT + y)\n              WRITE(*, *) a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y)\n              WRITE(*, *) \" \"\n            END IF\n          END DO\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_multiply_vector_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,private,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(10 * LOOPCOUNT):: a, b !Data\n        REAL(8),DIMENSION(10) :: c\n        REAL(8) :: temp\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        a = (999.4 + a) / 1000\n        b = (999.4 + b) / 1000\n\n        !$acc data copyin(a(1:10*LOOPCOUNT), b(1:10*LOOPCOUNT)) copyout(c(1:10))\n          !$acc parallel loop private(temp)\n          DO x = 0, 9\n            temp = 1\n            !$acc loop vector reduction(*:temp)\n            DO y = 1, LOOPCOUNT\n              temp = temp * (a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y))\n            END DO\n            c(x + 1) = temp\n          END DO\n        !$acc end data\n\n        DO x = 0, 9\n          temp = 1\n          DO y = 1, LOOPCOUNT\n            temp = temp * (a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y))\n          END DO\n          IF (abs(temp - c(x + 1)) .gt. ((temp / 2) + (c(x + 1) / 2)) * PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_or_general.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        LOGICAL,DIMENSION(LOOPCOUNT):: a !Data\n        LOGICAL :: results = .FALSE.\n        LOGICAL :: temp = .FALSE.\n        REAL(8) :: false_margin = exp(log(.5) / n)\n        REAL(8),DIMENSION(LOOPCOUNT):: random\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(random)\n        DO x = 1, LOOPCOUNT\n          IF (random(x) > false_margin) THEN\n            a(x) = .TRUE.\n          ELSE\n            a(x) = .FALSE.\n          END IF\n        END DO\n\n        !$acc data copyin(a(1:LOOPCOUNT))\n          !$acc kernels loop reduction(.OR.:results)\n          DO x = 1, LOOPCOUNT\n            results = results .OR. a(x)\n          END DO\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          temp = temp .OR. a(x)\n        END DO\n        IF (temp .neqv. results) THEN\n          errors = errors + 1\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_or_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,private,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        LOGICAL,DIMENSION(10*LOOPCOUNT):: a, a_copy !Data\n        LOGICAL,DIMENSION(10) :: results\n        LOGICAL :: temp = .FALSE.\n        REAL(8),DIMENSION(10 * LOOPCOUNT) :: random\n        REAL(8) :: false_margin = exp(log(.5) / n)\n        INTEGER :: errors = 0\n\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(random)\n\n        !Initilization\n        DO x = 1, 10 * LOOPCOUNT\n          IF (random(x) .gt. false_margin) THEN\n            a(x) = .TRUE.\n          ELSE\n            a(x) = .FALSE.\n          END IF\n          a_copy(x) = a(x)\n        END DO\n\n        DO x = 1, 10\n          results(x) = .FALSE.\n        END DO\n\n        !$acc data copy(a(1:10*LOOPCOUNT), results(1:10))\n          !$acc kernels loop gang private(temp)\n          DO x = 0, 9\n            temp = .FALSE.\n            !$acc loop worker reduction(.OR.:temp)\n            DO y = 1, LOOPCOUNT\n              temp = temp .OR. a(x * LOOPCOUNT + y)\n            END DO\n            results(x + 1) = temp\n            !$acc loop worker\n            DO y = 1, LOOPCOUNT\n              IF (results(x + 1) .eqv. .TRUE.) THEN\n                IF(a(x * LOOPCOUNT + y) .eqv. .TRUE.) THEN\n                  a(x * LOOPCOUNT + y) = .FALSE.\n                ELSE\n                  a(x * LOOPCOUNT + y) = .TRUE.\n                END IF\n              END IF\n            END DO\n          END DO\n        !$acc end data\n\n        DO x = 0, 9\n          temp = .FALSE.\n          DO y = 1, LOOPCOUNT\n            temp = temp .OR. a_copy(x * LOOPCOUNT + y)\n          END DO\n          IF (temp .neqv. results(x + 1)) THEN\n            errors = errors + 1\n          END IF\n          DO y = 1, LOOPCOUNT\n            IF (temp .eqv. .FALSE.) THEN\n              IF (a(x * LOOPCOUNT + y) .neqv. a_copy(x * LOOPCOUNT + y)) THEN\n                errors = errors + 1\n              END IF\n            ELSE\n              IF (a(x * LOOPCOUNT + y) .eqv. a_copy(x * LOOPCOUNT + y)) THEN\n                errors = errors + 1\n              END IF\n            END IF\n          END DO\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_or_vector_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,private,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        LOGICAL,DIMENSION(10*LOOPCOUNT):: a !Data\n        LOGICAL,DIMENSION(10) :: b\n        LOGICAL :: temp\n        REAL(8),DIMENSION(10*LOOPCOUNT):: randoms\n        REAL(8) :: false_margin = exp(log(.5) / 2)\n        INTEGER :: errors = 0\n\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n\n        !Initilization\n        DO x = 1, 10 * LOOPCOUNT\n          IF (randoms(x) > false_margin) THEN\n            a(x) = .TRUE.\n          ELSE\n            a(x) = .FALSE.\n          END IF\n        END DO\n\n        !$acc data copyin(a(1:10*LOOPCOUNT)), copy(b(1:10))\n          !$acc kernels loop private(temp)\n          DO x = 0, 9\n            temp = .FALSE.\n            !$acc loop vector reduction(.OR.:temp)\n            DO y = 1, LOOPCOUNT\n              temp = temp .OR. a(x * LOOPCOUNT + y)\n            END DO\n            b(x + 1) = temp\n          END DO\n        !$acc end data\n\n        DO x = 0, 9\n          temp = .FALSE.\n          DO y = 1, LOOPCOUNT\n            temp = temp .OR. a(x * LOOPCOUNT + y)\n          END DO\n          IF (temp .neqv. b(x + 1)) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_seq.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        b = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(b(1:LOOPCOUNT))\n          !$acc kernels loop seq\n          DO x = 2, LOOPCOUNT\n            b(x) = b(x - 1) + a(x)\n          END DO\n        !$acc end data\n\n        DO x = 2, LOOPCOUNT\n          IF (abs(b(x) - (b(x - 1) + a(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_tile.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,reduction,combined-constructs,loop,tile,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y, z !Iterators\n        REAL(8),DIMENSION(SMALL_LOOPCOUNT):: a, b, c !Data\n        REAL(8),DIMENSION(SMALL_LOOPCOUNT,SMALL_LOOPCOUNT)::d\n        REAL(8) :: temp\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        CALL RANDOM_NUMBER(c)\n\n        !$acc data copyin(a(1:SMALL_LOOPCOUNT), b(1:SMALL_LOOPCOUNT), c(1:SMALL_LOOPCOUNT)) copyout(d(1:SMALL_LOOPCOUNT,1:SMALL_LOOPCOUNT))\n          !$acc kernels loop tile(*, *) reduction(+:temp)\n          DO x = 1, SMALL_LOOPCOUNT\n            DO y = 1, SMALL_LOOPCOUNT\n              temp = 0\n              DO z = 1, SMALL_LOOPCOUNT\n                temp = temp + a(z) + b(z) + c(z)\n              END DO\n              d(x,y) = temp\n            END DO\n          END DO\n        !$acc end data\n\n        DO x = 1, SMALL_LOOPCOUNT\n          DO y = 1, SMALL_LOOPCOUNT\n            temp = 0\n            DO z = 1, SMALL_LOOPCOUNT\n              temp = temp + a(z) + b(z) + c(z)\n            END DO\n            IF (abs(d(x,y) - temp) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "reduction",
                            "combined-constructs",
                            "loop",
                            "tile"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_vector_blocking.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        REAL(8) :: multiplier\n        INTEGER :: errors = 0\n\n        multiplier = 1\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n          !$acc kernels\n            !$acc loop vector\n            DO x = 1, LOOPCOUNT\n              c(x) = (a(x) + b(x)) * multiplier\n            END DO\n            multiplier = multiplier + 1\n            !$acc loop vector\n            DO x = 1, LOOPCOUNT\n              c(x) = c(x) + ((a(x) + b(x)) * multiplier)\n            END DO\n          !$acc end kernels\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (3 * (a(x) + b(x)))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_worker_blocking.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        REAL(8) :: RAND\n        REAL(8) :: multiplier\n        INTEGER :: errors = 0\n\n        multiplier = 1\n\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n          !$acc kernels\n            !$acc loop worker\n            DO x = 1, LOOPCOUNT\n              c(x) = (a(x) + b(x)) * multiplier\n            END DO\n            multiplier = multiplier + 1\n            !$acc loop worker\n            DO x = 1, LOOPCOUNT\n              c(x) = c(x) + (a(x) + b(x)) * multiplier\n            END DO\n          !$acc end kernels\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (3 * (a(x) + b(x)))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_num_gangs.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,reduction,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        INTEGER :: results !Data\n        INTEGER :: errors = 0\n\n        results = 0\n\n        !$acc kernels num_gangs(8)\n          !$acc loop gang reduction(+:results)\n          DO x = 1, LOOPCOUNT\n            results = 1\n          END DO\n        !$acc end kernels\n          \n        IF (results .ne. 8) THEN\n          errors = errors + 1\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "reduction"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_num_workers.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        b = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT))\n          !$acc kernels loop num_workers(16)\n          DO x = 1, LOOPCOUNT\n            b(x) = a(x)\n          END DO\n          !$acc end kernels\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(a(x) - b(x)) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_present.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        b = 0\n\n        !$acc enter data copyin(a(1:LOOPCOUNT)) create(b(1:LOOPCOUNT))\n        !$acc kernels present(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n          !$acc loop\n          DO x = 1, LOOPCOUNT\n            b(x) = a(x)\n          END DO\n        !$acc end kernels\n        !$acc exit data delete(a(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(a(x) - b(x)) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_scalar_default_copy.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        INTEGER :: errors = 0\n        REAL(8) :: total = 0.0\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n\n        DO x = 1, LOOPCOUNT\n          total = total + a(x)\n        END DO\n        !$acc data copyin(b(1:LOOPCOUNT))\n          !$acc kernels num_gangs(1) vector_length(1)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              total = total + b(x)\n            END DO\n          !$acc end kernels\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          total = total - (a(x) + b(x))\n        END DO\n        IF (abs(total) .gt. (2 * LOOPCOUNT - 2) * PRECISION) THEN\n          errors = errors + 1\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_vector_length.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        b = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT))\n          !$acc kernels vector_length(16)\n            !$acc loop vector\n            DO x = 1, LOOPCOUNT\n              b(x) = a(x)\n            END DO\n          !$acc end kernels\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(a(x) - b(x)) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_wait.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:async,kernels,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT)) async(1)\n        !$acc kernels wait(1)\n          !$acc loop\n          DO x = 1, LOOPCOUNT\n            c(x) = a(x) + b(x)\n          END DO\n        !$acc end kernels\n        !$acc exit data copyout(c(1:LOOPCOUNT)) delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "async",
                            "kernels"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "loop_collapse.F90": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(10*LOOPCOUNT):: a, b, c !Data\n        REAL(8):: total\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        DO x = 0, 9\n          c(x*LOOPCOUNT + 1) = a(x*LOOPCOUNT + 1) + b(x*LOOPCOUNT + 1)\n        END DO\n\n        !$acc data copyin(a(1:10*LOOPCOUNT), b(1:10*LOOPCOUNT)) copy(c(1:10*LOOPCOUNT))\n          !$acc parallel\n            !$acc loop independent\n            DO x = 0, 9\n              DO y = 2, LOOPCOUNT\n                c(x*LOOPCOUNT + y) = c(x*LOOPCOUNT + y - 1) + a(x*LOOPCOUNT + y) + b(x*LOOPCOUNT + y)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 0, 9\n          total = 0\n          DO y = 1, LOOPCOUNT\n            total = total + a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y)\n            IF (abs(total - c(x * LOOPCOUNT + y)) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:construct-independent,loop,V:1.0-2.7\n      LOGICAL FUNCTION test2()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(10*LOOPCOUNT):: a, b, c !Data\n        REAL(8):: total\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc data copyin(a(1:10*LOOPCOUNT), b(1:10*LOOPCOUNT)) copyout(c(1:10*LOOPCOUNT))\n          !$acc parallel\n            !$acc loop independent collapse(2)\n            DO x = 0, 9\n              DO y = 1, LOOPCOUNT\n                c(x*LOOPCOUNT + y) = a(x*LOOPCOUNT + y) + b(x*LOOPCOUNT + y)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 0, 9\n          DO y = 1, LOOPCOUNT\n            IF (abs(c(x*LOOPCOUNT+y) - (a(x*LOOPCOUNT+y)+b(x*LOOPCOUNT+y))) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "loop_no_collapse.F90": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(10 * LOOPCOUNT):: a, b, c !Data\n        REAL(8):: total\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        DO x = 0, 9\n          c(x * LOOPCOUNT + 1) = a(x * LOOPCOUNT + 1) + b(x * LOOPCOUNT + 1)\n        END DO\n\n        !$acc data copyin(a(1:10*LOOPCOUNT), b(1:10*LOOPCOUNT)) copy(c(1:10*LOOPCOUNT))\n          !$acc parallel\n            !$acc loop independent\n            DO x = 0, 9\n              DO y = 2, LOOPCOUNT\n                c(x * LOOPCOUNT + y) = c(x * LOOPCOUNT + y - 1) + a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 0, 9\n          total = 0\n          DO y = 1, LOOPCOUNT\n            total = total + a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y)\n            IF (abs(total - c(x * LOOPCOUNT + y)) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:construct-independent,loop,V:1.0-2.7\n      LOGICAL FUNCTION test2()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(10 * LOOPCOUNT):: a, b, c !Data\n        REAL(8):: total\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        DO x = 0, 9\n          c(x * LOOPCOUNT + 1) = a(x * LOOPCOUNT + 1) + b(x * LOOPCOUNT + 1)\n        END DO\n\n        !$acc data copyin(a(1:10*LOOPCOUNT), b(1:10*LOOPCOUNT)) copy(c(1:10*LOOPCOUNT))\n          !$acc kernels\n            !$acc loop independent\n            DO x = 0, 9\n              DO y = 2, LOOPCOUNT\n                c(x * LOOPCOUNT + y) = c(x * LOOPCOUNT + y - 1) + a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y)\n              END DO\n            END DO\n          !$acc end kernels\n        !$acc end data\n\n        DO x = 0, 9\n          total = 0\n          DO y = 1, LOOPCOUNT\n            total = total + a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y)\n            IF (abs(total - c(x * LOOPCOUNT + y)) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, i_a, i_b, i_c, i_d, i_e, i_f, i_g, i_h, i_i, i_j !Iterators\n        INTEGER, PARAMETER :: PRIVATE_LOOPCOUNT = 1024\n        REAL(8),DIMENSION(PRIVATE_LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors\n        errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc data copyin(a(1:PRIVATE_LOOPCOUNT), b(1:PRIVATE_LOOPCOUNT)) copy(c(1:PRIVATE_LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO i_a = 0, 1\n              !$acc loop\n              DO i_b = 0, 1\n                !$acc loop\n                DO i_c = 0, 1\n                  !$acc loop\n                  DO i_d = 0, 1\n                    !$acc loop\n                    DO i_e = 0, 1\n                      !$acc loop\n                      DO i_f = 0, 1\n                        !$acc loop\n                        DO i_g = 0, 1\n                          !$acc loop\n                          DO i_h = 0, 1\n                            !$acc loop\n                            DO i_i = 0, 1\n                              !$acc loop\n                              DO i_j = 0, 1\n                                c(i_a*512 + i_b*256 + i_c*128 + i_d*64 + i_e*32 + i_f*16 + i_g*8 + i_h*4 + i_i*2 + i_j + 1) = &\n                                a(i_a*512 + i_b*256 + i_c*128 + i_d*64 + i_e*32 + i_f*16 + i_g*8 + i_h*4 + i_i*2 + i_j + 1) + &\n                                b(i_a*512 + i_b*256 + i_c*128 + i_d*64 + i_e*32 + i_f*16 + i_g*8 + i_h*4 + i_i*2 + i_j + 1)\n                              END DO\n                            END DO\n                          END DO\n                        END DO\n                      END DO\n                    END DO\n                  END DO\n                END DO\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, PRIVATE_LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_async.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:async,parallel,update,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y, z !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, d, e, f, g !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        CALL RANDOM_NUMBER(d)\n        CALL RANDOM_NUMBER(e)\n        f = 0\n        g = 0\n        \n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), d(1:LOOPCOUNT), e(1:LOOPCOUNT), c(1:LOOPCOUNT), f(1:LOOPCOUNT), g(1:LOOPCOUNT))\n          !$acc parallel async(1)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n          !$acc parallel async(2)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              f(x) = d(x) + e(x)\n            END DO\n          !$acc end parallel\n          !$acc update host(c(1:LOOPCOUNT)) wait(1) async(4)\n          !$acc update host(f(1:LOOPCOUNT)) wait(2) async(5)\n          !$acc parallel wait(1, 2) async(3)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              g(x) = c(x) + f(x)\n            END DO\n          !$acc end parallel\n          !$acc update host(g(1:LOOPCOUNT)) async(3)\n        !$acc end data\n        !$acc wait\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          ELSE IF (abs(f(x) - (d(x) + e(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          ELSE IF (abs(g(x) - (f(x) + c(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "async",
                            "parallel",
                            "update"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_copy.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, a_host !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        a_host = a\n\n        !$acc parallel copy(a(1:LOOPCOUNT))\n          !$acc loop\n          DO x = 1, LOOPCOUNT\n            a(x) = 2 * a(x)\n          END DO \n        !$acc end parallel\n    \n\n        DO x = 1, LOOPCOUNT\n          IF (abs(a_host(x) - (a(x) / 2)) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_copyin.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, a_copy, b !Data\n        INTEGER :: errors = 0\n        INTEGER,DIMENSION(1):: hasDevice\n        hasDevice(1) = 1\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        a_copy = a\n        b = 0\n\n        !$acc enter data copyin(hasDevice(1:1))\n        !$acc parallel present(hasDevice(1:1))\n          hasDevice(1) = 0\n        !$acc end parallel\n\n\n        !$acc parallel copyin(a(1:LOOPCOUNT))\n          !$acc loop\n          DO x = 1, LOOPCOUNT\n            a(x) = 0.0\n          END DO\n\n        !$acc end parallel\n\n        DO x = 1, LOOPCOUNT\n          IF ((abs(a(x) - a_copy(x)) > PRECISION .AND. hasDevice(1) .eq. 1) .OR. (hasDevice(1) .eq. 0 .AND. abs(a(x)) > PRECISION)) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_copyout.F90": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        INTEGER :: errors = 0\n        INTEGER,DIMENSION(1):: hasDevice\n        hasDevice(1) = 1\n        !$acc enter data copyin(hasDevice(1:1))\n        !$acc parallel present(hasDevice(1:1))\n          hasDevice(1) = 0\n        !$acc end parallel\n\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        b = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT))\n          !$acc parallel copyout(b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              b(x) = a(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(a(x) - b(x)) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:parallel,V:2.0-2.7\n      LOGICAL FUNCTION test2()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        INTEGER :: errors = 0\n        INTEGER,DIMENSION(1):: hasDevice\n        hasDevice(1) = 1\n        !$acc enter data copyin(hasDevice(1:1))\n        !$acc parallel present(hasDevice(1:1))\n          hasDevice(1) = 0\n        !$acc end parallel\n\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        b = a\n        IF (hasDevice(1) .eq. 1) THEN\n          !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            !$acc parallel copyout(b(1:LOOPCOUNT))\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                b(x) = b(x) - a(x)\n              END DO\n            !$acc end parallel\n          !$acc end data\n\n          DO x = 1, LOOPCOUNT\n            IF (abs(a(x) - b(x)) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n!T3:parallel,update,V:2.0-2.7\n      LOGICAL FUNCTION test3()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        INTEGER :: errors = 0\n        INTEGER,DIMENSION(1):: hasDevice\n        hasDevice(1) = 1\n        !$acc enter data copyin(hasDevice(1:1))\n        !$acc parallel present(hasDevice(1:1))\n          hasDevice(1) = 0\n        !$acc end parallel\n\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        b = a\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n          !$acc parallel copyout(b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              b(x) = b(x) - a(x)\n            END DO\n          !$acc end parallel\n          !$acc update host(b(1:LOOPCOUNT))\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(b(x)) > 2 * PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test3 = .FALSE.\n        ELSE\n          test3 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T3\n        LOGICAL :: test3\n#endif\n#ifndef T3\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test3()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 2\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "update"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_create.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        b = 0\n        c = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(c(1:LOOPCOUNT))\n          !$acc parallel create(b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              b(x) = a(x)\n            END DO\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          IF (abs(a(x) - c(x)) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_default_copy.F90": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:devonly,parallel,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n        LOGICAL,DIMENSION(1):: devtest\n        devtest(1) = .TRUE.\n\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel\n          devtest(1) = .FALSE.\n        !$acc end parallel\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = c(x) + a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "parallel"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:devonly,parallel,V:2.0-2.7\n      LOGICAL FUNCTION test2()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n        LOGICAL,DIMENSION(1):: devtest\n        devtest(1) = .TRUE.\n\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel\n          devtest(1) = .FALSE.\n        !$acc end parallel\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        IF (devtest(1)) THEN\n          CALL RANDOM_NUMBER(a)\n          CALL RANDOM_NUMBER(b)\n          c = 1\n\n          !$acc enter data copyin(c(1:LOOPCOUNT))\n          c = 0\n          !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            !$acc parallel\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                c(x) = c(x) + a(x) + b(x)\n              END DO\n            !$acc end parallel\n          !$acc end data\n          DO x = 1, LOOPCOUNT\n            IF (abs(c(x)) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n          !$acc exit data copyout(c(1:LOOPCOUNT))\n          DO x = 1, LOOPCOUNT\n            IF (abs(c(x) - (a(x) + b(x) + 1)) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "parallel"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_default_present.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,default,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a !Data\n        INTEGER :: errors = 0\n\n        a = 0\n\n        !$acc data copy(a(1:LOOPCOUNT))\n          !$acc parallel default(present)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              a(x) = 1.0\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(a(x) - 1) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "default"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_firstprivate.F90": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,firstprivate,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(10 * LOOPCOUNT):: a, b, d !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: c, c_copy\n        REAL*8 :: RAND\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        CALL RANDOM_NUMBER(c)\n        c_copy = c\n        d = 0\n        \n        !$acc data copyin(a(1:10*LOOPCOUNT), b(1:10*LOOPCOUNT)) copy(d(1:10*LOOPCOUNT))\n          !$acc parallel firstprivate(c(1:LOOPCOUNT))\n            !$acc loop gang\n            DO x = 0, 9\n              !$acc loop worker\n              DO y = 1, LOOPCOUNT\n                d(x * LOOPCOUNT + y) = a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y) + c(y)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 0, 9\n          DO y = 1, LOOPCOUNT\n            IF (abs(d(x * LOOPCOUNT + y) - (a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y) + c(y))) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "firstprivate"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:parallel,firstprivate,V:1.0-2.7\n      LOGICAL FUNCTION test2()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(10 * LOOPCOUNT):: a, b, d !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: c, c_copy\n        REAL*8 :: RAND\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        d = 0\n        \n        !$acc data copyin(a(1:10*LOOPCOUNT), b(1:10*LOOPCOUNT)) copy(d(1:10*LOOPCOUNT))\n          !$acc parallel firstprivate(c(1:LOOPCOUNT))\n            !$acc loop gang independent\n            DO x = 0, 9\n              !$acc loop worker independent\n              DO y = 1, LOOPCOUNT\n                c(y) = a(x * LOOPCOUNT + y) - b(x * LOOPCOUNT + y)\n              END DO\n              !$acc loop worker independent\n              DO y = 1, LOOPCOUNT\n                d(x * LOOPCOUNT + y) = a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y) + c(y)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, 10 * LOOPCOUNT\n          IF (abs(d(x) - (2 * a(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO       \n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "firstprivate"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_if.F90": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:devonly,parallel,if,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n        LOGICAL :: host = .FALSE.\n        LOGICAL :: device = .TRUE.\n        INTEGER,DIMENSION(1) :: dev_test\n        dev_test(1) = 0\n\n        !$acc enter data copyin(dev_test(1:1))\n        !$acc parallel present(dev_test(1:1))\n          dev_test(1) = 1\n        !$acc end parallel\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc parallel if(host)\n          !$acc loop\n          DO x = 1, LOOPCOUNT\n            c(x) = a(x) + b(x)\n          END DO\n        !$acc end parallel\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "parallel",
                            "if"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:devonly,parallel,if,V:2.0-2.7\n      LOGICAL FUNCTION test2()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n        LOGICAL :: host = .FALSE.\n        LOGICAL :: device = .TRUE.\n        INTEGER,DIMENSION(1) :: dev_test\n        dev_test(1) = 0\n\n        !$acc enter data copyin(dev_test(1:1))\n        !$acc parallel present(dev_test(1:1))\n          dev_test(1) = 1\n        !$acc end parallel\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        IF (dev_test(1) .eq. 0) THEN\n          CALL RANDOM_NUMBER(a)\n          CALL RANDOM_NUMBER(b)\n          c = a + b\n\n          !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n          !$acc parallel if(host) present(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = c(x) + a(x) + b(x)\n            END DO\n          !$acc end parallel\n          !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n\n          DO x = 1, LOOPCOUNT\n            IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "parallel",
                            "if"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n!T3:devonly,parallel,if,V:2.0-2.7\n      LOGICAL FUNCTION test3()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n        LOGICAL :: host = .FALSE.\n        LOGICAL :: device = .TRUE.\n        INTEGER,DIMENSION(1) :: dev_test\n        dev_test(1) = 0\n\n        !$acc enter data copyin(dev_test(1:1))\n        !$acc parallel present(dev_test(1:1))\n          dev_test(1) = 1\n        !$acc end parallel\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = a + b\n        !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n        !$acc parallel if(device) present(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n          !$acc loop\n          DO x = 1, LOOPCOUNT\n            c(x) = c(x) + a(x) + b(x)\n          END DO\n        !$acc end parallel\n        !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT)), copyout(c(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (2 * (a(x) + b(x)))) .gt. 2 * PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test3 = .FALSE.\n        ELSE\n          test3 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T3\n        LOGICAL :: test3\n#endif\n#ifndef T3\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test3()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 2\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "parallel",
                            "if"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop.F90": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        a = 0\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        !$acc data copy(a(1:LOOPCOUNT))\n          !$acc parallel loop\n          DO x = 1, LOOPCOUNT\n            a(x) = 1\n          END DO\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(a(x) - 1) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:parallel,loop,V:1.0-2.7\n      LOGICAL FUNCTION test2()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        a = 0\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(b)\n        CALL RANDOM_NUMBER(c)\n\n        !$acc data copy(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              a(x) = b(x)\n            END DO\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              a(x) = a(x) + c(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(a(x) - (b(x) + c(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_async.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:async,parallel,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(10 * LOOPCOUNT):: a, b, c, d !Data\n\t\t\t\tINTEGER,DIMENSION(10):: errors_array\n        INTEGER :: errors\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        d = a + b\n\t\t\t\terrors = 0\n\n        !$acc data copyin(a(1:10*LOOPCOUNT), b(1:10*LOOPCOUNT), c(1:10*LOOPCOUNT), d(1:10*LOOPCOUNT)) copy(errors_array(1:10))\n          DO x = 0, 9\n            !$acc parallel loop async(x)\n            DO y = 1, LOOPCOUNT\n              c(x * LOOPCOUNT + y) = a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y)\n            END DO\n            !$acc parallel loop async(x) reduction(+:errors_array(x))\n            DO y = 1, LOOPCOUNT\n              IF (c(x * LOOPCOUNT + y) - d(x * LOOPCOUNT + y) .gt.  PRECISION .OR. &\n                d(x * LOOPCOUNT + y) - c(x * LOOPCOUNT + y) .gt. PRECISION) THEN\n                errors_array(x) = errors_array(x) + 1\n              END IF\n            END DO\n          END DO\n\t\t\t\t\t!$acc wait\n        !$acc end data\n\n\t\t\t\tDO x = 1, 10\n\t\t\t\t\terrors = errors + errors_array(x)\n\t\t\t\tEND DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "async",
                            "parallel",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_auto.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,combined-constructs,loop,auto,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, a_copy, b !Data\n        REAL(8) :: temp\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        a_copy = a\n        b = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT))\n          !$acc parallel loop auto\n          DO x = 1, LOOPCOUNT\n            b(x) = a(x)\n          END DO\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(a(x) - b(x)) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        !$acc data copy(a(1:LOOPCOUNT))\n          !$acc parallel loop auto\n          DO x = 2, LOOPCOUNT\n            a(x) = a(x - 1) + a(x)\n          END DO\n        !$acc end data\n\n        temp = 0\n        DO x = 1, LOOPCOUNT\n          temp = temp + a_copy(x)\n          IF (abs(temp - a(x)) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "combined-constructs",
                            "loop",
                            "auto"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_gang.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copy(c(1:LOOPCOUNT))\n          !$acc parallel loop gang\n          DO x = 1, LOOPCOUNT\n            c(x) = a(x) + b(x)\n          END DO\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_add_general.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        REAL(8) :: total\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        total = 0\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copy(total)\n          !$acc parallel loop reduction(+:total)\n          DO x = 1, LOOPCOUNT\n            total = total + a(x) + b(x)\n          END DO\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          total = total - (a(x) + b(x))\n        END DO\n        IF (abs(total) .gt. LOOPCOUNT * PRECISION) THEN\n          WRITE(*, *) total\n          errors = 1\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_add_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,private,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(10*LOOPCOUNT):: a, b, c, d !Data\n        REAL(8) :: avg\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        avg = 0\n        !$acc data copyin(a(1:10*LOOPCOUNT), b(1:10*LOOPCOUNT)) create(c(1:10*LOOPCOUNT)) copyout(d(1:10*LOOPCOUNT))\n          !$acc parallel loop gang private(avg)\n          DO x = 0, 9\n            avg = 0\n            !$acc loop worker reduction(+:avg)\n            DO y = 1, LOOPCOUNT\n              avg = avg + a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y)\n              c(x * LOOPCOUNT + y) = a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y)\n            END DO\n            avg = avg / LOOPCOUNT\n            !$acc loop worker\n            DO y = 1, LOOPCOUNT\n              d(x * LOOPCOUNT + y) = c(x * LOOPCOUNT + y) / avg\n            END DO\n          END DO\n        !$acc end data\n        DO x = 0, 9\n          avg = 0\n          DO y = 1, LOOPCOUNT\n            avg = avg + a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y)\n          END DO\n          avg = avg / LOOPCOUNT\n          DO y = 1, LOOPCOUNT\n            IF (abs(d(x * LOOPCOUNT + y) - ((a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y)) / avg)) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_add_vector_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,private,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(10*LOOPCOUNT):: a, b !Data\n        REAL(8),DIMENSION(10) :: c\n        REAL(8) :: temp\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n\n        !$acc data copyin(a(1:10*LOOPCOUNT), b(1:10*LOOPCOUNT)) copyout(c(1:10))\n          !$acc parallel loop private(temp)\n          DO x = 0, 9\n            temp = 0.0\n            !$acc loop vector reduction(+:temp)\n            DO y = 1, LOOPCOUNT\n              temp = temp + a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y)\n            END DO\n            c(x + 1) = temp\n          END DO\n        !$acc end data\n\n        DO x = 0, 9\n          temp = 0\n          DO y = 1, LOOPCOUNT\n            temp = temp + a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y)\n          END DO\n          IF (abs(temp - c(x + 1)) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_and_general.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT):: a !Data\n        LOGICAL :: results = .TRUE.\n        LOGICAL :: host_results = .TRUE.\n        REAL(8) :: false_margin\n        INTEGER :: errors = 0\n        false_margin = exp(log(.5) / LOOPCOUNT)\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          IF (randoms(x) .lt. false_margin) THEN\n            a(x) = .TRUE.\n          ELSE\n            a(x) = .FALSE.\n          END IF\n        END DO\n\n        !$acc data copyin(a(1:LOOPCOUNT))\n          !$acc parallel loop reduction(.and.:results)\n          DO x = 1, LOOPCOUNT\n            results = results .and. a(x)\n          END DO\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          host_results = host_results .and. a(x)\n        END DO\n        IF (host_results .neqv. results) THEN\n          errors = 1\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_and_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        LOGICAL,DIMENSION(10*LOOPCOUNT):: a, a_copy !Data\n        LOGICAL,DIMENSION(10) :: results, has_false\n        LOGICAL :: host_results = .TRUE.\n        LOGICAL :: temp = .TRUE.\n        REAL(8),DIMENSION(10*LOOPCOUNT):: randoms\n        REAL(8) :: false_margin = exp(log(.5) / LOOPCOUNT)\n        INTEGER :: errors = 0\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, 10\n          results(x) = .TRUE.\n          has_false(x) = .FALSE.\n        END DO\n        DO x = 1, 10*LOOPCOUNT\n          IF (randoms(x) .lt. false_margin) THEN\n            a(x) = .TRUE.\n            a_copy(x) = .TRUE.\n          ELSE\n            a(x) = .FALSE.\n            a_copy(x) = .FALSE.\n            has_false(x / LOOPCOUNT) = .TRUE.\n          END IF\n        END DO\n\n        !$acc data copy(a(1:10*LOOPCOUNT), results(1:10))\n          !$acc parallel loop gang\n          DO x = 0, 9\n            temp = .TRUE.\n            !$acc loop worker reduction(.AND.:temp)\n            DO y = 1, LOOPCOUNT\n              temp = temp .AND. a(x * LOOPCOUNT + y)\n            END DO\n            results(x + 1) = temp\n            !$acc loop worker\n            DO y = 1, LOOPCOUNT\n              IF (temp .eqv. .TRUE.) THEN\n                IF (a(x * LOOPCOUNT + y) .eqv. .TRUE.) THEN\n                  a(x * LOOPCOUNT + y) = .FALSE.\n                ELSE\n                  a(x * LOOPCOUNT + y) = .TRUE.\n                END IF\n              END IF\n            END DO\n          END DO\n        !$acc end data\n        DO x = 0, 9\n          temp = .TRUE.\n          DO y = 1, LOOPCOUNT\n            temp = temp .AND. a_copy(x * LOOPCOUNT + y)\n          END DO\n          IF (temp .neqv. results(x + 1)) THEN\n            errors = errors + 1\n          END IF\n          DO y = 1, LOOPCOUNT\n            IF (temp .eqv. .TRUE.) THEN\n              IF (a(x * LOOPCOUNT + y) .eqv. a_copy(x * LOOPCOUNT + y)) THEN\n                errors = errors + 1\n              END IF\n            ELSE\n              IF (a(x * LOOPCOUNT + y) .neqv. a_copy(x * LOOPCOUNT + y)) THEN\n                errors = errors + 1\n              END IF\n            END IF\n          END DO\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_and_vector_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,private,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        LOGICAL,DIMENSION(10*LOOPCOUNT):: a !Data\n        LOGICAL,DIMENSION(10):: b\n        LOGICAL,DIMENSION(10):: has_false\n        LOGICAL :: temp\n        REAL(8) :: false_margin\n        REAL(8),DIMENSION(10*LOOPCOUNT) :: randoms\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        false_margin = exp(log(.5) / LOOPCOUNT)\n        DO x = 1, 10\n          has_false(x) = .FALSE.\n          b(x) = .TRUE.\n        END DO\n\n        DO x = 0, 9\n          DO y = 1, LOOPCOUNT\n            IF (randoms(x * LOOPCOUNT + y) .lt. false_margin) THEN\n              a(x * LOOPCOUNT + y) = .TRUE.\n            ELSE\n              a(x * LOOPCOUNT + y) = .FALSE.\n              has_false(x + 1) = .TRUE.\n            END IF\n          END DO\n        END DO\n\n        !$acc data copyin(a(1:10*LOOPCOUNT)) copy(b(1:10))\n          !$acc parallel loop private(temp)\n          DO x = 0, 9\n            temp = .TRUE.\n            !$acc loop vector reduction(.AND.:temp)\n            DO y = 1, LOOPCOUNT\n              temp = temp .AND. a(x * LOOPCOUNT + y)\n            END DO\n            b(x + 1) = temp\n          END DO\n        !$acc end data\n\n        DO x = 0, 9\n          temp = .FALSE.\n          DO y = 1, LOOPCOUNT\n            IF (a(x * LOOPCOUNT + y) .eqv. .FALSE.) THEN\n              temp = .TRUE.\n            END IF\n          END DO\n          IF (temp .neqv. has_false(x + 1)) THEN\n            errors = 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_bitand_general.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y, z !Iterators\n        INTEGER,DIMENSION(LOOPCOUNT):: a !Data\n        INTEGER :: b\n        REAL(8),DIMENSION(16 * LOOPCOUNT):: randoms\n        REAL(8) :: false_margin\n        INTEGER :: errors = 0\n        INTEGER :: temp = 1\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        false_margin = exp(log(.5)/n)\n        DO x = 1, LOOPCOUNT\n          DO y = 0, 15\n            IF (randoms(y * LOOPCOUNT + x) .lt. false_margin) THEN\n              temp = 1\n              DO z = 0, y\n                temp = temp * 2\n              END DO\n              a(x) = a(x) + temp\n            END IF\n          END DO\n        END DO\n        \n        b = a(1)\n\n        !$acc data copyin(a(1:LOOPCOUNT))\n          !$acc parallel loop reduction(iand:b)\n          DO x = 1, LOOPCOUNT\n            b = iand(b, a(x))\n          END DO\n        !$acc end data\n \n        temp = a(1)\n        DO x = 2, LOOPCOUNT\n          temp = iand(a(x), temp)\n        END DO\n        IF (temp .ne. b) THEN\n          WRITE(*, *) temp\n          WRITE(*, *) b\n          errors = 1\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_bitand_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,private,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y, z !Iterators\n        INTEGER,DIMENSION(10*LOOPCOUNT):: a, b, b_copy !Data\n        REAL(8),DIMENSION(10*LOOPCOUNT):: randoms2\n        INTEGER,DIMENSION(10) :: c\n        REAL(8) :: false_margin\n        REAL(8),DIMENSION(160*LOOPCOUNT)::randoms\n        INTEGER :: errors = 0\n        INTEGER :: temp\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        CALL RANDOM_NUMBER(randoms2)\n        b = FLOOR(10000 * randoms2)\n        b_copy = b\n        false_margin = exp(log(.5)/LOOPCOUNT)\n        DO x = 1, 10 * LOOPCOUNT\n          DO y = 1, 16\n            IF (randoms((y - 1) * 10 * LOOPCOUNT + x) < false_margin) THEN\n              temp = 1\n              DO z = 1, y\n                temp = temp * 2\n              END DO\n              a(x) = a(x) + temp\n            END IF\n          END DO\n        END DO\n        \n        DO x = 1, 10\n         c(x) = a((x - 1) * LOOPCOUNT + x)\n        END DO\n        \n        \n\n        !$acc data copyin(a(1:10*LOOPCOUNT)) copy(b(1:10*LOOPCOUNT), c(1:10))\n          !$acc parallel loop gang private(temp)\n          DO x = 1, 10\n            temp = a((x - 1) * LOOPCOUNT + 1)\n            !$acc loop worker reduction(iand:temp)\n            DO y = 2, LOOPCOUNT\n              temp = iand(temp, a((x - 1) * LOOPCOUNT + y))\n            END DO\n            c(x) = temp\n            !$acc loop worker\n            DO y = 1, LOOPCOUNT\n              b((x - 1) * LOOPCOUNT + y) = b((x - 1) * LOOPCOUNT + y) + c(x)\n            END DO\n          END DO\n        !$acc end data\n\n       DO x = 1, 10\n         temp = a((x - 1) * LOOPCOUNT + 1)\n         DO y = 2, LOOPCOUNT\n           temp = iand(temp, a((x - 1) * LOOPCOUNT + y))\n         END DO\n         IF (temp .ne. c(x)) THEN\n           errors = errors + 1\n         END IF\n         DO y = 1, LOOPCOUNT\n           IF (b((x - 1) * LOOPCOUNT + y) .ne. b_copy((x - 1) * LOOPCOUNT + y) + temp) THEN\n             errors = errors + 1\n           END IF\n         END DO\n       END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_bitand_vector_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,private,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y, z, i !Iterators\n        INTEGER,DIMENSION(10*LOOPCOUNT):: a !Data\n        INTEGER,DIMENSION(10):: b\n        INTEGER :: c\n        REAL(8),DIMENSION(160*LOOPCOUNT):: random\n        REAL(8) :: false_margin\n        INTEGER :: errors = 0\n        INTEGER :: temp\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(random)\n        false_margin = exp(log(.5) / n)\n        DO x = 0, 9\n          DO y = 1, LOOPCOUNT\n            DO z = 1, 16\n              IF (random(x * 16 * LOOPCOUNT + (y - 1) * 16 + z - 1) < false_margin) THEN\n                temp = 1\n                DO i = 1, z\n                  temp = temp * 2\n                END DO\n                a(x * LOOPCOUNT + y) = a(x * LOOPCOUNT + y) + temp\n              END IF\n            END DO\n          END DO\n        END DO\n                \n        !$acc data copyin(a(1:10*LOOPCOUNT)), copy(b(1:10))\n          !$acc parallel loop private(c)\n          DO x = 0, 9\n            c = a(x * LOOPCOUNT + 1)\n            !$acc loop vector reduction(iand:c)\n            DO y = 1, LOOPCOUNT\n              c = iand(c, a(x * LOOPCOUNT + y))\n            END DO\n            b(x + 1) = c\n          END DO\n        !$acc end data\n\n        DO x = 0, 9\n          temp = a(x * LOOPCOUNT + 1)\n          DO y = 2, LOOPCOUNT\n            temp = iand(temp, a(x * LOOPCOUNT + y))\n          END DO\n          IF (b(x + 1) .ne. temp) THEN\n            errors = errors + 1\n          END IF\n        END DO       \n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_bitor_general.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y, z !Iterators\n        INTEGER,DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8) :: false_margin\n        REAL(8),DIMENSION(16*LOOPCOUNT):: random\n        INTEGER :: errors = 0\n        INTEGER :: temp\n        INTEGER :: b\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(random)\n        false_margin = exp(log(.5)/n)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 16\n            IF (random((y - 1) * LOOPCOUNT + x) < false_margin) THEN\n              temp = 1\n              DO z = 1, y\n                temp = temp * 2\n              END DO\n              a(x) = a(x) + temp\n            END IF\n          END DO\n        END DO\n        b = a(1)\n        !$acc data copyin(a(1:LOOPCOUNT))\n          !$acc parallel loop reduction(ior:b)\n          DO x = 2, LOOPCOUNT\n            b = ior(b, a(x))\n          END DO\n        !$acc end data\n        temp = a(1)\n        DO x = 2, LOOPCOUNT\n          temp = ior(temp, a(x))\n        END DO\n        IF (temp .ne. b) THEN\n          errors = errors + 1\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_bitor_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,private,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y, z, i !Iterators\n        INTEGER,DIMENSION(10*LOOPCOUNT):: a, b, b_copy !Data\n        REAL(8),DIMENSION(10*LOOPCOUNT):: randoms2\n        INTEGER,DIMENSION(10) :: c\n        REAL(8),DIMENSION(160*LOOPCOUNT):: randoms\n        REAL(8) :: false_margin\n        INTEGER :: errors = 0\n        INTEGER :: temp\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        CALL RANDOM_NUMBER(randoms2)\n        false_margin = exp(log(.5)/n)\n        b = FLOOR(6*randoms2)\n        b_copy = b\n        DO x = 0, 9\n          DO y = 1, LOOPCOUNT\n            DO z = 1, 16\n              IF (randoms(x * 16 * LOOPCOUNT + y * 16 + z - 1) .gt. false_margin) THEN\n                temp = 1\n                DO i = 1, z\n                  temp = temp * 2\n                END DO\n                a(x * LOOPCOUNT + y) = a(x * LOOPCOUNT + y) + temp\n              END IF\n            END DO\n          END DO\n        END DO\n\n        !$acc data copyin(a(1:10*LOOPCOUNT)) copy(b(1:10*LOOPCOUNT), c(1:10))\n          !$acc parallel loop gang private(temp)\n          DO x = 0, 9\n            temp = 0\n            !$acc loop worker reduction(ior:temp)\n            DO y = 1, LOOPCOUNT\n              temp = ior(temp, a(x * LOOPCOUNT + y))\n            END DO\n            c(x + 1) = temp\n            !$acc loop worker\n            DO y = 1, LOOPCOUNT\n              b(x * LOOPCOUNT + y) = b(x * LOOPCOUNT + y) + c(x + 1)\n            END DO\n          END DO\n        !$acc end data\n        \n        DO x = 0, 9\n          temp = 0\n          DO y = 1, LOOPCOUNT\n            temp = ior(temp, a(x * LOOPCOUNT + y))\n          END DO\n          IF (temp .ne. c(x + 1)) THEN\n            errors = errors + 1\n          END IF\n          DO y = 1, LOOPCOUNT\n            IF (b(x * LOOPCOUNT + y) .ne. b_copy(x * LOOPCOUNT + y) + c(x + 1)) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_bitor_vector_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,private,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y, z !Iterators\n        INTEGER,DIMENSION(10 * LOOPCOUNT):: a !Data\n        INTEGER,DIMENSION(10) :: b\n        REAL(8) :: false_margin\n        REAL(8),DIMENSION(160 * LOOPCOUNT) :: randoms\n        INTEGER :: errors = 0\n        INTEGER :: temp\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        false_margin = exp(log(.5) / n)\n        DO x = 1, 10 * LOOPCOUNT\n          DO y = 1, 16\n            IF (randoms(y * 10 * LOOPCOUNT + y - 1) .gt. false_margin) THEN\n              temp = 1\n              DO z = 1, y\n                temp = temp * 2\n              END DO\n              a(x) = a(x) + temp\n            END IF\n          END DO\n        END DO\n\n        !$acc data copyin(a(1:10*LOOPCOUNT)) copy(b(1:10))\n          !$acc parallel loop private(temp)\n          DO x = 0, 9\n            temp = 0\n            !$acc loop vector reduction(ior:temp)\n            DO y = 1, LOOPCOUNT\n              temp = ior(temp, a(x * LOOPCOUNT + y))\n            END DO\n            b(x + 1) = temp\n          END DO\n        !$acc end data\n\n        DO x = 0, 9\n          temp = 0\n          DO y = 1, LOOPCOUNT\n            temp = ior(temp, a(x * LOOPCOUNT + y))\n          END DO\n          IF (temp .ne. b(x + 1)) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_bitxor_general.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        INTEGER,DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: randoms\n        INTEGER :: errors = 0\n        INTEGER :: b = 0\n        INTEGER :: temp = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        a = FLOOR(randoms*1000000)\n\n        !$acc data copyin(a(1:LOOPCOUNT))\n          !$acc parallel loop reduction(ieor:b)\n          DO x = 1, LOOPCOUNT\n            b = ieor(b, a(x))\n          END DO\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          temp = ieor(temp, a(x))\n        END DO\n        IF (temp .ne. b) THEN\n          errors = errors + 1\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_bitxor_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,private,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        INTEGER,DIMENSION(10*LOOPCOUNT):: a, b, b_copy !Data\n        REAL(8),DIMENSION(10*LOOPCOUNT):: randoms, randoms2\n        INTEGER,DIMENSION(10):: c\n        REAL*8 :: RAND\n        INTEGER :: errors = 0\n        INTEGER :: temp\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        a = FLOOR(randoms*1000000)\n        CALL RANDOM_NUMBER(randoms2)\n        b = FLOOR(randoms2*1000000)\n        b_copy = b\n        c = 0\n\n        !$acc data copyin(a(1:10*LOOPCOUNT)) copy(b(1:10*LOOPCOUNT), c(1:10))\n          !$acc parallel loop gang private(temp)\n          DO x = 0, 9\n            temp = 0\n            !$acc loop worker reduction(ieor:temp)\n            DO y = 1, LOOPCOUNT\n              temp = ieor(temp, a(x * LOOPCOUNT + y))\n            END DO\n            c(x + 1) = temp\n            !$acc loop worker\n            DO y = 1, LOOPCOUNT\n              b(x * LOOPCOUNT + y) = b(x * LOOPCOUNT + y) + c(x + 1)\n            END DO\n          END DO\n        !$acc end data\n\n        DO x = 0, 9\n          temp = 0\n          DO y = 1, LOOPCOUNT\n            temp = ieor(temp, a(x * LOOPCOUNT + y))\n          END DO\n          IF (temp .ne. c(x + 1)) THEN\n            errors = errors + 1\n          END IF\n          DO y = 1, LOOPCOUNT\n            IF (b(x * LOOPCOUNT + y) .ne. b_copy(x * LOOPCOUNT + y) + c(x + 1)) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_bitxor_vector_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,private,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        INTEGER,DIMENSION(10*LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(10*LOOPCOUNT):: randoms\n        INTEGER,DIMENSION(10):: b\n        INTEGER :: errors = 0\n        INTEGER :: temp\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        a = FLOOR(randoms*1000000)\n\n        !$acc data copyin(a(1:10*LOOPCOUNT)) copy(b(1:10))\n          !$acc parallel loop gang private(temp)\n          DO x = 0, 9\n            temp = 0\n            !$acc loop vector reduction(ieor:temp)\n            DO y = 1, LOOPCOUNT\n              temp = ieor(temp, a(x * LOOPCOUNT + y))\n            END DO\n            b(x + 1) = temp\n          END DO\n        !$acc end data\n        \n        DO x = 0, 9\n          temp = 0\n          DO y = 1, LOOPCOUNT\n            temp = ieor(temp, a(x * LOOPCOUNT + y))\n          END DO\n          IF (temp .ne. b(x + 1)) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_max_general.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        REAL(8) :: maximum, temp\n        INTEGER :: errors = 0\n\n        !Initilization\n        maximum = 0\n        temp = 0\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n          !$acc parallel loop reduction(max:maximum)\n          DO x = 1, LOOPCOUNT\n            maximum = max(maximum, a(x) * b(x))\n          END DO\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          temp = max(temp, a(x) * b(x))\n        END DO\n        IF (abs(temp - maximum) .gt. PRECISION) THEN\n          errors = errors + 1\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_max_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,private,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(10 * LOOPCOUNT):: a, b, c !Data\n        REAL(8),DIMENSION(10):: maximum\n        REAL(8) :: temp\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc data copyin(a(1:10*LOOPCOUNT), b(1:10*LOOPCOUNT)) copy(c(1:10*LOOPCOUNT))\n          !$acc parallel loop gang private(temp)\n          DO x = 0, 9\n            temp = 0\n            !$acc loop worker reduction(max:temp)\n            DO y = 1, LOOPCOUNT\n              temp = max(temp, a(x * LOOPCOUNT + y) * b(x * LOOPCOUNT + y))\n            END DO\n            maximum(x + 1) = temp\n            !$acc loop worker\n            DO y = 1, LOOPCOUNT\n              c(x * LOOPCOUNT + y) = (a(x * LOOPCOUNT + y) * b(x * LOOPCOUNT + y)) / maximum(x + 1)\n            END DO\n          END DO\n        !$acc end data\n        \n        DO x = 0, 9\n          DO y = 1, LOOPCOUNT\n            IF (a(x * LOOPCOUNT + y) * b(x * LOOPCOUNT + y) - maximum(x + 1) .gt. PRECISION) THEN\n              errors = errors + 1\n            ELSE IF ((c(x * LOOPCOUNT + y) - 1) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_max_vector_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,private,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(10 * LOOPCOUNT):: a, b !Data\n        REAL(8),DIMENSION(10):: maximum\n        INTEGER :: errors = 0\n        REAL(8) :: temp\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        maximum = 0\n\n        !$acc data copyin(a(1:10*LOOPCOUNT), b(1:10*LOOPCOUNT)) copy(maximum(1:10))\n          !$acc parallel loop private(temp)\n          DO x = 0, 9\n            temp = 0\n            !$acc loop vector reduction(max:temp)\n            DO y = 1, LOOPCOUNT\n              temp = max(temp, a(x * LOOPCOUNT + y) * b(x * LOOPCOUNT + y))\n            END DO\n            maximum(x + 1) = temp\n          END DO\n        !$acc end data\n\n        DO x = 0, 9\n          temp = 0\n          DO y = 1, LOOPCOUNT\n            temp = max(temp, a(x * LOOPCOUNT + y) * b(x * LOOPCOUNT + y))\n          END DO\n          IF (abs(temp - maximum(x + 1)) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_min_general.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        REAL(8):: minimum = 1000\n        REAL(8):: temp = 1000\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n          !$acc parallel loop reduction(min:minimum)\n          DO x = 1, LOOPCOUNT\n            minimum = min(minimum, a(x) * b(x))\n          END DO\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          temp = min(temp, a(x) * b(x))\n        END DO\n        IF (abs(temp - minimum) .gt. PRECISION) THEN\n          errors = errors + 1\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_min_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,private,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(10 * LOOPCOUNT):: a, b, c !Data\n        REAL(8),DIMENSION(10):: minimum\n        REAL(8):: temp\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        a = a + 1\n        b = b + 1\n\n        !$acc data copyin(a(1:10*LOOPCOUNT), b(1:10*LOOPCOUNT)) copy(c(1:10*LOOPCOUNT)) copy(minimum(1:10))\n          !$acc parallel loop gang private(temp)\n          DO x = 0, 9\n            temp = 1000\n            !$acc loop worker reduction(min:temp)\n            DO y = 1, LOOPCOUNT\n              temp = min(temp, a(x * LOOPCOUNT + y) * b(x * LOOPCOUNT + y))\n            END DO\n            minimum(x + 1) = temp\n            !$acc loop\n            DO y = 1, LOOPCOUNT\n              c(x * LOOPCOUNT + y) = (a(x * LOOPCOUNT + y) * b(x * LOOPCOUNT + y)) / minimum(x + 1)\n            END DO\n          END DO\n        !$acc end data\n\n        DO x = 0, 9\n          temp = 1000\n          DO y = 1, LOOPCOUNT\n            temp = min(temp, a(x * LOOPCOUNT + y) * b(x * LOOPCOUNT + y))\n          END DO\n          IF (abs(temp - minimum(x + 1)) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n          DO y = 1, LOOPCOUNT\n            IF (abs(c(x * LOOPCOUNT + y) - (a(x * LOOPCOUNT + y) * b(x * LOOPCOUNT + y) / temp)) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_min_vector_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,private,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y!Iterators\n        REAL(8),DIMENSION(10*LOOPCOUNT):: a, b !Data\n        REAL(8),DIMENSION(10):: minimum\n        REAL(8):: temp = 1000\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n\n        !$acc data copyin(a(1:10*LOOPCOUNT), b(1:10*LOOPCOUNT)) copy(minimum(1:10))\n          !$acc parallel loop gang private(temp)\n          DO x = 0, 9\n            temp = 1000\n            !$acc loop vector reduction(min:temp)\n            DO y = 1, LOOPCOUNT\n              temp = min(temp, a(x * LOOPCOUNT + y) * b(x * LOOPCOUNT + y))\n            END DO\n            minimum(x + 1) = temp\n          END DO\n        !$acc end data\n        \n        DO x = 0, 9\n          temp = 1000\n          DO y = 1, LOOPCOUNT\n            temp = min(temp, a(x * LOOPCOUNT + y) * b(x * LOOPCOUNT + y))\n          END DO\n          IF (abs(temp - minimum(x + 1)) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_multiply_general.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        INTEGER :: errors = 0\n        REAL(8) :: temp = 1\n        REAL(8) :: multiplied_total = 1\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        a = (999.4 + a)/1000\n        b = (999.4 + b)/1000\n\n        !$acc data copyin(a(1:LOOPCOUNT))\n          !$acc parallel loop reduction(*:multiplied_total)\n          DO x = 1, LOOPCOUNT\n            multiplied_total = multiplied_total * (a(x) + b(x))\n          END DO\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          temp = temp * (a(x) + b(x))\n        END DO\n        IF (abs(temp - multiplied_total) .gt. ((temp / 2) + (multiplied_total / 2)) * PRECISION) THEN\n          WRITE(*, *) temp\n          WRITE(*, *) multiplied_total\n          errors = errors + 1\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_multiply_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,private,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(10*LOOPCOUNT):: a, b, c !Data\n        REAL(8),DIMENSION(10):: totals\n        REAL(8) :: temp\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        a = (999.4 + a) / 2000\n        b = (999.4 + b) / 2000\n\n        !$acc data copyin(a(1:10*LOOPCOUNT), b(1:10*LOOPCOUNT)) copy(c(1:10*LOOPCOUNT), totals(1:10))\n          !$acc parallel loop gang private(temp)\n          DO x = 0, 9\n            temp = 1\n            !$acc loop worker reduction(*:temp)\n            DO y = 1, LOOPCOUNT\n              temp = temp * (a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y))\n            END DO\n            totals(x + 1) = temp\n            !$acc loop worker\n            DO y = 1, LOOPCOUNT\n              c(x * LOOPCOUNT + y) = (a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y)) / totals(x + 1)\n            END DO\n          END DO\n        !$acc end data\n\n        DO x = 0, 9\n          temp = 1\n          DO y = 1, LOOPCOUNT\n            temp = temp * (a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y))\n          END DO\n          IF (abs(temp - totals(x + 1)) .gt. ((temp / 2) + (totals(x + 1) / 2)) * PRECISION) THEN\n            errors = errors + 1\n            WRITE(*, *) temp\n            WRITE(*, *) totals(x + 1)\n            WRITE(*, *) \" \"\n          END IF\n          DO y = 1, LOOPCOUNT \n            IF (abs(c(x * LOOPCOUNT + y) - ((a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y)) / totals(x + 1))) .gt. c(x * LOOPCOUNT + y) * PRECISION) THEN\n              errors = errors + 1\n              WRITE(*, *) c(x * LOOPCOUNT + y)\n              WRITE(*, *) a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y)\n              WRITE(*, *) \" \"\n            END IF\n          END DO\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_multiply_vector_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,private,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(10 * LOOPCOUNT):: a, b !Data\n        REAL(8),DIMENSION(10) :: c\n        REAL(8) :: temp\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        a = (999.4 + a) / 1000\n        b = (999.4 + b) / 1000\n\n        !$acc data copyin(a(1:10*LOOPCOUNT), b(1:10*LOOPCOUNT)) copyout(c(1:10))\n          !$acc parallel loop private(temp)\n          DO x = 0, 9\n            temp = 1\n            !$acc loop vector reduction(*:temp)\n            DO y = 1, LOOPCOUNT\n              temp = temp * (a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y))\n            END DO\n            c(x + 1) = temp\n          END DO\n        !$acc end data\n\n        DO x = 0, 9\n          temp = 1\n          DO y = 1, LOOPCOUNT\n            temp = temp * (a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y))\n          END DO\n          IF (abs(temp - c(x + 1)) .gt. ((temp / 2) + (c(x + 1) / 2)) * PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_or_general.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        LOGICAL,DIMENSION(LOOPCOUNT):: a !Data\n        LOGICAL :: results = .FALSE.\n        LOGICAL :: temp = .FALSE.\n        REAL(8) :: false_margin = exp(log(.5) / n)\n        REAL(8),DIMENSION(LOOPCOUNT):: random\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(random)\n        DO x = 1, LOOPCOUNT\n          IF (random(x) > false_margin) THEN\n            a(x) = .TRUE.\n          ELSE\n            a(x) = .FALSE.\n          END IF\n        END DO\n\n        !$acc data copyin(a(1:LOOPCOUNT))\n          !$acc parallel loop reduction(.OR.:results)\n          DO x = 1, LOOPCOUNT\n            results = results .OR. a(x)\n          END DO\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          temp = temp .OR. a(x)\n        END DO\n        IF (temp .neqv. results) THEN\n          errors = errors + 1\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_or_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,private,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        LOGICAL,DIMENSION(10*LOOPCOUNT):: a, a_copy !Data\n        LOGICAL,DIMENSION(10) :: results\n        LOGICAL :: temp = .FALSE.\n        REAL(8),DIMENSION(10 * LOOPCOUNT) :: random\n        REAL(8) :: false_margin = exp(log(.5) / n)\n        INTEGER :: errors = 0\n\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(random)\n\n        !Initilization\n        DO x = 1, 10 * LOOPCOUNT\n          IF (random(x) .gt. false_margin) THEN\n            a(x) = .TRUE.\n          ELSE\n            a(x) = .FALSE.\n          END IF\n          a_copy(x) = a(x)\n        END DO\n\n        DO x = 1, 10\n          results(x) = .FALSE.\n        END DO\n\n        !$acc data copy(a(1:10*LOOPCOUNT), results(1:10))\n          !$acc parallel loop gang private(temp)\n          DO x = 0, 9\n            temp = .FALSE.\n            !$acc loop worker reduction(.OR.:temp)\n            DO y = 1, LOOPCOUNT\n              temp = temp .OR. a(x * LOOPCOUNT + y)\n            END DO\n            results(x + 1) = temp\n            !$acc loop worker\n            DO y = 1, LOOPCOUNT\n              IF (results(x + 1) .eqv. .TRUE.) THEN\n                IF(a(x * LOOPCOUNT + y) .eqv. .TRUE.) THEN\n                  a(x * LOOPCOUNT + y) = .FALSE.\n                ELSE\n                  a(x * LOOPCOUNT + y) = .TRUE.\n                END IF\n              END IF\n            END DO\n          END DO\n        !$acc end data\n\n        DO x = 0, 9\n          temp = .FALSE.\n          DO y = 1, LOOPCOUNT\n            temp = temp .OR. a_copy(x * LOOPCOUNT + y)\n          END DO\n          IF (temp .neqv. results(x + 1)) THEN\n            errors = errors + 1\n          END IF\n          DO y = 1, LOOPCOUNT\n            IF (temp .eqv. .FALSE.) THEN\n              IF (a(x * LOOPCOUNT + y) .neqv. a_copy(x * LOOPCOUNT + y)) THEN\n                errors = errors + 1\n              END IF\n            ELSE\n              IF (a(x * LOOPCOUNT + y) .eqv. a_copy(x * LOOPCOUNT + y)) THEN\n                errors = errors + 1\n              END IF\n            END IF\n          END DO\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_or_vector_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,private,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        LOGICAL,DIMENSION(10*LOOPCOUNT):: a !Data\n        LOGICAL,DIMENSION(10) :: b\n        LOGICAL :: temp\n        REAL(8),DIMENSION(10*LOOPCOUNT):: randoms\n        REAL(8) :: false_margin = exp(log(.5) / 2)\n        INTEGER :: errors = 0\n\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n\n        !Initilization\n        DO x = 1, 10 * LOOPCOUNT\n          IF (randoms(x) > false_margin) THEN\n            a(x) = .TRUE.\n          ELSE\n            a(x) = .FALSE.\n          END IF\n        END DO\n\n        !$acc data copyin(a(1:10*LOOPCOUNT)), copy(b(1:10))\n          !$acc parallel loop private(temp)\n          DO x = 0, 9\n            temp = .FALSE.\n            !$acc loop vector reduction(.OR.:temp)\n            DO y = 1, LOOPCOUNT\n              temp = temp .OR. a(x * LOOPCOUNT + y)\n            END DO\n            b(x + 1) = temp\n          END DO\n        !$acc end data\n\n        DO x = 0, 9\n          temp = .FALSE.\n          DO y = 1, LOOPCOUNT\n            temp = temp .OR. a(x * LOOPCOUNT + y)\n          END DO\n          IF (temp .neqv. b(x + 1)) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_seq.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        b = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(b(1:LOOPCOUNT))\n          !$acc parallel loop seq\n          DO x = 2, LOOPCOUNT\n            b(x) = b(x - 1) + a(x)\n          END DO\n        !$acc end data\n        \n        DO x = 2, LOOPCOUNT\n          IF (abs(b(x) - (b(x - 1) + a(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_tile.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,reduction,combined-constructs,loop,tile,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y, z !Iterators\n        REAL(8),DIMENSION(SMALL_LOOPCOUNT):: a, b, c !Data\n        REAL(8),DIMENSION(SMALL_LOOPCOUNT,SMALL_LOOPCOUNT)::d\n        REAL(8) :: temp\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        CALL RANDOM_NUMBER(c)\n\n        !$acc data copyin(a(1:SMALL_LOOPCOUNT), b(1:SMALL_LOOPCOUNT), c(1:SMALL_LOOPCOUNT)) copyout(d(1:SMALL_LOOPCOUNT,1:SMALL_LOOPCOUNT))\n          !$acc parallel loop tile(*, *) reduction(+:temp)\n          DO x = 1, SMALL_LOOPCOUNT\n            DO y = 1, SMALL_LOOPCOUNT \n              temp = 0\n              DO z = 1, SMALL_LOOPCOUNT\n                temp = temp + a(z) + b(z) + c(z)\n              END DO\n              d(x,y) = temp\n            END DO\n          END DO\n        !$acc end data\n        \n        DO x = 1, SMALL_LOOPCOUNT \n          DO y = 1, SMALL_LOOPCOUNT \n            temp = 0\n            DO z = 1, SMALL_LOOPCOUNT\n              temp = temp + a(z) + b(z) + c(z) \n            END DO\n            IF (abs(d(x,y) - temp) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "reduction",
                            "combined-constructs",
                            "loop",
                            "tile"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_vector.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copy(c(1:LOOPCOUNT))\n          !$acc parallel loop vector\n          DO x = 1, LOOPCOUNT\n            c(x) = a(x) + b(x)\n          END DO\n        !$acc end data\n        \n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_vector_blocking.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        REAL(8) :: multiplyer\n        INTEGER :: errors = 0\n\n        multiplyer = 1\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop vector\n            DO x = 1, LOOPCOUNT\n              c(x) = (a(x) + b(x)) * multiplyer\n            END DO\n            multiplyer = multiplyer + 1\n            !$acc loop vector\n            DO x = 1, LOOPCOUNT\n              c(x) = c(x) + ((a(x) + b(x)) * multiplyer)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (3 * (a(x) + b(x)))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_worker.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n          !$acc parallel loop worker\n          DO x = 1, LOOPCOUNT\n            c(x) = a(x) + b(x)\n          END DO\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_worker_blocking.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        REAL(8) :: multiplyer\n        INTEGER :: errors = 0\n\n        multiplyer = 1\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop worker\n            DO x = 1, LOOPCOUNT\n              c(x) = (a(x) + b(x)) * multiplyer\n            END DO\n            multiplyer = multiplyer + 1\n            !$acc loop worker\n            DO x = 1, LOOPCOUNT\n              c(x) = c(x) + (a(x) + b(x)) * multiplyer\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (3 * (a(x) + b(x)))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_present.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n        !$acc parallel present(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copy(c(1:LOOPCOUNT))\n          !$acc loop\n          DO x = 1, LOOPCOUNT\n            c(x) = a(x) + b(x)\n          END DO\n        !$acc end parallel\n        !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_private.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,private,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(10 * LOOPCOUNT):: a, b !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: c\n        REAL(8),DIMENSION(10)::d\n        REAL(8) :: temp\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        d = 0\n\n        !$acc enter data copyin(a(1:10*LOOPCOUNT), b(1:10*LOOPCOUNT), d(1:10)) \n        !$acc parallel num_gangs(10) private(c(1:LOOPCOUNT))\n          !$acc loop gang\n          DO x = 1, 10\n            !$acc loop worker\n            DO y = 1, LOOPCOUNT\n              c(y) = a((x - 1) * LOOPCOUNT + y) + b((x - 1) * LOOPCOUNT + y)\n            END DO\n            !$acc loop seq\n            DO y = 1, LOOPCOUNT\n              d(x) = d(x) + c(y)\n            END DO\n          END DO\n        !$acc end parallel\n        !$acc exit data copyout(d(1:10)) delete(a(1:10*LOOPCOUNT), b(1:10*LOOPCOUNT))\n\n        DO x = 0, 9\n          temp = 0\n          DO y = 1, LOOPCOUNT\n            temp = temp + a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y)\n          END DO\n          IF (abs(temp - d(x + 1)) .gt. 2 * PRECISION * LOOPCOUNT) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "private"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_reduction.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,reduction,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8) :: results = 0\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        !$acc data copyin(a(1:LOOPCOUNT))\n          !$acc parallel reduction(+:results)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              results = results + a(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          results = results - a(x)\n        END DO\n        IF (abs(results) .gt. PRECISION) THEN\n          errors = errors + 1\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "reduction"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_scalar_default_firstprivate.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        REAL(8),DIMENSION(1):: random\n        INTEGER :: errors = 0\n        REAL(8) :: scalar\n        REAL(8) :: scalar_copy\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(random)\n        scalar = random(1)\n        scalar_copy = scalar\n        CALL RANDOM_NUMBER(a)\n        b = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              b(x) = a(x) + scalar\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          IF (abs(b(x) - (a(x) + scalar_copy)) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n        IF (abs(scalar_copy - scalar) .gt. PRECISION) THEN\n          errors = errors + 1\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_switch.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        INTEGER,DIMENSION(LOOPCOUNT):: a\n        REAL(8),DIMENSION(LOOPCOUNT):: b, c, randoms!Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        CALL RANDOM_NUMBER(randoms)\n        a = floor(randoms * 3)\n\n        !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n        !$acc parallel present(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n          !$acc loop\n          DO x = 1, LOOPCOUNT\n            SELECT CASE (a(x))\n              CASE (0)\n                c(x) = b(x) * b(x)\n              CASE (1)\n                c(x) = b(x) / b(x)\n              CASE (2)\n                c(x) = b(x) / 2\n            END SELECT\n          END DO\n        !$acc end parallel\n        !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          SELECT CASE (a(x))\n            CASE (0)\n              IF (abs(c(x) - (b(x) * b(x))) .gt. PRECISION) THEN\n                errors = errors + 1\n              END IF\n            CASE (1)\n              IF (abs(c(x) - (b(x) / b(x))) .gt. PRECISION) THEN\n                errors = errors + 1\n              END IF\n            CASE (2)\n              IF (abs(c(x) - (b(x) / 2)) .gt. PRECISION) THEN\n                errors = errors + 1\n              END IF\n          END SELECT\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_wait.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:async,parallel,update,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        b = a\n\n        !$acc enter data create(a(1:LOOPCOUNT))\n        !$acc update device(a(1:LOOPCOUNT)) async(1)\n        !$acc parallel present(a(1:LOOPCOUNT)) wait(1)\n          !$acc loop\n          DO x = 1, LOOPCOUNT\n            a(x) = a(x) + 1\n          END DO\n        !$acc end parallel\n        !$acc exit data copyout(a(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(a(x) - (b(x) + 1)) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "async",
                            "parallel",
                            "update"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_while_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,reduction,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(10, LOOPCOUNT):: a !Data\n        REAL(8) :: avg\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n \n        !$acc data copy(a(1:10, 1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, 10\n              avg = 0.0\n              DO WHILE (avg - 1000 .lt. PRECISION * LOOPCOUNT)\n                avg = 0.0\n                !$acc loop\n                DO y = 1, LOOPCOUNT\n                  a(x, y) = a(x, y) * 1.5\n                END DO\n                !$acc loop reduction(+:avg)\n                DO y = 1, LOOPCOUNT\n                  avg = avg + (a(x, y) / LOOPCOUNT)\n                END DO\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, 10\n          avg = 0.0\n          DO y = 1, LOOPCOUNT\n            avg = avg + (a(x, y) / LOOPCOUNT)\n          END DO\n          IF (avg < 1000 .OR. avg > 1600) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "reduction",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: x, i_a, i_b, i_c, i_d, i_e, i_f, i_g, i_h, i_i, i_j !Iterators\n  INTEGER, PARAMETER :: PRIVATE_LOOPCOUNT = 1024\n  REAL(8),DIMENSION(PRIVATE_LOOPCOUNT):: a, b, c !Data\n  INTEGER :: errors\n  errors = 0\n\n  !Initilization\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n  c = 0\n\n  !$acc data copyin(a(1:PRIVATE_LOOPCOUNT), b(1:PRIVATE_LOOPCOUNT)) copy(c(1:PRIVATE_LOOPCOUNT))\n    !$acc serial\n      !$acc loop\n      DO i_a = 0, 1\n        !$acc loop\n        DO i_b = 0, 1\n          !$acc loop\n          DO i_c = 0, 1\n            !$acc loop\n            DO i_d = 0, 1\n              !$acc loop\n              DO i_e = 0, 1\n                !$acc loop\n                DO i_f = 0, 1\n                  !$acc loop\n                  DO i_g = 0, 1\n                    !$acc loop\n                    DO i_h = 0, 1\n                      !$acc loop\n                      DO i_i = 0, 1\n                        !$acc loop\n                        DO i_j = 0, 1\n                          c(i_a*512 + i_b*256 + i_c*128 + i_d*64 + i_e*32 + i_f*16 + i_g*8 + i_h*4 + i_i*2 + i_j + 1) = &\n                          a(i_a*512 + i_b*256 + i_c*128 + i_d*64 + i_e*32 + i_f*16 + i_g*8 + i_h*4 + i_i*2 + i_j + 1) + &\n                          b(i_a*512 + i_b*256 + i_c*128 + i_d*64 + i_e*32 + i_f*16 + i_g*8 + i_h*4 + i_i*2 + i_j + 1)\n                        END DO\n                      END DO\n                    END DO\n                  END DO\n                END DO\n              END DO\n            END DO\n          END DO\n        END DO\n      END DO\n    !$acc end serial\n  !$acc end data\n\n  DO x = 1, PRIVATE_LOOPCOUNT\n    IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            ""
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_async.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:async,serial,update,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER:: errors\n  REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, d, e, f, g\n  INTEGER:: x\n\n  errors = 0\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n  c = 0\n  CALL RANDOM_NUMBER(d)\n  CALL RANDOM_NUMBER(e)\n  f = 0\n  g = 0\n\n  !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT), d(1:LOOPCOUNT), e(1:LOOPCOUNT), f(1:LOOPCOUNT), g(1:LOOPCOUNT))\n    !$acc serial async(1)\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        c(x) = a(x) + b(x)\n      END DO\n    !$acc end serial\n    !$acc serial async(2)\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        f(x) = d(x) + e(x)\n      END DO\n    !$acc end serial\n    !$acc serial wait(1, 2) async(3)\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        g(x) = c(x) + f(x)\n      END DO\n    !$acc end serial\n\n    !$acc update host(c(1:LOOPCOUNT)) async(1)\n    !$acc update host(f(1:LOOPCOUNT)) async(2)\n    !$acc update host(g(1:LOOPCOUNT)) async(3)\n\n    !$acc wait(1)\n    DO x = 1, LOOPCOUNT\n      IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n        errors = errors + 1\n      END IF\n    END DO\n\n    !$acc wait(2)\n    DO x = 1, LOOPCOUNT\n      IF (abs(f(x) - (d(x) + e(x))) .gt. PRECISION) THEN\n        errors = errors + 1\n      END IF\n    END DO\n\n    !$acc wait(3)\n    DO x = 1, LOOPCOUNT\n      IF (abs(g(x) - (a(x) + b(x) + d(x) + e(x))) .gt. 4 * PRECISION) THEN\n        errors = errors + 1\n      END IF\n    END DO\n  !$acc end data\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "async",
                            "serial",
                            "update"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_copy.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER:: errors\n  REAL(8),DIMENSION(LOOPCOUNT):: a, a_host\n  INTEGER:: x\n  errors = 0\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  a_host = a\n\n  !$acc serial copy(a(1:LOOPCOUNT))\n    !$acc loop\n    DO x = 1, N\n      a(x) = 2 * a(x)\n    END DO\n  !$acc end serial\n\n  DO x = 1, N\n    IF (abs(a(x) - (2 * a_host(x))) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_copyin.F90": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER:: errors\n  REAL(8),DIMENSION(LOOPCOUNT):: a, a_copy, b\n  INTEGER,DIMENSION(1):: hasDevice\n  INTEGER:: x\n  errors = 0\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  a_copy = a\n  b = 0\n\n  hasDevice(1) = 1\n  !$acc enter data copyin(hasDevice(1:1))\n  !$acc parallel present(hasDevice(1:1))\n    hasDevice(1) = 0\n  !$acc end parallel\n\n  !$acc serial copyin(a(1:LOOPCOUNT))\n    !$acc loop\n    DO x = 1, LOOPCOUNT\n      a(x) = 0\n    END DO\n  !$acc end serial\n\n  DO x = 1, LOOPCOUNT\n    IF (hasDevice(1) .eq. 1) THEN\n      IF (abs(a(x) - a_copy(x)) .gt. PRECISION) THEN\n        errors = errors + 1\n      END IF\n    ELSE\n      IF (abs(a(x)) .gt. PRECISION) THEN\n        errors = errors + 1\n      END IF\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:serial,V:2.6-2.7\n      LOGICAL FUNCTION test2()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER:: errors\n  REAL(8),DIMENSION(LOOPCOUNT):: a, a_copy, b\n  INTEGER,DIMENSION(1):: hasDevice\n  INTEGER:: x\n  errors = 0\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n\n  !$acc data copy(b(1:LOOPCOUNT))\n    !$acc serial copyin(a(1:LOOPCOUNT))\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        b(x) = a(x)\n      END DO\n    !$acc end serial\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    IF (abs(a(x) - b(x)) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_copyout.F90": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER:: errors\n  REAL(8),DIMENSION(LOOPCOUNT):: a, b\n  INTEGER:: x\n  INTEGER,DIMENSION(1):: hasDevice\n  errors = 0\n\n  hasDevice(1) = 1\n  !$acc enter data copyin(hasDevice(1:1))\n  !$acc parallel present(hasDevice(1:1))\n  hasDevice(1) = 0\n  !$acc end parallel\n  \n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  b = 0\n\n\n  !$acc data copyin(a(1:LOOPCOUNT))\n    !$acc serial copyout(b(1:LOOPCOUNT))\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        b(x) = a(x)\n      END DO\n    !$acc end serial\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    IF (abs(a(x) - b(x)) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:serial,V:2.6-2.7\n      LOGICAL FUNCTION test2()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER:: errors\n  REAL(8),DIMENSION(LOOPCOUNT):: a, b\n  INTEGER:: x\n  INTEGER,DIMENSION(1):: hasDevice\n  errors = 0\n\n  hasDevice(1) = 1\n  !$acc enter data copyin(hasDevice(1:1))\n  !$acc parallel present(hasDevice(1:1))\n  hasDevice(1) = 0\n  !$acc end parallel\n  \n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  IF (hasDevice(1) .eq. 1) THEN\n    !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n      !$acc serial copyout(b(1:LOOPCOUNT))\n        !$acc loop\n        DO x = 1, LOOPCOUNT\n          b(x) = b(x) - a(x)\n        END DO\n      !$acc end serial\n    !$acc end data\n\n    DO x = 1, LOOPCOUNT\n      IF (abs(a(x) - b(x)) .gt. PRECISION) THEN\n        errors = errors + 1\n      END IF\n    END DO\n  END IF\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n!T3:serial,update,V:2.6-2.7\n      LOGICAL FUNCTION test3()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER:: errors\n  REAL(8),DIMENSION(LOOPCOUNT):: a, b\n  INTEGER:: x\n  INTEGER,DIMENSION(1):: hasDevice\n  errors = 0\n\n  hasDevice(1) = 1\n  !$acc enter data copyin(hasDevice(1:1))\n  !$acc parallel present(hasDevice(1:1))\n  hasDevice(1) = 0\n  !$acc end parallel\n  \n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n    !$acc serial copyout(b(1:LOOPCOUNT))\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        b(x) = b(x) - a(x)\n      END DO\n    !$acc end serial\n    !$acc update host(b(1:LOOPCOUNT))\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    IF (abs(b(x)) .gt. 2 * PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test3 = .FALSE.\n        ELSE\n          test3 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T3\n        LOGICAL :: test3\n#endif\n#ifndef T3\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test3()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 2\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "update"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_create.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER:: errors\n  REAL(8),DIMENSION(LOOPCOUNT):: a, b, c\n  INTEGER:: x\n  errors = 0\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  b = 0\n  c = 0\n\n  !$acc data copyin(a(1:LOOPCOUNT)) copy(c(1:LOOPCOUNT))\n    !$acc serial create(b(1:LOOPCOUNT))\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        b(x) = a(x)\n      END DO\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        c(x) = b(x)\n      END DO\n    !$acc end serial\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    IF (abs(a(x) - c(x)) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_default_copy.F90": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:devonly,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER:: errors\n  REAL(8),DIMENSION(LOOPCOUNT):: a, b, c\n  INTEGER,DIMENSION(1):: devtest\n  INTEGER:: x\n  errors = 0\n\n  devtest(1) = 1\n  !$acc enter data copyin(devtest(1:1))\n  !$acc parallel present(devtest(1:1))\n    devtest(1) = 0\n  !$acc end parallel\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n  c = 0\n\n  !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n    !$acc serial\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        c(x) = c(x) + b(x) + a(x)\n      END DO\n    !$acc end serial\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:devonly,V:2.6-2.7\n      LOGICAL FUNCTION test2()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER:: errors\n  REAL(8),DIMENSION(LOOPCOUNT):: a, b, c\n  INTEGER,DIMENSION(1):: devtest\n  INTEGER:: x\n  errors = 0\n\n  devtest(1) = 1\n  !$acc enter data copyin(devtest(1:1))\n  !$acc parallel present(devtest(1:1))\n    devtest(1) = 0\n  !$acc end parallel\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  IF (devtest(1) .eq. 1) THEN\n    CALL RANDOM_NUMBER(a)\n    CALL RANDOM_NUMBER(b)\n    c = 1\n\n    !$acc enter data copyin(c(1:LOOPCOUNT))\n    DO x = 1, LOOPCOUNT\n      c(x) = 0\n    END DO\n\n    !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n      !$acc serial\n        !$acc loop\n        DO x = 1, LOOPCOUNT\n          c(x) = c(x) + a(x) + b(x)\n        END DO\n      !$acc end serial\n    !$acc end data\n\n    DO x = 1, LOOPCOUNT\n      if (abs(c(x)) .gt. PRECISION) THEN\n        errors = errors + 1\n      END IF\n    END DO\n\n    !$acc exit data copyout(c(1:LOOPCOUNT))\n\n    DO x = 1, LOOPCOUNT\n      IF (abs(c(x) - (a(x) + b(x) + 1)) .gt. PRECISION) THEN\n        errors = errors + 1\n      END IF\n    END DO\n  END IF\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_default_present.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,default,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER:: errors\n  REAL(8),DIMENSION(LOOPCOUNT):: a\n  INTEGER:: x\n  errors = 0\n\n  a = 0\n\n  !$acc enter data copyin(a(1:LOOPCOUNT))\n  !$acc serial default(present)\n    !$acc loop\n    DO x = 1, LOOPCOUNT\n      a(x) = 1\n    END DO\n  !$acc end serial\n  !$acc exit data copyout(a(1:LOOPCOUNT))\n\n  DO x = 1, LOOPCOUNT\n    IF (abs(a(x) - 1) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "default"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_firstprivate.F90": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,firstprivate,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER:: errors\n  REAL(8),DIMENSION(10, LOOPCOUNT):: a, b, d\n  REAL(8),DIMENSION(10):: c, c_copy\n  INTEGER:: x, y\n\n  errors = 0\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n  CALL RANDOM_NUMBER(c)\n  c_copy = c\n  d = 0\n  !$acc data copyin(a(1:10, 1:LOOPCOUNT), b(1:10, 1:LOOPCOUNT)) copy(d(1:10, 1:LOOPCOUNT))\n    !$acc serial firstprivate(c(1:10))\n      !$acc loop gang\n      DO y = 1, LOOPCOUNT\n        !$acc loop worker\n        DO x = 1, 10\n          d(x, y) = a(x, y) + b(x, y) + c(x)\n        END DO\n      END DO\n    !$acc end serial\n  !$acc end data\n\n  DO y = 1, LOOPCOUNT\n    DO x = 1, 10\n      IF (abs(d(x, y) - (a(x, y) + b(x, y) + c_copy(x))) .gt. PRECISION) THEN\n        errors = errors + 1\n      END IF\n    END DO\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "firstprivate"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:serial,firstprivate,V:2.6-2.7\n      LOGICAL FUNCTION test2()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER:: errors\n  REAL(8),DIMENSION(10, LOOPCOUNT):: a, b, d\n  REAL(8),DIMENSION(10):: c, c_copy\n  INTEGER:: x, y\n\n  errors = 0\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n  d = 0\n  c = 0\n\n  !$acc data copyin(a(1:10, 1:LOOPCOUNT), b(1:10, 1:LOOPCOUNT)) copy(d(1:10, 1:LOOPCOUNT))\n    !$acc serial firstprivate(c(1:10))\n      !$acc loop gang independent\n      DO y = 1, LOOPCOUNT\n        !$acc loop worker independent\n        DO x = 1, 10\n          c(x) = a(x, y) - b(x, y)\n        END DO\n        !$acc loop worker independent\n        DO x = 1, 10\n          d(x, y) = a(x, y) + b(x, y) + c(x)\n        END DO\n      END DO\n    !$acc end serial\n  !$acc end data\n\n  DO y = 1, LOOPCOUNT\n    DO x = 1, 10\n      IF (abs(d(x, y) - (2 * a(x, y))) .gt. PRECISION) THEN\n        errors = errors + 1\n      END IF\n    END DO\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "firstprivate"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_if.F90": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:devonly,serial,if,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER:: errors\n  REAL(8),DIMENSION(LOOPCOUNT):: a, b, c\n  LOGICAL,DIMENSION(1):: devtest\n  LOGICAL:: host, device\n  INTEGER:: x\n  host = .FALSE.\n  device = .TRUE.\n  errors = 0\n\n  devtest(1) = .TRUE.\n  !$acc enter data copyin(devtest(1:1))\n  !$acc parallel present(devtest(1:1))\n    devtest(1) = .FALSE.\n  !$acc end parallel\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n  c = 0\n\n  !$acc serial if(host)\n    !$acc loop\n    DO x = 1, LOOPCOUNT\n      c(x) = a(x) + b(x)\n    END DO\n  !$acc end serial\n\n  DO x = 1, N\n    IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "serial",
                            "if"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:devonly,serial,if,V:2.6-2.7\n      LOGICAL FUNCTION test2()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER:: errors\n  REAL(8),DIMENSION(LOOPCOUNT):: a, b, c\n  LOGICAL,DIMENSION(1):: devtest\n  LOGICAL:: host, device\n  INTEGER:: x\n  host = .FALSE.\n  device = .TRUE.\n  errors = 0\n\n  devtest(1) = .TRUE.\n  !$acc enter data copyin(devtest(1:1))\n  !$acc parallel present(devtest(1:1))\n    devtest(1) = .FALSE.\n  !$acc end parallel\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  IF (devtest(1)) THEN\n    CALL RANDOM_NUMBER(a)\n    CALL RANDOM_NUMBER(b)\n    c = a + b\n\n    !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n    !$acc serial if(host) present(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        c(x) = c(x) + a(x) + b(x)\n      END DO\n    !$acc end serial\n    !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n\n    DO x = 1, LOOPCOUNT\n      IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n        errors = errors + 1\n      END IF\n    END DO\n  END IF\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "serial",
                            "if"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n!T3:devonly,serial,if,V:2.6-2.7\n      LOGICAL FUNCTION test3()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER:: errors\n  REAL(8),DIMENSION(LOOPCOUNT):: a, b, c\n  LOGICAL,DIMENSION(1):: devtest\n  LOGICAL:: host, device\n  INTEGER:: x\n  host = .FALSE.\n  device = .TRUE.\n  errors = 0\n\n  devtest(1) = .TRUE.\n  !$acc enter data copyin(devtest(1:1))\n  !$acc parallel present(devtest(1:1))\n    devtest(1) = .FALSE.\n  !$acc end parallel\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n  c = a + b\n  \n  !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n  !$acc serial if(device) present(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n    !$acc loop\n    DO x = 1, LOOPCOUNT\n      c(x) = c(x) + a(x) + b(x)\n    END DO\n  !$acc end serial\n  !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n\n  DO x = 1, LOOPCOUNT\n    IF (abs(c(x) - (2 * (a(x) + b(x)))) .gt. PRECISION * 2) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test3 = .FALSE.\n        ELSE\n          test3 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T3\n        LOGICAL :: test3\n#endif\n#ifndef T3\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test3()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 2\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "serial",
                            "if"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  REAL(8),DIMENSION(LOOPCOUNT):: a, b, c\n  INTEGER:: x\n  INTEGER:: errors\n\n  errors = 0\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n  c = 0\n\n  !$acc data copy(c(1:LOOPCOUNT))\n    !$acc serial loop\n    DO x = 1, LOOPCOUNT\n      c(x) = 1\n    END DO\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    IF (abs(c(x) - 1) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n  !$acc data copy(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n    !$acc serial\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        c(x) = b(x)\n      END DO\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        c(x) = c(x) + a(x)\n      END DO\n    !$acc end serial\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_async.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:async,serial,combined-constructs,loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER:: errors\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b, c, d\n  INTEGER,DIMENSION(10):: error_array\n  INTEGER:: x, y\n\n  errors = 0\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n  c = 0\n\n  DO y = 1, 10\n    DO x = 1, LOOPCOUNT\n      d(x, y) = a(x, y) + b(x, y)\n    END DO\n  END DO\n\n  error_array = 0\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10), b(1:LOOPCOUNT, 1:10), c(1:LOOPCOUNT, 1:10), d(1:LOOPCOUNT, 1:10)) copy(error_array(1:10))\n    DO y = 1, 10\n      !$acc serial loop async(y)\n      DO x = 1, LOOPCOUNT\n        c(x, y) = a(x, y) + b(x, y)\n      END DO\n      !$acc serial loop async(y)\n      DO x = 1, LOOPCOUNT\n        IF (((c(x, y) - d(x, y)) .gt. PRECISION) .OR. ((d(x, y) - c(x, y)) .gt. PRECISION)) THEN\n          error_array(y) = error_array(y) + 1\n        END IF\n      END DO\n    END DO\n  !$acc end data\n\n  DO x = 1, 10\n    errors = errors + error_array(x)\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "async",
                            "serial",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_auto.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,combined-constructs,loop,auto,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER:: errors\n  REAL(8),DIMENSION(LOOPCOUNT):: a, a_copy, b\n  INTEGER:: x\n  REAL(8):: temp\n  errors = 0\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  a_copy = a\n  b = 0\n\n  !$acc data copyin(a(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT))\n    !$acc serial loop auto\n    DO x = 1, LOOPCOUNT\n      b(x) = a(x)\n    END DO\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    IF (abs(b(x) - a(x)) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n  !$acc data copy(a(1:LOOPCOUNT))\n    !$acc serial loop auto\n    DO x = 2, LOOPCOUNT\n      a(x) = a(x - 1) + a(x)\n    END DO\n  !$acc end data\n\n  temp = 0\n  DO x = 1, LOOPCOUNT\n    temp = temp + a_copy(x)\n    IF (abs(temp - a(x)) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "combined-constructs",
                            "loop",
                            "auto"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_gang.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,combined-constructs,loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER:: errors\n  REAL(8),DIMENSION(LOOPCOUNT):: a, b, c\n  INTEGER:: x\n\n  errors = 0\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n  c = 0\n\n  !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copy(c(1:LOOPCOUNT))\n    !$acc serial loop gang\n    DO x = 1, LOOPCOUNT\n      c(x) = a(x) + b(x)\n    END DO\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_add_general.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,reduction,combined-constructs,loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER:: errors\n  REAL(8),DIMENSION(LOOPCOUNT):: a, b\n  REAL(8):: total\n  INTEGER:: x\n  errors = 0\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n\n  total = 10\n  !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n    !$acc serial loop reduction(+:total)\n    DO x = 1, LOOPCOUNT\n      total = total + a(x) + b(x)\n    END DO\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    total = total - (a(x) + b(x))\n  END DO\n\n  IF (abs(total - 10) .gt. PRECISION) THEN\n    errors = errors + 1\n  END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_add_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,private,reduction,combined-constructs,loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER:: errors\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b, c, d\n  REAL(8):: avg, temp\n  INTEGER:: x, y\n  avg = 0\n  errors = 0\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10), b(1:LOOPCOUNT, 1:10)) create(c(1:LOOPCOUNT, 1:10)) copyout(d(1:LOOPCOUNT, 1:10))\n    !$acc serial loop gang private(avg)\n    DO y = 1, 10\n      avg = 0\n      !$acc loop worker reduction(+:avg)\n      DO x = 1, LOOPCOUNT\n        c(x, y) = a(x, y) + b(x, y)\n        avg = avg + c(x, y)\n      END DO\n      avg = avg / LOOPCOUNT\n      !$acc loop worker\n      DO x = 1, LOOPCOUNT\n        d(x, y) = c(x, y) - avg\n      END DO\n    END DO\n  !$acc end data\n\n  DO y = 1, 10\n    temp = 0\n    DO x = 1, LOOPCOUNT\n      temp = temp + (a(x, y) + b(x, y))\n    END DO\n    temp = temp / LOOPCOUNT\n    DO x = 1, LOOPCOUNT\n      IF (abs(d(x, y) - ((a(x, y) + b(x, y)) - temp)) .gt. PRECISION) THEN\n        errors = errors + 1\n      END IF\n    END DO\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_add_vector_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,private,reduction,combined-constructs,loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER:: errors\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b\n  REAL(8),DIMENSION(10):: c\n  REAL(8):: temp\n  INTEGER:: x, y\n\n  errors = 0\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n\n  !$acc data copyin(a(1:LOOPCOUNT,1:10), b(1:LOOPCOUNT,1:10)) copyout(c(1:10))\n    !$acc serial loop private(temp)\n    DO y = 1, 10\n      temp = 0\n      !$acc loop vector reduction(+:temp)\n      DO x = 1, LOOPCOUNT\n        temp = temp + (a(x, y) + b(x, y))\n      END DO\n      c(y) = temp\n    END DO\n  !$acc end data\n\n  DO y = 1, 10\n    DO x = 1, LOOPCOUNT\n      c(y) = c(y) - (a(x, y) + b(x, y))\n    END DO\n    IF (abs(c(y)) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_and_general.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,reduction,combined-constructs,loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER:: errors\n  INTEGER:: x\n  LOGICAL,DIMENSION(LOOPCOUNT):: a\n  LOGICAL:: result, host_result\n  REAL(8),DIMENSION(LOOPCOUNT):: randoms\n  REAL(8):: false_margin = EXP(LOG(.5) / LOOPCOUNT)\n\n  errors = 0\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(randoms)\n\n  DO x = 1, LOOPCOUNT\n    IF (randoms(x) .lt. false_margin) THEN\n      a(x) = .TRUE.\n    ELSE\n      a(x) = .FALSE.\n    END IF\n  END DO\n\n  result = .TRUE.\n  !$acc data copyin(a(1:LOOPCOUNT))\n    !$acc serial loop reduction(.AND.:result)\n    DO x = 1, LOOPCOUNT\n      result = result .AND. a(x)\n    END DO\n  !$acc end data\n\n  host_result = .TRUE.\n  DO x = 1, LOOPCOUNT\n    host_result = host_result .AND. a(x)\n  END DO\n\n  IF (host_result .NEQV. result) THEN\n    errors = errors + 1\n  END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_and_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,private,reduction,combined-constructs,loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER:: errors\n  REAL(8):: false_margin\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n  LOGICAL,DIMENSION(LOOPCOUNT, 10):: a, a_copy\n  LOGICAL,DIMENSIOn(10):: has_false\n  LOGICAL:: temp\n  INTEGER:: x, y\n  errors = 0\n  false_margin = EXP(LOG(.5) / LOOPCOUNT)\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(randoms)\n\n  has_false = .FALSE.\n  a = .TRUE.\n  DO y = 1, 10\n    DO x = 1, LOOPCOUNT\n      IF (randoms(x, y) .gt. false_margin) THEN\n        a(x, y) = .FALSE.\n        has_false(y) = .TRUE.\n      END IF\n    END DO\n  END DO\n  a_copy = a\n\n  !$acc data copy(a(1:LOOPCOUNT, 1:10))\n    !$acc serial loop gang private(temp)\n    DO y = 1, 10\n      temp = .TRUE.\n      !$acc loop worker reduction(.AND.:temp)\n      DO x = 1, LOOPCOUNT\n        temp = temp .AND. a(x, y)\n      END DO\n      !$acc loop worker\n      DO x = 1, LOOPCOUNT\n        IF (temp) THEN\n          IF (a(x, y) .eq. 1) THEN\n            a(x, y) = .FALSE.\n          ELSE\n            a(x, y) = .TRUE.\n          END IF\n        END IF\n      END DO\n    END DO\n  !$acc end data\n\n  DO y = 1, 10\n    DO x = 1, LOOPCOUNT\n      IF ((has_false(y) .eqv. .TRUE.) .AND. (a(x, y) .neqv. a_copy(x, y))) THEN\n        errors = errors + 1\n      ELSEIF ((has_false(y) .eqv. .FALSE.) .AND. (a(x, y) .eqv. a_copy(x, y))) THEN\n        errors = errors + 1\n      END IF\n    END DO\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_and_vector_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,private,reduction,combined-constructs,loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  LOGICAL,DIMENSION(LOOPCOUNT, 10):: a\n  LOGICAL,DIMENSION(10):: b, has_false\n  LOGICAL:: temp\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n  REAL(8):: false_margin\n  INTEGER:: errors, x, y\n\n  errors = 0\n  false_margin = exp(log(.5) / LOOPCOUNT)\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(randoms)\n\n  has_false = .FALSE.\n  DO y = 1, 10\n    DO x = 1, LOOPCOUNT\n      IF (randoms(x, y) .lt. false_margin) THEN\n        a(x, y) = .TRUE.\n      ELSE\n        a(x, y) = .FALSE.\n        has_false(y) = .TRUE.\n      END IF\n    END DO\n  END DO\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(b(1:10))\n    !$acc serial loop private(temp)\n    DO y = 1, 10\n      temp = .TRUE.\n      !$acc loop vector reduction(.AND.:temp)\n      DO x = 1, LOOPCOUNT\n        temp = temp .AND. a(x, y)\n      END DO\n      b(y) = temp\n    END DO\n  !$acc end data\n\n  DO x = 1, 10\n    IF (has_false(x) .eqv. b(x)) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_bitand_general.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,reduction,combined-constructs,loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER,DIMENSION(N):: a\n  INTEGER:: b, host_b\n  REAL(8):: false_margin\n  REAL(8),DIMENSION(LOOPCOUNT, 16):: randoms\n  INTEGER:: x, y\n  INTEGER:: errors\n\n  errors = 0\n  false_margin = exp(log(.5)/LOOPCOUNT)\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(randoms)\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 16\n      IF (randoms(x, y) .lt. false_margin) THEN\n        a(x) = a(x) + 2**(y - 1)\n      END IF\n    END DO\n  END DO\n\n  b = a(1)\n  host_b = a(1)\n  DO x = 2, LOOPCOUNT\n    host_b = iand(host_b, a(x))\n  END DO\n\n  !$acc data copyin(a(1:LOOPCOUNT))\n    !$acc serial loop reduction(iand: b)\n    DO x = 1, LOOPCOUNT\n      b = iand(b, a(x))\n    END DO\n  !$acc end data\n\n  IF (b .ne. host_b) THEN\n    errors = errors + 1\n  END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_bitand_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,private,reduction,combined-constructs,loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER,DIMENSION(LOOPCOUNT, 10):: a, b, b_copy\n  INTEGER,DIMENSION(10):: c, host_c\n  INTEGER:: errors, x, y, z, temp\n  REAL(8):: false_margin\n  REAL(8),DIMENSION(LOOPCOUNT, 10, 17):: randoms\n\n  errors = 0\n  false_margin = exp(log(.5) / LOOPCOUNT)\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(randoms)\n\n  DO y = 1, 10\n    DO x = 1, LOOPCOUNT\n      b(x) = INT(10 * randoms(x, y, 17))\n      DO z = 1, 16\n        IF (randoms(x, y, z) .lt. false_margin) THEN\n          a(x) = a(x) + 2**(z - 1)\n        END IF\n      END DO\n    END DO\n  END DO\n\n  b_copy = b\n\n  DO y = 1, 10\n    temp = a(1, y)\n    DO x = 1, LOOPCOUNT\n      temp = iand(temp, a(x, y))\n    END DO\n    host_c(y) = temp\n  END DO\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(b(1:LOOPCOUNT, 1:10), c(1:10))\n    !$acc serial loop gang private(temp)\n    DO y = 1, 10\n      temp = a(1, y)\n      !$acc loop worker reduction(iand:temp)\n      DO x = 1, LOOPCOUNT\n        temp = iand(temp, a(x, y))\n      END DO\n      c(y) = temp\n      !$acc loop worker\n      DO x = 1, LOOPCOUNT\n        b(x, y) = b(x, y) + c(y)\n      END DO\n    END DO\n  !$acc end data\n\n  DO y = 1, 10\n    IF (host_c(y) .ne. c(y)) THEN\n      errors = errors + 1\n    END IF\n    DO x = 1, LOOPCOUNT\n      IF (b(x, y) .ne. b_copy(x, y) + c(y)) THEN\n        errors = errors + 1\n      END IF\n    END DO\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_bitand_vector_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,private,reduction,combined-constructs,loop,V:2.6-2.7\n  LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER,DIMENSION(LOOPCOUNT, 10):: a\n  INTEGER,DIMENSION(10):: b, b_host\n  REAL(8),DIMENSION(LOOPCOUNT, 10, 16):: randoms\n  REAL(8):: false_margin\n  INTEGER:: x, y, temp, c, z\n  INTEGER:: errors\n\n  errors = 0\n  false_margin = exp(log(.5) / LOOPCOUNT)\n  SEEDDIM(1) = 1\n  #ifdef SEED\n  SEEDDIM(1) = SEED\n  #endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(randoms)\n\n  DO y = 1, 10\n    DO x = 1, LOOPCOUNT\n      DO z = 1, 16\n        IF (randoms(x, y, z) .lt. false_margin) THEN\n          a(x, y) = a(x, y) + 2**(z - 1)\n        END IF\n      END DO\n    END DO\n  END DO\n\n  DO y = 1, 10\n    b_host(y) = a(1, y)\n    DO x = 1, LOOPCOUNT\n      b_host(y) = iand(b_host(y), a(x, y))\n    END DO\n  END DO\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(b(1:10))\n    !$acc serial loop private(c)\n    DO y = 1, 10\n      c = a(1, y)\n      !$acc loop vector reduction(iand:c)\n      DO x = 1, LOOPCOUNT\n        c = iand(c, a(x, y))\n      END DO\n      b(y) = c\n    END DO\n  !$acc end data\n\n  DO x = 1, 10\n    IF (b(x) .ne. b_host(x)) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_bitor_general.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,reduction,combined-constructs,loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER:: errors, temp, x, y, b, host_b\n  INTEGER,DIMENSION(LOOPCOUNT):: a\n  REAL(8):: false_margin\n  REAL(8),DIMENSION(LOOPCOUNT, 16):: randoms\n  errors = 0\n  false_margin = exp(log(.5) / LOOPCOUNT)\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(randoms)\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 16\n      IF (randoms(x, y) .gt. false_margin) THEN\n        a(x) = a(x) + 2**(y - 1)\n      END IF\n    END DO\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    host_b = ior(host_b, a(x))\n  END DO\n\n  !$acc data copyin(a(1:LOOPCOUNT))\n    !$acc serial loop reduction(ior:b)\n    DO x = 1, LOOPCOUNT\n      b = ior(b, a(x))\n    END DO\n  !$acc end data\n\n  IF (b .ne. host_b) THEN\n    errors = errors + 1\n  END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_bitor_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,private,reduction,combined-constructs,loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER:: errors, x, y, z, temp\n  INTEGER,DIMENSION(LOOPCOUNT, 10):: a, b, b_copy\n  INTEGER,DIMENSION(10):: c\n  REAL(8):: false_margin\n  REAL(8),DIMENSION(LOOPCOUNT, 10, 17):: randoms\n\n  errors = 0\n  false_margin = exp(log(.5) / LOOPCOUNT)\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(randoms)\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      b(x, y) = INT(randoms(x, y, 17) * 1000)\n      DO z = 1, 16\n        IF (randoms(x, y, z) .gt. false_margin) THEN\n          a(x, y) = a(x, y) + 2**(z-1)\n        END IF\n      END DO\n    END DO\n  END DO\n\n  b_copy = b\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(b(1:LOOPCOUNT, 1:10), c(1:10))\n    !$acc serial loop gang private(temp)\n    DO y = 1, 10\n      temp = 0\n      !$acc loop worker reduction(ior:temp)\n      DO x = 1, LOOPCOUNT\n        temp = ior(temp, a(x, y))\n      END DO\n      c(y) = temp\n      !$acc loop worker\n      DO x = 1, LOOPCOUNT\n        b(x, y) = b(x, y) + c(y)\n      END DO\n    END DO\n  !$acc end data\n\n  DO y = 1, 10\n    temp = a(1, y)\n    DO x = 2, LOOPCOUNT\n      temp = ior(temp, a(x, y))\n    END DO\n    IF (temp .ne. c(y)) THEN\n      errors = errors + 1\n    END IF\n    DO x = 1, LOOPCOUNT\n      IF (b(x, y) .ne. (b_copy(x, y) + temp)) THEN\n        errors = errors + 1\n      END IF\n    END DO\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_bitor_vector_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,private,reduction,combined-constructs,loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER:: errors, x, y, z, temp\n  INTEGER,DIMENSION(LOOPCOUNT, 10):: a\n  INTEGER,DIMENSION(10):: b\n  REAL(8):: false_margin\n  REAL(8),DIMENSION(LOOPCOUNT, 10, 16):: randoms\n\n  errors = 0\n  false_margin = exp(log(.5) / LOOPCOUNT)\n  SEEDDIM(1) = 1\n  #ifdef SEED\n  SEEDDIM(1) = SEED\n  #endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(randoms)\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      DO z = 1, 16\n        IF (randoms(x, y, z) .gt. false_margin) THEN\n          a(x, y) = a(x, y) + 2**(z - 1)\n        END IF\n      END DO\n    END DO\n  END DO\n\n  !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(b(1:10))\n    !$acc serial loop private(temp)\n    DO y = 1, 10\n      temp = 0\n      !$acc loop vector reduction(ior:temp)\n      DO x = 1, LOOPCOUNT\n        temp = ior(temp, a(x, y))\n      END DO\n      b(y) = temp\n    END DO\n  !$acc end data\n\n  DO y = 1, 10\n    temp = a(1, y)\n    DO x = 2, LOOPCOUNT\n      temp = ior(temp, a(x, y))\n    END DO\n    IF (temp .ne. b(y)) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_bitxor_general.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,reduction,combined-constructs,loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER,DIMENSION(LOOPCOUNT):: a\n  REAL(8),DIMENSION(LOOPCOUNT):: randoms\n  INTEGER:: errors, b, host_b, x\n\n  errors = 0\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(randoms)\n\n  DO x = 1, LOOPCOUNT\n    a(x) = INT(randoms(x) * 100000)\n  END DO\n\n  b = 0\n  host_b = 0\n\n  DO x = 1, LOOPCOUNT\n    host_b = ieor(host_b, a(x))\n  END DO\n\n  !$acc data copyin(a(1:LOOPCOUNT))\n    !$acc serial loop reduction(ieor:b)\n    DO x = 1, LOOPCOUNT\n      b = ieor(b, a(x))\n    END DO\n  !$acc end data\n\n  IF (b .ne. host_b) THEN\n    errors = errors + 1\n  END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_bitxor_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,private,reduction,combined-constructs,loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER,DIMENSION(LOOPCOUNT, 10):: a, b, host_b\n  INTEGER,DIMENSION(10):: c, host_c\n  REAL(8),DIMENSION(LOOPCOUNT, 10, 2):: randoms\n  INTEGER:: errors, x, y, temp\n\n  errors = 0\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(randoms)\n\n  c = 0\n  host_c = 0\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      b(x, y) = INT(randoms(x, y, 1) * 1000)\n      a(x, y) = INT(randoms(x, y, 2) * 1000)\n    END DO\n  END DO\n  host_b = b\n\n  DO y = 1, 10\n    DO x = 1, LOOPCOUNT\n      host_c(y) = ieor(host_c(y), a(x, y))\n    END DO\n    DO x = 1, LOOPCOUNT\n      host_b(x, y) = host_b(x, y) + host_c(y)\n    END DO\n  END DO\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(b(1:LOOPCOUNT, 1:10), c(1:10))\n    !$acc serial loop gang private(temp)\n    DO y = 1, 10\n      temp = 0\n      !$acc loop worker reduction(ieor:temp)\n      DO x = 1, LOOPCOUNT\n        temp = ieor(temp, a(x, y))\n      END DO\n      c(y) = temp\n      DO x = 1, LOOPCOUNT\n        b(x, y) = b(x, y) + c(y)\n      END DO\n    END DO\n  !$acc end data\n\n  DO y = 1, 10\n    IF (c(y) .ne. host_c(y)) THEN\n      errors = errors + 1\n    END IF\n    DO x = 1, LOOPCOUNT\n      IF (host_b(x, y) .ne. b(x, y)) THEN\n        errors = errors + 1\n      END IF\n    END DO\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_bitxor_vector_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,private,reduction,combined-constructs,loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER,DIMENSION(LOOPCOUNT, 10):: a\n  INTEGER,DIMENSION(10):: b, host_b\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n  INTEGER:: errors, x, y, temp\n\n  errors = 0\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(randoms)\n\n  DO y = 1, 10\n    DO x = 1, LOOPCOUNT\n      a(x, y) = INT(randoms(x, y) * 10000)\n    END DO\n  END DO\n\n  DO y = 1, 10\n    DO x = 1, LOOPCOUNT\n      host_b(y) = ieor(host_b(y), a(x, y))\n    END DO\n  END DO\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10))\n    !$acc serial loop private(temp)\n    DO y = 1, 10\n      temp = 0\n      !$acc loop vector reduction(ieor:temp)\n      DO x = 1, LOOPCOUNT\n        temp = ieor(temp, a(x, y))\n      END DO\n      b(y) = temp\n    END DO\n  !$acc end data\n\n  DO y = 1, 10\n    IF (b(y) .ne. host_b(y)) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_max_general.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,reduction,combined-constructs,loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  REAL(8),DIMENSION(LOOPCOUNT):: a, b\n  REAL(8):: maxval, host_max\n  INTEGER:: errors, x\n\n  SEEDDIM(1) = 1\n  #ifdef SEED\n  SEEDDIM(1) = SEED\n  #endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n\n  errors = 0\n\n  DO x = 1, LOOPCOUNT\n    host_max = max(host_max, a(x) * b(x))\n  END DO\n\n  !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n    !$acc serial loop reduction(max:maxval)\n    DO x = 1, LOOPCOUNT\n      maxval = max(maxval, a(x) * b(x))\n    END DO\n  !$acc end data\n\n  IF (abs(host_max - maxval) .gt. PRECISION) THEN\n    errors = errors + 1\n  END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_max_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,private,reduction,combined-constructs,loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b, c\n  REAL(8),DIMENSIOn(10):: host_maximums, maximums\n  REAL(8):: temp\n  INTEGER:: errors, x, y\n\n  errors = 0\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n  c = 0\n  maximums = 0\n  host_maximums = 0\n\n  DO y = 1, 10\n    DO x = 1, LOOPCOUNT\n      host_maximums(y) = max(host_maximums(y), a(x, y) * b(x, y))\n    ENDDO\n  END DO\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10), b(1:LOOPCOUNT, 1:10)) copy(c(1:LOOPCOUNT, 1:10), maximums(1:10))\n    !$acc serial loop gang private(temp)\n    DO y = 1, 10\n      temp = 0\n      !$acc loop worker reduction(max:temp)\n      DO x = 1, LOOPCOUNT\n        temp = max(temp, a(x, y) * b(x, y))\n      END DO\n      maximums(y) = temp\n      !$acc loop worker\n      DO x = 1, LOOPCOUNT\n        c(x, y) = (a(x, y) * b(x, y)) / maximums(y)\n      END DO\n    END DO\n  !$acc end data\n\n  DO y = 1, 10\n    IF (maximums(y) .ne. host_maximums(y)) THEN\n      errors = errors + 1\n    END IF\n    DO x = 1, LOOPCOUNT\n      IF (abs(c(x, y) - ((a(x, y) * b(x, y)) / maximums(y))) .gt. PRECISION) THEN\n        errors = errors + 1\n      END IF\n    END DO\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_max_vector_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,private,reduction,combined-constructs,loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b\n  REAL(8),DIMENSION(10):: maximums, host_maximums\n  REAL(8):: temp\n  INTEGER:: errors, x, y\n\n  errors = 0\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n\n  host_maximums = 0\n  DO y = 1, 10\n    DO x = 1, LOOPCOUNT\n      host_maximums(y) = max(host_maximums(y), a(x, y) * b(x, y))\n    END DO\n  END DO\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10), b(1:LOOPCOUNT, 1:10)) copy(maximums(1:10))\n    !$acc serial loop private(temp)\n    DO y = 1, 10\n      temp = 0\n      !$acc loop vector reduction(max:temp)\n      DO x = 1, LOOPCOUNT\n        temp = max(temp, a(x, y) * b(x, y))\n      END DO\n      maximums(y) = temp\n    END DO\n  !$acc end data\n\n  DO x = 1, 10\n    IF (abs(host_maximums(x) - maximums(x)) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_min_general.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,reduction,combined-constructs,loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER:: errors, x\n  REAL(8),DIMENSION(LOOPCOUNT):: a, b\n  REAL(8):: minimum, host_minimum\n\n  errors = 0\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n\n  minimum = a(1) * b(1)\n  host_minimum = minimum\n\n  DO x = 2, LOOPCOUNT\n    host_minimum = min(host_minimum, a(x) * b(x))\n  END DO\n\n  !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n    !$acc serial loop reduction(min:minimum)\n    DO x = 1, LOOPCOUNT\n      minimum = min(minimum, a(x) * b(x))\n    END DO\n  !$acc end data\n\n  IF (abs(host_minimum - minimum) .gt. PRECISION) THEN\n    errors = errors + 1\n  END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_min_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,private,reduction,combined-constructs,loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b, c\n  REAL(8),DIMENSION(10):: minimums, host_minimums\n  REAL(8):: temp\n  INTEGER:: errors, x, y\n\n  errors = 0\n\n  SEEDDIM(1) = 1\n  #ifdef SEED\n  SEEDDIM(1) = SEED\n  #endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n  c = 0\n  minimums = 0\n  host_minimums = 0\n\n  DO y = 1, 10\n    DO x = 1, LOOPCOUNT\n      host_minimums(y) = min(host_minimums(y), a(x, y) * b(x, y))\n    END DO\n  END DO\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10), b(1:LOOPCOUNT, 1:10)) copy(c(1:LOOPCOUNT, 1:10), minimums(1:10))\n    !$acc serial loop gang private(temp)\n    DO y = 1, 10\n      temp = 1\n      !$acc loop reduction(min: temp)\n      DO x = 1, LOOPCOUNT\n        temp = min(temp, a(x, y) * b(x, y))\n      END DO\n      minimums(y) = temp\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        c(x, y) = (a(x, y) * b(x, y)) / minimums(y)\n      END DO\n    END DO\n  !$acc end data\n\n  DO y = 1, 10\n    IF (abs(minimums(y) - host_minimums(y)) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n    DO x = 1, LOOPCOUNT\n      IF (abs(c(x, y) - ((a(x, y) * b(x, y)) / minimums(y))) .gt. PRECISION) THEN\n        errors = errors + 1\n      END IF\n    END DO\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_min_vector_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,private,reduction,combined-constructs,loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b\n  REAL(8),DIMENSION(10):: minimums, host_minimums\n  REAL(8):: temp\n  INTEGER:: errors, x, y\n\n  errors = 0\n  minimums = 1\n  host_minimums = 1\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n\n  DO y = 1, 10\n    DO x = 1, LOOPCOUNT\n      host_minimums(y) = min(host_minimums(y), a(x, y) * b(x, y))\n    END DO\n  END DO\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10), b(1:LOOPCOUNT, 1:10)) copy(minimums(1:10))\n    !$acc serial loop gang private(temp)\n    DO y = 1, 10\n      temp = 1\n      !$acc loop vector reduction(min:temp)\n      DO x = 1, LOOPCOUNT\n        temp = min(temp, a(x, y) * b(x, y))\n      END DO\n      minimums(y) = temp\n    END DO\n  !$acc end data\n\n  DO x = 1, 10\n    IF (abs(host_minimums(x) - minimums(x)) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_multiply_general.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,reduction,combined-constructs,loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  REAL(8),DIMENSION(10):: a, b\n  REAL(8):: reduced, host_reduced\n  INTEGER:: errors, x, y\n\n  errors = 0\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  DO y = 1, LOOPCOUNT\n    CALL RANDOM_NUMBER(a)\n    CALL RANDOM_NUMBER(b)\n    reduced = 1\n    host_reduced = 1\n\n    DO x = 1, 10\n      host_reduced = host_reduced * (a(x) + b(x))\n    END DO\n\n    !$acc data copyin(a(1:10), b(1:10))\n      !$acc serial loop reduction(*:reduced)\n      DO x = 1, 10\n        reduced = reduced * (a(x) + b(x))\n      END DO\n    !$acc end data\n\n    IF (abs(host_reduced - reduced) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_multiply_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,private,reduction,combined-constructs,loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  REAL(8),DIMENSION(10, LOOPCOUNT):: a, b, c\n  REAL(8),DIMENSION(LOOPCOUNT):: totals, host_totals\n  REAL(8):: temp\n  INTEGER:: errors, x, y\n\n  errors = 0\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n  c = 0\n\n\n  host_totals = 1\n  DO y = 1, LOOPCOUNT\n    DO x = 1, 10\n      host_totals(y) = host_totals(y) * (a(x, y) + b(x, y))\n    END DO\n  END DO\n\n  !$acc data copyin(a(1:10, 1:LOOPCOUNT), b(1:10, 1:LOOPCOUNT)) copyout(c(1:10, 1:LOOPCOUNT)) copy(totals(1:LOOPCOUNT))\n    !$acc serial loop gang private(temp)\n    DO y = 1, LOOPCOUNT\n      temp = 1\n      !$acc loop worker reduction(*:temp)\n      DO x = 1, 10\n        temp = temp * (a(x, y) + b(x, y))\n      END DO\n      totals(y) = temp\n      !$acc loop worker\n      DO x = 1, 10\n        c(x, y) = (a(x, y) + b(x, y)) / totals(y)\n      END DO\n    END DO\n  !$acc end data\n\n  DO y = 1, LOOPCOUNT\n    IF (abs(host_totals(y) - totals(y)) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n    DO x = 1, 10\n      IF (c(x, y) - ((a(x, y) + b(x, y)) / totals(y)) .gt. PRECISION) THEN\n        errors = errors + 1\n      END IF\n    END DO\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_multiply_vector_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,private,reduction,combined-constructs,loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  REAL(8),DIMENSION(10, LOOPCOUNT):: a, b\n  REAL(8),DIMENSION(LOOPCOUNT):: totals, host_totals\n  REAL(8):: temp\n  INTEGER:: errors, x, y\n\n  errors = 0\n\n  SEEDDIM(1) = 1\n  #ifdef SEED\n  SEEDDIM(1) = SEED\n  #endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n\n  host_totals = 1\n  DO y = 1, LOOPCOUNT\n    DO x = 1, 10\n      host_totals(y) = host_totals(y) * (a(x, y) + b(x, y))\n    END DO\n  END DO\n\n  !$acc data copyin(a(1:10, 1:LOOPCOUNT), b(1:10, 1:LOOPCOUNT)) copyout(totals(1:LOOPCOUNT))\n    !$acc serial loop private(temp)\n    DO y = 1, LOOPCOUNT\n      temp = 1\n      !$acc loop vector reduction(*:temp)\n      DO x = 1, 10\n        temp = temp * (a(x, y) + b(x, y))\n      END DO\n      totals(y) = temp\n    END DO\n  !$acc end data\n\n  DO y = 1, LOOPCOUNT\n    IF (abs(host_totals(y) - totals(y)) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_or_general.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,reduction,combined-constructs,loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  LOGICAL,DIMENSION(LOOPCOUNT):: a\n  LOGICAL:: result, host_result\n  REAL(8),DIMENSION(LOOPCOUNT):: randoms\n  REAL(8):: false_margin\n  INTEGER:: errors, x\n\n  errors = 0\n  false_margin = exp(log(.5) / LOOPCOUNT)\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(randoms)\n\n  DO x = 1, LOOPCOUNT\n    IF (randoms(x) .gt. false_margin) THEN\n      a(x) = .TRUE.\n    ELSE\n      a(x) = .FALSE.\n    END IF\n  END DO\n\n  host_result = .FALSE.\n  result = .FALSE.\n\n  DO x = 1, LOOPCOUNT\n    host_result = host_result .OR. a(x)\n  END DO\n\n  !$acc data copyin(a(1:LOOPCOUNT))\n    !$acc serial loop reduction(.OR.: result)\n    DO x = 1, LOOPCOUNT\n      result = result .OR. a(x)\n    END DO\n  !$acc end data\n\n  IF (host_result .neqv. result) THEN\n    errors = errors + 1\n  END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_or_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,private,reduction,combined-constructs,loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  LOGICAL,DIMENSION(LOOPCOUNT, 10):: a, a_copy\n  LOGICAL,DIMENSION(10):: results\n  LOGICAL:: temp\n  REAL(8):: false_margin\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n  INTEGER:: errors\n  INTEGER:: x, y\n\n  errors = 0\n  SEEDDIM(1) = 1\n  #ifdef SEED\n  SEEDDIM(1) = SEED\n  #endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(randoms)\n\n  DO y = 1, 10\n    DO x = 1, LOOPCOUNT\n      IF (randoms(x, y) .gt. false_margin) THEN\n        a(x, y) = .TRUE.\n      ELSE\n        a(x, y) = .FALSE.\n      END IF\n    END DO\n  END DO\n\n  a_copy = a\n\n  !$acc data copy(a(1:LOOPCOUNT, 1:10))\n    !$acc serial loop gang private(temp)\n    DO y = 1, 10\n      temp = .FALSE.\n      !$acc loop worker reduction(.OR.:temp)\n      DO x = 1, LOOPCOUNT\n        temp = temp .OR. a(x, y)\n      END DO\n      results(y) = temp\n      !$acc loop worker\n      DO x = 1, LOOPCOUNT\n        IF (results(y)) THEN\n          IF (a(x, y)) THEN\n            a(x, y) = .FALSE.\n          ELSE\n            a(x, y) = .TRUE.\n          END IF\n        END IF\n      END DO\n    END DO\n  !$acc end data\n\n  DO y = 1, 10\n    temp = .FALSE.\n    DO x = 1, LOOPCOUNT\n      temp = temp .OR. a(x, y)\n    END DO\n    IF (temp .neqv. results(y)) THEN\n      errors = errors + 1\n    END IF\n    DO x = 1, LOOPCOUNT\n      IF (temp) THEN\n        IF (a(x, y) .eqv. a_copy(x, y)) THEN\n          errors = errors + 1\n        END IF\n      ELSE\n        IF (a(x, y) .neqv. a_copy(x, y)) THEN\n          errors = errors + 1\n        END IF\n      END IF\n    END DO\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_or_vector_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,private,reduction,combined-constructs,loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  LOGICAL,DIMENSION(LOOPCOUNT, 10):: a\n  LOGICAL,DIMENSION(10):: b\n  LOGICAL:: temp\n  REAL(8):: false_margin\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n  INTEGER:: errors\n  INTEGER:: x, y\n\n  errors = 0\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(randoms)\n\n  DO y = 1, 10\n    DO x = 1, LOOPCOUNT\n      IF (randoms(x, y) .gt. false_margin) THEN\n        a(x, y) = .TRUE.\n      ELSE\n        a(x, y) = .FALSE.\n      END IF\n    END DO\n  END DO\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(b(1:10))\n    !$acc serial loop private(temp)\n    DO y = 1, 10\n      temp = .FALSE.\n      !$acc loop vector reduction(.OR.:temp)\n      DO x = 1, LOOPCOUNT\n        temp = temp .OR. a(x, y)\n      END DO\n      b(y) = temp\n    END DO\n  !$acc end data\n\n  DO y = 1, 10\n    temp = .FALSE.\n    DO x = 1, LOOPCOUNT\n      temp = temp .OR. a(x, y)\n    END DO\n    IF (temp .neqv. b(y)) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_seq.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,combined-constructs,loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  REAL(8),DIMENSION(LOOPCOUNT):: a, b\n  REAL(8):: temp\n  INTEGER:: errors, x\n\n  errors = 0\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  b = 0\n\n  !$acc data copyin(a(1:LOOPCOUNT)) copy(b(1:LOOPCOUNT))\n    !$acc serial loop seq\n    DO x = 2, LOOPCOUNT\n      b(x) = b(x - 1) + a(x)\n    END DO\n  !$acc end data\n\n  temp = 0\n  DO x = 2, LOOPCOUNT\n    temp = temp + a(x)\n    IF (abs(b(x) - temp) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_tile.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,combined-constructs,loop,tile,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER:: errors\n  REAL(8),DIMENSION(100):: a, b, c\n  REAL(8),DIMENSION(100, 100):: d2\n  REAL(8),DIMENSION(100, 100, 100):: d3\n  INTEGER:: x, y, z\n  errors = 0\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n  CALL RANDOM_NUMBER(c)\n  d2 = 0\n  d3 = 0\n\n  !$acc data copyin(a(1:100), b(1:100), c(1:100)) copyout(d2(1:100, 1:100))\n    !$acc serial loop tile(*, *)\n    DO x = 1, 100\n      DO y = 1, 100\n        DO z = 1, 100\n          d2(x, y) = d2(x, y) + (a(x) * b(y) * c(z))\n        END DO\n      END DO\n    END DO\n  !$acc end data\n\n  DO x = 1, 100\n    DO y = 1, 100\n      DO z = 1, 100\n        d2(x, y) = d2(x, y) - (a(x) * b(y) * c(z))\n      END DO\n      IF (abs(d2(x, y)) .gt. 10*PRECISION) THEN\n        errors = errors + 1\n      END IF\n    END DO\n  END DO\n\n  !$acc data copyin(a(1:100), b(1:100), c(1:100)) copyout(d3(1:100, 1:100, 1:100))\n    !$acc serial loop tile(*, *, *)\n    DO x = 1, 100\n      DO y = 1, 100\n        DO z = 1, 100\n          d3(x, y, z) = a(x) * b(y) * c(z)\n        END DO\n      END DO\n    END DO\n  !$acc end data\n\n  DO x = 1, 100\n    DO y = 1, 100\n      DO z = 1, 100\n        IF (abs(d3(x, y, z) - (a(x) * b(y) * c(z))) .gt. PRECISION) THEN\n          errors = errors + 1\n        END IF\n      END DO\n    END DO\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "combined-constructs",
                            "loop",
                            "tile"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_vector.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,combined-constructs,loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  REAL(8),DIMENSION(LOOPCOUNT):: a, b, c\n  INTEGER:: x\n  INTEGER:: errors\n\n  errors = 0\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n  c = 0\n\n  !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copy(c(1:LOOPCOUNT))\n    !$acc serial loop vector\n    DO x = 1, LOOPCOUNT\n      c(x) = a(x) + b(x)\n    END DO\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_vector_blocking.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER:: errors\n  REAL(8),DIMENSION(LOOPCOUNT):: a, b, c\n  INTEGER:: multiplier, x\n  errors = 0\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n  c = 0\n\n  !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n    !$acc serial\n      !$acc loop vector\n      DO x = 1, LOOPCOUNT\n        c(x) = (a(x) + b(x)) * multiplier\n      END DO\n      multiplier = multiplier + 1\n      !$acc loop vector\n      DO x = 1, LOOPCOUNT\n        c(x) = c(x) + ((a(x) + b(x)) * multiplier)\n      END DO\n    !$acc end serial\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    IF (abs(c(x) - ((a(x) + b(x)) * 3)) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_worker.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,combined-constructs,loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  REAL(8),DIMENSION(LOOPCOUNT):: a, b, c\n  INTEGER:: x\n  INTEGER:: errors\n\n  errors = 0\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n  c = 0\n\n  !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copy(c(1:LOOPCOUNT))\n    !$acc serial loop worker\n    DO x = 1, LOOPCOUNT\n      c(x) = a(x) + b(x)\n    END DO\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_worker_blocking.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  REAL(8),DIMENSION(LOOPCOUNT):: a, b, c\n  INTEGER:: multiplier\n  INTEGER:: x\n  INTEGER:: errors\n\n  errors = 0\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n  c = 0\n\n  !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n    !$acc serial\n      !$acc loop worker\n      DO x = 1, LOOPCOUNT\n        c(x) = (a(x) + b(x)) * multiplier\n      END DO\n      multiplier = multiplier + 1\n      !$acc loop worker\n      DO x = 1, LOOPCOUNT\n        c(x) = c(x) + ((a(x) + b(x)) * multiplier)\n      END DO\n    !$acc end serial\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    IF (abs(c(x) - (3 * (a(x) + b(x)))) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_present.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  REAL(8),DIMENSION(LOOPCOUNT):: a, b, c\n  INTEGER:: x\n  INTEGER:: errors\n\n  errors = 0\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n  c = 0\n\n  !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) create(c(1:LOOPCOUNT))\n  !$acc serial present(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n    !$acc loop\n    DO x = 1, LOOPCOUNT\n      c(x) = a(x) + b(x)\n    END DO\n  !$acc end serial\n  !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n\n  DO x = 1, LOOPCOUNT\n    IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_private.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,private,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b\n  REAL(8),DIMENSION(LOOPCOUNT):: c\n  REAL(8),DIMENSION(10):: d\n  REAL(8):: temp\n  INTEGER:: x, y\n  INTEGER:: errors\n\n  errors = 0\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n  c = 0\n  d = 0\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10), b(1:LOOPCOUNT, 1:10)) copy(d(1:10))\n    !$acc serial private(c(1:LOOPCOUNT))\n      !$acc loop gang\n      DO y = 1, 10\n        !$acc loop worker\n        DO x = 1, LOOPCOUNT\n          c(x) = a(x, y) + b(x, y)\n        END DO\n        !$acc loop seq\n        DO x = 1, LOOPCOUNT\n          d(y) = d(y) + c(x)\n        END DO\n      END DO\n    !$acc end serial\n  !$acc end data\n\n  DO y = 1, 10\n    temp = 0\n    DO x = 1, LOOPCOUNT\n      temp = temp + (a(x, y) + b(x, y))\n    END DO\n    IF (abs(d(x) - temp) .gt. (2 * PRECISION * LOOPCOUNT)) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "private"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_reduction.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,reduction,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  REAL(8),DIMENSION(LOOPCOUNT):: a\n  REAL(8):: reduction\n  INTEGER:: errors, x\n\n  errors = 0\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n\n  !$acc serial copyin(a(1:LOOPCOUNT)) reduction(+:reduction)\n    !$acc loop\n    DO x = 1, LOOPCOUNT\n      reduction = reduction + a(x)\n    END DO\n  !$acc end serial\n\n  DO x = 1, LOOPCOUNT\n    reduction = reduction - a(x)\n  END DO\n\n  IF (abs(reduction) .gt. PRECISION) THEN\n    errors = errors + 1\n  END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "reduction"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_scalar_default_firstprivate.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  REAL(8),DIMENSION(LOOPCOUNT):: a, b\n  REAL(8):: scalar, scalar_copy\n  INTEGER:: x\n  INTEGER:: errors\n\n  errors = 0\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  b = 0\n  scalar = 5.5\n  scalar_copy = scalar\n\n  !$acc data copyin(a(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT))\n    !$acc serial\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        b(x) = a(x) + scalar\n      END DO\n    !$acc end serial\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    IF (abs(b(x) - (a(x) + scalar_copy)) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n  IF (abs(scalar_copy - scalar) .gt. PRECISION) THEN\n    errors = errors + 1\n  END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            ""
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_switch.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER,DIMENSION(LOOPCOUNT):: a\n  REAL(8),DIMENSION(LOOPCOUNT):: a_randoms, b, b_host, c\n  INTEGER:: errors, x\n\n  errors = 0\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a_randoms)\n  CALL RANDOM_NUMBER(b)\n  c = 0\n  b_host = b\n\n  DO x = 1, LOOPCOUNT\n    a(x) = INT(a_randoms(x) * 4)\n  END DO\n\n  !$acc data copyin(a(1:LOOPCOUNT)) copy(b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n    !$acc serial\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        SELECT CASE(a(x))\n        CASE (0)\n          c(x) = b(x) * b(x)\n        CASE (1)\n          c(x) = b(x) / b(x)\n        CASE (2)\n          b(x) = b(x) / 2\n        CASE DEFAULT\n          c(x) = a(x) + b(x)\n        END SELECT\n      END DO\n    !$acc end serial\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    SELECT CASE(a(x))\n    CASE(0)\n      IF (abs(c(x) - (b_host(x) * b_host(x))) .gt. PRECISION) THEN\n        errors = errors + 1\n      END IF\n    CASE(1)\n      IF (abs(c(x) - 1) .gt. PRECISION) THEN\n        errors = errors + 1\n      END IF\n    CASE(2)\n      IF (abs(c(x)) .gt. PRECISION) THEN\n        errors = errors + 1\n      END IF\n      IF (abs(b(x) - (b_host(x) / 2)) .gt. PRECISION) THEN\n        errors = errors + 1\n      END IF\n    CASE DEFAULT\n      IF (abs(c(x) - (b_host(x) + a(x))) .gt. PRECISION) THEN\n        errors = errors + 1\n      END IF\n    END SELECT\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            ""
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_wait.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:async,serial,update,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  REAL(8),DIMENSION(LOOPCOUNT):: a, a_copy\n  INTEGER:: errors, x\n\n  errors = 0\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  a_copy = a\n\n  !$acc enter data create(a(1:LOOPCOUNT))\n  !$acc update device(a(1:LOOPCOUNT)) async(1)\n  !$acc serial present(a(1:lOOPCOUNT)) wait(1)\n    !$acc loop\n    DO x = 1, LOOPCOUNT\n      a(x) = a(x) + 1\n    END DO\n  !$acc end serial\n  !$acc exit data copyout(a(1:LOOPCOUNT))\n\n  DO x = 1, LOOPCOUNT\n    IF (abs(a(x) - (a_copy(x) + 1)) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "async",
                            "serial",
                            "update"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_while_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:reduction,loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: a\n  REAL(8):: avg\n  INTEGER:: errors, x, y\n\n  errors = 0\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n\n  !$acc data copy(a(1:LOOPCOUNT, 1:10))\n    !$acc serial\n      !$acc loop\n      DO y = 1, 10\n        avg = 0\n        DO WHILE (avg .lt. 1000)\n          avg = 0\n          !$acc loop reduction(+:avg)\n          DO x = 1, LOOPCOUNT\n            a(x, y) = a(x, y) * 1.5\n            avg = avg + (a(x, y) / LOOPCOUNT)\n          END DO\n        END DO\n      END DO\n    !$acc end serial\n  !$acc end data\n\n  DO y = 1, 10\n    avg = 0\n    DO x = 1, LOOPCOUNT\n      avg = avg + (a(x, y) / LOOPCOUNT)\n    END DO\n    IF ((avg .lt. 1000) .or. (avg .gt. 1500)) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "reduction",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "set_default_async.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:async,construct-independent,internal-control-values,set,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, a_host, b_host !Data\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        a_host = a\n        b_host = b\n        c = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n          !$acc set default_async(1)\n          !$acc parallel async\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              a(x) = a(x) * a(x)\n            END DO\n          !$acc end parallel\n          !$acc set default_async(2)\n          !$acc parallel async\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              b(x) = b(x) * b(x)\n            END DO\n          !$acc end parallel\n          !$acc parallel async(1) wait(2)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n          !$acc wait(1)\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a_host(x) * a_host(x) + b_host(x) * b_host(x))) .gt. 4 * PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "async",
                            "construct-independent",
                            "internal-control-values",
                            "set"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "set_device_num.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,construct-independent,internal-control-values,set,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(:, :),ALLOCATABLE :: host_copy\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n        INTEGER :: temp\n\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        ALLOCATE(host_copy(acc_get_num_devices(acc_get_device_type()), LOOPCOUNT))\n\n        IF (acc_get_device_type() .ne. acc_device_none) THEN\n          !host_copy(acc_get_num_devices(acc_get_device_type()), LOOPCOUNT)\n          DO x = 1, acc_get_num_devices(acc_get_device_type())\n            CALL RANDOM_NUMBER(a)\n            host_copy(x, :) = a\n            !$acc set device_num(x)\n            !$acc enter data copyin(a(1:LOOPCOUNT))\n          END DO\n\n          DO x = 1, acc_get_num_devices(acc_get_device_type())\n            !$acc set device_num(x)\n            !$acc data present(a(1:LOOPCOUNT))\n              !$acc parallel\n                !$acc loop\n                DO y = 1, LOOPCOUNT\n                  a(y) = a(y) + 1\n                END DO\n              !$acc end parallel\n            !$acc end data\n          END DO\n\n          DO x = 1, acc_get_num_devices(acc_get_device_type())\n            !$acc set device_num(x)\n            !$acc exit data copyout(a(1:LOOPCOUNT))\n            temp = errors\n            DO y = 1, LOOPCOUNT\n              IF (abs(a(y) - (host_copy(x, y) + 1)) .gt. PRECISION) THEN\n                PRINT*, a(y)\n                PRINT*, host_copy(x, y)\n                errors = errors + 1\n              END IF\n            END DO\n            IF (temp .ne. errors) THEN\n              PRINT*, x\n            END IF\n          END DO\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "construct-independent",
                            "internal-control-values",
                            "set"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "set_device_type.F90": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,construct-independent,internal-control-values,set,V:2.5-3.2\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: errors = 0\n\n        !$acc set device_type(host)\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "construct-independent",
                            "internal-control-values",
                            "set"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:runtime,construct-independent,internal-control-values,set,V:2.5-3.2\n      LOGICAL FUNCTION test2()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: errors = 0\n\n        !$acc set device_type(multicore)\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "construct-independent",
                            "internal-control-values",
                            "set"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n!T3:runtime,construct-independent,internal-control-values,set,V:2.5-3.2\n      LOGICAL FUNCTION test3()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: errors = 0\n\n        !$acc set device_type(default)\n\n        IF (errors .eq. 0) THEN\n          test3 = .FALSE.\n        ELSE\n          test3 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T3\n        LOGICAL :: test3\n#endif\n#ifndef T3\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test3()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 2\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "construct-independent",
                            "internal-control-values",
                            "set"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "set_device_type_nvidia.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,construct-independent,internal-control-values,set,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: errors = 0\n\n        !$acc set device_type(nvidia)\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "construct-independent",
                            "internal-control-values",
                            "set"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "shutdown.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,shutdown,nonvalidating,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: errors = 0\n\n        !$acc shutdown\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "shutdown",
                            "nonvalidating"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "shutdown_device_num.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,construct-independent,internal-control-values,shutdown,nonvalidating,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: device_num\n        INTEGER :: device_type\n        INTEGER :: errors = 0\n\n        device_num = acc_get_device_num(acc_get_device_type())\n        !$acc shutdown device_num(device_num)\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "construct-independent",
                            "internal-control-values",
                            "shutdown",
                            "nonvalidating"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "shutdown_device_type.F90": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,construct-independent,internal-control-values,shutdown,nonvalidating,V:2.5-3.2\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: errors = 0\n\n        !$acc shutdown device_type(host)\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "construct-independent",
                            "internal-control-values",
                            "shutdown",
                            "nonvalidating"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:runtime,construct-independent,internal-control-values,shutdown,nonvalidating,V:2.5-3.2\n      LOGICAL FUNCTION test2()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: errors = 0\n\n        !$acc shutdown device_type(multicore)\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "construct-independent",
                            "internal-control-values",
                            "shutdown",
                            "nonvalidating"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n!T3:runtime,construct-independent,internal-control-values,shutdown,nonvalidating,V:2.5-3.2\n      LOGICAL FUNCTION test3()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: errors = 0\n\n        !$acc shutdown device_type(default)\n\n        IF (errors .eq. 0) THEN\n          test3 = .FALSE.\n        ELSE\n          test3 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T3\n        LOGICAL :: test3\n#endif\n#ifndef T3\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test3()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "construct-independent",
                            "internal-control-values",
                            "shutdown",
                            "nonvalidating"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "shutdown_device_type_num.F90": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,construct-independent,internal-control-values,shutdown,nonvalidating,V:2.5-3.2\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: device_num\n        INTEGER :: device_type\n        INTEGER :: errors = 0\n\n        device_type = acc_get_device_type()\n        device_num = acc_get_device_num(device_type)\n        !$acc shutdown device_type(host) device_num(device_num)\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "construct-independent",
                            "internal-control-values",
                            "shutdown",
                            "nonvalidating"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:runtime,construct-independent,internal-control-values,shutdown,nonvalidating,V:2.5-3.2\n      LOGICAL FUNCTION test2()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: device_num\n        INTEGER :: device_type\n        INTEGER :: errors = 0\n\n        device_type = acc_get_device_type()\n        device_num = acc_get_device_num(device_type)\n        !$acc shutdown device_type(multicore) device_num(device_num)\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "construct-independent",
                            "internal-control-values",
                            "shutdown",
                            "nonvalidating"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n!T3:runtime,construct-independent,internal-control-values,shutdown,nonvalidating,V:2.5-3.2\n      LOGICAL FUNCTION test3()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: device_num\n        INTEGER :: device_type\n        INTEGER :: errors = 0\n\n        device_type = acc_get_device_type()\n        device_num = acc_get_device_num(device_type)\n        !$acc shutdown device_type(default) device_num(device_num)\n\n        IF (errors .eq. 0) THEN\n          test3 = .FALSE.\n        ELSE\n          test3 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T3\n        LOGICAL :: test3\n#endif\n#ifndef T3\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test3()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 2\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "construct-independent",
                            "internal-control-values",
                            "shutdown",
                            "nonvalidating"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "shutdown_device_type_num_nvidia.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,construct-independent,internal-control-values,shutdown,nonvalidating,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: device_num\n        INTEGER :: device_type\n        INTEGER :: errors = 0\n\n        device_type = acc_get_device_type()\n        device_num = acc_get_device_num(device_type)\n        !$acc shutdown device_type(nvidia) device_num(device_num)\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "construct-independent",
                            "internal-control-values",
                            "shutdown",
                            "nonvalidating"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "shutdown_device_type_nvidia.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,construct-independent,internal-control-values,shutdown,nonvalidating,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: errors = 0\n\n        !$acc shutdown device_type(nvidia)\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "construct-independent",
                            "internal-control-values",
                            "shutdown",
                            "nonvalidating"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "template.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT))\n          !$acc parallel\n\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          IF (abs(a(x)) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            }
        },
        {
            "acc_async_test.F90": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,async,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, d, e !Data\n        INTEGER :: errors\n        errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        CALL RANDOM_NUMBER(d)\n        c = 0\n        e = 0\n        \n        !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) create(c(1:LOOPCOUNT)) async(1)\n        !$acc enter data copyin(d(1:LOOPCOUNT)) create(e(1:LOOPCOUNT)) async(2)\n        !$acc parallel present(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT)) async(1)\n          !$acc loop\n          DO x = 1, LOOPCOUNT\n            c(x) = a(x) + b(x)\n          END DO\n        !$acc end parallel\n        !$acc parallel present(c(1:LOOPCOUNT), d(1:LOOPCOUNT), e(1:LOOPCOUNT)) async(1) wait(2)\n          !$acc loop\n          DO x = 1, LOOPCOUNT\n            e(x) = c(x) + d(x)\n          END DO\n        !$acc end parallel\n        !$acc exit data copyout(e(1:LOOPCOUNT)) async(1)\n\n\n        DO WHILE (acc_async_test(1) .eqv. .FALSE.)\n          CONTINUE\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(e(x) - (a(x) + b(x) + d(x))) .GT. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n      LOGICAL :: test1\n#endif\n#ifndef T1\n      DO testrun = 1, NUM_TEST_CALLS\n        failed = failed .or. test1()\n      END DO\n      IF (failed) THEN\n        failcode = failcode + 2 ** 0\n        failed = .FALSE.\n      END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "async",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:async,runtime,construct-independent,V:1.0-2.7\n      LOGICAL FUNCTION test2()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, d, e\n        INTEGER :: errors\n        errors = 0\n        \n        !Initialization\n        CALL RANDOM_SEED()\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        CALL RANDOM_NUMBER(d)\n        c = 0\n        e = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), d(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT), e(1:LOOPCOUNT))\n          !$acc parallel present(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT)) async(1)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n          !$acc parallel present(c(1:LOOPCOUNT), d(1:LOOPCOUNT), e(1:LOOPCOUNT)) async(1)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              e(x) = c(x) + d(x)\n            END DO\n          !$acc end parallel\n          DO WHILE (acc_async_test(1) .eqv. .FALSE.)\n            CONTINUE\n          END DO\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(e(x) - (a(x) + b(x) + d(x))) .GT. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n      LOGICAL :: test2\n#endif\n#ifndef T2\n      DO testrun = 1, NUM_TEST_CALLS\n        failed = failed .or. test2()\n      END DO\n      IF (failed) THEN\n        failcode = failcode + 2 ** 1\n        failed = .FALSE.\n      END IF\n#endif\n",
                        "tags": [
                            "async",
                            "runtime",
                            "construct-independent"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n!T3:runtime,async,construct-independent,V:2.5-2.7\n      LOGICAL FUNCTION test3()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, d, e\n        INTEGER :: errors, async_val\n        INTEGER :: acc_get_default_async\n        async_val = acc_get_default_async()\n        errors = 0\n\n        !Initialization\n        CALL RANDOM_SEED()\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        CALL RANDOM_NUMBER(d)\n        c = 0\n        e = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), d(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT), e(1:LOOPCOUNT))\n          !$acc parallel present(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT)) async\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n          !$acc parallel present(c(1:LOOPCOUNT), d(1:LOOPCOUNT), e(1:LOOPCOUNT)) async\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              e(x) = c(x) + d(x)\n            END DO\n          !$acc end parallel\n          DO WHILE (acc_async_test(async_val) .eqv. .FALSE.)\n            CONTINUE\n          END DO\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(e(x) - (a(x) + b(x) + d(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test3 = .FALSE.\n        ELSE\n          test3 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T3\n      LOGICAL :: test3\n#endif\n#ifndef T3\n      DO testrun = 1, NUM_TEST_CALLS\n        failed = failed .or. test3()\n      END DO\n      IF (failed) THEN\n        failcode = failcode + 2 ** 2\n        failed = .FALSE.\n      END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "async",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_async_test_all.F90": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,async,construct-independent,update,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b, c, d, e !Data\n        INTEGER :: errors\n        errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        CALL RANDOM_NUMBER(d)\n        c = 0\n        e = 0\n\n        !$acc enter data create(a(1:LOOPCOUNT,1:10), b(1:LOOPCOUNT,1:10), c(1:LOOPCOUNT,1:10), d(1:LOOPCOUNT,1:10), e(1:LOOPCOUNT,1:10))\n        DO y = 1, 10\n          !$acc update device(a(1:LOOPCOUNT,y:y), b(1:LOOPCOUNT,y:y), d(1:LOOPCOUNT,y:y)) async(y)\n          !$acc parallel present(a(1:LOOPCOUNT,y:y), b(1:LOOPCOUNT,y:y), c(1:LOOPCOUNT,y:y)) async(y)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x, y) = a(x, y) + b(x, y)\n            END DO\n          !$acc end parallel\n          !$acc parallel present(c(1:LOOPCOUNT,y:y), d(1:LOOPCOUNT,y:y),e(1:LOOPCOUNT,y:y)) async(y)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              e(x, y) = c(x, y) + d(x, y)\n            END DO\n          !$acc end parallel\n          !$acc update host(e(1:LOOPCOUNT,y:y)) async(y)\n        END DO\n\n        DO WHILE (acc_async_test_all() .eqv. .FALSE.)\n          CONTINUE\n        END DO\n\n        DO y = 1, 10\n          DO x = 1, LOOPCOUNT\n            IF (abs(e(x, y) - (a(x, y) + b(x, y) + d(x, y))) .GT. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n      LOGICAL :: test1\n#endif\n#ifndef T1\n      DO testrun = 1, NUM_TEST_CALLS\n        failed = failed .or. test1()\n      END DO\n      IF (failed) THEN\n        failcode = failcode + 2 ** 0\n        failed = .FALSE.\n      END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "async",
                            "construct-independent",
                            "update"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:async,runtime,construct-independent,V:1.0-2.7\n      LOGICAL FUNCTION test2()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b, c, d, e !Data\n        INTEGER :: errors\n        errors = 0\n\n        !Initialization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        CALL RANDOM_NUMBER(d)\n        c = 0\n        e = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10), b(1:LOOPCOUNT,1:10), d(1:LOOPCOUNT, 1:10)) copyout(c(1:LOOPCOUNT, 1:10), e(1:LOOPCOUNT, 1:10))\n          DO x = 1, 10\n            !$acc parallel present(a(1:LOOPCOUNT, 1:10), b(1:LOOPCOUNT, 1:10), c(1:LOOPCOUNT, 1:10)) async(x)\n              !$acc loop\n              DO y = 1, LOOPCOUNT\n                c(y, x) = a(y, x) + b(y, x)\n              END DO\n            !$acc end parallel\n            !$acc parallel present(c(1:LOOPCOUNT, 1:10), d(1:LOOPCOUNT, 1:10), e(1:LOOPCOUNT, 1:10)) async(x)\n              !$acc loop\n              DO y = 1, LOOPCOUNT\n                e(y, x) = c(y, x) + d(y, x)\n              END DO\n            !$acc end parallel\n          END DO\n          DO WHILE (acc_async_test_all() .eqv. .FALSE.)\n            CONTINUE\n          END DO\n        !$acc end data\n\n        DO x = 1, 10\n          DO y = 1, LOOPCOUNT\n            IF (abs(e(y, x) - (a(y, x) + b(y, x) + d(y, x))) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n      LOGICAL :: test2\n#endif\n#ifndef T2\n      DO testrun = 1, NUM_TEST_CALLS\n        failed = failed .or. test2()\n      END DO\n      IF (failed) THEN\n        failcode = failcode + 2 ** 1\n        failed = .FALSE.\n      END IF\n#endif\n",
                        "tags": [
                            "async",
                            "runtime",
                            "construct-independent"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n!T3:async,runtime,construct-independent,V:2.5-2.7\n      LOGICAL FUNCTION test3()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b, c, d, e !Data\n        INTEGER :: errors\n        errors = 0\n\n        !Initialization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        CALL RANDOM_NUMBER(d)\n        c = 0\n        e = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10), b(1:LOOPCOUNT, 1:10), d(1:LOOPCOUNT, 1:10)) copyout(c(1:LOOPCOUNT, 1:10), e(1:LOOPCOUNT, 1:10))\n          DO x = 1, 10\n            CALL acc_set_default_async(x)\n            !$acc parallel present(a(1:LOOPCOUNT, 1:10), b(1:LOOPCOUNT, 1:10), c(1:LOOPCOUNT, 1:10)) async\n              !$acc loop\n              DO y = 1, LOOPCOUNT\n                c(y, x) = a(y, x) + b(y, x)\n              END DO\n            !$acc end parallel\n            !$acc parallel present(c(1:LOOPCOUNT, 1:10), d(1:LOOPCOUNT, 1:10), e(1:LOOPCOUNT, 1:10)) async\n              !$acc loop\n              DO y = 1, LOOPCOUNT\n                e(y, x) = c(y, x) + d(y, x)\n              END DO\n            !$acc end parallel\n          END DO\n          DO WHILE (acc_async_test_all() .eqv. .FALSE.)\n            CONTINUE\n          END DO\n        !$acc end data\n\n        DO x = 1, 10\n          DO y = 1, LOOPCOUNT\n            IF (abs(e(y, x) - (a(y, x) + b(y, x) + d(y, x))) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test3 = .FALSE.\n        ELSE\n          test3 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T3\n      LOGICAL :: test3\n#endif\n#ifndef T3\n      DO testrun = 1, NUM_TEST_CALLS\n        failed = failed .or. test3()\n      END DO\n      IF (failed) THEN\n        failcode = failcode + 2 ** 2\n        failed = .FALSE.\n      END IF\n#endif\n",
                        "tags": [
                            "async",
                            "runtime",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_copyin.F90": {
                "num tests": 7,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        CALL acc_copyin(a(1:LOOPCOUNT))\n        CALL acc_copyin(b(1:LOOPCOUNT))\n\n        !$acc data copy(c(1:LOOPCOUNT))\n          !$acc parallel present(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        !$acc exit data copyout(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END FUNCTION\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:runtime,data,executable-data,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test2()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 1\n\n        CALL acc_copyin(a(1:LOOPCOUNT))\n        CALL acc_copyin(b(1:LOOPCOUNT))\n\n        !$acc data copyout(c(1:LOOPCOUNT))\n          !$acc parallel present(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        CALL acc_copyout(a(1:LOOPCOUNT))\n        CALL acc_copyout(b(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END FUNCTION\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n!T3:runtime,data,executable-data,devonly,construct-independent,V:2.5-2.7\n      LOGICAL FUNCTION test3()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, a_copy, b_copy !Data\n        INTEGER :: errors = 0\n        LOGICAL,DIMENSION(1):: devtest\n\n        devtest(1) = .TRUE.\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel present(devtest(1:1))\n          devtest(1) = .FALSE.\n        !$acc end parallel\n\n        IF (devtest(1) .eqv. .TRUE.) THEN\n          SEEDDIM(1) = 1\n#         ifdef SEED\n          SEEDDIM(1) = SEED\n#         endif\n          CALL RANDOM_SEED(PUT=SEEDDIM)\n          CALL RANDOM_NUMBER(a)\n          a_copy(:) = a(:)\n          CALL RANDOM_NUMBER(b)\n          b_copy(:) = b(:)\n          c = 0\n\n          CALL acc_copyin(a(1:LOOPCOUNT))\n          CALL acc_copyin(b(1:LOOPCOUNT))\n\n          a = 0\n          b = 0\n\n          !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n            !$acc parallel\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                c(x) = a(x) + b(x)\n              END DO\n            !$acc end parallel\n          !$acc end data\n\n          !$acc exit data copyout(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n\n          DO x = 1, LOOPCOUNT\n            IF (abs(a(x) - a_copy(x)) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n            IF (abs(b(x) - b_copy(x)) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n            IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test3 = .FALSE.\n        ELSE\n          test3 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T3\n        LOGICAL :: test3\n#endif\n#ifndef T3\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test3()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 2\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "devonly",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "4": {
                        "content": "#ifndef T4\n!T4:runtime,executable-data,construct-independent,compatibility-features,V:2.0-2.7\n      LOGICAL FUNCTION test4()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n\n        !Initialization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        CALL acc_pcopyin(a(1:LOOPCOUNT))\n        CALL acc_pcopyin(b(1:LOOPCOUNT))\n\n        !$acc data copyout(c(1:LOOPCOUNT))\n          !$acc parallel present(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test4 = .FALSE.\n        ELSE\n          test4 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T4\n        LOGICAL :: test4\n#endif\n#ifndef T4\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test4()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 3\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "executable-data",
                            "construct-independent",
                            "compatibility-features"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "5": {
                        "content": "#ifndef T5\n!T5:runtime,executable-data,construct-independent,compatibility-features,V:2.0-2.7\n      LOGICAL FUNCTION test5()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n\n        !Initialization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        \n        CALL acc_present_or_copyin(a(1:LOOPCOUNT))\n        CALL acc_present_or_copyin(b(1:LOOPCOUNT))\n\n        !$acc data copyout(c(1:LOOPCOUNT))\n          !$acc parallel present(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test5 = .FALSE.\n        ELSE\n          test5 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T5\n        LOGICAL :: test5\n#endif\n#ifndef T5\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test5()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 4\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "executable-data",
                            "construct-independent",
                            "compatibility-features"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "6": {
                        "content": "#ifndef T6\n!T6:runtime,data,executable-data,construct-independent,reference-counting,V:2.5-2.7\n      LOGICAL FUNCTION test6()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n\n        !Initialization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        CALL acc_copyin(a(1:LOOPCOUNT))\n        CALL acc_copyin(a(1:LOOPCOUNT))\n        CALL acc_copyin(b(1:LOOPCOUNT))\n        CALL acc_copyin(b(1:LOOPCOUNT))\n\n        !$acc data copyout(c(1:LOOPCOUNT))\n          !$acc parallel present(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n        !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test6 = .FALSE.\n        ELSE\n          test6 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T6\n        LOGICAL :: test6\n#endif\n#ifndef T6\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test6()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 5\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent",
                            "reference-counting"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "7": {
                        "content": "#ifndef T7\n!T7:runtime,data,executable-data,construct-independent,reference-counting,devonly,V:2.5-2.7\n      LOGICAL FUNCTION test7()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, a_copy, b_copy !Data\n        INTEGER :: errors = 0\n        LOGICAL,DIMENSION(1):: devtest\n\n        devtest(1) = .TRUE.\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel present(devtest(1:1))\n          devtest(1) = .FALSE.\n        !$acc end parallel\n\n        IF (devtest(1) .eqv. .TRUE.) THEN\n          !Initialization\n          SEEDDIM(1) = 1\n#         ifdef SEED\n          SEEDDIM(1) = SEED\n#         endif\n          CALL RANDOM_SEED(PUT=SEEDDIM)\n          CALL RANDOM_NUMBER(a)\n          CALL RANDOM_NUMBER(b)\n          c = 0\n          a_copy = a\n          b_copy = b\n\n          CALL acc_copyin(a(1:LOOPCOUNT))\n          CALL acc_copyin(b(1:LOOPCOUNT))\n\n          a = 0\n          b = 0\n\n          CALL acc_copyin(a(1:LOOPCOUNT))\n          CALL acc_copyin(b(1:LOOPCOUNT))\n\n          !$acc data copyout(c(1:LOOPCOUNT))\n            !$acc parallel present(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                c(x) = a(x) + b(x)\n              END DO\n            !$acc end parallel\n          !$acc end data\n\n          !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n          !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n\n          DO x = 1, LOOPCOUNT\n            IF (abs(c(x) - (a_copy(x) + b_copy(x))) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test7 = .FALSE.\n        ELSE\n          test7 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T7\n        LOGICAL :: test7\n#endif\n#ifndef T7\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test7()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 6\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent",
                            "reference-counting",
                            "devonly"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_copyin_async.F90": {
                "num tests": 5,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,data,executable-data,async,construct-independent,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, a_host, b_host !Data\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        a_host = a\n        b_host = b\n\n        CALL acc_copyin_async(a(1:LOOPCOUNT), 1)\n        CALL acc_copyin_async(b(1:LOOPCOUNT), 2)\n\n        !$acc data copyout(c(1:LOOPCOUNT))\n          !$acc parallel async(1) present(a(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              a(x) = a(x) * a(x)\n            END DO\n          !$acc end parallel\n          !$acc parallel async(2) present(b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              b(x) = b(x) * b(x)\n            END DO\n          !$acc end parallel\n          !$acc parallel async(2) wait(1) present(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a_host(x)*a_host(x) + b_host(x)*b_host(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n      LOGICAL :: test1\n#endif\n#ifndef T1\n      DO testrun = 1, NUM_TEST_CALLS\n        failed = failed .or. test1()\n      END DO\n      IF (failed) THEN\n        failcode = failcode + 2 ** 0\n        failed = .FALSE.\n      END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "async",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:runtime,data,executable-data,async,construct-independent,V:2.5-2.7\n      LOGICAL FUNCTION test2()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, a_host, b_host !Data\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n\n        !Initialization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        CALL acc_copyin_async(a(1:LOOPCOUNT), 1)\n        CALL acc_copyin_async(b(1:LOOPCOUNT), 2)\n\n        !$acc data copyout(c(1:LOOPCOUNT))\n          DO WHILE (acc_async_test_all() .eqv. .FALSE.)\n            CONTINUE\n          END DO\n          !$acc parallel present(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n      LOGICAL :: test2\n#endif\n#ifndef T2\n      DO testrun = 1, NUM_TEST_CALLS\n        failed = failed .or. test2()\n      END DO\n      IF (failed) THEN\n        failcode = failcode + 2 ** 1\n        failed = .FALSE.\n      END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "async",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n!T3:runtime,data,executable-data,async,construct-independent,V:2.5-2.7\n      LOGICAL FUNCTION test3()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n\n        !Initialization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        CALL acc_copyin_async(a(1:LOOPCOUNT), 1)\n        CALL acc_copyin_async(b(1:LOOPCOUNT), 2)\n\n        !$acc data copyout(c(1:LOOPCOUNT))\n          !$acc wait\n          !$acc parallel present(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test3 = .FALSE.\n        ELSE\n          test3 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T3\n      LOGICAL :: test3\n#endif\n#ifndef T3\n      DO testrun = 1, NUM_TEST_CALLS\n        failed = failed .or. test3()\n      END DO\n      IF (failed) THEN\n        failcode = failcode + 2 ** 2\n        failed = .FALSE.\n      END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "async",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "4": {
                        "content": "#ifndef T4\n!T4:runtime,data,executable-data,async,construct-independent,reference-counting,V:2.5-2.7\n      LOGICAL FUNCTION test4()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, d, e !Data\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n\n        !Initialization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        CALL RANDOM_NUMBER(d)\n        e = 0\n\n        !$acc enter data create(c(1:LOOPCOUNT))\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), d(1:LOOPCOUNT)) copyout(e(1:LOOPCOUNT))\n          !$acc parallel present(c(1:LOOPCOUNT)) async(1)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n          CALL acc_copyin_async(c(1:LOOPCOUNT), 1)\n          !$acc exit data delete(c(1:LOOPCOUNT))\n          !$acc parallel present(c(1:LOOPCOUNT)) async(1)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              e(x) = c(x) + d(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n        !$acc exit data copyout(c(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n          IF (abs(e(x) - (a(x) + b(x) + d(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test4 = .FALSE.\n        ELSE\n          test4 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T4\n      LOGICAL :: test4\n#endif\n#ifndef T4\n      DO testrun = 1, NUM_TEST_CALLS\n        failed = failed .or. test4()\n      END DO\n      IF (failed) THEN\n        failcode = failcode + 2 ** 3\n        failed = .FALSE.\n      END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "async",
                            "construct-independent",
                            "reference-counting"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "5": {
                        "content": "#ifndef T5\n!T5:runtime,data,executable-data,async,construct-independent,reference-counting,V:2.5-2.7\n      LOGICAL FUNCTION test5()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, a_copy, b_copy !Data\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n\n        !Initialization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        a_copy = a\n        CALL RANDOM_NUMBER(b)\n        b_copy = b\n        c = 0\n\n        CALL acc_copyin_async(a(1:LOOPCOUNT), 1)\n        CALL acc_copyin_async(b(1:LOOPCOUNT), 2)\n\n        a = 0\n        b = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n          !$acc wait\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a_copy(x) + b_copy(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test5 = .FALSE.\n        ELSE\n          test5 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T5\n      LOGICAL :: test5\n#endif\n#ifndef T5\n      DO testrun = 1, NUM_TEST_CALLS\n        failed = failed .or. test5()\n      END DO\n      IF (failed) THEN\n        failcode = failcode + 2 ** 4\n        failed = .FALSE.\n      END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "async",
                            "construct-independent",
                            "reference-counting"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_copyin_async_with_len.F90": {
                "num tests": 5,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,data,executable-data,async,construct-independent,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, a_host, b_host !Data\n        INTEGER :: errors\n        errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        a_host = a\n        b_host = b\n\n        CALL acc_copyin_async(a(1), LOOPCOUNT*8, 1)\n        CALL acc_copyin_async(b(1), LOOPCOUNT*8, 2)\n\n        !$acc data copyout(c(1:LOOPCOUNT)) present(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n          !$acc parallel async(1)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              a(x) = a(x) * a(x)\n            END DO\n          !$acc end parallel\n          !$acc parallel async(2)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              b(x) = b(x) * b(x)\n            END DO\n          !$acc end parallel\n          !$acc parallel wait(1, 2)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a_host(x)*a_host(x) + b_host(x)*b_host(x))) .gt. 4*PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "async",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:runtime,data,executable-data,async,construct-independent,V:2.5-2.7\n      LOGICAL FUNCTION test2()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors\n        errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        CALL acc_copyin_async(a(1), LOOPCOUNT*8, 1)\n        CALL acc_copyin_async(b(1), LOOPCOUNT*8, 2)\n\n        !$acc data copyout(c(1:LOOPCOUNT))\n          DO WHILE (acc_async_test_all() .eqv. .FALSE.)\n            CONTINUE\n          END DO\n          !$acc parallel present(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "async",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n!T3:runtime,data,executable-data,async,construct-independent,V:2.5-2.7\n      LOGICAL FUNCTION test3()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors\n        errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        CALL acc_copyin_async(a(1), LOOPCOUNT*8, 1)\n        CALL acc_copyin_async(b(1), LOOPCOUNT*8, 2)\n\n        !$acc data copyout(c(1:LOOPCOUNT))\n          !$acc wait\n          !$acc parallel present(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEn\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test3 = .FALSE.\n        ELSE\n          test3 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T3\n        LOGICAL :: test3\n#endif\n#ifndef T3\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test3()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 2\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "async",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "4": {
                        "content": "#ifndef T4\n!T4:runtime,data,executable-data,async,construct-independent,reference-counting,V:2.5-2.7\n      LOGICAL FUNCTION test4()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, d, e !Data\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n\n        !Initialization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        CALL RANDOM_NUMBER(d)\n        e = 0\n\n        !$acc enter data create(c(1:LOOPCOUNT))\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), d(1:LOOPCOUNT)) copyout(e(1:LOOPCOUNT))\n          !$acc parallel present(c(1:LOOPCOUNT)) async(1)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n          CALL acc_copyin_async(c(1), LOOPCOUNT*8, 1)\n          !$acc exit data delete(c(1:LOOPCOUNT))\n          !$acc parallel present(c(1:LOOPCOUNT)) async(1)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              e(x) = c(x) + d(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n        !$acc exit data copyout(c(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n          IF (abs(e(x) - (a(x) + b(x) + d(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test4 = .FALSE.\n        ELSE\n          test4 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T4\n        LOGICAL :: test4\n#endif\n#ifndef T4\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test4()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 3\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "async",
                            "construct-independent",
                            "reference-counting"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "5": {
                        "content": "#ifndef T5\n!T5:runtime,data,executable-data,async,construct-independent,reference-counting,V:2.5-2.7\n      LOGICAL FUNCTION test5()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n\n        !Initialization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        CALL acc_copyin_async(a(1), LOOPCOUNT*8, 1)\n        CALL acc_copyin_async(b(1), LOOPCOUNT*8, 2)\n\n        !$acc data create(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n          !$acc wait\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test5 = .FALSE.\n        ELSE\n          test5 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T5\n        LOGICAL :: test5\n#endif\n#ifndef T5\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test5()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 4\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "async",
                            "construct-independent",
                            "reference-counting"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_copyin_with_len.F90": {
                "num tests": 7,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        CALL acc_copyin(a(1), LOOPCOUNT*8)\n        CALL acc_copyin(b(1), LOOPCOUNT*8)\n        !$acc data copy(c(1:LOOPCOUNT))\n          !$acc parallel present(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            !$acc Loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        CALL acc_copyout(a(1:LOOPCOUNT))\n        CALL acc_copyout(b(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END FUNCTION\n#endif\n#ifndef T1\n      LOGICAL :: test1\n#endif\n#ifndef T1\n      DO testrun = 1, NUM_TEST_CALLS\n        failed = failed .or. test1()\n      END DO\n      IF (failed) THEN\n        failcode = failcode + 2 ** 0\n        failed = .FALSE.\n      END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:runtime,data,executable-data,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test2()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        CALL acc_copyin(a(1), LOOPCOUNT*8)\n        CALL acc_copyin(b(1), LOOPCOUNT*8)\n        !$acc data copy(c(1:LOOPCOUNT))\n          !$acc parallel present(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        !$acc exit data copyout(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END FUNCTION\n#endif\n#ifndef T2\n      LOGICAL :: test2\n#endif\n#ifndef T2\n      DO testrun = 1, NUM_TEST_CALLS\n        failed = failed .or. test2()\n      END DO\n      IF (failed) THEN\n        failcode = failcode + 2 ** 1\n        failed = .FALSE.\n      END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n!T3:runtime,data,executable-data,devonly,construct-independent,V:2.5-2.7\n      LOGICAL FUNCTION test3()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, a_copy, b_copy !Data\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n        INTEGER,DIMENSION(1) :: devtest\n\n        devtest(1) = 1\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel present(devtest(1:1))\n          devtest(1) = 0\n        !$acc end parallel\n\n        IF (devtest(1) .eq. 1) THEN\n          SEEDDIM(1) = 1\n#         ifdef SEED\n          SEEDDIM(1) = SEED\n#         endif\n          CALL RANDOM_SEED(PUT=SEEDDIM)\n          CALL RANDOM_NUMBER(a)\n          CALL RANDOM_NUMBER(b)\n          a_copy = a\n          b_copy = b\n          c = 0\n\n          CALL acc_copyin(a(1), LOOPCOUNT*8)\n          CALL acc_copyin(b(1), LOOPCOUNT*8)\n\n          a = 0\n          b = 0\n\n          !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copy(c(1:LOOPCOUNT))\n            !$acc parallel\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                c(x) = a(x) + b(x)\n              END DO\n            !$acc end parallel\n          !$acc end data\n\n          CALL acc_copyout(a(1:LOOPCOUNT))\n          CALL acc_copyout(b(1:LOOPCOUNT))\n\n          DO x = 1, LOOPCOUNT\n            IF (abs(a(x) - a_copy(x)) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n            IF (abs(b(x) - b_copy(x)) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n            IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test3 = .FALSE.\n        ELSE\n          test3 = .TRUE.\n        END IF\n      END FUNCTION\n#endif\n#ifndef T3\n      LOGICAL :: test3\n#endif\n#ifndef T3\n      DO testrun = 1, NUM_TEST_CALLS\n        failed = failed .or. test3()\n      END DO\n      IF (failed) THEN\n        failcode = failcode + 2 ** 2\n        failed = .FALSE.\n      END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "devonly",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "4": {
                        "content": "#ifndef T4\n!T4:runtime,compatibility-features,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test4()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        CALL acc_pcopyin(a(1), LOOPCOUNT*8)\n        CALL acc_pcopyin(b(1), LOOPCOUNT*8)\n\n        !$acc data copyout(c(1:LOOPCOUNT)) present(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test4 = .FALSE.\n        ELSE\n          test4 = .TRUE.\n        END IF\n      END FUNCTION\n#endif\n#ifndef T4\n      LOGICAL :: test4\n#endif\n#ifndef T4\n      DO testrun = 1, NUM_TEST_CALLS\n        failed = failed .or. test4()\n      END DO\n      IF (failed) THEN\n        failcode = failcode + 2 ** 3\n        failed = .FALSE.\n      END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "compatibility-features",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "5": {
                        "content": "#ifndef T5\n!T5:runtime,compatibility-features,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test5()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        CALL acc_present_or_copyin(a(1), LOOPCOUNT*8)\n        CALL acc_present_or_copyin(b(1), LOOPCOUNT*8)\n\n        !$acc data copyout(c(1:LOOPCOUNT)) present(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test5 = .FALSE.\n        ELSE\n          test5 = .TRUE.\n        END IF\n      END FUNCTION\n#endif\n#ifndef T5\n      LOGICAL :: test5\n#endif\n#ifndef T5\n      DO testrun = 1, NUM_TEST_CALLS\n        failed = failed .or. test5()\n      END DO\n      IF (failed) THEN\n        failcode = failcode + 2 ** 4\n        failed = .FALSE.\n      END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "compatibility-features",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "6": {
                        "content": "#ifndef T6\n!T6:runtime,data,executable-data,construct-independent,reference-counting,V:2.5-2.7\n      LOGICAL FUNCTION test6()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        CALL acc_copyin(a(1), LOOPCOUNT*8)\n        CALL acc_copyin(a(1), LOOPCOUNT*8)\n        CALL acc_copyin(b(1), LOOPCOUNT*8)\n        CALL acc_copyin(b(1), LOOPCOUNT*8)\n\n        !$acc data copyout(c(1:LOOPCOUNT))\n          !$acc parallel present(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n        !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) + (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test6 = .FALSE.\n        ELSE\n          test6 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T6\n      LOGICAL :: test6\n#endif\n#ifndef T6\n      DO testrun = 1, NUM_TEST_CALLS\n        failed = failed .or. test6()\n      END DO\n      IF (failed) THEN\n        failcode = failcode + 2 ** 5\n        failed = .FALSE.\n      END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent",
                            "reference-counting"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "7": {
                        "content": "#ifndef T7\n!T7:runtime,data,executable-data,construct-independent,reference-counting,devonly,V:2.5-2.7\n      LOGICAL FUNCTION test7()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, a_copy, b_copy !Data\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n        LOGICAL,DIMENSION(1):: devtest\n\n        devtest(1) = .TRUE.\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel present(devtest(1:1))\n          devtest(1) = .FALSE.\n        !$acc end parallel\n\n        IF (devtest(1) .eqv. .TRUE.) THEN\n          SEEDDIM(1) = 1\n#         ifdef SEED\n          SEEDDIM(1) = SEED\n#         endif\n          CALL RANDOM_SEED(PUT=SEEDDIM)\n          CALL RANDOM_NUMBER(a)\n          CALL RANDOM_NUMBER(b)\n          c = 0\n          a_copy = a\n          b_copy = b\n\n          CALL acc_copyin(a(1), LOOPCOUNT*8)\n          CALL acc_copyin(b(1), LOOPCOUNT*8)\n\n          a = 0\n          b = 0\n\n          CALL acc_copyin(a(1), LOOPCOUNT*8)\n          CALL acc_copyin(b(1), LOOPCOUNT*8)\n\n          !$acc data copyout(c(1:LOOPCOUNT))\n            !$acc parallel present(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                c(x) = a(x) + b(x)\n              END DO\n            !$acc end parallel\n          !$acc end data\n\n          !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n          !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n\n          DO x = 1, LOOPCOUNT\n            IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END IF\n        IF (errors .eq. 0) THEN\n          test7 = .FALSE.\n        ELSE\n          test7 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T7\n      LOGICAL :: test7\n#endif\n#ifndef T7\n      DO testrun = 1, NUM_TEST_CALLS\n        failed = failed .or. test7()\n      END DO\n      IF (failed) THEN\n        failcode = failcode + 2 ** 6\n        failed = .FALSE.\n      END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent",
                            "reference-counting",
                            "devonly"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_copyout.F90": {
                "num tests": 5,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        CALL acc_create(c(1:LOOPCOUNT))\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) present(c(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        CALL acc_copyout(c(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END FUNCTION\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:runtime,data,executable-data,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test2()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c\n        INTEGER :: errors = 0\n\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc enter data create(c(1:LOOPCOUNT))\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) present(c(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        CALL acc_copyout(c(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n!T3:runtime,data,executable-data,construct-independent,devonly,reference-counting,V:2.5-2.7\n      LOGICAL FUNCTION test3()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c\n        INTEGER :: errors = 0\n        LOGICAL,DIMENSION(1):: devtest\n\n        devtest(1) = .TRUE.\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel present(devtest(1:1))\n          devtest(1) = .FALSE.\n        !$acc end parallel\n\n        IF (devtest(1) .eqv. .TRUE.) THEN\n          SEEDDIM(1) = 1\n#         ifdef SEED\n          SEEDDIM(1) = SEED\n#         endif\n          CALL RANDOM_SEED(PUT=SEEDDIM)\n          CALL RANDOM_NUMBER(a)\n          CALL RANDOM_NUMBER(b)\n          c = 0\n\n          !$acc enter data copyin(c(1:LOOPCOUNT))\n          !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n            !$acc parallel\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                c(x) = a(x) + b(x)\n              END DO\n            !$acc end parallel\n            CALL acc_copyout(c(1:LOOPCOUNT))\n          !$acc end data\n\n          DO x = 1, LOOPCOUNT\n            IF (abs(c(x)) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test3 = .FALSE.\n        ELSE\n          test3 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T3\n        LOGICAL :: test3\n#endif\n#ifndef T3\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test3()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 2\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent",
                            "devonly",
                            "reference-counting"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "4": {
                        "content": "#ifndef T4\n!T4:runtime,data,executable-data,construct-independent,reference-counting,V:2.5-2.7\n      LOGICAL FUNCTION test4()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c\n        INTEGER :: errors = 0\n\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc enter data create(c(1:LOOPCOUNT))\n        !$acc enter data create(c(1:LOOPCOUNT))\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) present(c(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n        !$acc exit data delete(c(1:LOOPCOUNT))\n        CALL acc_copyout(c(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test4 = .FALSE.\n        ELSE\n          test4 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T4\n        LOGICAL :: test4\n#endif\n#ifndef T4\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test4()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 3\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent",
                            "reference-counting"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "5": {
                        "content": "#ifndef T5\n!T5:runtime,data,executable-data,construct-independent,reference-counting,devonly,V:2.5-2.7\n      LOGICAL FUNCTION test5()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c\n        INTEGER :: errors = 0\n        LOGICAL,DIMENSION(1):: devtest\n        devtest(1) = .TRUE.\n\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel present(devtest(1:1))\n          devtest(1) = .FALSE.\n        !$acc end parallel\n\n        IF (devtest(1) .eqv. .TRUE.) THEN\n          SEEDDIM(1) = 1\n#         ifdef SEED\n          SEEDDIM(1) = SEED\n#         endif\n          CALL RANDOM_SEED(PUT=SEEDDIM)\n          CALL RANDOM_NUMBER(a)\n          CALL RANDOM_NUMBER(b)\n          c = 0\n\n          !$acc enter data create(c(1:LOOPCOUNT))\n          !$acc enter data create(c(1:LOOPCOUNT))\n          !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) present(c(1:LOOPCOUNT))\n            !$acc parallel\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                c(x) = a(x) + b(x)\n              END DO\n            !$acc end parallel\n          !$acc end data\n          CALL acc_copyout(c(1:LOOPCOUNT))\n          !$acc exit data delete(c(1:LOOPCOUNT))\n\n          DO x = 1, LOOPCOUNT\n            IF (abs(c(x)) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test5 = .FALSE.\n        ELSE\n          test5 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T5\n        LOGICAL :: test5\n#endif\n#ifndef T5\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test5()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 4\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent",
                            "reference-counting",
                            "devonly"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_copyout_async.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,data,executable-data,async,construct-independent,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, d, e, f !Data\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        CALL RANDOM_NUMBER(d)\n        CALL RANDOM_NUMBER(e)\n        f = 0\n\n        !$acc enter data create(c(1:LOOPCOUNT), f(1:LOOPCOUNT))\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), d(1:LOOPCOUNT), e(1:LOOPCOUNT)) present(c(1:LOOPCOUNT), f(1:LOOPCOUNT))\n          !$acc parallel async(1)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n          !$acc parallel async(2)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              f(x) = d(x) + e(x)\n            END DO\n          !$acc end parallel\n          CALL acc_copyout_async(c(1:LOOPCOUNT), 1)\n          CALL acc_copyout_async(f(1:LOOPCOUNT), 2)\n        !$acc end data\n        !$acc wait\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n          IF (abs(f(x) - (d(x) + e(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n      LOGICAL :: test1\n#endif\n#ifndef T1\n      DO testrun = 1, NUM_TEST_CALLS\n        failed = failed .or. test1()\n      END DO\n      IF (failed) THEN\n        failcode = failcode + 2 ** 0\n        failed = .FALSE.\n      END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "async",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_copyout_async_with_len.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,data,executable-data,async,construct-independent,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, d, e, f !Data\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        CALL RANDOM_NUMBER(d)\n        CALL RANDOM_NUMBER(e)\n        f = 0\n\n        !$acc enter data create(c(1:LOOPCOUNT), f(1:LOOPCOUNT))\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), d(1:LOOPCOUNT), e(1:LOOPCOUNT)) present(c(1:LOOPCOUNT), f(1:LOOPCOUNT))\n          !$acc parallel async(1)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n          !$acc parallel async(2)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              f(x) = d(x) + e(x)\n            END DO\n          !$acc end parallel\n          CALL acc_copyout_async(c(1), LOOPCOUNT*8, 1)\n          CALL acc_copyout_async(f(1), LOOPCOUNT*8, 2)\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n          IF (abs(f(x) - (d(x) + e(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "async",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_copyout_finalize.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,data,executable-data,construct-independent,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc enter data create(c(1:LOOPCOUNT))\n        !$acc enter data create(c(1:LOOPCOUNT))\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) present(c(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        CALL acc_copyout_finalize(c(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_copyout_finalize_async.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,data,executable-data,async,construct-independent,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, d, e, f !Data\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        CALL RANDOM_NUMBER(d)\n        CALL RANDOM_NUMBER(e)\n        f = 0\n\n        !$acc enter data create(c(1:LOOPCOUNT), f(1:LOOPCOUNT))\n        !$acc enter data create(c(1:LOOPCOUNT), f(1:LOOPCOUNT))\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), d(1:LOOPCOUNT), e(1:LOOPCOUNT)) present(c(1:LOOPCOUNT), f(1:LOOPCOUNT))\n          !$acc parallel async(1)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n          !$acc parallel async(2)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              f(x) = d(x) + e(x)\n            END DO\n          !$acc end parallel\n          CALL acc_copyout_finalize_async(c(1:LOOPCOUNT), 1)\n          CALL acc_copyout_finalize_async(f(1:LOOPCOUNT), 2)\n          !$acc wait\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n          IF (abs(f(x) - (d(x) + e(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n      LOGICAL :: test1\n#endif\n#ifndef T1\n      DO testrun = 1, NUM_TEST_CALLS\n        failed = failed .or. test1()\n      END DO\n      IF (failed) THEN\n        failcode = failcode + 2 ** 0\n        failed = .FALSE.\n      END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "async",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_copyout_finalize_async_with_len.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,data,executable-data,async,construct-independent,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, d, e, f !Data\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        CALL RANDOM_NUMBER(d)\n        CALL RANDOM_NUMBER(e)\n        f = 0\n\n        !$acc enter data create(c(1:LOOPCOUNT), f(1:LOOPCOUNT))\n        !$acc enter data create(c(1:LOOPCOUNT), f(1:LOOPCOUNT))\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), d(1:LOOPCOUNT), e(1:LOOPCOUNT)) present(c(1:LOOPCOUNT), f(1:LOOPCOUNT))\n          !$acc parallel async(1)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n          !$acc parallel async(2)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              f(x) = d(x) + e(x)\n            END DO\n          !$acc end parallel\n          CALL acc_copyout_finalize_async(c(1), LOOPCOUNT*8, 1)\n          CALL acc_copyout_finalize_async(f(1), LOOPCOUNT*8, 2)\n          !$acc wait\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n          IF (abs(f(x) - (d(x) + e(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n      LOGICAL :: test1\n#endif\n#ifndef T1\n      DO testrun = 1, NUM_TEST_CALLS\n        failed = failed .or. test1()\n      END DO\n      IF (failed) THEN\n        failcode = failcode + 2 ** 0\n        failed = .FALSE.\n      END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "async",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_copyout_finalize_with_len.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,data,executable-data,construct-independent,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc enter data create(c(1:LOOPCOUNT))\n        !$acc enter data create(c(1:LOOPCOUNT))\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) present(c(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        CALL acc_copyout_finalize(c(1), LOOPCOUNT*8)\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_copyout_with_len.F90": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        CALL acc_create(c(1:LOOPCOUNT))\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) present(c(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        CALL acc_copyout(c(1), LOOPCOUNT*8)\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:runtime,data,executable-data,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test2()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c\n        INTEGER :: errors = 0\n\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc enter data create(c(1:LOOPCOUNT))\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) present(c(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        CALL acc_copyout(c(1), LOOPCOUNT*8)\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2**1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_create.F90": {
                "num tests": 4,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors\n        errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        CALL acc_create(c(1:LOOPCOUNT))\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n          !$acc parallel present(c(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        CALL acc_copyout(c(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:runtime,data,executable-data,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test2()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c\n        INTEGER:: errors\n        errors = 0\n\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c= 0\n\n        CALL acc_create(c(1:LOOPCOUNT))\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n          !$acc parallel present(c(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        !$acc exit data copyout(c(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n!T3:runtime,compatibility-features,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test3()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER:: x\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c\n        INTEGER:: errors\n        errors = 0\n\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        CALL acc_pcreate(c(1:LOOPCOUNT))\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) present(c(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        !$acc exit data copyout(c(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test3 = .FALSE.\n        ELSE\n          test3 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T3\n        LOGICAL :: test3\n#endif\n#ifndef T3\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test3()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 2\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "compatibility-features",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "4": {
                        "content": "#ifndef T4\n!T4:runtime,compatibility-features,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test4()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER:: x\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c\n        INTEGER:: errors\n        errors = 0\n\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        CALL acc_present_or_create(c(1:LOOPCOUNT))\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) present(c(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        !$acc exit data copyout(c(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test4 = .FALSE.\n        ELSE\n          test4 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T4\n        LOGICAL :: test4\n#endif\n#ifndef T4\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test4()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 3\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "compatibility-features",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_create_async.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,data,executable-data,async,construct-independent,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, d, e, f !Data\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        CALL RANDOM_NUMBER(d)\n        CALL RANDOM_NUMBER(e)\n        f = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), d(1:LOOPCOUNT), e(1:LOOPCOUNT))\n          CALL acc_create_async(c(1:LOOPCOUNT), 1)\n          CALL acc_create_async(f(1:LOOPCOUNT), 2)\n          !$acc data present(c(1:LOOPCOUNT), f(1:LOOPCOUNT))\n            !$acc parallel async(1)\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                c(x) = a(x) + b(x)\n              END DO\n            !$acc end parallel\n            !$acc parallel async(2)\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                f(x) = d(x) + e(x)\n              END DO\n            !$acc end parallel\n            !$acc wait\n          !$acc end data\n        !$acc end data\n\n        !$acc exit data copyout(c(1:LOOPCOUNT), f(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n          IF (abs(f(x) - (d(x) + e(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "async",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_create_async_with_len.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,data,executable-data,async,construct-independent,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, d, e, f !Data\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        CALL RANDOM_NUMBER(d)\n        CALL RANDOM_NUMBER(e)\n        f = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), d(1:LOOPCOUNT), e(1:LOOPCOUNT))\n          CALL acc_create_async(c(1), LOOPCOUNT*8, 1)\n          CALL acc_create_async(f(1), LOOPCOUNT*8, 2)\n          !$acc data present(c(1:LOOPCOUNT), f(1:LOOPCOUNT))\n            !$acc parallel async(1)\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                c(x) = a(x) + b(x)\n              END DO\n            !$acc end parallel\n            !$acc parallel async(2)\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                f(x) = d(x) + e(x)\n              END DO\n            !$acc end parallel\n            !$acc wait\n          !$acc end data\n        !$acc end data\n\n        !$acc exit data copyout(c(1:LOOPCOUNT), f(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n          IF (abs(f(x) - (d(x) + e(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "async",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_create_with_len.F90": {
                "num tests": 4,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors\n        errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n        #ifdef SEED\n        SEEDDIM(1) = SEED\n        #endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        CALL acc_create(c(1), LOOPCOUNT*8)\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n          !$acc parallel present(c(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        CALL acc_copyout(c(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:runtime,data,executable-data,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test2()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER:: x\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c\n        INTEGER :: errors\n        errors = 0\n\n        SEEDDIM(1) = 1\n        #ifdef SEED\n        SEEDDIM(1) = SEED\n        #endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c= 0\n\n        CALL acc_create(c(1), LOOPCOUNT*8)\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n          !$acc parallel present(c(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        !$acc exit data copyout(c(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n!T3:runtime,compatibility-features,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test3()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER:: x\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c\n        INTEGER:: errors\n        errors = 0\n\n        SEEDDIM(1) = 1\n        #ifdef SEED\n        SEEDDIM(1) = SEED\n        #endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        CALL acc_pcreate(c(1), LOOPCOUNT*8)\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) present(c(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        !$acc exit data copyout(c(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test3 = .FALSE.\n        ELSE\n          test3 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T3\n        LOGICAL :: test3\n#endif\n#ifndef T3\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test3()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 2\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "compatibility-features",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "4": {
                        "content": "#ifndef T4\n!T4:runtime,compatibility-features,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test4()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER:: x\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c\n        INTEGER:: errors\n        errors = 0\n\n        SEEDDIM(1) = 1\n        #ifdef SEED\n        SEEDDIM(1) = SEED\n        #endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        CALL acc_present_or_create(c(1), LOOPCOUNT*8)\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) present(c(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        !$acc exit data copyout(c(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test4 = .FALSE.\n        ELSE\n          test4 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T4\n        LOGICAL :: test4\n#endif\n#ifndef T4\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test4()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 3\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "compatibility-features",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_delete.F90": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors\n        errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n\n        !$acc data copyout(c(1:LOOPCOUNT))\n          !$acc parallel present(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        CALL acc_delete(a(1:LOOPCOUNT))\n        CALL acc_delete(b(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:runtime,data,executable-data,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test2()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER:: x\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c\n        INTEGER:: errors\n        errors = 0\n\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        CALL acc_copyin(a(1:LOOPCOUNT))\n        CALL acc_copyin(b(1:LOOPCOUNT))\n\n        !$acc data copyout(c(1:LOOPCOUNT))\n          !$acc parallel present(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        CALL acc_delete(a(1:LOOPCOUNT))\n        CALL acc_delete(b(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2**1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_delete_async.F90": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,data,executable-data,async,construct-independent,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, d, e, f !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        CALL RANDOM_NUMBER(d)\n        CALL RANDOM_NUMBER(e)\n        f = 0\n\n        !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), d(1:LOOPCOUNT), e(1:LOOPCOUNT))\n\n        !$acc data present(a(1:LOOPCOUNT), b(1:LOOPCOUNT), d(1:LOOPCOUNT), e(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT), f(1:LOOPCOUNT))\n          !$acc parallel async(1)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n          !$acc parallel async(2)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              f(x) = d(x) + e(x)\n            END DO\n          !$acc end parallel\n          CALL acc_delete_async(a(1:LOOPCOUNT), 1)\n          CALL acc_delete_async(b(1:LOOPCOUNT), 1)\n          CALL acc_delete_async(d(1:LOOPCOUNT), 2)\n          CALL acc_delete_async(e(1:LOOPCOUNT), 2)\n          !$acc wait\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n          IF (abs(f(x) - (d(x) + e(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "async",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:runtime,data,executable-data,devonly,async,construct-independent,V:2.5-2.7\n      LOGICAL FUNCTION test2()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c!Data\n        INTEGER,DIMENSION(1) :: devtest\n        INTEGER :: errors = 0\n\n        devtest(1) = 1\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel present(devtest(1:1))\n          devtest(1) = 0\n        !$acc end parallel\n\n        IF (devtest(1) == 1) THEN\n          CALL RANDOM_NUMBER(a)\n          CALL RANDOM_NUMBER(b)\n          c = 0\n\n          !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n          !$acc data present(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n            !$acc parallel async(1)\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                c(x) = a(x) + b(x)\n              END DO\n            !$acc end parallel\n          !$acc end data\n          CALL acc_delete_async(c(1:LOOPCOUNT), 1)\n          !$acc enter data copyin(c(1:LOOPCOUNT)) async(1)\n          !$acc data present(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n            !$acc parallel async(1)\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                c(x) = c(x) + a(x) + b(x)\n              END DO\n            !$acc end parallel\n          !$acc end data\n          !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n\n          DO x = 1, LOOPCOUNT\n            IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2**1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "devonly",
                            "async",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_delete_async_with_len.F90": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,data,executable-data,async,construct-independent,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, d, e, f !Data\n        INTEGER :: errors = 0\n\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        CALL RANDOM_NUMBER(d)\n        CALL RANDOM_NUMBER(e)\n        f = 0\n\n        !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), d(1:LOOPCOUNT), e(1:LOOPCOUNT))\n\n        !$acc data present(a(1:LOOPCOUNT), b(1:LOOPCOUNT), d(1:LOOPCOUNT), e(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT), f(1:LOOPCOUNT))\n          !$acc parallel async(1)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n          !$acc parallel async(2)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              f(x) = d(x) + e(x)\n            END DO\n          !$acc end parallel\n          CALL acc_delete_async(a(1), LOOPCOUNT*8, 1)\n          CALL acc_delete_async(b(1), LOOPCOUNT*8, 1)\n          CALL acc_delete_async(d(1), LOOPCOUNT*8, 2)\n          CALL acc_delete_async(e(1), LOOPCOUNT*8, 2)\n          !$acc wait\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n          IF (abs(f(x) - (d(x) + e(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "async",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:runtime,data,executable-data,devonly,async,construct-independent,V:2.5-2.7\n      LOGICAL FUNCTION test2()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER,DIMENSION(1):: devtest\n        INTEGER :: errors = 0\n\n        devtest(1) = 1\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel present(devtest(1:1))\n          devtest(1) = 0\n        !$acc end parallel\n        IF (devtest(1) == 1) THEN\n          CALL RANDOM_NUMBER(a)\n          CALL RANDOM_NUMBER(b)\n          c = 0\n\n          !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n          !$acc data present(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n            !$acc parallel async(1)\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                c(x) = a(x) + b(x)\n              END DO\n            !$acc end parallel\n          !$acc end data\n          CALL acc_delete_async(c(1), LOOPCOUNT*8, 1)\n          !$acc enter data copyin(c(1:LOOPCOUNT)) async(1)\n          !$acc data present(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n            !$acc parallel async(1)\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                c(x) = c(x) + a(x) + b(x)\n              END DO\n            !$acc end parallel\n          !$acc end data\n          !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n\n          DO x = 1, LOOPCOUNT\n            IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2**1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "devonly",
                            "async",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_delete_finalize.F90": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,data,executable-data,construct-independent,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n        !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n\n        !$acc data copyout(c(1:LOOPCOUNT))\n          !$acc parallel present(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        CALL acc_delete_finalize(a(1:LOOPCOUNT))\n        CALL acc_delete_finalize(b(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:runtime,data,executable-data,construct-independent,V:2.5-2.7\n      LOGICAL FUNCTION test2()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        CALL acc_copyin(a(1:LOOPCOUNT))\n        CALL acc_copyin(a(1:LOOPCOUNT))\n        CALL acc_copyin(b(1:LOOPCOUNT))\n        CALL acc_copyin(b(1:LOOPCOUNT))\n\n        !$acc data copyout(c(1:LOOPCOUNT))\n          !$acc parallel present(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        CALL acc_delete_finalize(a(1:LOOPCOUNT))\n        CALL acc_delete_finalize(b(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2**1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_delete_finalize_async.F90": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,data,executable-data,async,construct-independent,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, d, e, f !Data\n        INTEGER :: errors\n        errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        CALL RANDOM_NUMBER(d)\n        CALL RANDOM_NUMBER(e)\n        f = 0\n\n        !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), d(1:LOOPCOUNT), e(1:LOOPCOUNT))\n        !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), d(1:LOOPCOUNT), e(1:LOOPCOUNT))\n\n        !$acc data present(a(1:LOOPCOUNT), b(1:LOOPCOUNT), d(1:LOOPCOUNT), e(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT), f(1:LOOPCOUNT))\n          !$acc parallel async(1)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n          !$acc parallel async(2)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              f(x) = d(x) + e(x)\n            END DO\n          !$acc end parallel\n          CALL acc_delete_finalize_async(a(1:LOOPCOUNT), 1)\n          CALL acc_delete_finalize_async(b(1:LOOPCOUNT), 1)\n          CALL acc_delete_finalize_async(d(1:LOOPCOUNT), 2)\n          CALL acc_delete_finalize_async(e(1:LOOPCOUNT), 2)\n          !$acc wait\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n          IF (abs(f(x) - (d(x) + e(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "async",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:runtime,data,executable-data,async,construct-independent,V:2.5-2.7\n      LOGICAL FUNCTION test2()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors\n        errors = 0\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n        !$acc enter data copyin(c(1:LOOPCOUNT))\n        !$acc data present(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n          !$acc parallel async(1)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        CALL acc_delete_finalize_async(c(1:LOOPCOUNT), 1)\n\n        !$acc enter data copyin(c(1:LOOPCOUNT)) async(1)\n        !$acc data present(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n          !$acc parallel async(1)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = c(x) + a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2**1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "async",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_delete_finalize_async_with_len.F90": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,data,executable-data,async,construct-independent,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, d, e, f !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        CALL RANDOM_NUMBER(d)\n        CALL RANDOM_NUMBER(e)\n        f = 0\n\n        !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), d(1:LOOPCOUNT), e(1:LOOPCOUNT))\n        !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), d(1:LOOPCOUNT), e(1:LOOPCOUNT))\n\n        !$acc data present(a(1:LOOPCOUNT), b(1:LOOPCOUNT), d(1:LOOPCOUNT), e(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT), f(1:LOOPCOUNT))\n          !$acc parallel async(1)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n          !$acc parallel async(2)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              f(x) = d(x) + e(x)\n            END DO\n          !$acc end parallel\n          CALL acc_delete_finalize_async(a(1), LOOPCOUNT*8, 1)\n          CALL acc_delete_finalize_async(b(1), LOOPCOUNT*8, 1)\n          CALL acc_delete_finalize_async(d(1), LOOPCOUNT*8, 2)\n          CALL acc_delete_finalize_async(e(1), LOOPCOUNT*8, 2)\n          !$acc wait\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n          IF (abs(f(x) - (d(x) + e(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "async",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:runtime,data,executable-data,async,construct-independent,V:2.5-2.7\n      LOGICAL FUNCTION test2()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n        !$acc enter data copyin(c(1:LOOPCOUNT))\n        !$acc data present(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n          !$acc parallel async(1)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        CALL acc_delete_finalize_async(c(1), LOOPCOUNT*8, 1)\n\n        !$acc enter data copyin(c(1:LOOPCOUNT)) async(1)\n        !$acc data present(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n          !$acc parallel async(1)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = c(x) + a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2**1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "async",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_delete_finalize_with_len.F90": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,data,executable-data,construct-independent,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors\n        errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n        !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n\n        !$acc data copyout(c(1:LOOPCOUNT))\n          !$acc parallel present(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        CALL acc_delete_finalize(a(1), LOOPCOUNT*8)\n        CALL acc_delete_finalize(b(1), LOOPCOUNT*8)\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:runtime,data,executable-data,construct-independent,V:2.5-2.7\n      LOGICAL FUNCTION test2()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors\n        errors = 0\n\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        CALL acc_copyin(a(1:LOOPCOUNT))\n        CALL acc_copyin(a(1:LOOPCOUNT))\n        CALL acc_copyin(b(1:LOOPCOUNT))\n        CALL acc_copyin(b(1:LOOPCOUNT))\n\n        !$acc data copyout(c(1:LOOPCOUNT))\n          !$acc parallel present(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        CALL acc_delete_finalize(a(1), LOOPCOUNT*8)\n        CALL acc_delete_finalize(b(1), LOOPCOUNT*8)\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2**1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_delete_with_len.F90": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors\n        errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n\n        !$acc data copyout(c(1:LOOPCOUNT))\n          !$acc parallel present(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        CALL acc_delete(a(1), LOOPCOUNT*8)\n        CALL acc_delete(b(1), LOOPCOUNT*8)\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:runtime,data,executable-data,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test2()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors\n        errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        CALL acc_copyin(a(1:LOOPCOUNT))\n        CALL acc_copyin(b(1:LOOPCOUNT))\n\n        !$acc data copyout(c(1:LOOPCOUNT))\n          !$acc parallel present(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        CALL acc_delete(a(1), LOOPCOUNT*8)\n        CALL acc_delete(b(1), LOOPCOUNT*8)\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2**1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_get_default_async.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,async,construct-independent,internal-control-values,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, holder !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors\n        INTEGER :: acc_get_default_async\n        errors = 0\n        holder = acc_get_default_async()\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n          !$acc parallel async\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n          !$acc wait(holder)\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (acc_get_default_async() .lt. 0) THEN\n          errors = errors + 1\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "async",
                            "construct-independent",
                            "internal-control-values"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_get_device_num.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,construct-independent,internal-control-values,set,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        INTEGER :: errors\n        errors = 0\n\n        IF (acc_get_device_type() .ne. acc_device_none) THEN\n          DO x = 1, acc_get_num_devices(acc_get_device_type())\n            CALL acc_set_device_num(x, acc_get_device_type())\n            IF (acc_get_device_num(acc_get_device_type()) .ne. x) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "construct-independent",
                            "internal-control-values",
                            "set"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_get_num_devices.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,construct-independent,internal-control-values,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: errors\n        errors = 0\n\n        IF (acc_get_device_type() .ne. acc_device_none) THEN\n          IF (acc_get_num_devices(acc_get_device_type()) .eq. 0) THEN\n            errors = errors + 1\n          END IF\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "construct-independent",
                            "internal-control-values"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_get_property.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,construct-independent,internal-control-values,nonvalidating,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: output\n        IF (acc_get_device_type() .ne. acc_device_none) THEN\n          output = acc_get_property(acc_get_device_num(acc_get_device_type()), acc_get_device_type(), acc_property_memory)\n          output = acc_get_property(acc_get_device_num(acc_get_device_type()), acc_get_device_type(), acc_property_free_memory)\n        END IF\n        test1 = .FALSE.\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "construct-independent",
                            "internal-control-values",
                            "nonvalidating"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_get_property_string.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,construct-independent,internal-control-values,nonvalidating,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        CHARACTER(len=:),ALLOCATABLE :: output1\n        CHARACTER(len=:),ALLOCATABLE :: output2\n        CHARACTER(len=:),ALLOCATABLE :: output3\n        IF (acc_get_device_type() .ne. acc_device_none) THEN\n          CALL acc_get_property_string(acc_get_device_num(acc_get_device_type()), acc_get_device_type, acc_property_name, output1)\n          CALL acc_get_property_string(acc_get_device_num(acc_get_device_type()), acc_get_device_type, acc_property_vendor, output2)\n          CALL acc_get_property_string(acc_get_device_num(acc_get_device_type()), acc_get_device_type, acc_property_driver, output3)\n        END IF\n        test1 = .FALSE.\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "construct-independent",
                            "internal-control-values",
                            "nonvalidating"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_init.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,construct-independent,internal-control-values,init,nonvalidating,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        IF (acc_get_device_type() .ne. acc_device_none) THEN\n          CALL acc_init(acc_get_device_type())\n        END IF\n\n        test1 = .FALSE.\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "construct-independent",
                            "internal-control-values",
                            "init",
                            "nonvalidating"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_is_present.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,devonly,construct-independent,present,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a !Data\n        INTEGER,DIMENSION(1):: devtest\n        INTEGER :: errors\n        errors = 0\n\n        devtest(1) = 1\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel present(devtest(1:1))\n          devtest(1) = 0\n        !$acc end parallel\n\n        !$acc enter data create(a(1:LOOPCOUNT))\n        IF (acc_is_present(a(1:LOOPCOUNT)) .eqv. .FALSE.) THEN\n          errors = errors + 1\n          PRINT*, 1\n        END IF\n        !$acc exit data delete(a(1:LOOPCOUNT))\n\n        IF (devtest(1) .eq. 1) THEN\n          IF (acc_is_present(a(1:LOOPCOUNT)) .eqv. .TRUE.) THEN\n            errors = errors + 1\n            PRINT*, 2\n          END IF\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "devonly",
                            "construct-independent",
                            "present"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_is_present_with_len.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,devonly,construct-independent,present,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a !Data\n        INTEGER,DIMENSION(1):: devtest\n        INTEGER :: errors = 0\n\n        devtest(1) = 1\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel present(devtest(1:1))\n          devtest(1) = 0\n        !$acc end parallel\n\n        !$acc enter data create(a(1:LOOPCOUNT))\n        IF (acc_is_present(a(1), LOOPCOUNT*8) .eqv. .FALSE.) THEN\n          errors = errors + 1\n        END IF\n        !$acc exit data delete(a(1:LOOPCOUNT))\n\n        IF (devtest(1) .eq. 1) THEN\n          IF (acc_is_present(a(1), LOOPCOUNT*8) .eqv. .TRUE.) THEN\n            errors = errors + 1\n          END IF\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "devonly",
                            "construct-independent",
                            "present"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_on_device.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,construct-independent,internal-control-values,present,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: errors\n        INTEGER :: device_type\n        errors = 0\n        device_type = acc_get_device_type()\n        IF (device_type .ne. acc_device_none) THEN\n          !$acc parallel\n            IF (acc_on_device(device_type) .eqv. .FALSE.) THEN\n              errors = errors + 1\n            END IF\n          !$acc end parallel\n        ELSE\n          !$acc parallel\n            IF (acc_on_device(acc_device_host) .eqv. .FALSE.) THEN\n              errors = errors + 1\n            END IF\n          !$acc end parallel\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "construct-independent",
                            "internal-control-values",
                            "present"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_set_default_async.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,async,construct-independent,internal-control-values,set,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, a_host, b_host !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        a_host = a\n        b_host = b\n        c = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n          CALL acc_set_default_async(1)\n          !$acc parallel async\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              a(x) = a(x) * a(x)\n            END DO\n          !$acc end parallel\n          CALL acc_set_default_async(2)\n          !$acc parallel async\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              b(x) = b(x) * b(x)\n            END DO\n          !$acc end parallel\n          !$acc parallel async(1) wait(2)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n          !$acc wait(1)\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a_host(x) * a_host(x) + b_host(x) * b_host(x))) .gt. 4 * PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "async",
                            "construct-independent",
                            "internal-control-values",
                            "set"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_set_device_num.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,construct-independent,internal-control-values,set,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(:, :),ALLOCATABLE :: host_copy\n        INTEGER :: errors = 0\n\n        CALL RANDOM_SEED\n        ALLOCATE(host_copy(acc_get_num_devices(acc_get_device_type()), LOOPCOUNT))\n\n        IF (acc_get_device_type() .ne. acc_device_none) THEN\n          !host_copy(acc_get_num_devices(acc_get_device_type()), LOOPCOUNT)\n          DO x = 1, acc_get_num_devices(acc_get_device_type())\n            DO y = 1, LOOPCOUNT\n              CALL RANDOM_NUMBER(a)\n              host_copy(x) = a\n            END DO\n            acc_set_device_num(x, acc_get_device_type())\n            !$acc enter data copyin(a(1:LOOPCOUNT))\n          END DO\n\n          DO x = 1, acc_get_num_devices(acc_get_device_type)\n            acc_set_device_num(x, acc_get_device_type())\n            !$acc data present(a(1:LOOPCOUNT))\n              !$acc parallel\n                !$acc loop\n                DO y = 1, LOOPCOUNT\n                  a(y) = a(y) + 1\n                END DO\n              !$acc end parallel\n            !$acc end data\n          END DO\n\n          DO x = 1, acc_get_num_devices(acc_get_device_type())\n            acc_set_device_num(x, acc_get_device_type())\n            !$acc exit data copyout(a(1:LOOPCOUNT))\n            DO y = 1, LOOPCOUNT\n              IF (abs(a(y) - (host_copy(x, y) + 1)) .gt. PRECISION) THEN\n                errors = errors + 1\n              END IF\n            END DO\n          END DO\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "construct-independent",
                            "internal-control-values",
                            "set"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_set_device_type.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,construct-independent,internal-control-values,set,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.fh\"\n        INTEGER :: errors = 0\n        INTEGER :: device_type\n\n        device_type = acc_get_device_type()\n        CALL acc_set_device_type(device_type)\n        IF (acc_get_device_type() .ne. device_type) THEN\n          errors = errors + 1\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "construct-independent",
                            "internal-control-values",
                            "set"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_shutdown.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,construct-independent,internal-control-values,shutdown,nonvalidating,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        IF (acc_get_device_type() .ne. acc_device_none) THEN\n          CALL acc_shutdown(acc_get_device_type())\n        END IF\n\n        test1 = .FALSE.\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "construct-independent",
                            "internal-control-values",
                            "shutdown",
                            "nonvalidating"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_update_device.F90": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,data,executable-data,construct-independent,update,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc data copyout(c(1:LOOPCOUNT)) create(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n          CALL acc_update_device(a(1:LOOPCOUNT))\n          CALL acc_update_device(b(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent",
                            "update"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:runtime,data,executable-data,devonly,construct-independent,update,V:2.0-2.7\n      LOGICAL FUNCTION test2()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER,DIMENSION(1):: devtest\n        INTEGER :: errors = 0\n\n        devtest(1) = 1\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel present(devtest(1:1))\n          devtest(1) = 0\n        !$acc end parallel\n\n        IF (devtest(1) .eq. 1) THEN\n          CALL RANDOM_NUMBER(a)\n          CALL RANDOM_NUMBER(b)\n          c = 0\n\n          !$acc data copyout(c(1:LOOPCOUNT)) copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            !$acc parallel\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                a(x) = a(x) * a(x)\n              END DO\n            !$acc end parallel\n            CALL acc_update_device(a(1:LOOPCOUNT))\n            !$acc parallel\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                b(x) = b(x) * b(x)\n              END DO\n            !$acc end parallel\n            CALL acc_update_device(b(1:LOOPCOUNT))\n            !$acc parallel\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                c(x) = a(x) + b(x)\n              END DO\n            !$acc end parallel\n          !$acc end data\n\n          DO x = 1, LOOPCOUNT\n            IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "devonly",
                            "construct-independent",
                            "update"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_update_device_async.F90": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,data,executable-data,async,construct-independent,update,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, a_host, b_host !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        a_host = a\n        b_host = b\n\n        !$acc data create(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n          CALL acc_update_device_async(a(1:LOOPCOUNT), 1)\n          !$acc parallel async(1)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              a(x) = a(x) * a(x)\n            END DO\n          !$acc end parallel\n          CALL acc_update_device_async(b(1:LOOPCOUNT), 2)\n          !$acc parallel async(2)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              b(x) = b(x) * b(x)\n            END DO\n          !$acc end parallel\n          !$acc parallel async(1) wait(2)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n          !$acc wait(1)\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - ((a_host(x) * a_host(x)) + (b_host(x) * b_host(x)))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "async",
                            "construct-independent",
                            "update"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:runtime,data,executable-data,devonly,async,construct-independent,update,V:2.5-2.7\n      LOGICAL FUNCTION test2()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER,DIMENSION(1):: devtest\n        INTEGER :: errors = 0\n\n        devtest(1) = 1\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel present(devtest(1:1))\n          devtest(1) = 0\n        !$acc end parallel\n        IF (devtest(1) .eq. 1) THEN\n          CALL RANDOM_NUMBER(a)\n          CALL RANDOM_NUMBER(b)\n          c = 0\n\n          !$acc data copyout(c(1:LOOPCOUNT)) copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            !$acc parallel async(1)\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                a(x) = a(x) * a(x)\n              END DO\n            !$acc end parallel\n            CALL acc_update_device_async(a(1:LOOPCOUNT), 1)\n            !$acc parallel async(2)\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                b(x) = b(x) * b(x)\n              END DO\n            !$acc end parallel\n            CALL acc_update_device_async(b(1:LOOPCOUNT), 2)\n            !$acc parallel async(1) wait(2)\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                c(x) = a(x) + b(x)\n              END DO\n            !$acc end parallel\n            !$acc wait(1)\n          !$acc end data\n\n          DO x = 1, LOOPCOUNT\n            IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "devonly",
                            "async",
                            "construct-independent",
                            "update"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_update_device_async_with_len.F90": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,data,executable-data,async,construct-independent,update,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, a_host, b_host !Data\n        INTEGER :: errors\n        errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        a_host = a\n        b_host = b\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n          CALL acc_update_device_async(a(1), LOOPCOUNT*8, 1)\n          !$acc parallel async(1)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              a(x) = a(x) * a(x)\n            END DO\n          !$acc end parallel\n          CALL acc_update_device_async(b(1), LOOPCOUNT*8, 2)\n          !$acc parallel async(2)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              b(x) = b(x) * b(x)\n            END DO\n          !$acc end parallel\n          !$acc parallel async(1) wait(2)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n          !$acc wait(1)\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - ((a_host(x) * a_host(x)) + (b_host(x) * b_host(x)))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "async",
                            "construct-independent",
                            "update"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:runtime,data,executable-data,devonly,async,construct-independent,update,V:2.5-2.7\n      LOGICAL FUNCTION test2()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER,DIMENSION(1):: devtest\n        INTEGER :: errors\n        errors = 0\n\n        devtest(1) = 1\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel present(devtest(1:1))\n          devtest(1) = 0\n        !$acc end parallel\n        IF (devtest(1) .eq. 1) THEN\n          CALL RANDOM_NUMBER(a)\n          CALL RANDOM_NUMBER(b)\n          c = 0\n\n          !$acc data copyout(c(1:LOOPCOUNT)) copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            !$acc parallel async(1)\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                a(x) = a(x) * a(x)\n              END DO\n            !$acc end parallel\n            CALL acc_update_device_async(a(1), LOOPCOUNT*8, 1)\n            !$acc parallel async(2)\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                b(x) = b(x) * b(x)\n              END DO\n            !$acc end parallel\n            CALL acc_update_device_async(b(1), LOOPCOUNT*8, 2)\n            !$acc parallel async(1), wait(2)\n              !$acc loop\n               DO x = 1, LOOPCOUNT\n                 c(x) = a(x) + b(x)\n               END DO\n            !$acc end parallel\n            !$acc wait(1)\n          !$acc end data\n\n          DO x = 1, LOOPCOUNT\n            IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "devonly",
                            "async",
                            "construct-independent",
                            "update"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_update_device_with_len.F90": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,data,executable-data,devonly,construct-independent,update,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER,DIMENSION(1):: devtest\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n\n        devtest(1) = 1\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel\n          devtest(1) = 0\n        !$acc end parallel\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc data copyout(c(1:LOOPCOUNT)) create(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n          CALL acc_update_device(a(1), LOOPCOUNT*8)\n          CALL acc_update_device(b(1), LOOPCOUNT*8)\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "devonly",
                            "construct-independent",
                            "update"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:runtime,data,executable-data,devonly,construct-independent,update,V:2.0-2.7\n      LOGICAL FUNCTION test2()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER,DIMENSION(1):: devtest\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n\n        devtest(1) = 1\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel\n          devtest(1) = 0\n        !$acc end parallel\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        IF (devtest(1) .eq. 1) THEN\n          CALL RANDOM_NUMBER(a)\n          CALL RANDOM_NUMBER(b)\n          c = 0\n\n          !$acc data copyout(c(1:LOOPCOUNT)) copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            !$acc parallel\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                a(x) = a(x) * a(x)\n              END DO\n            !$acc end parallel\n            CALL acc_update_device(a(1), LOOPCOUNT*8)\n            !$acc parallel\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                b(x) = b(x) * b(x)\n              END DO\n            !$acc end parallel\n            CALL acc_update_device(b(1), LOOPCOUNT*8)\n            !$acc parallel\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                c(x) = a(x) + b(x)\n              END DO\n            !$acc end parallel\n          !$acc end data\n\n          DO x = 1, LOOPCOUNT\n            IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "devonly",
                            "construct-independent",
                            "update"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_update_self.F90": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,data,executable-data,construct-independent,update,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) create(c(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n          CALL acc_update_self(c(1:LOOPCOUNT))\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent",
                            "update"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:runtime,data,executable-data,construct-independent,update,V:2.0-2.7\n      LOGICAL FUNCTION test2()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc data copyout(c(1:LOOPCOUNT)) copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              a(x) = a(x) * a(x)\n            END DO\n          !$acc end parallel\n          CALL acc_update_self(a(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              b(x) = b(x) * b(x)\n            END DO\n          !$acc end parallel\n          CALL acc_update_self(b(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent",
                            "update"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_update_self_async.F90": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,data,executable-data,devonly,async,construct-independent,update,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, d !Data\n        INTEGER,DIMENSION(1):: devtest\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n\n        devtest(1) = 1\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel\n          devtest(1) = 0\n        !$acc end parallel\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        d = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) create(c(1:LOOPCOUNT), d(1:LOOPCOUNT))\n          !$acc parallel async(1)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n          !$acc parallel async(2)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              d(x) = a(x) * b(x)\n            END DO\n          !$acc end parallel\n          CALL acc_update_self_async(c(1:LOOPCOUNT), 1)\n          CALL acc_update_self_async(d(1:LOOPCOUNT), 2)\n          !$acc wait\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n          IF (abs(d(x) - (a(x) * b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "devonly",
                            "async",
                            "construct-independent",
                            "update"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:runtime,data,executable-data,devonly,async,construct-independent,update,V:2.5-2.7\n      LOGICAL FUNCTION test2()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, d !Data\n        INTEGER,DIMENSION(1):: devtest\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n\n        devtest(1) = 1\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel\n          devtest(1) = 0\n        !$acc end parallel\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        IF (devtest(1) .eq. 1) THEN\n          CALL RANDOM_NUMBER(a)\n          CALL RANDOM_NUMBER(b)\n          c = 0\n\n          !$acc data copyout(c(1:LOOPCOUNT)) copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            !$acc parallel async(1)\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                a(x) = a(x) * a(x)\n              END DO\n            !$acc end parallel\n            CALL acc_update_self_async(a(1:LOOPCOUNT), 1)\n            !$acc parallel async(2)\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                b(x) = b(x) * b(x)\n              END DO\n            !$acc end parallel\n            CALL acc_update_self_async(b(1:LOOPCOUNT), 2)\n            !$acc parallel async(1)\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                a(x) = a(x) + 1\n              END DO\n            !$acc end parallel\n            !$acc parallel async(2)\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                b(x) = b(x) + 1\n              END DO\n            !$acc end parallel\n            !$acc parallel async(1) wait(2)\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                c(x) = a(x) * b(x)\n              END DO\n            !$acc end parallel\n          !$acc end data\n\n          DO x = 1, LOOPCOUNT\n            IF (abs(c(x) - ((a(x) + 1) * (b(x) + 1))) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "devonly",
                            "async",
                            "construct-independent",
                            "update"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_update_self_async_with_len.F90": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,data,executable-data,devonly,async,construct-independent,update,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, d !Data\n        INTEGER,DIMENSION(1):: devtest\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n\n        devtest(1) = 1\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel present(devtest(1:1))\n          devtest(1) = 0\n        !$acc end parallel\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        d = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) create(c(1:LOOPCOUNT), d(1:LOOPCOUNT))\n          !$acc parallel async(1)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n          !$acc parallel async(2)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              d(x) = a(x) * b(x)\n            END DO\n          !$acc end parallel\n          CALL acc_update_self_async(c(1), LOOPCOUNT*8, 1)\n          CALL acc_update_self_async(d(1), LOOPCOUNT*8, 2)\n          !$acc wait\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n          IF (abs(d(x) - (a(x) * b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "devonly",
                            "async",
                            "construct-independent",
                            "update"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:runtime,data,executable-data,devonly,async,construct-independent,update,V:2.5-2.7\n      LOGICAL FUNCTION test2()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, d !Data\n        INTEGER,DIMENSION(1):: devtest\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n\n        devtest(1) = 1\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel present(devtest(1:1))\n          devtest(1) = 0\n        !$acc end parallel\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        IF (devtest(1) .eq. 1) THEN\n          CALL RANDOM_NUMBER(a)\n          CALL RANDOM_NUMBER(b)\n          c = 0\n\n          !$acc data copyout(c(1:LOOPCOUNT)) copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            !$acc parallel async(1)\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                a(x) = a(x) * a(x)\n              END DO\n            !$acc end parallel\n            CALL acc_update_self_async(a(1), LOOPCOUNT*8, 1)\n            !$acc parallel async(2)\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                b(x) = b(x) * b(x)\n              END DO\n            !$acc end parallel\n            CALL acc_update_self_async(b(1), LOOPCOUNT*8, 2)\n            !$acc parallel async(1)\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                a(x) = a(x) + 1\n              END DO\n            !$acc end parallel\n            !$acc parallel async(2)\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                b(x) = b(x) + 1\n              END DO\n            !$acc end parallel\n            !$acc parallel async(1) wait(2)\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                c(x) = a(x) * b(x)\n              END DO\n            !$acc end parallel\n            !$acc wait(1)\n          !$acc end data\n\n          DO x = 1, LOOPCOUNT\n            IF (abs(c(x) - ((a(x) + 1) * (b(x) + 1))) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "devonly",
                            "async",
                            "construct-independent",
                            "update"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_update_self_with_len.F90": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,data,executable-data,construct-independent,update,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) create(c(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n          CALL acc_update_self(c(1), LOOPCOUNT*8)\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent",
                            "update"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:runtime,data,executable-data,construct-independent,update,V:2.0-2.7\n      LOGICAL FUNCTION test2()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc data copyout(c(1:LOOPCOUNT)) copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              a(x) = a(x) * a(x)\n            END DO\n          !$acc end parallel\n          CALL acc_update_self(a(1), LOOPCOUNT*8)\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              b(x) = b(x) * b(x)\n            END DO\n          !$acc end parallel\n          CALL acc_update_self(b(1), LOOPCOUNT*8)\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent",
                            "update"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_wait.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,async,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, d, e !Data\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        CALL RANDOM_NUMBER(d)\n        e = 0\n\n        !$acc enter data  copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) create(c(1:LOOPCOUNT)) async(1)\n        !$acc enter data copyin(d(1:LOOPCOUNT)) create(e(1:LOOPCOUNT)) async(2)\n        !$acc parallel present(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT)) async(1)\n          !$acc loop\n          DO x = 1, LOOPCOUNT\n            c(x) = a(x) + b(x)\n          END DO\n        !$acc end parallel\n        !$acc parallel present(c(1:LOOPCOUNT), d(1:LOOPCOUNT), e(1:LOOPCOUNT)) async(1) wait(2)\n          !$acc loop\n          DO x = 1, LOOPCOUNT\n            e(x) = c(x) + d(x)\n          END DO\n        !$acc end parallel\n        !$acc exit data copyout(e(1:LOOPCOUNT)) async(1)\n\n        CALL acc_wait(1)\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(e(x) - (a(x) + b(x) + d(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT), d(1:LOOPCOUNT))\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "async",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_wait_all.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,async,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, d, a_host, b_host, c_host !Data\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        CALL RANDOM_NUMBER(c)\n        d = 0\n        a_host = a\n        b_host = b\n        c_host = c\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT)) copyout(d(1:LOOPCOUNT))\n          !$acc parallel async(1)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              a(x) = a(x) * a(x)\n            END DO\n          !$acc end parallel\n          !$acc parallel async(2)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              b(x) = b(x) * b(x)\n            END DO\n          !$acc end parallel\n          !$acc parallel async(3)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = c(x) * c(x)\n            END DO\n          !$acc end parallel\n          CALL acc_wait_all()\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              d(x) = a(x) + b(x) + c(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(d(x) - ((a_host(x) * a_host(x)) + (b_host(x) * b_host(x)) + (c_host(x) * c_host(x)))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "async",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_wait_all_async.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,async,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, d, e, f, g, h, i, j, k !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: a_host, d_host, g_host\n        REAL(8) :: RAND\n        REAL(8) :: temp\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        CALL RANDOM_NUMBER(d)\n        CALL RANDOM_NUMBER(e)\n        f = 0\n        CALL RANDOM_NUMBER(g)\n        CALL RANDOM_NUMBER(h)\n        i = 0\n        j = 0\n        k = 0\n        a_host = a\n        d_host = d\n        g_host = g\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), d(1:LOOPCOUNT), e(1:LOOPCOUNT), g(1:LOOPCOUNT), h(1:LOOPCOUNT)) create(c(1:LOOPCOUNT), f(1:LOOPCOUNT), i(1:LOOPCOUNT), j(1:LOOPCOUNT)) copyout(k(1:LOOPCOUNT))\n          !$acc parallel async(1)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n          !$acc parallel async(2)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              f(x) = d(x) + e(x)\n            END DO\n          !$acc end parallel\n          !$acc parallel async(3)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              i(x) = g(x) + h(x)\n            END DO\n          !$acc end parallel\n          CALL acc_wait_all_async(4)\n          !$acc parallel async(4)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              j(x) = c(x) + f(x) + i(x)\n            END DO\n          !$acc end parallel\n          !$acc parallel async(1)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              a(x) = b(x) * c(x)\n            END DO\n          !$acc end parallel\n          !$acc parallel async(2)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              d(x) = e(x) * f(x)\n            END DO\n          !$acc end parallel\n          !$acc parallel async(3)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              g(x) = h(x) * i(x)\n            END DO\n          !$acc end parallel\n          CALL acc_wait_all_async(4)\n          !$acc parallel async(4)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              k(x) = j(x) + a(x) + d(x) + g(x)\n            END DO\n          !$acc end parallel\n          !$acc wait(4)\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          temp = a_host(x) + b(x) + d_host(x) + e(x) + g_host(x) + h(x)\n          temp = temp + (b(x) * (a_host(x) + b(x))) + (e(x) * (d_host(x) + e(x))) + (h(x) * (g_host(x) + h(x)))\n          IF (abs(k(x) - temp) .gt. PRECISION * 10) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "async",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_wait_async.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,async,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, d, e, f, g, h, i !Data\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        CALL RANDOM_NUMBER(d)\n        CALL RANDOM_NUMBER(e)\n        f = 0\n        CALL RANDOM_NUMBER(g)\n        h = 0\n        i = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), d(1:LOOPCOUNT), e(1:LOOPCOUNT), g(1:LOOPCOUNT)) create(c(1:LOOPCOUNT), f(1:LOOPCOUNT), h(1:LOOPCOUNT)) copyout(i(1:LOOPCOUNT))\n          !$acc parallel async(1)\n            !$acc loop\n              DO x = 1, LOOPCOUNT\n                c(x) = a(x) + b(x)\n              END DO\n          !$acc end parallel\n          CALL acc_wait_async(1, 2)\n          !$acc parallel async(2)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              h(x) = c(x) + g(x)\n            END DO\n          !$acc end parallel\n          !$acc parallel async(1)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              f(x) = d(x) + e(x)\n            END DO\n          !$acc end parallel\n          CALL acc_wait_async(1, 2)\n          !$acc parallel async(2)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              i(x) = h(x) + f(x)\n            END DO\n          !$acc end parallel\n          !$acc wait(2)\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(i(x) - (a(x) + b(x) + g(x) + d(x) + e(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "async",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_assign_expr_and_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a, b !Data\n        LOGICAL,DIMENSION(10):: passed_a, passed_b\n        LOGICAL IS_POSSIBLE\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n        LOGICAL :: init\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) < .933) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT,1:10))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic capture\n                  b(x, y) = totals(x)\n                  totals(x) = a(x, y) .AND. totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .AND. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed_a(y) = a(x, y)\n            passed_b(y) = b(x, y)\n          END DO\n          init = .FALSE.\n          IF (.FALSE. .eqv. IS_POSSIBLE(a(x, 1:10), b(x, 1:10), 10, .FALSE.)) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_assign_expr_divided_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: b\n        REAL(8),DIMENSION(LOOPCOUNT):: totals\n        REAL(8),DIMENSION(10):: passed\n        REAL(8),DIMENSION(10):: passed_b\n        REAL(8) :: holder\n        INTEGER :: errors = 0\n        LOGICAL IS_POSSIBLE\n        LOGICAL IS_POSSIBLE_2\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 1\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT,1:10))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic capture\n                  b(x, y) = totals(x)\n                  totals(x) = a(x, y) / totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed(y) = a(x, y)\n          END DO\n          holder = 1\n          IF (IS_POSSIBLE(passed, totals(x), 10, holder) .eqv. .FALSE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed(y) = a(x, y)\n            passed_b(y) = b(x, y)\n          END DO\n          holder = 1\n          IF (IS_POSSIBLE_2(passed, passed_b, 10, holder) .eqv. .FALSE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_assign_expr_eqv_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a, b !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        LOGICAL,DIMENSION(10):: passed_a, passed_b\n        LOGICAL:: init\n        INTEGER :: errors = 0\n        LOGICAL IS_POSSIBLE\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) > .5) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT,1:10))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic capture\n                  b(x, y) = totals(x)\n                  totals(x) = a(x, y) .EQV. totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .EQV. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed_a(y) = a(x, y)\n            passed_b(y) = b(x, y)\n          END DO\n          init = .FALSE.\n          IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .EQV. .FALSE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_assign_expr_minus_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        LOGICAL IS_POSSIBLE\n        LOGICAL IS_POSSIBLE_2\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals\n        REAL(8),DIMENSION(10):: passed_a, passed_b\n        REAL(8):: init\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT, 1:10))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic capture\n                  b(x, y) = totals(x)\n                  totals(x) = a(x, y) - totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed_a(y) = a(x, y)\n          END DO\n          IF (IS_POSSIBLE(passed_a, totals(x), 10, 0) .eqv. .FALSE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed_a(y) = a(x, y)\n            passed_b(y) = b(x, y)\n          END DO\n          init = 0\n          IF (IS_POSSIBLE_2(passed_a, passed_b, 10, init) .EQV. .FALSE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_assign_expr_neqv_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a, b !Data\n        LOGICAL,DIMENSION(10):: passed_a, passed_b\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        LOGICAL IS_POSSIBLE\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) > .5) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT,1:10))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic capture\n                  b(x, y) = totals(x)\n                  totals(x) = a(x, y) .NEQV. totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .NEQV. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed_a(y) = a(x, y)\n            passed_b(y) = b(x, y)\n          END DO\n          IF (IS_POSSIBLE(passed_a, passed_b, 10, .FALSE.) .eqv. .FALSE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_assign_expr_or_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a, b !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        LOGICAL,DIMENSION(10):: passed_a, passed_b\n        LOGICAL IS_POSSIBLE\n        LOGICAL:: init\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) > .933) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT,1:10))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic capture\n                  b(x, y) = totals(x)\n                  totals(x) = a(x, y) .OR. totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .OR. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed_a(y) = a(x, y)\n            passed_b(y) = b(x, y)\n          END DO\n          init = .FALSE.\n          IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .eqv. .FALSE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_assign_expr_plus_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        REAL(8),DIMENSION(10):: passed_a, passed_b\n        REAL(8):: init\n        LOGICAL IS_POSSIBLE\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT,1:10))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic capture\n                  b(x, y) = totals(x)\n                  totals(x) = a(x, y) + totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) + a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed_a(y) = a(x, y)\n            passed_b(y) = b(x, y)\n          END DO\n          init = 0\n          IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .eqv. .FALSE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_assign_expr_times_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        REAL(8),DIMENSION(10):: passed_a, passed_b\n        REAL(8):: init\n        LOGICAL IS_POSSIBLE\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 1\n        totals_comparison = 1\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT,1:10))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic capture\n                  b(x, y) = totals(x)\n                  totals(x) = a(x, y) * totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) * a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed_a(y) = a(x, y)\n            passed_b(y) = b(x, y)\n          END DO\n          init = 1\n          IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .eqv. .TRUE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_assign_iand_expr_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y, z !Iterators\n        INTEGER,DIMENSION(LOOPCOUNT, 10):: a, b !Data\n        REAL(8),DIMENSION(LOOPCOUNT, 10, 8):: randoms\n        INTEGER,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER,DIMENSION(10):: passed_a, passed_b\n        INTEGER:: init\n        LOGICAL IS_POSSIBLE\n        INTEGER :: errors = 0\n\n        CALL RANDOM_NUMBER(randoms)\n        a = 0\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            DO z = 1, 8\n              IF (randoms(x, y, z) .lt. .933) THEN\n                a(x, y) = a(x, y) + ISHFT(1, z - 1)\n              END IF\n            END DO\n          END DO\n        END DO\n        totals = 0\n        totals_comparison = 0\n        DO x = 1, LOOPCOUNT\n          DO y = 0, 7\n            totals(x) = totals(x) + ISHFT(1, y)\n            totals_comparison(x) = totals_comparison(x) + ISHFT(1, y)\n          END DO\n        END DO\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT, 1:10))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic capture\n                  b(x, y) = totals(x)\n                  totals(x) = iand(a(x, y), totals(x))\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = iand(totals_comparison(x), a(x, y))\n          END DO\n        END DO\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed_a(y) = a(x, y)\n            passed_b(y) = b(x, y)\n          END DO\n          init = 0\n          DO y = 0, 7\n            init = init + ISHFT(1, y)\n          END DO\n          IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .eqv. .FALSE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_assign_iand_x_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: x, y, z !Iterators\n  INTEGER,DIMENSION(LOOPCOUNT, 10):: a, b !Data\n  REAL(8),DIMENSION(LOOPCOUNT, 10, 8):: randoms\n  INTEGER,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n  INTEGER,DIMENSION(10):: passed_a, passed_b\n  INTEGER:: init\n  LOGICAL IS_POSSIBLE\n  INTEGER :: errors = 0\n\n  !Initilization\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(randoms)\n  a = 0\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      DO z = 1, 8\n        IF (randoms(x, y, z) .lt. .933) THEN\n          a(x, y) = a(x, y) + ISHFT(1, z - 1)\n        END IF\n      END DO\n    END DO\n  END DO\n  totals = 0\n  totals_comparison = 0\n  DO x = 1, LOOPCOUNT\n    DO y = 0, 7\n      totals(x) = totals(x) + ISHFT(1, y)\n      totals_comparison(x) = totals_comparison(x) + ISHFT(1, y)\n    END DO\n  END DO\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT, 1:10))\n    !$acc parallel\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        DO y = 1, 10\n          !$acc atomic capture\n            b(x, y) = totals(x)\n            totals(x) = iand(totals(x), a(x, y))\n          !$acc end atomic\n        END DO\n      END DO\n    !$acc end parallel\n  !$acc end data\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      totals_comparison(x) = iand(totals_comparison(x), a(x, y))\n    END DO\n  END DO\n  DO x = 1, LOOPCOUNT\n    IF (totals_comparison(x) .NE. totals(x)) THEN\n      errors = errors + 1\n      WRITE(*, *) totals_comparison(x)\n    END IF\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      passed_a(y) = a(x, y)\n      passed_b(y) = b(x, y)\n    END DO\n    init = 0\n    DO y = 0, 7\n      init = init + ISHFT(1, y)\n    END DO\n    IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .eqv. .FALSE.) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_assign_ior_expr_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: x, y, z !Iterators\n  INTEGER,DIMENSION(LOOPCOUNT, 10):: a, b !Data\n  REAL(8),DIMENSION(LOOPCOUNT, 10, 8):: randoms\n  INTEGER,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n  INTEGER,DIMENSION(10):: passed_a, passed_b\n  INTEGER:: init\n  LOGICAL IS_POSSIBLE\n  INTEGER :: errors = 0\n\n  !Initilization\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(randoms)\n  a = 0\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      DO z = 1, 8\n        IF (randoms(x, y, z) .gt. .933) THEN\n          a(x, y) = a(x, y) + ISHFT(1, z - 1)\n        END IF\n      END DO\n    END DO\n  END DO\n  totals = 0\n  totals_comparison = 0\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT, 1:10))\n    !$acc parallel\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        DO y = 1, 10\n          !$acc atomic capture\n            b(x, y) = totals(x)\n            totals(x) = ior(a(x, y), totals(x))\n          !$acc end atomic\n        END DO\n      END DO\n    !$acc end parallel\n  !$acc end data\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      totals_comparison(x) = ior(totals_comparison(x), a(x, y))\n    END DO\n  END DO\n  DO x = 1, LOOPCOUNT\n    IF (totals_comparison(x) .NE. totals(x)) THEN\n      errors = errors + 1\n      WRITE(*, *) totals_comparison(x)\n    END IF\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      passed_a(y) = a(x, y)\n      passed_b(y) = b(x, y)\n    END DO\n    init = 0\n    IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .eqv. .FALSE.) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_assign_ior_x_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: x, y, z !Iterators\n  INTEGER,DIMENSION(LOOPCOUNT, 10):: a, b !Data\n  REAL(8),DIMENSION(LOOPCOUNT, 10, 8):: randoms\n  INTEGER,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n  INTEGER,DIMENSION(10):: passed_a, passed_b\n  INTEGER:: init\n  LOGICAL IS_POSSIBLE\n  INTEGER :: errors = 0\n\n  !Initilization\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(randoms)\n  a = 0\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      DO z = 1, 8\n        IF (randoms(x, y, z) .gt. .933) THEN\n          a(x, y) = a(x, y) + ISHFT(1, z - 1)\n        END IF\n      END DO\n    END DO\n  END DO\n  totals = 0\n  totals_comparison = 0\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT, 1:10))\n    !$acc parallel\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        DO y = 1, 10\n          !$acc atomic capture\n            b(x, y) = totals(x)\n            totals(x) = ior(totals(x), a(x, y))\n          !$acc end atomic\n        END DO\n      END DO\n    !$acc end parallel\n  !$acc end data\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      totals_comparison(x) = ior(totals_comparison(x), a(x, y))\n    END DO\n  END DO\n  DO x = 1, LOOPCOUNT\n    IF (totals_comparison(x) .NE. totals(x)) THEN\n      errors = errors + 1\n      WRITE(*, *) totals_comparison(x)\n    END IF\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      passed_a(y) = a(x, y)\n      passed_b(y) = b(x, y)\n    END DO\n    init = 0\n    IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .eqv. .FALSE.) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_assign_ixor_expr_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: x, y, z !Iterators\n  INTEGER,DIMENSION(LOOPCOUNT, 10):: a, b !Data\n  REAL(8),DIMENSION(LOOPCOUNT, 10, 8):: randoms\n  INTEGER,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n  INTEGER,DIMENSION(10):: passed_a, passed_b\n  INTEGER:: init\n  LOGICAL IS_POSSIBLE\n  INTEGER :: errors = 0\n\n  !Initilization\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(randoms)\n  a = 0\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      DO z = 1, 8\n        IF (randoms(x, y, z) .gt. .5) THEN\n          a(x, y) = a(x, y) + ISHFT(1, z - 1)\n        END IF\n      END DO\n    END DO\n  END DO\n  totals = 0\n  totals_comparison = 0\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT, 1:10))\n    !$acc parallel\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        DO y = 1, 10\n          !$acc atomic capture\n            b(x, y) = totals(x)\n            totals(x) = ieor(a(x, y), totals(x))\n          !$acc end atomic\n        END DO\n      END DO\n    !$acc end parallel\n  !$acc end data\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      totals_comparison(x) = ieor(totals_comparison(x), a(x, y))\n    END DO\n  END DO\n  DO x = 1, LOOPCOUNT\n    IF (totals_comparison(x) .NE. totals(x)) THEN\n      errors = errors + 1\n      WRITE(*, *) totals_comparison(x)\n    END IF\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      passed_a(y) = a(x, y)\n      passed_b(y) = b(x, y)\n    END DO\n    init = 0\n    IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .eqv. .FALSE.) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_assign_ixor_x_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\nLOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: x, y, z !Iterators\n  INTEGER,DIMENSION(LOOPCOUNT, 10):: a, b !Data\n  REAL(8),DIMENSION(LOOPCOUNT, 10, 8):: randoms\n  INTEGER,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n  INTEGER,DIMENSION(10):: passed_a, passed_b\n  INTEGER:: init\n  LOGICAL IS_POSSIBLE\n  INTEGER :: errors = 0\n\n  !Initilization\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(randoms)\n  a = 0\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      DO z = 1, 8\n        IF (randoms(x, y, z) .gt. .5) THEN\n          a(x, y) = a(x, y) + ISHFT(1, z - 1)\n        END IF\n      END DO\n    END DO\n  END DO\n  totals = 0\n  totals_comparison = 0\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT, 1:10))\n    !$acc parallel\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        DO y = 1, 10\n          !$acc atomic capture\n            b(x, y) = totals(x)\n            totals(x) = ieor(totals(x), a(x, y))\n          !$acc end atomic\n        END DO\n      END DO\n    !$acc end parallel\n  !$acc end data\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      totals_comparison(x) = ieor(totals_comparison(x), a(x, y))\n    END DO\n  END DO\n  DO x = 1, LOOPCOUNT\n    IF (totals_comparison(x) .NE. totals(x)) THEN\n      errors = errors + 1\n      WRITE(*, *) totals_comparison(x)\n    END IF\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      passed_a(y) = a(x, y)\n      passed_b(y) = b(x, y)\n    END DO\n    init = 0\n    IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .eqv. .FALSE.) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_assign_max_expr_list_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b, c !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        REAL(8),DIMENSION(10):: passed_a, passed_b, passed_c\n        REAL(8):: init\n        LOGICAL IS_POSSIBLE\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10), b(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT, 1:10))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic capture\n                  c(x, y) = totals(x)\n                  totals(x) = max(a(x, y), b(x, y), totals(x))\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = max(totals_comparison(x), a(x, y), b(x, y))\n          END DO\n        END DO\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed_a(y) = a(x, y)\n            passed_b(y) = b(x, y)\n            passed_c(y) = c(x, y)\n          END DO\n          init = 0\n          IF (IS_POSSIBLE(passed_a, passed_b, passed_c, 10, init) .eqv. .FALSE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n      LOGICAL :: test1\n#endif\n#ifndef T1\n      DO testrun = 1, NUM_TEST_CALLS\n        failed = failed .or. test1()\n      END DO\n      IF (failed) THEN\n        failcode = failcode + 2 ** 0\n        failed = .FALSE.\n      END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_assign_max_expr_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: x, y !Iterators\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b !Data\n  REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n  REAL(8),DIMENSION(10):: passed_a, passed_b\n  REAL(8):: init\n  LOGICAL IS_POSSIBLE\n  INTEGER :: errors = 0\n\n  !Initilization\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n\n  totals = 0\n  totals_comparison = 0\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT, 1:10))\n    !$acc parallel\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        DO y = 1, 10\n          !$acc atomic capture\n            b(x, y) = totals(x)\n            totals(x) = max(a(x, y), totals(x))\n          !$acc end atomic\n        END DO\n      END DO\n    !$acc end parallel\n  !$acc end data\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      totals_comparison(x) = max(totals_comparison(x), a(x, y))\n    END DO\n  END DO\n  DO x = 1, LOOPCOUNT\n    IF (totals_comparison(x) .NE. totals(x)) THEN\n      errors = errors + 1\n      WRITE(*, *) totals_comparison(x)\n    END IF\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      passed_a(y) = a(x, y)\n      passed_b(y) = b(x, y)\n    END DO\n    init = 0\n    IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .eqv. .FALSE.) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_assign_max_x_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: x, y !Iterators\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b !Data\n  REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n  REAL(8),DIMENSION(10):: passed_a, passed_b\n  REAL(8):: init\n  LOGICAL IS_POSSIBLE\n  INTEGER :: errors = 0\n\n  !Initilization\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n\n  totals = 0\n  totals_comparison = 0\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT, 1:10))\n    !$acc parallel\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        DO y = 1, 10\n          !$acc atomic capture\n            b(x, y) = totals(x)\n            totals(x) = max(totals(x), a(x, y))\n          !$acc end atomic\n        END DO\n      END DO\n    !$acc end parallel\n  !$acc end data\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      totals_comparison(x) = max(totals_comparison(x), a(x, y))\n    END DO\n  END DO\n  DO x = 1, LOOPCOUNT\n    IF (totals_comparison(x) .NE. totals(x)) THEN\n      errors = errors + 1\n      WRITE(*, *) totals_comparison(x)\n    END IF\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      passed_a(y) = a(x, y)\n      passed_b(y) = b(x, y)\n    END DO\n    init = 0\n    IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .eqv. .FALSE.) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_assign_max_x_expr_list.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\nIMPLICIT NONE\nINCLUDE \"acc_testsuite.Fh\"\nINTEGER :: x, y !Iterators\nREAL(8),DIMENSION(LOOPCOUNT, 10):: a, b, c !Data\nREAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\nREAL(8),DIMENSION(10):: passed_a, passed_b, passed_c\nREAL(8):: init\nLOGICAL IS_POSSIBLE\nINTEGER :: errors = 0\n\n!Initilization\nSEEDDIM(1) = 1\n#ifdef SEED\nSEEDDIM(1) = SEED\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_assign_min_expr_list_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b, c !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        REAL(8),DIMENSION(10):: passed_a, passed_b, passed_c\n        REAL(8):: init\n        LOGICAL IS_POSSIBLE\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10), b(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT, 1:10))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic capture\n                  c(x, y) = totals(x)\n                  totals(x) = min(a(x, y), b(x, y), totals(x))\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = min(totals_comparison(x), a(x, y), b(x, y))\n          END DO\n        END DO\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed_a(y) = a(x, y)\n            passed_b(y) = b(x, y)\n            passed_c(y) = c(x, y)\n          END DO\n          init = 0\n          IF (IS_POSSIBLE(passed_a, passed_b, passed_c, 10, init) .eqv. .FALSE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_assign_min_expr_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        REAL(8),DIMENSION(10):: passed_a, passed_b\n        REAL(8):: init\n        LOGICAL IS_POSSIBLE\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT, 1:10))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic capture\n                  b(x, y) = totals(x)\n                  totals(x) = min(a(x, y), totals(x))\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = min(totals_comparison(x), a(x, y))\n          END DO\n        END DO\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed_a(y) = a(x, y)\n            passed_b(y) = b(x, y)\n          END DO\n          init = 0\n          IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .eqv. .FALSE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_assign_min_x_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        REAL(8),DIMENSION(10):: passed_a, passed_b\n        REAL(8):: init\n        LOGICAL IS_POSSIBLE\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT, 1:10))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic capture\n                  b(x, y) = totals(x)\n                  totals(x) = min(totals(x), a(x, y))\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = min(totals_comparison(x), a(x, y))\n          END DO\n        END DO\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed_a(y) = a(x, y)\n            passed_b(y) = b(x, y)\n          END DO\n          init = 0\n          IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .eqv. .FALSE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_assign_min_x_expr_list.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n      IMPLICIT NONE\n      INCLUDE \"acc_testsuite.Fh\"\n      INTEGER :: x, y !Iterators\n      REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b, c !Data\n      REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n      REAL(8),DIMENSION(10):: passed_a, passed_b, passed_c\n      REAL(8):: init\n      LOGICAL IS_POSSIBLE\n      INTEGER :: errors = 0\n\n      !Initilization\n      SEEDDIM(1) = 1\n#     ifdef SEED\n      SEEDDIM(1) = SEED\n#     endif\n      CALL RANDOM_SEED(PUT=SEEDDIM)\n\n      CALL RANDOM_NUMBER(a)\n      CALL RANDOM_NUMBER(b)\n\n      totals = 1\n      totals_comparison = 1\n\n      !$acc data copyin(a(1:LOOPCOUNT, 1:10), b(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT, 1:10))\n        !$acc parallel\n          !$acc loop\n          DO x = 1, LOOPCOUNT\n            DO y = 1, 10\n              !$acc atomic capture\n                c(x, y) = totals(x)\n                totals(x) = min(totals(x), a(x, y), b(x, y))\n              !$acc end atomic\n            END DO\n          END DO\n        !$acc end parallel\n      !$acc end data\n      DO x = 1, LOOPCOUNT\n        DO y = 1, 10\n          totals_comparison(x) = min(totals_comparison(x), a(x, y), b(x, y))\n        END DO\n      END DO\n      DO x = 1, LOOPCOUNT\n        IF (totals_comparison(x) .NE. totals(x)) THEN\n          errors = errors + 1\n          WRITE(*, *) totals_comparison(x)\n        END IF\n      END DO\n\n      DO x = 1, LOOPCOUNT\n        DO y = 1, 10\n          passed_a(y) = a(x, y)\n          passed_b(y) = b(x, y)\n          passed_c(y) = c(x, y)\n        END DO\n        init = 1\n        IF (IS_POSSIBLE(passed_a, passed_b, passed_c, 10, init) .eqv. .FALSE.) THEN\n          errors = errors + 1\n        END IF\n      END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_assign_x_and_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\nLOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: x, y !Iterators\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n  LOGICAL,DIMENSION(LOOPCOUNT, 10):: a, b !Data\n  LOGICAL,DIMENSION(10):: passed_a, passed_b\n  LOGICAL IS_POSSIBLE\n  LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n  INTEGER :: errors = 0\n  LOGICAL :: init\n\n  !Initilization\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(randoms)\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      IF (randoms(x, y) < .933) THEN\n        a(x, y) = .TRUE.\n      ELSE\n        a(x, y) = .FALSE.\n      END IF\n    END DO\n  END DO\n\n  totals = .FALSE.\n  totals_comparison = .FALSE.\n\n  !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT,1:10))\n    !$acc parallel\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        DO y = 1, 10\n          !$acc atomic capture\n            b(x, y) = totals(x)\n            totals(x) = totals(x) .AND. a(x, y)\n          !$acc end atomic\n        END DO\n      END DO\n    !$acc end parallel\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      totals_comparison(x) = totals_comparison(x) .AND. a(x, y)\n    END DO\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    IF (totals_comparison(x) .NEQV. totals(x)) THEN\n      errors = errors + 1\n      WRITE(*, *) totals_comparison(x)\n    END IF\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      passed_a(y) = a(x, y)\n      passed_b(y) = b(x, y)\n    END DO\n    init = .FALSE.\n    IF (.FALSE. .eqv. IS_POSSIBLE(a(x, 1:10), b(x, 1:10), 10, .FALSE.)) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_assign_x_divided_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: x, y !Iterators\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: b\n  REAL(8),DIMENSION(LOOPCOUNT):: totals\n  REAL(8),DIMENSION(10):: passed\n  REAL(8),DIMENSION(10):: passed_b\n  REAL(8) :: holder\n  INTEGER :: errors = 0\n  LOGICAL IS_POSSIBLE\n  LOGICAL IS_POSSIBLE_2\n\n  !Initilization\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n\n  totals = 1\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT,1:10))\n    !$acc parallel\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        DO y = 1, 10\n          !$acc atomic capture\n            b(x, y) = totals(x)\n            totals(x) = totals(x) / a(x, y)\n          !$acc end atomic\n        END DO\n      END DO\n    !$acc end parallel\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      passed(y) = a(x, y)\n    END DO\n    holder = 1\n    IF (IS_POSSIBLE(passed, totals(x), 10, holder) .eqv. .FALSE.) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      passed(y) = a(x, y)\n      passed_b(y) = b(x, y)\n    END DO\n    holder = 1\n    IF (IS_POSSIBLE_2(passed, passed_b, 10, holder) .eqv. .FALSE.) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_assign_x_eqv_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: x, y !Iterators\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n  LOGICAL,DIMENSION(LOOPCOUNT, 10):: a, b !Data\n  LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n  LOGICAL,DIMENSION(10):: passed_a, passed_b\n  LOGICAL:: init\n  INTEGER :: errors = 0\n  LOGICAL IS_POSSIBLE\n\n  !Initilization\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(randoms)\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      IF (randoms(x, y) > .5) THEN\n        a(x, y) = .TRUE.\n      ELSE\n        a(x, y) = .FALSE.\n      END IF\n    END DO\n  END DO\n\n  totals = .FALSE.\n  totals_comparison = .FALSE.\n\n  !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT,1:10))\n    !$acc parallel\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        DO y = 1, 10\n          !$acc atomic capture\n            b(x, y) = totals(x)\n            totals(x) = totals(x) .EQV. a(x, y)\n          !$acc end atomic\n        END DO\n      END DO\n    !$acc end parallel\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      totals_comparison(x) = totals_comparison(x) .EQV. a(x, y)\n    END DO\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      passed_a(y) = a(x, y)\n      passed_b(y) = b(x, y)\n    END DO\n    init = .FALSE.\n    IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .EQV. .FALSE.) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    IF (totals_comparison(x) .NEQV. totals(x)) THEN\n      errors = errors + 1\n      WRITE(*, *) totals_comparison(x)\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_assign_x_minus_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: x, y !Iterators\n  LOGICAL IS_POSSIBLE\n  LOGICAL IS_POSSIBLE_2\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b !Data\n  REAL(8),DIMENSION(LOOPCOUNT):: totals\n  REAL(8),DIMENSION(10):: passed_a, passed_b\n  REAL(8):: init\n  INTEGER :: errors = 0\n\n  !Initilization\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n\n  totals = 0\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT, 1:10))\n    !$acc parallel\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        DO y = 1, 10\n          !$acc atomic capture\n            b(x, y) = totals(x)\n            totals(x) = totals(x) - a(x, y)\n          !$acc end atomic\n        END DO\n      END DO\n    !$acc end parallel\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      passed_a(y) = a(x, y)\n    END DO\n    IF (IS_POSSIBLE(passed_a, totals(x), 10, 0) .eqv. .FALSE.) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      passed_a(y) = a(x, y)\n      passed_b(y) = b(x, y)\n    END DO\n    init = 0\n    IF (IS_POSSIBLE_2(passed_a, passed_b, 10, init) .EQV. .FALSE.) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_assign_x_neqv_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: x, y !Iterators\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n  LOGICAL,DIMENSION(LOOPCOUNT, 10):: a, b !Data\n  LOGICAL,DIMENSION(10):: passed_a, passed_b\n  LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n  LOGICAL IS_POSSIBLE\n  INTEGER :: errors = 0\n\n  !Initilization\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(randoms)\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      IF (randoms(x, y) > .5) THEN\n        a(x, y) = .TRUE.\n      ELSE\n        a(x, y) = .FALSE.\n      END IF\n    END DO\n  END DO\n\n  totals = .FALSE.\n  totals_comparison = .FALSE.\n\n  !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT,1:10))\n    !$acc parallel\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        DO y = 1, 10\n          !$acc atomic capture\n            b(x, y) = totals(x)\n            totals(x) = totals(x) .NEQV. a(x, y)\n          !$acc end atomic\n        END DO\n      END DO\n    !$acc end parallel\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      totals_comparison(x) = totals_comparison(x) .NEQV. a(x, y)\n    END DO\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    IF (totals_comparison(x) .NEQV. totals(x)) THEN\n      errors = errors + 1\n      WRITE(*, *) totals_comparison(x)\n    END IF\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      passed_a(y) = a(x, y)\n      passed_b(y) = b(x, y)\n    END DO\n    IF (IS_POSSIBLE(passed_a, passed_b, 10, .FALSE.) .eqv. .FALSE.) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_assign_x_or_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: x, y !Iterators\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n  LOGICAL,DIMENSION(LOOPCOUNT, 10):: a, b !Data\n  LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n  LOGICAL,DIMENSION(10):: passed_a, passed_b\n  LOGICAL IS_POSSIBLE\n  LOGICAL:: init\n  INTEGER :: errors = 0\n\n  !Initilization\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(randoms)\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      IF (randoms(x, y) > .933) THEN\n        a(x, y) = .TRUE.\n      ELSE\n        a(x, y) = .FALSE.\n      END IF\n    END DO\n  END DO\n\n  totals = .FALSE.\n  totals_comparison = .FALSE.\n\n  !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT,1:10))\n    !$acc parallel\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        DO y = 1, 10\n          !$acc atomic capture\n            b(x, y) = totals(x)\n            totals(x) = totals(x) .OR. a(x, y)\n          !$acc end atomic\n        END DO\n      END DO\n    !$acc end parallel\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      totals_comparison(x) = totals_comparison(x) .OR. a(x, y)\n    END DO\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    IF (totals_comparison(x) .NEQV. totals(x)) THEN\n      errors = errors + 1\n      WRITE(*, *) totals_comparison(x)\n    END IF\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      passed_a(y) = a(x, y)\n      passed_b(y) = b(x, y)\n    END DO\n    init = .FALSE.\n    IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .eqv. .FALSE.) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_assign_x_plus_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: x, y !Iterators\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b !Data\n  REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n  REAL(8),DIMENSION(10):: passed_a, passed_b\n  REAL(8):: init\n  LOGICAL IS_POSSIBLE\n  INTEGER :: errors = 0\n\n  !Initilization\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n\n  totals = 0\n  totals_comparison = 0\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT,1:10))\n    !$acc parallel\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        DO y = 1, 10\n          !$acc atomic capture\n            b(x, y) = totals(x)\n            totals(x) = totals(x) + a(x, y)\n          !$acc end atomic\n        END DO\n      END DO\n    !$acc end parallel\n  !$acc end data\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      totals_comparison(x) = totals_comparison(x) + a(x, y)\n    END DO\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    IF (totals_comparison(x) .NE. totals(x)) THEN\n      errors = errors + 1\n      WRITE(*, *) totals_comparison(x)\n    END IF\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      passed_a(y) = a(x, y)\n      passed_b(y) = b(x, y)\n    END DO\n    init = 0\n    IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .eqv. .FALSE.) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_assign_x_times_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: x, y !Iterators\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b !Data\n  REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n  REAL(8),DIMENSION(10):: passed_a, passed_b\n  REAL(8):: init\n  LOGICAL IS_POSSIBLE\n  INTEGER :: errors = 0\n\n  !Initilization\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n\n  totals = 1\n  totals_comparison = 1\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT,1:10))\n    !$acc parallel\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        DO y = 1, 10\n          !$acc atomic capture\n            b(x, y) = totals(x)\n            totals(x) = totals(x) * a(x, y)\n          !$acc end atomic\n        END DO\n      END DO\n    !$acc end parallel\n  !$acc end data\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      totals_comparison(x) = totals_comparison(x) * a(x, y)\n    END DO\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    IF (totals_comparison(x) .NE. totals(x)) THEN\n      errors = errors + 1\n      WRITE(*, *) totals_comparison(x)\n    END IF\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      passed_a(y) = a(x, y)\n      passed_b(y) = b(x, y)\n    END DO\n    init = 1\n    IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .eqv. .TRUE.) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_expr_and_x_assign.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a !Data\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: b\n        LOGICAL IS_POSSIBLE\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) < .933) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT,1:10))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic capture\n                  totals(x) = a(x, y) .AND. totals(x)\n                  b(x, y) = totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .AND. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (.FALSE. .eqv. IS_POSSIBLE(a(x, 1:10), b(x, 1:10), 10, .FALSE.)) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_expr_divided_x_assign.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: b\n        REAL(8),DIMENSION(LOOPCOUNT):: totals\n        REAL(8),DIMENSION(10):: passed\n        REAL(8),DIMENSION(10):: passed_b\n        REAL(8) :: holder\n        INTEGER :: errors = 0\n        LOGICAL IS_POSSIBLE\n        LOGICAL IS_POSSIBLE_2\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 1\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT,1:10))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic capture\n                  totals(x) = a(x, y) / totals(x)\n                  b(x, y) = totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed(y) = a(x, y)\n          END DO\n          holder = 1\n          IF (IS_POSSIBLE(passed, totals(x), 10, holder) .eqv. .FALSE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed(y) = a(x, y)\n            passed_b(y) = b(x, y)\n          END DO\n          holder = 1\n          IF (IS_POSSIBLE_2(passed, passed_b, 10, holder) .eqv. .FALSE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_expr_eqv_x_assign.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a, b !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        LOGICAL,DIMENSION(10):: passed_a, passed_b\n        LOGICAL:: init\n        INTEGER :: errors = 0\n        LOGICAL IS_POSSIBLE\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) > .5) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT,1:10))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic capture\n                  totals(x) = a(x, y) .EQV. totals(x)\n                  b(x, y) = totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .EQV. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed_a(y) = a(x, y)\n            passed_b(y) = b(x, y)\n          END DO\n          init = .FALSE.\n          IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .EQV. .FALSE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_expr_minus_x_assign.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        LOGICAL IS_POSSIBLE\n        LOGICAL IS_POSSIBLE_2\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals\n        REAL(8),DIMENSION(10):: passed_a, passed_b\n        REAL(8):: init\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT, 1:10))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic capture\n                  totals(x) = a(x, y) - totals(x)\n                  b(x, y) = totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed_a(y) = a(x, y)\n          END DO\n          IF (IS_POSSIBLE(passed_a, totals(x), 10, 0) .eqv. .FALSE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed_a(y) = a(x, y)\n            passed_b(y) = b(x, y)\n          END DO\n          init = 0\n          IF (IS_POSSIBLE_2(passed_a, passed_b, 10, init) .EQV. .FALSE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_expr_neqv_x_assign.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a, b !Data\n        LOGICAL,DIMENSION(10):: passed_a, passed_b\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        LOGICAL IS_POSSIBLE\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) > .5) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT,1:10))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic capture\n                  totals(x) = a(x, y) .NEQV. totals(x)\n                  b(x, y) = totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .NEQV. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed_a(y) = a(x, y)\n            passed_b(y) = b(x, y)\n          END DO\n          IF (IS_POSSIBLE(passed_a, passed_b, 10, .FALSE.) .eqv. .FALSE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_expr_or_x_assign.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a, b !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        LOGICAL,DIMENSION(10):: passed_a, passed_b\n        LOGICAL IS_POSSIBLE\n        LOGICAL:: init\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) > .933) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT,1:10))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic capture\n                  totals(x) = a(x, y) .OR. totals(x)\n                  b(x, y) = totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .OR. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed_a(y) = a(x, y)\n            passed_b(y) = b(x, y)\n          END DO\n          init = .FALSE.\n          IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .eqv. .FALSE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_expr_plus_x_assign.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        REAL(8),DIMENSION(10):: passed_a, passed_b\n        REAL(8):: init\n        LOGICAL IS_POSSIBLE\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT,1:10))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic capture\n                  totals(x) = a(x, y) + totals(x)\n                  b(x, y) = totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) + a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed_a(y) = a(x, y)\n            passed_b(y) = b(x, y)\n          END DO\n          init = 0\n          IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .eqv. .FALSE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_expr_times_x_assign.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        REAL(8),DIMENSION(10):: passed_a, passed_b\n        REAL(8):: init\n        LOGICAL IS_POSSIBLE\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 1\n        totals_comparison = 1\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT,1:10))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic capture\n                  totals(x) = a(x, y) * totals(x)\n                  b(x, y) = totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) * a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed_a(y) = a(x, y)\n            passed_b(y) = b(x, y)\n          END DO\n          init = 1\n          IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .eqv. .TRUE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_iand_expr_x_assign.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y, z !Iterators\n        INTEGER,DIMENSION(LOOPCOUNT, 10):: a, b !Data\n        REAL(8),DIMENSION(LOOPCOUNT, 10, 8):: randoms\n        INTEGER,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER,DIMENSION(10):: passed_a, passed_b\n        INTEGER:: init\n        LOGICAL IS_POSSIBLE\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        a = 0\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            DO z = 1, 8\n              IF (randoms(x, y, z) .lt. .933) THEN\n                a(x, y) = a(x, y) + ISHFT(1, z - 1)\n              END IF\n            END DO\n          END DO\n        END DO\n        totals = 0\n        totals_comparison = 0\n        DO x = 1, LOOPCOUNT\n          DO y = 0, 7\n            totals(x) = totals(x) + ISHFT(1, y)\n            totals_comparison(x) = totals_comparison(x) + ISHFT(1, y)\n          END DO\n        END DO\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT, 1:10))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic capture\n                  totals(x) = iand(a(x, y), totals(x))\n                  b(x, y) = totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = iand(totals_comparison(x), a(x, y))\n          END DO\n        END DO\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed_a(y) = a(x, y)\n            passed_b(y) = b(x, y)\n          END DO\n          init = 0\n          DO y = 0, 7\n            init = init + ISHFT(1, y)\n          END DO\n          IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .eqv. .FALSE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_iand_x_expr_assign.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: x, y, z !Iterators\n  INTEGER,DIMENSION(LOOPCOUNT, 10):: a, b !Data\n  REAL(8),DIMENSION(LOOPCOUNT, 10, 8):: randoms\n  INTEGER,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n  INTEGER,DIMENSION(10):: passed_a, passed_b\n  INTEGER:: init\n  LOGICAL IS_POSSIBLE\n  INTEGER :: errors = 0\n\n  !Initilization\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(randoms)\n  a = 0\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      DO z = 1, 8\n        IF (randoms(x, y, z) .lt. .933) THEN\n          a(x, y) = a(x, y) + ISHFT(1, z - 1)\n        END IF\n      END DO\n    END DO\n  END DO\n  totals = 0\n  totals_comparison = 0\n  DO x = 1, LOOPCOUNT\n    DO y = 0, 7\n      totals(x) = totals(x) + ISHFT(1, y)\n      totals_comparison(x) = totals_comparison(x) + ISHFT(1, y)\n    END DO\n  END DO\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT, 1:10))\n    !$acc parallel\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        DO y = 1, 10\n          !$acc atomic capture\n            totals(x) = iand(totals(x), a(x, y))\n            b(x, y) = totals(x)\n          !$acc end atomic\n        END DO\n      END DO\n    !$acc end parallel\n  !$acc end data\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      totals_comparison(x) = iand(totals_comparison(x), a(x, y))\n    END DO\n  END DO\n  DO x = 1, LOOPCOUNT\n    IF (totals_comparison(x) .NE. totals(x)) THEN\n      errors = errors + 1\n      WRITE(*, *) totals_comparison(x)\n    END IF\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      passed_a(y) = a(x, y)\n      passed_b(y) = b(x, y)\n    END DO\n    init = 0\n    DO y = 0, 7\n      init = init + ISHFT(1, y)\n    END DO\n    IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .eqv. .FALSE.) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_ior_expr_x_assign.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: x, y, z !Iterators\n  INTEGER,DIMENSION(LOOPCOUNT, 10):: a, b !Data\n  REAL(8),DIMENSION(LOOPCOUNT, 10, 8):: randoms\n  INTEGER,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n  INTEGER,DIMENSION(10):: passed_a, passed_b\n  INTEGER:: init\n  LOGICAL IS_POSSIBLE\n  INTEGER :: errors = 0\n\n  !Initilization\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(randoms)\n  a = 0\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      DO z = 1, 8\n        IF (randoms(x, y, z) .gt. .933) THEN\n          a(x, y) = a(x, y) + ISHFT(1, z - 1)\n        END IF\n      END DO\n    END DO\n  END DO\n  totals = 0\n  totals_comparison = 0\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT, 1:10))\n    !$acc parallel\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        DO y = 1, 10\n          !$acc atomic capture\n            totals(x) = ior(a(x, y), totals(x))\n            b(x, y) = totals(x)\n          !$acc end atomic\n        END DO\n      END DO\n    !$acc end parallel\n  !$acc end data\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      totals_comparison(x) = ior(totals_comparison(x), a(x, y))\n    END DO\n  END DO\n  DO x = 1, LOOPCOUNT\n    IF (totals_comparison(x) .NE. totals(x)) THEN\n      errors = errors + 1\n      WRITE(*, *) totals_comparison(x)\n    END IF\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      passed_a(y) = a(x, y)\n      passed_b(y) = b(x, y)\n    END DO\n    init = 0\n    IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .eqv. .FALSE.) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_ior_x_expr_assign.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: x, y, z !Iterators\n  INTEGER,DIMENSION(LOOPCOUNT, 10):: a, b !Data\n  REAL(8),DIMENSION(LOOPCOUNT, 10, 8):: randoms\n  INTEGER,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n  INTEGER,DIMENSION(10):: passed_a, passed_b\n  INTEGER:: init\n  LOGICAL IS_POSSIBLE\n  INTEGER :: errors = 0\n\n  !Initilization\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(randoms)\n  a = 0\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      DO z = 1, 8\n        IF (randoms(x, y, z) .gt. .933) THEN\n          a(x, y) = a(x, y) + ISHFT(1, z - 1)\n        END IF\n      END DO\n    END DO\n  END DO\n  totals = 0\n  totals_comparison = 0\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT, 1:10))\n    !$acc parallel\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        DO y = 1, 10\n          !$acc atomic capture\n            totals(x) = ior(totals(x), a(x, y))\n            b(x, y) = totals(x)\n          !$acc end atomic\n        END DO\n      END DO\n    !$acc end parallel\n  !$acc end data\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      totals_comparison(x) = ior(totals_comparison(x), a(x, y))\n    END DO\n  END DO\n  DO x = 1, LOOPCOUNT\n    IF (totals_comparison(x) .NE. totals(x)) THEN\n      errors = errors + 1\n      WRITE(*, *) totals_comparison(x)\n    END IF\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      passed_a(y) = a(x, y)\n      passed_b(y) = b(x, y)\n    END DO\n    init = 0\n    IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .eqv. .FALSE.) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_ixor_expr_x_assign.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: x, y, z !Iterators\n  INTEGER,DIMENSION(LOOPCOUNT, 10):: a, b !Data\n  REAL(8),DIMENSION(LOOPCOUNT, 10, 8):: randoms\n  INTEGER,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n  INTEGER,DIMENSION(10):: passed_a, passed_b\n  INTEGER:: init\n  LOGICAL IS_POSSIBLE\n  INTEGER :: errors = 0\n\n  !Initilization\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(randoms)\n  a = 0\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      DO z = 1, 8\n        IF (randoms(x, y, z) .gt. .5) THEN\n          a(x, y) = a(x, y) + ISHFT(1, z - 1)\n        END IF\n      END DO\n    END DO\n  END DO\n  totals = 0\n  totals_comparison = 0\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT, 1:10))\n    !$acc parallel\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        DO y = 1, 10\n          !$acc atomic capture\n            totals(x) = ieor(a(x, y), totals(x))\n            b(x, y) = totals(x)\n          !$acc end atomic\n        END DO\n      END DO\n    !$acc end parallel\n  !$acc end data\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      totals_comparison(x) = ieor(totals_comparison(x), a(x, y))\n    END DO\n  END DO\n  DO x = 1, LOOPCOUNT\n    IF (totals_comparison(x) .NE. totals(x)) THEN\n      errors = errors + 1\n      WRITE(*, *) totals_comparison(x)\n    END IF\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      passed_a(y) = a(x, y)\n      passed_b(y) = b(x, y)\n    END DO\n    init = 0\n    IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .eqv. .FALSE.) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_ixor_x_expr_assign.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: x, y, z !Iterators\n  INTEGER,DIMENSION(LOOPCOUNT, 10):: a, b !Data\n  REAL(8),DIMENSION(LOOPCOUNT, 10, 8):: randoms\n  INTEGER,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n  INTEGER,DIMENSION(10):: passed_a, passed_b\n  INTEGER:: init\n  LOGICAL IS_POSSIBLE\n  INTEGER :: errors = 0\n\n  !Initilization\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(randoms)\n  a = 0\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      DO z = 1, 8\n        IF (randoms(x, y, z) .gt. .5) THEN\n          a(x, y) = a(x, y) + ISHFT(1, z - 1)\n        END IF\n      END DO\n    END DO\n  END DO\n  totals = 0\n  totals_comparison = 0\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT, 1:10))\n    !$acc parallel\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        DO y = 1, 10\n          !$acc atomic capture\n            totals(x) = ieor(totals(x), a(x, y))\n            b(x, y) = totals(x)\n          !$acc end atomic\n        END DO\n      END DO\n    !$acc end parallel\n  !$acc end data\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      totals_comparison(x) = ieor(totals_comparison(x), a(x, y))\n    END DO\n  END DO\n  DO x = 1, LOOPCOUNT\n    IF (totals_comparison(x) .NE. totals(x)) THEN\n      errors = errors + 1\n      WRITE(*, *) totals_comparison(x)\n    END IF\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      passed_a(y) = a(x, y)\n      passed_b(y) = b(x, y)\n    END DO\n    init = 0\n    IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .eqv. .FALSE.) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_max_expr_list_x_assign.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b, c !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        REAL(8),DIMENSION(10):: passed_a, passed_b, passed_c\n        REAL(8):: init\n        LOGICAL IS_POSSIBLE\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10), b(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT, 1:10))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic capture\n                  totals(x) = max(a(x, y), b(x, y), totals(x))\n                  c(x, y) = totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = max(totals_comparison(x), a(x, y), b(x, y))\n          END DO\n        END DO\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed_a(y) = a(x, y)\n            passed_b(y) = b(x, y)\n            passed_c(y) = c(x, y)\n          END DO\n          init = 0\n          IF (IS_POSSIBLE(passed_a, passed_b, passed_c, 10, init) .eqv. .FALSE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_max_expr_x_assign.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: x, y !Iterators\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b !Data\n  REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n  REAL(8),DIMENSION(10):: passed_a, passed_b\n  REAL(8):: init\n  LOGICAL IS_POSSIBLE\n  INTEGER :: errors = 0\n\n  !Initilization\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n\n  totals = 0\n  totals_comparison = 0\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT, 1:10))\n    !$acc parallel\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        DO y = 1, 10\n          !$acc atomic capture\n            totals(x) = max(a(x, y), totals(x))\n            b(x, y) = totals(x)\n          !$acc end atomic\n        END DO\n      END DO\n    !$acc end parallel\n  !$acc end data\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      totals_comparison(x) = max(totals_comparison(x), a(x, y))\n    END DO\n  END DO\n  DO x = 1, LOOPCOUNT\n    IF (totals_comparison(x) .NE. totals(x)) THEN\n      errors = errors + 1\n      WRITE(*, *) totals_comparison(x)\n    END IF\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      passed_a(y) = a(x, y)\n      passed_b(y) = b(x, y)\n    END DO\n    init = 0\n    IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .eqv. .FALSE.) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_max_x_expr_assign.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: x, y !Iterators\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b !Data\n  REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n  REAL(8),DIMENSION(10):: passed_a, passed_b\n  REAL(8):: init\n  LOGICAL IS_POSSIBLE\n  INTEGER :: errors = 0\n\n  !Initilization\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n\n  totals = 0\n  totals_comparison = 0\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT, 1:10))\n    !$acc parallel\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        DO y = 1, 10\n          !$acc atomic capture\n            totals(x) = max(totals(x), a(x, y))\n            b(x, y) = totals(x)\n          !$acc end atomic\n        END DO\n      END DO\n    !$acc end parallel\n  !$acc end data\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      totals_comparison(x) = max(totals_comparison(x), a(x, y))\n    END DO\n  END DO\n  DO x = 1, LOOPCOUNT\n    IF (totals_comparison(x) .NE. totals(x)) THEN\n      errors = errors + 1\n      WRITE(*, *) totals_comparison(x)\n    END IF\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      passed_a(y) = a(x, y)\n      passed_b(y) = b(x, y)\n    END DO\n    init = 0\n    IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .eqv. .FALSE.) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_max_x_expr_list_assign.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\nIMPLICIT NONE\nINCLUDE \"acc_testsuite.Fh\"\nINTEGER :: x, y !Iterators\nREAL(8),DIMENSION(LOOPCOUNT, 10):: a, b, c !Data\nREAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\nREAL(8),DIMENSION(10):: passed_a, passed_b, passed_c\nREAL(8):: init\nLOGICAL IS_POSSIBLE\nINTEGER :: errors = 0\n\n!Initilization\nSEEDDIM(1) = 1\n#ifdef SEED\nSEEDDIM(1) = SEED\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_min_expr_list_x_assign.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b, c !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        REAL(8),DIMENSION(10):: passed_a, passed_b, passed_c\n        REAL(8):: init\n        LOGICAL IS_POSSIBLE\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10), b(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT, 1:10))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic capture\n                  totals(x) = min(a(x, y), b(x, y), totals(x))\n                  c(x, y) = totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = min(totals_comparison(x), a(x, y), b(x, y))\n          END DO\n        END DO\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed_a(y) = a(x, y)\n            passed_b(y) = b(x, y)\n            passed_c(y) = c(x, y)\n          END DO\n          init = 0\n          IF (IS_POSSIBLE(passed_a, passed_b, passed_c, 10, init) .eqv. .FALSE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_min_expr_x_assign.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        REAL(8),DIMENSION(10):: passed_a, passed_b\n        REAL(8):: init\n        LOGICAL IS_POSSIBLE\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT, 1:10))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic capture\n                  totals(x) = min(a(x, y), totals(x))\n                  b(x, y) = totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = min(totals_comparison(x), a(x, y))\n          END DO\n        END DO\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed_a(y) = a(x, y)\n            passed_b(y) = b(x, y)\n          END DO\n          init = 0\n          IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .eqv. .FALSE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_min_x_expr_assign.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        REAL(8),DIMENSION(10):: passed_a, passed_b\n        REAL(8):: init\n        LOGICAL IS_POSSIBLE\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT, 1:10))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic capture\n                  totals(x) = min(totals(x), a(x, y))\n                  b(x, y) = totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = min(totals_comparison(x), a(x, y))\n          END DO\n        END DO\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed_a(y) = a(x, y)\n            passed_b(y) = b(x, y)\n          END DO\n          init = 0\n          IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .eqv. .FALSE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_min_x_expr_list_assign.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n      IMPLICIT NONE\n      INCLUDE \"acc_testsuite.Fh\"\n      INTEGER :: x, y !Iterators\n      REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b, c !Data\n      REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n      REAL(8),DIMENSION(10):: passed_a, passed_b, passed_c\n      REAL(8):: init\n      LOGICAL IS_POSSIBLE\n      INTEGER :: errors = 0\n\n      !Initilization\n      SEEDDIM(1) = 1\n#     ifdef SEED\n      SEEDDIM(1) = SEED\n#     endif\n      CALL RANDOM_SEED(PUT=SEEDDIM)\n\n      CALL RANDOM_NUMBER(a)\n      CALL RANDOM_NUMBER(b)\n\n      totals = 1\n      totals_comparison = 1\n\n      !$acc data copyin(a(1:LOOPCOUNT, 1:10), b(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT, 1:10))\n        !$acc parallel\n          !$acc loop\n          DO x = 1, LOOPCOUNT\n            DO y = 1, 10\n              !$acc atomic capture\n                totals(x) = min(totals(x), a(x, y), b(x, y))\n                c(x, y) = totals(x)\n              !$acc end atomic\n            END DO\n          END DO\n        !$acc end parallel\n      !$acc end data\n      DO x = 1, LOOPCOUNT\n        DO y = 1, 10\n          totals_comparison(x) = min(totals_comparison(x), a(x, y), b(x, y))\n        END DO\n      END DO\n      DO x = 1, LOOPCOUNT\n        IF (totals_comparison(x) .NE. totals(x)) THEN\n          errors = errors + 1\n          WRITE(*, *) totals_comparison(x)\n        END IF\n      END DO\n\n      DO x = 1, LOOPCOUNT\n        DO y = 1, 10\n          passed_a(y) = a(x, y)\n          passed_b(y) = b(x, y)\n          passed_c(y) = c(x, y)\n        END DO\n        init = 1\n        IF (IS_POSSIBLE(passed_a, passed_b, passed_c, 10, init) .eqv. .FALSE.) THEN\n          errors = errors + 1\n        END IF\n      END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_x_and_expr_assign.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: x, y !Iterators\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n  LOGICAL,DIMENSION(LOOPCOUNT, 10):: a, b !Data\n  LOGICAL,DIMENSION(10):: passed_a, passed_b\n  LOGICAL IS_POSSIBLE\n  LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n  INTEGER :: errors = 0\n  LOGICAL :: init\n\n  !Initilization\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(randoms)\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      IF (randoms(x, y) < .933) THEN\n        a(x, y) = .TRUE.\n      ELSE\n        a(x, y) = .FALSE.\n      END IF\n    END DO\n  END DO\n\n  totals = .FALSE.\n  totals_comparison = .FALSE.\n\n  !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT,1:10))\n    !$acc parallel\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        DO y = 1, 10\n          !$acc atomic capture\n            totals(x) = totals(x) .AND. a(x, y)\n            b(x, y) = totals(x)\n          !$acc end atomic\n        END DO\n      END DO\n    !$acc end parallel\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      totals_comparison(x) = totals_comparison(x) .AND. a(x, y)\n    END DO\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    IF (totals_comparison(x) .NEQV. totals(x)) THEN\n      errors = errors + 1\n      WRITE(*, *) totals_comparison(x)\n    END IF\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      passed_a(y) = a(x, y)\n      passed_b(y) = b(x, y)\n    END DO\n    init = .FALSE.\n    IF (.FALSE. .eqv. IS_POSSIBLE(a(x, 1:10), b(x, 1:10), 10, .FALSE.)) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_x_divided_expr_assign.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: x, y !Iterators\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: b\n  REAL(8),DIMENSION(LOOPCOUNT):: totals\n  REAL(8),DIMENSION(10):: passed\n  REAL(8),DIMENSION(10):: passed_b\n  REAL(8) :: holder\n  INTEGER :: errors = 0\n  LOGICAL IS_POSSIBLE\n  LOGICAL IS_POSSIBLE_2\n\n  !Initilization\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n\n  totals = 1\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT,1:10))\n    !$acc parallel\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        DO y = 1, 10\n          !$acc atomic capture\n            totals(x) = totals(x) / a(x, y)\n            b(x, y) = totals(x)\n          !$acc end atomic\n        END DO\n      END DO\n    !$acc end parallel\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      passed(y) = a(x, y)\n    END DO\n    holder = 1\n    IF (IS_POSSIBLE(passed, totals(x), 10, holder) .eqv. .FALSE.) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      passed(y) = a(x, y)\n      passed_b(y) = b(x, y)\n    END DO\n    holder = 1\n    IF (IS_POSSIBLE_2(passed, passed_b, 10, holder) .eqv. .FALSE.) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_x_eqv_expr_assign.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: x, y !Iterators\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n  LOGICAL,DIMENSION(LOOPCOUNT, 10):: a, b !Data\n  LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n  LOGICAL,DIMENSION(10):: passed_a, passed_b\n  LOGICAL:: init\n  INTEGER :: errors = 0\n  LOGICAL IS_POSSIBLE\n\n  !Initilization\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(randoms)\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      IF (randoms(x, y) > .5) THEN\n        a(x, y) = .TRUE.\n      ELSE\n        a(x, y) = .FALSE.\n      END IF\n    END DO\n  END DO\n\n  totals = .FALSE.\n  totals_comparison = .FALSE.\n\n  !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT,1:10))\n    !$acc parallel\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        DO y = 1, 10\n          !$acc atomic capture\n            totals(x) = totals(x) .EQV. a(x, y)\n            b(x, y) = totals(x)\n          !$acc end atomic\n        END DO\n      END DO\n    !$acc end parallel\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      totals_comparison(x) = totals_comparison(x) .EQV. a(x, y)\n    END DO\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      passed_a(y) = a(x, y)\n      passed_b(y) = b(x, y)\n    END DO\n    init = .FALSE.\n    IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .EQV. .FALSE.) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    IF (totals_comparison(x) .NEQV. totals(x)) THEN\n      errors = errors + 1\n      WRITE(*, *) totals_comparison(x)\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_x_minus_expr_assign.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: x, y !Iterators\n  LOGICAL IS_POSSIBLE\n  LOGICAL IS_POSSIBLE_2\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b !Data\n  REAL(8),DIMENSION(LOOPCOUNT):: totals\n  REAL(8),DIMENSION(10):: passed_a, passed_b\n  REAL(8):: init\n  INTEGER :: errors = 0\n\n  !Initilization\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n\n  totals = 0\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT, 1:10))\n    !$acc parallel\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        DO y = 1, 10\n          !$acc atomic capture\n            totals(x) = totals(x) - a(x, y)\n            b(x, y) = totals(x)\n          !$acc end atomic\n        END DO\n      END DO\n    !$acc end parallel\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      passed_a(y) = a(x, y)\n    END DO\n    IF (IS_POSSIBLE(passed_a, totals(x), 10, 0) .eqv. .FALSE.) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      passed_a(y) = a(x, y)\n      passed_b(y) = b(x, y)\n    END DO\n    init = 0\n    IF (IS_POSSIBLE_2(passed_a, passed_b, 10, init) .EQV. .FALSE.) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_x_neqv_expr_assign.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: x, y !Iterators\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n  LOGICAL,DIMENSION(LOOPCOUNT, 10):: a, b !Data\n  LOGICAL,DIMENSION(10):: passed_a, passed_b\n  LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n  LOGICAL IS_POSSIBLE\n  INTEGER :: errors = 0\n\n  !Initilization\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(randoms)\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      IF (randoms(x, y) > .5) THEN\n        a(x, y) = .TRUE.\n      ELSE\n        a(x, y) = .FALSE.\n      END IF\n    END DO\n  END DO\n\n  totals = .FALSE.\n  totals_comparison = .FALSE.\n\n  !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT,1:10))\n    !$acc parallel\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        DO y = 1, 10\n          !$acc atomic capture\n            totals(x) = totals(x) .NEQV. a(x, y)\n            b(x, y) = totals(x)\n          !$acc end atomic\n        END DO\n      END DO\n    !$acc end parallel\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      totals_comparison(x) = totals_comparison(x) .NEQV. a(x, y)\n    END DO\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    IF (totals_comparison(x) .NEQV. totals(x)) THEN\n      errors = errors + 1\n      WRITE(*, *) totals_comparison(x)\n    END IF\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      passed_a(y) = a(x, y)\n      passed_b(y) = b(x, y)\n    END DO\n    IF (IS_POSSIBLE(passed_a, passed_b, 10, .FALSE.) .eqv. .FALSE.) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_x_or_expr_assign.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: x, y !Iterators\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n  LOGICAL,DIMENSION(LOOPCOUNT, 10):: a, b !Data\n  LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n  LOGICAL,DIMENSION(10):: passed_a, passed_b\n  LOGICAL IS_POSSIBLE\n  LOGICAL:: init\n  INTEGER :: errors = 0\n\n  !Initilization\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(randoms)\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      IF (randoms(x, y) > .933) THEN\n        a(x, y) = .TRUE.\n      ELSE\n        a(x, y) = .FALSE.\n      END IF\n    END DO\n  END DO\n\n  totals = .FALSE.\n  totals_comparison = .FALSE.\n\n  !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT,1:10))\n    !$acc parallel\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        DO y = 1, 10\n          !$acc atomic capture\n            totals(x) = totals(x) .OR. a(x, y)\n            b(x, y) = totals(x)\n          !$acc end atomic\n        END DO\n      END DO\n    !$acc end parallel\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      totals_comparison(x) = totals_comparison(x) .OR. a(x, y)\n    END DO\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    IF (totals_comparison(x) .NEQV. totals(x)) THEN\n      errors = errors + 1\n      WRITE(*, *) totals_comparison(x)\n    END IF\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      passed_a(y) = a(x, y)\n      passed_b(y) = b(x, y)\n    END DO\n    init = .FALSE.\n    IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .eqv. .FALSE.) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_x_plus_expr_assign.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: x, y !Iterators\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b !Data\n  REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n  REAL(8),DIMENSION(10):: passed_a, passed_b\n  REAL(8):: init\n  LOGICAL IS_POSSIBLE\n  INTEGER :: errors = 0\n\n  !Initilization\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n\n  totals = 0\n  totals_comparison = 0\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT,1:10))\n    !$acc parallel\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        DO y = 1, 10\n          !$acc atomic capture\n            totals(x) = totals(x) + a(x, y)\n            b(x, y) = totals(x)\n          !$acc end atomic\n        END DO\n      END DO\n    !$acc end parallel\n  !$acc end data\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      totals_comparison(x) = totals_comparison(x) + a(x, y)\n    END DO\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    IF (totals_comparison(x) .NE. totals(x)) THEN\n      errors = errors + 1\n      WRITE(*, *) totals_comparison(x)\n    END IF\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      passed_a(y) = a(x, y)\n      passed_b(y) = b(x, y)\n    END DO\n    init = 0\n    IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .eqv. .FALSE.) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_x_times_expr_assign.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: x, y !Iterators\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b !Data\n  REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n  REAL(8),DIMENSION(10):: passed_a, passed_b\n  REAL(8):: init\n  LOGICAL IS_POSSIBLE\n  INTEGER :: errors = 0\n\n  !Initilization\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n\n  totals = 1\n  totals_comparison = 1\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT,1:10))\n    !$acc parallel\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        DO y = 1, 10\n          !$acc atomic capture\n            totals(x) = totals(x) * a(x, y)\n            b(x, y) = totals(x)\n          !$acc end atomic\n        END DO\n      END DO\n    !$acc end parallel\n  !$acc end data\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      totals_comparison(x) = totals_comparison(x) * a(x, y)\n    END DO\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    IF (totals_comparison(x) .NE. totals(x)) THEN\n      errors = errors + 1\n      WRITE(*, *) totals_comparison(x)\n    END IF\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      passed_a(y) = a(x, y)\n      passed_b(y) = b(x, y)\n    END DO\n    init = 1\n    IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .eqv. .TRUE.) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_expr_and_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) < .933) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic\n                  totals(x) = a(x, y) .AND. totals(x)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .AND. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_expr_and_x_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) < .933) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic\n                  totals(x) = a(x, y) .AND. totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .AND. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_expr_divided_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals\n        REAL(8),DIMENSION(10):: passed\n        INTEGER :: errors = 0\n        LOGICAL IS_POSSIBLE\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 1\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic\n                  totals(x) = a(x, y) / totals(x)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed(y) = a(x, y)\n          END DO\n          IF (IS_POSSIBLE(passed, totals(x), 10, 1) .eqv. .FALSE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_expr_divided_x_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals\n        REAL(8),DIMENSION(10):: passed\n        INTEGER :: errors = 0\n        LOGICAL IS_POSSIBLE\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 1\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic\n                  totals(x) = a(x, y) / totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed(y) = a(x, y)\n          END DO\n          IF (IS_POSSIBLE(passed, totals(x), 10, 1) .eqv. .FALSE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_expr_eqv_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) > .5) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic\n                  totals(x) = a(x, y) .EQV. totals(x)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .EQV. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_expr_eqv_x_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) > .5) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic\n                  totals(x) = a(x, y) .EQV. totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .EQV. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_expr_minus_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        LOGICAL IS_POSSIBLE\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals\n        INTEGER :: errors = 0\n        REAL(8),DIMENSION(10):: passed\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic\n                  totals(x) = a(x, y) - totals(x)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed(y) = a(x, y)\n          END DO\n          IF (IS_POSSIBLE(passed, totals(x), 10, 0) .eqv. .FALSE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_expr_minus_x_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        LOGICAL IS_POSSIBLE\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals\n        INTEGER :: errors = 0\n        REAL(8),DIMENSION(10):: passed\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic\n                  totals(x) = a(x, y) - totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed(y) = a(x, y)\n          END DO\n          IF (IS_POSSIBLE(passed, totals(x), 10, 0) .eqv. .FALSE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_expr_neqv_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) > .5) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic\n                  totals(x) = a(x, y) .NEQV. totals(x)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .NEQV. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_expr_neqv_x_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) > .5) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic\n                  totals(x) = a(x, y) .NEQV. totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .NEQV. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_expr_or_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) > .933) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic\n                  totals(x) = a(x, y) .OR. totals(x)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .OR. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_expr_or_x_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) > .933) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic\n                  totals(x) = a(x, y) .OR. totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .OR. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_expr_plus_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic\n                  totals(x) = a(x, y) + totals(x)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) + a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_expr_plus_x_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic\n                  totals(x) = a(x, y) + totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) + a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_expr_times_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 1\n        totals_comparison = 1\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic\n                  totals(x) = a(x, y) * totals(x)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) * a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_expr_times_x_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 1\n        totals_comparison = 1\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic\n                  totals(x) = a(x, y) * totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) * a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_iand_expr_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        INTEGER,DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT, 8):: randoms\n        INTEGER,DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        a = 0\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 8\n            IF (randoms(x, y) .gt. .933) THEN\n              a(x) = a(x) + ISHFT(1, y - 1)\n            END IF\n          END DO\n        END DO\n        totals = 0\n        totals_comparison = 0\n        DO x = 1, LOOPCOUNT/10 + 1\n          DO y = 0, 7\n            totals(x) = totals(x) + ISHFT(1, y)\n            totals_comparison(x) = totals_comparison(x) + ISHFT(1, y)\n          END DO\n        END DO\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = iand(a(x), totals(MOD(x, LOOPCOUNT/10 + 1) + 1))\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = iand(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_iand_expr_x_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        INTEGER,DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT, 8):: randoms\n        INTEGER,DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        a = 0\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 8\n            IF (randoms(x, y) .gt. .933) THEN\n              a(x) = a(x) + ISHFT(1, y - 1)\n            END IF\n          END DO\n        END DO\n        totals = 0\n        totals_comparison = 0\n        DO x = 1, LOOPCOUNT/10 + 1\n          DO y = 0, 7\n            totals(x) = totals(x) + ISHFT(1, y)\n            totals_comparison(x) = totals_comparison(x) + ISHFT(1, y)\n          END DO\n        END DO\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = iand(a(x), totals(MOD(x, LOOPCOUNT/10 + 1) + 1))\n              !$acc end atomic\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = iand(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_iand_x_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        INTEGER,DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT, 8):: randoms\n        INTEGER,DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        a = 0\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 8\n            IF (randoms(x, y) .gt. .933) THEN\n              a(x) = a(x) + ISHFT(1, y - 1)\n            END IF\n          END DO\n        END DO\n        totals = 0\n        totals_comparison = 0\n        DO x = 1, LOOPCOUNT/10 + 1\n          DO y = 0, 7\n            totals(x) = totals(x) + ISHFT(1, y)\n            totals_comparison(x) = totals_comparison(x) + ISHFT(1, y)\n          END DO\n        END DO\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = iand(totals(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = iand(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_iand_x_expr_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        INTEGER,DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT, 8):: randoms\n        INTEGER,DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        a = 0\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 8\n            IF (randoms(x, y) .gt. .933) THEN\n              a(x) = a(x) + ISHFT(1, y - 1)\n            END IF\n          END DO\n        END DO\n        totals = 0\n        totals_comparison = 0\n        DO x = 1, LOOPCOUNT/10 + 1\n          DO y = 0, 7\n            totals(x) = totals(x) + ISHFT(1, y)\n            totals_comparison(x) = totals_comparison(x) + ISHFT(1, y)\n          END DO\n        END DO\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = iand(totals(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n              !$acc end atomic\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = iand(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_ior_expr_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        INTEGER,DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT, 8):: randoms\n        INTEGER,DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        a = 0\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 8\n            IF (randoms(x, y) .lt. .933) THEN\n              a(x) = a(x) + ISHFT(1, y - 1)\n            END IF\n          END DO\n        END DO\n        totals = 0\n        totals_comparison = 0\n        DO x = 1, LOOPCOUNT/10 + 1\n          totals(x) = 0\n          totals_comparison(x) = 0\n        END DO\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = ior(a(x), totals(MOD(x, LOOPCOUNT/10 + 1) + 1))\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = ior(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_ior_expr_x_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        INTEGER,DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT, 8):: randoms\n        INTEGER,DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        a = 0\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 8\n            IF (randoms(x, y) .lt. .933) THEN\n              a(x) = a(x) + ISHFT(1, y - 1)\n            END IF\n          END DO\n        END DO\n        totals = 0\n        totals_comparison = 0\n        DO x = 1, LOOPCOUNT/10 + 1\n          totals(x) = 0\n          totals_comparison(x) = 0\n        END DO\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = ior(a(x), totals(MOD(x, LOOPCOUNT/10 + 1) + 1))\n              !$acc end atomic\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = ior(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_ior_x_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        INTEGER,DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT, 8):: randoms\n        INTEGER,DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        a = 0\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 8\n            IF (randoms(x, y) .lt. .933) THEN\n              a(x) = a(x) + ISHFT(1, y - 1)\n            END IF\n          END DO\n        END DO\n        totals = 0\n        totals_comparison = 0\n        DO x = 1, LOOPCOUNT/10 + 1\n          totals(x) = 0\n          totals_comparison(x) = 0\n        END DO\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = ior(totals(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = ior(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_ior_x_expr_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        INTEGER,DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT, 8):: randoms\n        INTEGER,DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        a = 0\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 8\n            IF (randoms(x, y) .lt. .933) THEN\n              a(x) = a(x) + ISHFT(1, y - 1)\n            END IF\n          END DO\n        END DO\n        totals = 0\n        totals_comparison = 0\n        DO x = 1, LOOPCOUNT/10 + 1\n          totals(x) = 0\n          totals_comparison(x) = 0\n        END DO\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = ior(totals(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n              !$acc end atomic\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = ior(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_ixor_expr_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        INTEGER,DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT, 8):: randoms\n        INTEGER,DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        a = 0\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 8\n            IF (randoms(x, y) .lt. .5) THEN\n              a(x) = a(x) + ISHFT(1, y - 1)\n            END IF\n          END DO\n        END DO\n        totals = 0\n        totals_comparison = 0\n        DO x = 1, LOOPCOUNT/10 + 1\n          totals(x) = 0\n          totals_comparison(x) = 0\n        END DO\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = ieor(a(x), totals(MOD(x, LOOPCOUNT/10 + 1) + 1))\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = ieor(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_ixor_expr_x_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        INTEGER,DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT, 8):: randoms\n        INTEGER,DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        a = 0\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 8\n            IF (randoms(x, y) .lt. .5) THEN\n              a(x) = a(x) + ISHFT(1, y - 1)\n            END IF\n          END DO\n        END DO\n        totals = 0\n        totals_comparison = 0\n        DO x = 1, LOOPCOUNT/10 + 1\n          totals(x) = 0\n          totals_comparison(x) = 0\n        END DO\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = ieor(a(x), totals(MOD(x, LOOPCOUNT/10 + 1) + 1))\n              !$acc end atomic\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = ieor(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_ixor_x_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        INTEGER,DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT, 8):: randoms\n        INTEGER,DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        a = 0\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 8\n            IF (randoms(x, y) .lt. .5) THEN\n              a(x) = a(x) + ISHFT(1, y - 1)\n            END IF\n          END DO\n        END DO\n        totals = 0\n        totals_comparison = 0\n        DO x = 1, LOOPCOUNT/10 + 1\n          totals(x) = 0\n          totals_comparison(x) = 0\n        END DO\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = ieor(totals(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = ieor(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_ixor_x_expr_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        INTEGER,DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT, 8):: randoms\n        INTEGER,DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        a = 0\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 8\n            IF (randoms(x, y) .lt. .5) THEN\n              a(x) = a(x) + ISHFT(1, y - 1)\n            END IF\n          END DO\n        END DO\n        totals = 0\n        totals_comparison = 0\n        DO x = 1, LOOPCOUNT/10 + 1\n          totals(x) = 0\n          totals_comparison(x) = 0\n        END DO\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = ieor(totals(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n              !$acc end atomic\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = ieor(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_max_expr_list_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        REAL(8),DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = max(a(x), b(x), totals(MOD(x, LOOPCOUNT/10 + 1) + 1))\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = max(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x), b(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_max_expr_list_x_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        REAL(8),DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = max(a(x), b(x), totals(MOD(x, LOOPCOUNT/10 + 1) + 1))\n              !$acc end atomic\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = max(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x), b(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_max_expr_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = max(a(x), totals(MOD(x, LOOPCOUNT/10 + 1) + 1))\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = max(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_max_expr_x_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = max(a(x), totals(MOD(x, LOOPCOUNT/10 + 1) + 1))\n              !$acc end atomic\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = max(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_max_x_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = max(totals(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = max(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_max_x_expr_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = max(totals(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n              !$acc end atomic\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = max(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_max_x_expr_list.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        REAL(8),DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = max(totals(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x), b(x))\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = max(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x), b(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_max_x_expr_list_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        REAL(8),DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = max(totals(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x), b(x))\n              !$acc end atomic\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = max(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x), b(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_min_expr_list_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        REAL(8),DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n\n        totals = 1\n        totals_comparison = 1\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = min(a(x), b(x), totals(MOD(x, LOOPCOUNT/10 + 1) + 1))\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = min(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x), b(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_min_expr_list_x_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        REAL(8),DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n\n        totals = 1\n        totals_comparison = 1\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = min(a(x), b(x), totals(MOD(x, LOOPCOUNT/10 + 1) + 1))\n              !$acc end atomic\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = min(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x), b(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_min_expr_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 1\n        totals_comparison = 1\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = min(a(x), totals(MOD(x, LOOPCOUNT/10 + 1) + 1))\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = min(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_min_expr_x_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 1\n        totals_comparison = 1\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = min(a(x), totals(MOD(x, LOOPCOUNT/10 + 1) + 1))\n              !$acc end atomic\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = min(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_min_x_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = min(totals(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = min(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_min_x_expr_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = min(totals(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n              !$acc end atomic\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = min(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_min_x_expr_list.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        REAL(8),DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n\n        totals = 1\n        totals_comparison = 1\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = min(totals(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x), b(x))\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = min(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x), b(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_min_x_expr_list_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        REAL(8),DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n\n        totals = 1\n        totals_comparison = 1\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = min(totals(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x), b(x))\n              !$acc end atomic\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = min(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x), b(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_expr_and_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) < .933) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic update\n                  totals(x) = a(x, y) .AND. totals(x)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .AND. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_expr_and_x_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) < .933) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic update\n                  totals(x) = a(x, y) .AND. totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .AND. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_expr_divided_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals\n        REAL(8),DIMENSION(10):: passed\n        INTEGER :: errors = 0\n        LOGICAL IS_POSSIBLE\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 1\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic update\n                  totals(x) = a(x, y) / totals(x)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed(y) = a(x, y)\n          END DO\n          IF (IS_POSSIBLE(passed, totals(x), 10, 1) .eqv. .FALSE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_expr_divided_x_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals\n        REAL(8),DIMENSION(10):: passed\n        INTEGER :: errors = 0\n        LOGICAL IS_POSSIBLE\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 1\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic update\n                  totals(x) = a(x, y) / totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed(y) = a(x, y)\n          END DO\n          IF (IS_POSSIBLE(passed, totals(x), 10, 1) .eqv. .FALSE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_expr_eqv_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) > .5) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic update\n                  totals(x) = a(x, y) .EQV. totals(x)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .EQV. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_expr_eqv_x_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) > .5) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic update\n                  totals(x) = a(x, y) .EQV. totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .EQV. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_expr_minus_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        LOGICAL IS_POSSIBLE\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals\n        INTEGER :: errors = 0\n        REAL(8),DIMENSION(10):: passed\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic update\n                  totals(x) = a(x, y) - totals(x)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed(y) = a(x, y)\n          END DO\n          IF (IS_POSSIBLE(passed, totals(x), 10, 0) .eqv. .FALSE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_expr_minus_x_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        LOGICAL IS_POSSIBLE\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals\n        INTEGER :: errors = 0\n        REAL(8),DIMENSION(10):: passed\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic update\n                  totals(x) = a(x, y) - totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed(y) = a(x, y)\n          END DO\n          IF (IS_POSSIBLE(passed, totals(x), 10, 0) .eqv. .FALSE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_expr_neqv_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) > .5) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic update\n                  totals(x) = a(x, y) .NEQV. totals(x)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .NEQV. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_expr_neqv_x_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) > .5) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic update\n                  totals(x) = a(x, y) .NEQV. totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .NEQV. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_expr_or_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) > .933) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic update\n                  totals(x) = a(x, y) .OR. totals(x)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .OR. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_expr_or_x_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) > .933) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic update\n                  totals(x) = a(x, y) .OR. totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .OR. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_expr_plus_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic update\n                  totals(x) = a(x, y) + totals(x)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) + a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_expr_plus_x_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic update\n                  totals(x) = a(x, y) + totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) + a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_expr_times_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 1\n        totals_comparison = 1\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic update\n                  totals(x) = a(x, y) * totals(x)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) * a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_expr_times_x_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 1\n        totals_comparison = 1\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic update\n                  totals(x) = a(x, y) * totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) * a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_iand_expr_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        INTEGER,DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT, 8):: randoms\n        INTEGER,DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        a = 0\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 8\n            IF (randoms(x, y) .gt. .933) THEN\n              a(x) = a(x) + ISHFT(1, y - 1)\n            END IF\n          END DO\n        END DO\n        totals = 0\n        totals_comparison = 0\n        DO x = 1, LOOPCOUNT/10 + 1\n          DO y = 0, 7\n            totals(x) = totals(x) + ISHFT(1, y)\n            totals_comparison(x) = totals_comparison(x) + ISHFT(1, y)\n          END DO\n        END DO\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic update\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = iand(a(x), totals(MOD(x, LOOPCOUNT/10 + 1) + 1))\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = iand(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_iand_expr_x_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        INTEGER,DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT, 8):: randoms\n        INTEGER,DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        a = 0\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 8\n            IF (randoms(x, y) .gt. .933) THEN\n              a(x) = a(x) + ISHFT(1, y - 1)\n            END IF\n          END DO\n        END DO\n        totals = 0\n        totals_comparison = 0\n        DO x = 1, LOOPCOUNT/10 + 1\n          DO y = 0, 7\n            totals(x) = totals(x) + ISHFT(1, y)\n            totals_comparison(x) = totals_comparison(x) + ISHFT(1, y)\n          END DO\n        END DO\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic update\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = iand(a(x), totals(MOD(x, LOOPCOUNT/10 + 1) + 1))\n              !$acc end atomic\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = iand(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_iand_x_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        INTEGER,DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT, 8):: randoms\n        INTEGER,DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        a = 0\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 8\n            IF (randoms(x, y) .gt. .933) THEN\n              a(x) = a(x) + ISHFT(1, y - 1)\n            END IF\n          END DO\n        END DO\n        totals = 0\n        totals_comparison = 0\n        DO x = 1, LOOPCOUNT/10 + 1\n          DO y = 0, 7\n            totals(x) = totals(x) + ISHFT(1, y)\n            totals_comparison(x) = totals_comparison(x) + ISHFT(1, y)\n          END DO\n        END DO\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic update\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = iand(totals(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = iand(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_iand_x_expr_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        INTEGER,DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT, 8):: randoms\n        INTEGER,DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        a = 0\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 8\n            IF (randoms(x, y) .gt. .933) THEN\n              a(x) = a(x) + ISHFT(1, y - 1)\n            END IF\n          END DO\n        END DO\n        totals = 0\n        totals_comparison = 0\n        DO x = 1, LOOPCOUNT/10 + 1\n          DO y = 0, 7\n            totals(x) = totals(x) + ISHFT(1, y)\n            totals_comparison(x) = totals_comparison(x) + ISHFT(1, y)\n          END DO\n        END DO\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic update\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = iand(totals(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n              !$acc end atomic\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = iand(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_ior_expr_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        INTEGER,DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT, 8):: randoms\n        INTEGER,DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        a = 0\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 8\n            IF (randoms(x, y) .lt. .933) THEN\n              a(x) = a(x) + ISHFT(1, y - 1)\n            END IF\n          END DO\n        END DO\n        totals = 0\n        totals_comparison = 0\n        DO x = 1, LOOPCOUNT/10 + 1\n          totals(x) = 0\n          totals_comparison(x) = 0\n        END DO\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic update\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = ior(a(x), totals(MOD(x, LOOPCOUNT/10 + 1) + 1))\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = ior(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_ior_expr_x_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        INTEGER,DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT, 8):: randoms\n        INTEGER,DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        a = 0\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 8\n            IF (randoms(x, y) .lt. .933) THEN\n              a(x) = a(x) + ISHFT(1, y - 1)\n            END IF\n          END DO\n        END DO\n        totals = 0\n        totals_comparison = 0\n        DO x = 1, LOOPCOUNT/10 + 1\n          totals(x) = 0\n          totals_comparison(x) = 0\n        END DO\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic update\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = ior(a(x), totals(MOD(x, LOOPCOUNT/10 + 1) + 1))\n              !$acc end atomic\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = ior(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_ior_x_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        INTEGER,DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT, 8):: randoms\n        INTEGER,DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        a = 0\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 8\n            IF (randoms(x, y) .lt. .933) THEN\n              a(x) = a(x) + ISHFT(1, y - 1)\n            END IF\n          END DO\n        END DO\n        totals = 0\n        totals_comparison = 0\n        DO x = 1, LOOPCOUNT/10 + 1\n          totals(x) = 0\n          totals_comparison(x) = 0\n        END DO\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic update\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = ior(totals(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = ior(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_ior_x_expr_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        INTEGER,DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT, 8):: randoms\n        INTEGER,DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        a = 0\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 8\n            IF (randoms(x, y) .lt. .933) THEN\n              a(x) = a(x) + ISHFT(1, y - 1)\n            END IF\n          END DO\n        END DO\n        totals = 0\n        totals_comparison = 0\n        DO x = 1, LOOPCOUNT/10 + 1\n          totals(x) = 0\n          totals_comparison(x) = 0\n        END DO\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic update\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = ior(totals(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n              !$acc end atomic\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = ior(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_ixor_expr_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        INTEGER,DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT, 8):: randoms\n        INTEGER,DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        a = 0\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 8\n            IF (randoms(x, y) .lt. .5) THEN\n              a(x) = a(x) + ISHFT(1, y - 1)\n            END IF\n          END DO\n        END DO\n        totals = 0\n        totals_comparison = 0\n        DO x = 1, LOOPCOUNT/10 + 1\n          totals(x) = 0\n          totals_comparison(x) = 0\n        END DO\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic update\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = ieor(a(x), totals(MOD(x, LOOPCOUNT/10 + 1) + 1))\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = ieor(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_ixor_expr_x_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        INTEGER,DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT, 8):: randoms\n        INTEGER,DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        a = 0\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 8\n            IF (randoms(x, y) .lt. .5) THEN\n              a(x) = a(x) + ISHFT(1, y - 1)\n            END IF\n          END DO\n        END DO\n        totals = 0\n        totals_comparison = 0\n        DO x = 1, LOOPCOUNT/10 + 1\n          totals(x) = 0\n          totals_comparison(x) = 0\n        END DO\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic update\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = ieor(a(x), totals(MOD(x, LOOPCOUNT/10 + 1) + 1))\n              !$acc end atomic\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = ieor(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_ixor_x_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        INTEGER,DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT, 8):: randoms\n        INTEGER,DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        a = 0\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 8\n            IF (randoms(x, y) .lt. .5) THEN\n              a(x) = a(x) + ISHFT(1, y - 1)\n            END IF\n          END DO\n        END DO\n        totals = 0\n        totals_comparison = 0\n        DO x = 1, LOOPCOUNT/10 + 1\n          totals(x) = 0\n          totals_comparison(x) = 0\n        END DO\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic update\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = ieor(totals(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = ieor(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_ixor_x_expr_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        INTEGER,DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT, 8):: randoms\n        INTEGER,DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        a = 0\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 8\n            IF (randoms(x, y) .lt. .5) THEN\n              a(x) = a(x) + ISHFT(1, y - 1)\n            END IF\n          END DO\n        END DO\n        totals = 0\n        totals_comparison = 0\n        DO x = 1, LOOPCOUNT/10 + 1\n          totals(x) = 0\n          totals_comparison(x) = 0\n        END DO\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic update\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = ieor(totals(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n              !$acc end atomic\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = ieor(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_max_expr_list_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        REAL(8),DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic update\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = max(a(x), b(x), totals(MOD(x, LOOPCOUNT/10 + 1) + 1))\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = max(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x), b(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_max_expr_list_x_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        REAL(8),DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic update\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = max(a(x), b(x), totals(MOD(x, LOOPCOUNT/10 + 1) + 1))\n              !$acc end atomic\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = max(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x), b(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_max_expr_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic update\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = max(a(x), totals(MOD(x, LOOPCOUNT/10 + 1) + 1))\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = max(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_max_expr_x_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic update\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = max(a(x), totals(MOD(x, LOOPCOUNT/10 + 1) + 1))\n              !$acc end atomic\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = max(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_max_x_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic update\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = max(totals(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = max(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_max_x_expr_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic update\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = max(totals(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n              !$acc end atomic\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = max(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_max_x_expr_list.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        REAL(8),DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic update\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = max(totals(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x), b(x))\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = max(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x), b(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_max_x_expr_list_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        REAL(8),DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic update\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = max(totals(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x), b(x))\n              !$acc end atomic\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = max(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x), b(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_min_expr_list_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        REAL(8),DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n\n        totals = 1\n        totals_comparison = 1\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic update\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = min(a(x), b(x), totals(MOD(x, LOOPCOUNT/10 + 1) + 1))\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = min(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x), b(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_min_expr_list_x_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        REAL(8),DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n\n        totals = 1\n        totals_comparison = 1\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic update\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = min(a(x), b(x), totals(MOD(x, LOOPCOUNT/10 + 1) + 1))\n              !$acc end atomic\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = min(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x), b(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_min_expr_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 1\n        totals_comparison = 1\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic update\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = min(a(x), totals(MOD(x, LOOPCOUNT/10 + 1) + 1))\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = min(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_min_expr_x_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 1\n        totals_comparison = 1\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic update\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = min(a(x), totals(MOD(x, LOOPCOUNT/10 + 1) + 1))\n              !$acc end atomic\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = min(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_min_x_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic update\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = min(totals(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = min(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_min_x_expr_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic update\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = min(totals(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n              !$acc end atomic\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = min(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_min_x_expr_list.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        REAL(8),DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n\n        totals = 1\n        totals_comparison = 1\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic update\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = min(totals(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x), b(x))\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = min(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x), b(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_min_x_expr_list_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        REAL(8),DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n\n        totals = 1\n        totals_comparison = 1\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic update\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = min(totals(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x), b(x))\n              !$acc end atomic\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = min(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x), b(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_x_and_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) < .933) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic update\n                  totals(x) = totals(x) .AND. a(x, y)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .AND. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_x_and_expr_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) < .933) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic update\n                  totals(x) = totals(x) .AND. a(x, y)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .AND. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_x_divided_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 1\n        totals_comparison = 1\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic update\n                  totals(x) = totals(x) / a(x, y)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) / a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_x_divided_expr_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 1\n        totals_comparison = 1\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic update\n                  totals(x) = totals(x) / a(x, y)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) / a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_x_eqv_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) > .5) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic update\n                  totals(x) = totals(x) .EQV. a(x, y)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .EQV. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_x_eqv_expr_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) > .5) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic update\n                  totals(x) = totals(x) .EQV. a(x, y)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .EQV. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_x_minus_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic update\n                  totals(x) = totals(x) - a(x, y)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) - a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_x_minus_expr_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic update\n                  totals(x) = totals(x) - a(x, y)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) - a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_x_neqv_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) > .5) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic update\n                  totals(x) = totals(x) .NEQV. a(x, y)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .NEQV. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_x_neqv_expr_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) > .5) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic update\n                  totals(x) = totals(x) .NEQV. a(x, y)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .NEQV. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_x_or_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) > .933) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic update\n                  totals(x) = totals(x) .OR. a(x, y)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .OR. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_x_or_expr_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) > .933) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic update\n                  totals(x) = totals(x) .OR. a(x, y)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .OR. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_x_plus_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic update\n                  totals(x) = totals(x) + a(x, y)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) + a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_x_plus_expr_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic update\n                  totals(x) = totals(x) + a(x, y)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) + a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_x_times_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 1\n        totals_comparison = 1\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic update\n                  totals(x) = totals(x) * a(x, y)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) * a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_x_times_expr_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 1\n        totals_comparison = 1\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic update\n                  totals(x) = totals(x) * a(x, y)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) * a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_x_and_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) < .933) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic\n                  totals(x) = totals(x) .AND. a(x, y)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .AND. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_x_and_expr_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) < .933) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic\n                  totals(x) = totals(x) .AND. a(x, y)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .AND. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_x_divided_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 1\n        totals_comparison = 1\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic\n                  totals(x) = totals(x) / a(x, y)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) / a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_x_divided_expr_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 1\n        totals_comparison = 1\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic\n                  totals(x) = totals(x) / a(x, y)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) / a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_x_eqv_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) > .5) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic\n                  totals(x) = totals(x) .EQV. a(x, y)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .EQV. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_x_eqv_expr_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) > .5) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic\n                  totals(x) = totals(x) .EQV. a(x, y)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .EQV. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_x_minus_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic\n                  totals(x) = totals(x) - a(x, y)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) - a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_x_minus_expr_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic\n                  totals(x) = totals(x) - a(x, y)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) - a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_x_neqv_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) > .5) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic\n                  totals(x) = totals(x) .NEQV. a(x, y)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .NEQV. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_x_neqv_expr_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) > .5) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic\n                  totals(x) = totals(x) .NEQV. a(x, y)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .NEQV. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_x_or_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) > .933) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic\n                  totals(x) = totals(x) .OR. a(x, y)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .OR. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_x_or_expr_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) > .933) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic\n                  totals(x) = totals(x) .OR. a(x, y)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .OR. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_x_plus_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic\n                  totals(x) = totals(x) + a(x, y)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) + a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_x_plus_expr_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic\n                  totals(x) = totals(x) + a(x, y)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) + a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_x_times_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 1\n        totals_comparison = 1\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic\n                  totals(x) = totals(x) * a(x, y)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) * a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_x_times_expr_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 1\n        totals_comparison = 1\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic\n                  totals(x) = totals(x) * a(x, y)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) * a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "data_copy_no_lower_bound.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:data,data_region,construct-independent,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copy(c(:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = c(x) + a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "data",
                            "data_region",
                            "construct-independent"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "data_copyin_no_lower_bound.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:data,data_region,construct-independent,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc data copyin(a(:LOOPCOUNT), b(:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "data",
                            "data_region",
                            "construct-independent"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "data_copyout_no_lower_bound.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:data,data_region,construct-independent,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "data",
                            "data_region",
                            "construct-independent"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "data_copyout_reference_counts.F90": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:data,data_region,devonly,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n        INTEGER,DIMENSION(1)::devtest\n\n        devtest(1) = 1\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel present(devtest(1:1))\n          devtest(1) = 0\n        !$acc end parallel\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        IF (devtest(1) .eq. 1) THEN\n          CALL RANDOM_NUMBER(a)\n          CALL RANDOM_NUMBER(b)\n          c = 0\n          !$acc data copyin(c(1:LOOPCOUNT))\n            !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n              !$acc parallel\n                !$acc loop\n                DO x = 1, LOOPCOUNT\n                  c(x) = c(x) + a(x) + b(x)\n                END DO\n              !$acc end parallel\n            !$acc end data\n          !$acc end data\n\n          DO x = 1, LOOPCOUNT\n            IF (abs(c(x)) .gt. PRECISION) THEN\n              errors = errors + 1\n              EXIT\n            END IF\n          END DO\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "data",
                            "data_region",
                            "devonly",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:data,data_region,devonly,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test2()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n        INTEGER,DIMENSION(1)::devtest\n\n        devtest(1) = 1\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel present(devtest(1:1))\n          devtest(1) = 0\n        !$acc end parallel\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc enter data copyin(c(1:LOOPCOUNT))\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = c(x) + a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n        IF (devtest(1) .eq. 1) THEN\n          DO x = 1, LOOPCOUNT\n            IF (abs(c(x)) .gt. PRECISION) THEN\n              errors = errors + 2\n              EXIT\n            END IF\n          END DO\n        END IF\n        !$acc exit data copyout(c(1:LOOPCOUNT))\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 4\n            EXIT\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "data",
                            "data_region",
                            "devonly",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n!T3:data,data_region,devonly,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test3()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n        INTEGER,DIMENSION(1)::devtest\n\n        devtest(1) = 1\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel present(devtest(1:1))\n          devtest(1) = 0\n        !$acc end parallel\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc enter data copyin(c(1:LOOPCOUNT))\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = c(x) + a(x) + b(x)\n            END DO\n          !$acc end parallel\n          !$acc exit data delete(c(1:LOOPCOUNT))\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 8\n            EXIT\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test3 = .FALSE.\n        ELSE\n          test3 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T3\n        LOGICAL :: test3\n#endif\n#ifndef T3\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test3()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 2\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "data",
                            "data_region",
                            "devonly",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "data_create.F90": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:data,data_region,construct-independent,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        b = 0\n        c = 0 \n\n        !$acc data create(b(1:LOOPCOUNT))\n          !$acc data copyin(a(1:LOOPCOUNT))\n            !$acc parallel\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                b(x) = a(x)\n              END DO\n            !$acc end parallel\n          !$acc end data\n          !$acc data copyout(c(1:LOOPCOUNT))\n            !$acc parallel\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                c(x) = b(x)\n              END DO\n            !$acc end parallel\n          !$acc end data\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(a(x) - c(x)) .gt. PRECISION) THEN\n            errors = errors + 1\n            EXIT\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "data",
                            "data_region",
                            "construct-independent"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:data,data_region,construct-independent,V:1.0-2.7\n      LOGICAL FUNCTION test2()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        b = 0\n        c = 0\n \n        !$acc data present_or_create(b(1:LOOPCOUNT))\n          !$acc data copyin(a(1:LOOPCOUNT))\n            !$acc parallel\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                b(x) = a(x)\n              END DO\n            !$acc end parallel\n          !$acc end data\n          !$acc data copyout(c(1:LOOPCOUNT))\n            !$acc parallel\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                c(x) = b(x)\n              END DO\n            !$acc end parallel\n          !$acc end data\n        !$acc end data\n \n        DO x = 1, LOOPCOUNT\n          IF (abs(a(x) - c(x)) .gt. PRECISION) THEN\n            errors = errors + 2\n            EXIT\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "data",
                            "data_region",
                            "construct-independent"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n!T3:data,data_region,construct-independent,V:1.0-2.7\n      LOGICAL FUNCTION test3()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        b = 0\n        c = 0\n \n        !$acc data pcreate(b(1:LOOPCOUNT))\n          !$acc data copyin(a(1:LOOPCOUNT))\n            !$acc parallel\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                b(x) = a(x)\n              END DO\n            !$acc end parallel\n          !$acc end data\n          !$acc data copyout(c(1:LOOPCOUNT))\n            !$acc parallel\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                c(x) = b(x)\n              END DO\n            !$acc end parallel\n          !$acc end data\n        !$acc end data\n     \n        DO x = 1, LOOPCOUNT\n          IF (abs(a(x) - c(x)) .gt. PRECISION) THEN\n            errors = errors + 4\n            EXIT\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test3 = .FALSE.\n        ELSE\n          test3 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T3\n        LOGICAL :: test3\n#endif\n#ifndef T3\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test3()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 2\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "data",
                            "data_region",
                            "construct-independent"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "data_create_no_lower_bound.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:data,data_region,construct-independent,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, d, e !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        CALL RANDOM_NUMBER(d)\n        e = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), d(1:LOOPCOUNT)) create(c(:LOOPCOUNT)) copyout(e(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              e(x) = c(x) + d(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          IF (abs(e(x) - (a(x) + b(x) + d(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "data",
                            "data_region",
                            "construct-independent"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "data_present_no_lower_bound.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:data,data_region,construct-independent,present,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n \n        !$acc enter data copyin(c(1:LOOPCOUNT))\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) present(c(:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n        !$acc exit data copyout(c(1:LOOPCOUNT))\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "data",
                            "data_region",
                            "construct-independent",
                            "present"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "data_with_changing_subscript.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:data,data_region,construct-independent,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, indexer !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n\n        indexer = LOOPCOUNT\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc data copyin(a(1:indexer), b(1:indexer)) copyout(c(1:indexer))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, indexer\n              c(x) = a(x) + b(x)\n            END DO\n            indexer = 1\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "data",
                            "data_region",
                            "construct-independent"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "data_with_derived_type.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:data,data_region,construct-independent,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        TYPE multi_item\n          REAL(8) :: a\n          REAL(8) :: b\n          REAL(8) :: c\n        END TYPE multi_item\n        INTEGER :: x !Iterators\n        TYPE (multi_item),DIMENSION(LOOPCOUNT):: a !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        DO x = 1, LOOPCOUNT\n          CALL RANDOM_NUMBER(a(x)%a)\n          CALL RANDOM_NUMBER(a(x)%b)\n          a(x)%c = 0.0\n        END DO\n\n        !$acc data copy(a(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              a(x)%c = a(x)%a + a(x)%b\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          IF (abs(a(x)%c - (a(x)%a + a(x)%b)) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "data",
                            "data_region",
                            "construct-independent"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "declare_copyin.F90": {
                "num tests": 4,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,declare,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  USE OPENACC\n  USE DECLARE_COPYIN_MOD\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: errors = 0\n  INTEGER :: mult = 2\n  INTEGER :: x\n  REAL(8),DIMENSION(LOOPCOUNT) :: a, b\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  b = 0\n\n  !$acc data copyin(a(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT)) present(fixed_size_array)\n    !$acc parallel\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        b(x) = a(x) + fixed_size_array(MOD(x, 10))\n      END DO\n    !$acc end parallel\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    IF (abs(b(x) - (a(x) + fixed_size_array(MOD(x, 10)))) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "declare"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:construct-independent,declare,V:1.0-2.7\n      LOGICAL FUNCTION test2()\n  USE OPENACC\n  USE DECLARE_COPYIN_MOD\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: errors = 0\n  INTEGER :: mult = 2\n  REAL(8),DIMENSION(LOOPCOUNT) :: a, b\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  b = 0\n\n  !$acc data copyin(a(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT)) present(scalar)\n    !$acc parallel\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        b(x) = a(x) + scalar\n      END DO\n    !$acc end parallel\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    IF (abs(b(x) - (a(x) + scalar)) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "declare"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n!T3:construct-independent,declare,V:1.0-2.7\n      LOGICAL FUNCTION test3()\n  USE OPENACC\n  USE DECLARE_COPYIN_MOD\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: errors = 0\n  INTEGER :: mult = 2\n  REAL(8),DIMENSION(LOOPCOUNT) :: a, b\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  b = a\n\n  !$acc data copy(a(1:LOOPCOUNT))\n    !$acc parallel\n      !$acc loop\n      DO x = 1, 1\n        CALL externMultiplyData(a, LOOPCOUNT)\n      END DO\n    !$acc end parallel\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    IF (abs(a(x) - (b(x) * 2)) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test3 = .FALSE.\n        ELSE\n          test3 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T3\n        LOGICAL :: test3\n#endif\n#ifndef T3\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test3()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 2\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "declare"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "4": {
                        "content": "#ifndef T4\n!T4:construct-independent,declare,V:1.0-2.7\n      LOGICAL FUNCTION test4()\n  USE OPENACC\n  USE DECLARE_COPYIN_MOD\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: errors = 0\n  INTEGER :: mult = 2\n  REAL(8),DIMENSION(LOOPCOUNT) :: a, b\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  b = a\n\n  !$acc data copy(a(1:LOOPCOUNT))\n    !$acc parallel\n      !$acc loop\n      DO x = 1, 1\n        CALL multiplyData(a)\n      END DO\n    !$acc end parallel\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    IF (abs(a(x) - (b(x) * 2)) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test4 = .FALSE.\n        ELSE\n          test4 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T4\n        LOGICAL :: test4\n#endif\n#ifndef T4\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test4()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 3\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "declare"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "declare_copyin_mod.F90": {
                "num tests": 0,
                "tests": {}
            },
            "declare_create.F90": {
                "num tests": 4,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,declare,update,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  USE OPENACC\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: errors = 0\n  INTEGER :: mult = 2\n  REAL(8),DIMENSION(LOOPCOUNT) :: a, b\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  b = 0\n  !$acc update device(n)\n  !$acc data copyin(a(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT)) present(fixed_size_array)\n    !$acc parallel\n      !$acc loop\n      DO x = 1, 10\n        fixed_size_array(x) = x * x\n      END DO\n    !$acc end parallel\n    !$acc parallel\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        b(x) = a(x) + fixed_size_array(MOD(x, 10))\n      END DO\n    !$acc end parallel\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    IF (abs(b(x) - (a(x) + (MOD(x, 10) * MOD(x, 10)))) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "declare",
                            "update"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:construct-independent,declare,update,V:2.0-2.7\n      LOGICAL FUNCTION test2()\n  USE OPENACC\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: errors = 0\n  INTEGER :: mult = 2\n  REAL(8),DIMENSION(LOOPCOUNT) :: a, b\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  b = 0\n  scalar = 10\n  !$acc update device(scalar)\n  !$acc data copyin(a(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT)) present(scalar)\n    !$acc parallel\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        b(x) = a(x) + scalar\n      END DO\n    !$acc end parallel\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    IF (abs(b(x) - (a(x) + scalar)) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "declare",
                            "update"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n!T3:construct-independent,declare,V:2.0-2.7\n      LOGICAL FUNCTION test3()\n  USE OPENACC\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: errors = 0\n  INTEGER :: mult = 2\n  REAL(8),DIMENSION(LOOPCOUNT) :: a, b\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  b = a\n  !$acc update\n  !$acc data copy(a(1:LOOPCOUNT))\n    !$acc parallel\n      !$acc loop\n      DO x = 1, 1\n        CALL externMultiplyData(a, LOOPCOUNT)\n      END DO\n    !$acc end parallel\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    IF (abs(a(x) - (b(x) * 2)) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test3 = .FALSE.\n        ELSE\n          test3 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T3\n        LOGICAL :: test3\n#endif\n#ifndef T3\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test3()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 2\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "declare"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "4": {
                        "content": "#ifndef T4\n!T4:construct-independent,declare,V:2.0-2.7\n      LOGICAL FUNCTION test4()\n  USE OPENACC\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: errors = 0\n  INTEGER :: mult = 2\n  REAL(8),DIMENSION(LOOPCOUNT) :: a, b\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  b = a\n\n  !$acc data copy(a(1:LOOPCOUNT))\n    !$acc parallel\n      !$acc loop\n      DO x = 1, 1\n        CALL multiplyData(a)\n      END DO\n    !$acc end parallel\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    IF (abs(a(x) - (b(x) * 2)) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test4 = .FALSE.\n        ELSE\n          test4 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T4\n        LOGICAL :: test4\n#endif\n#ifndef T4\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test4()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 3\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "declare"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "declare_function_scope_copy.F90": {
                "num tests": 4,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:devonly,construct-independent,declare,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  USE OPENACC\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: errors = 0\n  INTEGER :: mult = 2\n  REAL(8),DIMENSION(LOOPCOUNT, LOOPCOUNT) :: a, b, c\n  INTEGER,DIMENSION(1) :: devtest\n  INTEGER :: x, y\n\n  devtest(1) = 1\n  !$acc enter data copyin(devtest(1:1))\n  !$acc parallel present(devtest(1:1))\n    devtest(1) = 0\n  !$acc end parallel\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n  c = 1\n  !$acc data copyin(a(1:LOOPCOUNT, 1:LOOPCOUNT), b(1:LOOPCOUNT, 1:LOOPCOUNT))\n    DO x = 1, LOOPCOUNT\n      CALL copyin_copyout_test(a(:,x), b(:,x), c(:,x), LOOPCOUNT)\n    END DO\n  !$acc end data\n  DO x = 1, LOOPCOUNT\n    DO y = 1, LOOPCOUNT\n      IF (abs(c(x, y) - (1 + a(x, y) + b(x, y))) .gt. PRECISION) THEN\n        errors = errors + 1\n      END IF\n    END DO\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "construct-independent",
                            "declare"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:devonly,construct-independent,declare,V:2.0-2.7\n      LOGICAL FUNCTION test2()\n  USE OPENACC\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: errors = 0\n  INTEGER :: mult = 2\n  REAL(8),DIMENSION(LOOPCOUNT, LOOPCOUNT) :: a, b, c\n  INTEGER,DIMENSION(1) :: devtest\n  INTEGER :: x, y\n\n  devtest(1) = 1\n  !$acc enter data copyin(devtest(1:1))\n  !$acc parallel present(devtest(1:1))\n    devtest(1) = 0\n  !$acc end parallel\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n  c = 2\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:LOOPCOUNT), b(1:LOOPCOUNT, 1:LOOPCOUNT))\n    DO x = 1, LOOPCOUNT\n      !$acc data copy(c(1:LOOPCOUNT, x:x))\n        CALL copyin_copyout_test(a(:,x), b(:,x), c(:,x), LOOPCOUNT)\n      !$acc end data\n    END DO\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, LOOPCOUNT\n      IF (abs(c(x, y) - (2 + a(x, y) + b(x, y))) .gt. PRECISION) THEN\n        errors = errors + 1\n      END IF\n    END DO\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "construct-independent",
                            "declare"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n!T3:devonly,construct-independent,declare,V:2.0-2.7\n      LOGICAL FUNCTION test3()\n  USE OPENACC\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: errors = 0\n  INTEGER :: mult = 2\n  REAL(8),DIMENSION(LOOPCOUNT, LOOPCOUNT) :: a, b, c\n  INTEGER,DIMENSION(1) :: devtest\n  INTEGER :: x, y\n\n  devtest(1) = 1\n  !$acc enter data copyin(devtest(1:1))\n  !$acc parallel present(devtest(1:1))\n    devtest(1) = 0\n  !$acc end parallel\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  IF (devtest(1) .eq. 1) THEN\n    CALL RANDOM_NUMBER(a)\n    CALL RANDOM_NUMBER(b)\n    c = 3\n\n    !$acc data copyin(a(1:LOOPCOUNT, 1:LOOPCOUNT), b(1:LOOPCOUNT, 1:LOOPCOUNT))\n      DO x = 1, LOOPCOUNT\n        !$acc data copyin(c(1:LOOPCOUNT, x:x))\n          CALL copyin_copyout_test(a(:,x), b(:,x), c(:,x), LOOPCOUNT)\n          DO y = 1, LOOPCOUNT\n            IF (abs(c(y, x) - 3) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        !$acc end data\n        DO y = 1, LOOPCOUNT\n          IF (abs(c(y, x) - 3) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n      END DO\n    !$acc end data\n  END IF\n\n        IF (errors .eq. 0) THEN\n          test3 = .FALSE.\n        ELSE\n          test3 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T3\n        LOGICAL :: test3\n#endif\n#ifndef T3\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test3()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 2\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "construct-independent",
                            "declare"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "4": {
                        "content": "#ifndef T4\n!T4:devonly,construct-independent,declare,V:2.0-2.7\n      LOGICAL FUNCTION test4()\n  USE OPENACC\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: errors = 0\n  INTEGER :: mult = 2\n  REAL(8),DIMENSION(LOOPCOUNT, LOOPCOUNT) :: a, b, c\n  INTEGER,DIMENSION(1) :: devtest\n  INTEGER :: x, y\n\n  devtest(1) = 1\n  !$acc enter data copyin(devtest(1:1))\n  !$acc parallel present(devtest(1:1))\n    devtest(1) = 0\n  !$acc end parallel\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  IF (devtest(1) .eq. 1) THEN\n    CALL RANDOM_NUMBER(a)\n    CALL RANDOM_NUMBER(b)\n    c = 4\n\n    !$acc data copyin(a(1:LOOPCOUNT, 1:LOOPCOUNT), b(1:LOOPCOUNT, 1:LOOPCOUNT))\n      DO x = 1, LOOPCOUNT\n        !$acc data copy(c(1:LOOPCOUNT, x:x))\n          CALL copyin_copyout_test(a(:,x), b(:,x), c(:,x), LOOPCOUNT)\n          DO y = 1, LOOPCOUNT\n            IF (abs(c(y, x) - 4) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        !$acc end data\n        DO y = 1, LOOPCOUNT\n          IF (abs(c(y, x) - (4 + a(y, x) + b(y, x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n      END DO\n    !$acc end data\n  END IF\n\n        IF (errors .eq. 0) THEN\n          test4 = .FALSE.\n        ELSE\n          test4 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T4\n        LOGICAL :: test4\n#endif\n#ifndef T4\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test4()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 3\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "construct-independent",
                            "declare"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "declare_function_scope_copyin.F90": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:devonly,construct-independent,declare,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  USE OPENACC\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: errors = 0\n  INTEGER :: mult = 2\n  REAL(8),DIMENSION(LOOPCOUNT, LOOPCOUNT) :: a, b, c, a_host, b_host\n  INTEGER,DIMENSION(1) :: devtest\n  INTEGER :: x, y\n\n  devtest(1) = 1\n  !$acc enter data copyin(devtest(1:1))\n  !$acc parallel present(devtest(1:1))\n    devtest(1) = 0\n  !$acc end parallel\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n  c = 1\n\n  !$acc data copy(c(1:LOOPCOUNT, 1:LOOPCOUNT))\n    DO x = 1, LOOPCOUNT\n      CALL function_test(a(:,x), b(:,x), c(:,x), LOOPCOUNT)\n    END DO\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, LOOPCOUNT\n      IF (abs(c(x, y) - (1 + a(x, y) + b(x, y))) .gt. PRECISION) THEN\n        errors = errors + 1\n        PRINT*, \"1\"\n      END IF\n    END DO\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "construct-independent",
                            "declare"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:devonly,construct-independent,declare,V:2.0-2.7\n      LOGICAL FUNCTION test2()\n  USE OPENACC\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: errors = 0\n  INTEGER :: mult = 2\n  REAL(8),DIMENSION(LOOPCOUNT, LOOPCOUNT) :: a, b, c, a_host, b_host\n  INTEGER,DIMENSION(1) :: devtest\n  INTEGER :: x, y\n\n  devtest(1) = 1\n  !$acc enter data copyin(devtest(1:1))\n  !$acc parallel present(devtest(1:1))\n    devtest(1) = 0\n  !$acc end parallel\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  IF (devtest(1) .eq. 1) THEN\n    CALL RANDOM_NUMBER(a)\n    CALL RANDOM_NUMBER(b)\n    c = 0\n    a_host = a\n    b_host = b\n\n    !$acc data copy(a(1:LOOPCOUNT, 1:LOOPCOUNT), b(1:LOOPCOUNT, 1:LOOPCOUNT), c(1:LOOPCOUNT, 1:LOOPCOUNT))\n      DO x = 1, LOOPCOUNT\n        CALL function_test_dev_only(a(:,x), b(:,x), c(:,x), LOOPCOUNT)\n      END DO\n    !$acc end data\n\n    DO x = 1, LOOPCOUNT\n      DO y = 1, LOOPCOUNT\n        IF (abs(a(x, y) + 1) .gt. PRECISION) THEN\n          errors = errors + 1\n          PRINT*, \"2\"\n        END IF\n        IF (abs(b(x, y) + 1) .gt. PRECISION) THEN\n          errors = errors + 1\n          PRINT*, \"3\"\n        END IF\n        IF (abs(c(x, y) - (a_host(x, y) + b_host(x, y))) .gt. PRECISION) THEN\n          errors = errors + 1\n          PRINT*, \"4\"\n        END IF\n      END DO\n    END DO\n  END IF\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "construct-independent",
                            "declare"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n!T3:devonly,construct-independent,declare,V:2.0-2.7\n      LOGICAL FUNCTION test3()\n  USE OPENACC\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: errors = 0\n  INTEGER :: mult = 2\n  REAL(8),DIMENSION(LOOPCOUNT, LOOPCOUNT) :: a, b, c, a_host, b_host\n  INTEGER,DIMENSION(1) :: devtest\n  INTEGER :: x, y\n\n  devtest(1) = 1\n  !$acc enter data copyin(devtest(1:1))\n  !$acc parallel present(devtest(1:1))\n    devtest(1) = 0\n  !$acc end parallel\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  IF (devtest(1) .eq. 1) THEN\n    CALL RANDOM_NUMBER(a)\n    CALL RANDOM_NUMBER(b)\n    c = 1\n    a_host = a\n    b_host = b\n\n    !$acc data copy(c(1:LOOPCOUNT, 1:LOOPCOUNt))\n      DO x = 1, LOOPCOUNT\n        CALL function_test_dev_only(a(:,x), b(:,x), c(:,x), LOOPCOUNT)\n      END DO\n    !$acc end data\n\n    DO x = 1, LOOPCOUNT\n      DO y = 1, LOOPCOUNT\n        IF (abs(a(x, y) - a_host(x, y)) .gt. PRECISION) THEN\n          errors = errors + 1\n          PRINT*, \"5\"\n        END IF\n        IF (abs(b(x, y) - b_host(x, y)) .gt. PRECISION) THEN\n          errors = errors + 1\n          PRINT*, \"6\"\n        END IF\n        IF (abs(c(x, y) - (1 + a(x, y) + b(x, y))) .gt. PRECISION) THEN\n          errors = errors + 1\n          PRINT*, \"7\"\n        END IF\n      END DO\n    END DO\n  END IF\n\n        IF (errors .eq. 0) THEN\n          test3 = .FALSE.\n        ELSE\n          test3 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T3\n        LOGICAL :: test3\n#endif\n#ifndef T3\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test3()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 2\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "construct-independent",
                            "declare"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "declare_function_scope_copyout.F90": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:devonly,construct-independent,declare,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  USE OPENACC\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: errors = 0\n  INTEGER :: mult = 2\n  REAL(8),DIMENSION(LOOPCOUNT, LOOPCOUNT) :: a, b, c\n  INTEGER,DIMENSION(1) :: devtest\n  INTEGER :: x, y\n\n  devtest(1) = 1\n  !$acc enter data copyin(devtest(1:1))\n  !$acc parallel present(devtest(1:1))\n    devtest(1) = 0\n  !$acc end parallel\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n  c = 1\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:LOOPCOUNT), b(1:LOOPCOUNT, 1:LOOPCOUNT))\n    DO x = 1, LOOPCOUNT\n      CALL copyout_test(a(:,x), b(:,x), c(:,x), LOOPCOUNT)\n    END DO\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, LOOPCOUNT\n      IF (abs(c(x, y) - (a(x, y) + b(x, y))) .gt. PRECISION) THEN\n        errors = errors + 1\n      END IF\n    END DO\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "construct-independent",
                            "declare"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:devonly,construct-independent,declare,V:2.0-2.7\n      LOGICAL FUNCTION test2()\n  USE OPENACC\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: errors = 0\n  INTEGER :: mult = 2\n  REAL(8),DIMENSION(LOOPCOUNT, LOOPCOUNT) :: a, b, c\n  INTEGER,DIMENSION(1) :: devtest\n  INTEGER :: x, y\n\n  devtest(1) = 1\n  !$acc enter data copyin(devtest(1:1))\n  !$acc parallel present(devtest(1:1))\n    devtest(1) = 0\n  !$acc end parallel\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n  c = 2\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:LOOPCOUNT), b(1:LOOPCOUNT, 1:LOOPCOUNT))\n    DO x = 1, LOOPCOUNT\n      !$acc data copy(c(1:LOOPCOUNT, x:x))\n        CALL copyout_test(a(:,x), b(:,x), c(:,x), LOOPCOUNT)\n      !$acc end data\n    END DO\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, LOOPCOUNT\n      IF (abs(c(x, y) - (a(x, y) + b(x, y))) .gt. PRECISION) THEN\n        errors = errors + 1\n      END IF\n    END DO\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "construct-independent",
                            "declare"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n!T3:devonly,construct-independent,declare,V:2.0-2.7\n      LOGICAL FUNCTION test3()\n  USE OPENACC\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: errors = 0\n  INTEGER :: mult = 2\n  REAL(8),DIMENSION(LOOPCOUNT, LOOPCOUNT) :: a, b, c\n  INTEGER,DIMENSION(1) :: devtest\n  INTEGER :: x, y\n\n  devtest(1) = 1\n  !$acc enter data copyin(devtest(1:1))\n  !$acc parallel present(devtest(1:1))\n    devtest(1) = 0\n  !$acc end parallel\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  IF (devtest(1) .eq. 1) THEN\n    CALL RANDOM_NUMBER(a)\n    CALL RANDOM_NUMBER(b)\n    c = 3\n\n    !$acc data copyin(a(1:LOOPCOUNT, 1:LOOPCOUNT), b(1:LOOPCOUNT, 1:LOOPCOUNT))\n      DO x = 1, LOOPCOUNT\n        !$acc data copyin(c(1:LOOPCOUNT, x:x))\n          CALL copyout_test(a(:,x), b(:,x), c(:,x), LOOPCOUNT)\n        !$acc end data\n        DO y = 1, LOOPCOUNT\n          IF (abs(c(y, x) - 3) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n      END DO\n    !$acc end data\n  END IF\n\n        IF (errors .eq. 0) THEN\n          test3 = .FALSE.\n        ELSE\n          test3 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T3\n        LOGICAL :: test3\n#endif\n#ifndef T3\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test3()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 2\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "construct-independent",
                            "declare"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "declare_function_scope_create.F90": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:devonly,construct-independent,declare,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  USE OPENACC\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: errors = 0\n  INTEGER :: mult = 2\n  REAL(8),DIMENSION(LOOPCOUNT, LOOPCOUNT) :: a, b, c, d\n  INTEGER,DIMENSION(1) :: devtest\n  INTEGER :: x, y\n\n  devtest(1) = 1\n  !$acc enter data copyin(devtest(1:1))\n  !$acc parallel present(devtest(1:1))\n    devtest(1) = 0\n  !$acc end parallel\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n  c = 1\n  d = 0\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:LOOPCOUNT), b(1:LOOPCOUNT, 1:LOOPCOUNT)) copyout(d(1:LOOPCOUNT, 1:LOOPCOUNT))\n    DO x = 1, LOOPCOUNT\n      CALL create_test(a(x), b(x), c(x), d(x), LOOPCOUNT)\n    END DO\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, LOOPCOUNT\n      IF (abs(d(x, y) - (a(x, y) * (a(x, y) + b(x, y)))) .gt. PRECISION) THEN\n        errors = errors + 1\n      END IF\n    END DO\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "construct-independent",
                            "declare"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:devonly,construct-independent,declare,V:2.0-2.7\n      LOGICAL FUNCTION test2()\n  USE OPENACC\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: errors = 0\n  INTEGER :: mult = 2\n  REAL(8),DIMENSION(LOOPCOUNT, LOOPCOUNT) :: a, b, c, d\n  INTEGER,DIMENSION(1) :: devtest\n  INTEGER :: x, y\n\n  devtest(1) = 1\n  !$acc enter data copyin(devtest(1:1))\n  !$acc parallel present(devtest(1:1))\n    devtest(1) = 0\n  !$acc end parallel\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n  c = 2\n  d = 0\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:LOOPCOUNT), b(1:LOOPCOUNT, 1:LOOPCOUNT)) copy(c(1:LOOPCOUNT, 1:LOOPCOUNT)) copyout(d(1:LOOPCOUNT, 1:LOOPCOUNT))\n    DO x = 1, LOOPCOUNT\n      CALL create_as_present(a(x), b(x), c(x), d(x), LOOPCOUNT)\n    END DO\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, LOOPCOUNT\n      IF (abs(c(x, y) - (2 + a(x, y) + b(x, y))) .gt. PRECISION) THEN\n        errors = errors + 1\n      END IF\n      IF (abs(d(x, y) - (a(x, y) * c(x, y))) .gt. PRECISION * 2) THEN\n        errors = errors + 1\n      END IF\n    END DO\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "construct-independent",
                            "declare"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n!T3:devonly,construct-independent,declare,V:2.0-2.7\n      LOGICAL FUNCTION test3()\n  USE OPENACC\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: errors = 0\n  INTEGER :: mult = 2\n  REAL(8),DIMENSION(LOOPCOUNT, LOOPCOUNT) :: a, b, c, d\n  INTEGER,DIMENSION(1) :: devtest\n  INTEGER :: x, y\n\n  devtest(1) = 1\n  !$acc enter data copyin(devtest(1:1))\n  !$acc parallel present(devtest(1:1))\n    devtest(1) = 0\n  !$acc end parallel\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  IF (devtest(1) .eq. 1) THEN\n    CALL RANDOM_NUMBER(a)\n    CALL RANDOM_NUMBER(b)\n    c = 3\n\n    !$acc data copyin(a(1:LOOPCOUNT, 1:LOOPCOUNT), b(1:LOOPCOUNT, 1:LOOPCOUNT))\n      DO x = 1, LOOPCOUNT\n        !$acc data copyin(c(x:x, 1:LOOPCOUNT)) copyout(d(x:x, 1:LOOPCOUNT))\n          CALL create_as_present(a(x), b(x), c(x), d(x), LOOPCOUNT)\n        !$acc end data\n        DO y = 1, LOOPCOUNT\n          IF (abs(c(x, y) - 3) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n          IF (abs(d(x, y) - (a(x, y) * (3 + a(x, y) + b(x, y)))) .gt. PRECISION * 2) THEN\n            errors = errors + 1\n          END IF\n        END DO\n      END DO\n    !$acc end data\n  END IF\n\n        IF (errors .eq. 0) THEN\n          test3 = .FALSE.\n        ELSE\n          test3 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T3\n        LOGICAL :: test3\n#endif\n#ifndef T3\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test3()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 2\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "construct-independent",
                            "declare"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "declare_function_scope_present.F90": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:devonly,construct-independent,declare,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  USE OPENACC\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: errors = 0\n  INTEGER :: mult = 2\n  REAL(8),DIMENSION(LOOPCOUNT, LOOPCOUNT) :: a, b, c, d\n  INTEGER,DIMENSION(1) :: devtest\n  INTEGER :: x, y\n\n  devtest(1) = 1\n  !$acc enter data copyin(devtest(1:1))\n  !$acc parallel present(devtest(1:1))\n    devtest(1) = 0\n  !$acc end parallel\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n  c = 1\n  d = 0\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:LOOPCOUNT), b(1:LOOPCOUNT, 1:LOOPCOUNT)) copyout(d(1:LOOPCOUNT, 1:LOOPCOUNT))\n    DO x = 1, LOOPCOUNT\n      !$acc data copy(c(x:x, 1:LOOPCOUNT))\n        CALL present(a(x), b(x), c(x), d(x), LOOPCOUNT)\n      !$acc end data\n    END DO\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, LOOPCOUNT\n      IF (abs(c(x, y) - (1 + a(x, y) + b(x, y))) .gt. PRECISION) THEN\n        errors = errors + 1\n      END IF\n      IF (abs(d(x, y) - (a(x, y) * c(x, y))) .gt. PRECISION * 2) THEN\n        errors = errors + 1\n      END IF\n    END DO\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "construct-independent",
                            "declare"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:devonly,construct-independent,declare,V:2.0-2.7\n      LOGICAL FUNCTION test2()\n  USE OPENACC\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: errors = 0\n  INTEGER :: mult = 2\n  REAL(8),DIMENSION(LOOPCOUNT, LOOPCOUNT) :: a, b, c, d\n  INTEGER,DIMENSION(1) :: devtest\n  INTEGER :: x, y\n\n  devtest(1) = 1\n  !$acc enter data copyin(devtest(1:1))\n  !$acc parallel present(devtest(1:1))\n    devtest(1) = 0\n  !$acc end parallel\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  IF (devtest(1) .eq. 1) THEN\n    CALL RANDOM_NUMBER(a)\n    CALL RANDOM_NUMBER(b)\n    c = 3\n\n    !$acc data copyin(a(1:LOOPCOUNT, 1:LOOPCOUNT), b(1:LOOPCOUNT, 1:LOOPCOUNT))\n      DO x = 1, LOOPCOUNT\n        !$acc data copyin(c(x:x, 1:LOOPCOUNT)) copyout(d(x:x, 1:LOOPCOUNT))\n          CALL present(a(x), b(x), c(x), d(x), LOOPCOUNT)\n        !$acc end data\n        DO y = 1, LOOPCOUNT\n          IF (abs(c(x, y) - 3) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n          IF (abs(d(x, y) - (a(x, y) * (3 + a(x, y) + b(x, y)))) .gt. PRECISION * 2) THEN\n            errors = errors + 1\n          END IF\n        END DO\n      END DO\n    !$acc end data\n  END IF\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "construct-independent",
                            "declare"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "enter_data_copyin_no_lower_bound.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:data,executable-data,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc enter data copyin(a(:LOOPCOUNT), b(:LOOPCOUNT))\n        !$acc data copyout(c(1:LOOPCOUNT)) present(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n        !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "enter_data_create.F90": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:data,executable-data,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        b = 0\n        c = 0\n\n        !$acc enter data create(b(1:LOOPCOUNT))\n        !$acc data copyin(a(1:LOOPCOUNT))\n          !$acc parallel present(b(1:LOOPCOUNT))\n            !$acc loop \n            DO x = 1, LOOPCOUNT\n              b(x) = a(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n        !$acc data copyout(c(1:LOOPCOUNT))\n          !$acc parallel present(b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n        !$acc exit data delete(b(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(a(x) - c(x)) .gt. PRECISION) THEN\n            errors = errors + 1\n            EXIT\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:data,executable-data,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test2()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        b = 0\n        c = 0\n        !$acc enter data present_or_create(b(1:LOOPCOUNT))\n        !$acc data copyin(a(1:LOOPCOUNT))\n          !$acc parallel present(b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              b(x) = a(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n        !$acc data copyout(c(1:LOOPCOUNT))\n          !$acc parallel present(b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n        !$acc exit data delete(b(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(a(x) - c(x)) .gt. PRECISION) THEN\n            errors = errors + 2\n            EXIT\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n!T3:data,executable-data,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test3()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        b = 0\n        c = 0\n \n        !$acc enter data pcreate(b(1:LOOPCOUNT))\n        !$acc data copyin(a(1:LOOPCOUNT))\n          !$acc parallel present(b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              b(x) = a(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n        !$acc data copyout(c(1:LOOPCOUNT))\n          !$acc parallel present(b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n        !$acc exit data delete(b(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(a(x) - c(x)) .gt. PRECISION) THEN\n            errors = errors + 4\n            EXIT\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test3 = .FALSE.\n        ELSE\n          test3 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T3\n        LOGICAL :: test3\n#endif\n#ifndef T3\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test3()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 2\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "enter_data_create_no_lower_bound.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:data,executable-data,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, d, e !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        CALL RANDOM_NUMBER(d)\n        e = 0\n\n        !$acc enter data create(c(:LOOPCOUNT))\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), d(1:LOOPCOUNT)) copyout(e(1:LOOPCOUNT)) present(c(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              e(x) = c(x) + d(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          IF (abs(e(x) - (a(x) + b(x) + d(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "enter_data_if.F90": {
                "num tests": 5,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:data,executable-data,devonly,construct-independent,if,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, a_copy, b, b_copy, c !Data\n        INTEGER :: errors = 0\n        INTEGER,DIMENSION(1):: devtest\n        LOGICAL :: dev = .TRUE.\n        LOGICAL :: cpu = .FALSE.\n        devtest(1) = 1\n\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel\n          devtest(1) = 0\n        !$acc end parallel\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) if(dev)\n        !$acc data create(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n        !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) if(dev)\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "data",
                            "executable-data",
                            "devonly",
                            "construct-independent",
                            "if"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:data,executable-data,devonly,construct-independent,if,V:2.0-2.7\n      LOGICAL FUNCTION test2()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, a_copy, b, b_copy, c !Data\n        INTEGER :: errors = 0\n        INTEGER,DIMENSION(1):: devtest\n        LOGICAL :: dev = .TRUE.\n        LOGICAL :: cpu = .FALSE.\n        devtest(1) = 1\n\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel\n          devtest(1) = 0\n        !$acc end parallel\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc enter data create(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) if(cpu)\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n        !$acc exit data copyout(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) if(cpu)\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "data",
                            "executable-data",
                            "devonly",
                            "construct-independent",
                            "if"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n!T3:data,executable-data,devonly,construct-independent,if,V:2.0-2.7\n      LOGICAL FUNCTION test3()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, a_copy, b, b_copy, c !Data\n        INTEGER :: errors = 0\n        INTEGER,DIMENSION(1):: devtest\n        LOGICAL :: dev = .TRUE.\n        LOGICAL :: cpu = .FALSE.\n        devtest(1) = 1\n\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel\n          devtest(1) = 0\n        !$acc end parallel\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        IF (devtest(1) .eq. 1) THEN\n          CALL RANDOM_NUMBER(a)\n          a_copy = a\n          CALL RANDOM_NUMBER(b)\n          b_copy = b\n          c = 0\n\n          !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) if(dev)\n\n          a = 0\n          b = 0\n\n          !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n            !$acc parallel\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                c(x) = a(x) + b(x)\n              END DO\n            !$acc end parallel\n          !$acc end data\n          !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) if(dev)\n\n          DO x = 1, LOOPCOUNT\n            IF (abs(c(x) - (a_copy(x) + b_copy(x))) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test3 = .FALSE.\n        ELSE\n          test3 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T3\n        LOGICAL :: test3\n#endif\n#ifndef T3\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test3()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 2\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "data",
                            "executable-data",
                            "devonly",
                            "construct-independent",
                            "if"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "4": {
                        "content": "#ifndef T4\n!T4:data,executable-data,devonly,construct-independent,if,V:2.0-2.7\n      LOGICAL FUNCTION test4()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, a_copy, b, b_copy, c !Data\n        INTEGER :: errors = 0\n        INTEGER,DIMENSION(1):: devtest\n        LOGICAL :: dev = .TRUE.\n        LOGICAL :: cpu = .FALSE.\n        devtest(1) = 1\n\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel\n          devtest(1) = 0\n        !$acc end parallel\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        IF (devtest(1) .eq. 1) THEN\n          CALL RANDOM_NUMBER(a)\n          CALL RANDOM_NUMBER(b)\n          c = 0\n\n          !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) if(cpu)\n          CALL RANDOM_NUMBER(a)\n          a_copy = a\n          CALL RANDOM_NUMBER(b)\n          b_copy = b\n\n          !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n            !$acc parallel\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                c(x) = a(x) + b(x)\n              END DO\n            !$acc end parallel\n          !$acc end data\n          !$acc exit data copyout(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) if(cpu)\n\n          DO x = 1, LOOPCOUNT\n            IF (abs(c(x) - (a_copy(x) + b_copy(x))) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test4 = .FALSE.\n        ELSE\n          test4 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T4\n        LOGICAL :: test4\n#endif\n#ifndef T4\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test4()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 3\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "data",
                            "executable-data",
                            "devonly",
                            "construct-independent",
                            "if"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "5": {
                        "content": "#ifndef T5\n!T5:data,executable-data,devonly,construct-independent,if,V:2.0-2.7\n      LOGICAL FUNCTION test5()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, a_copy, b, b_copy, c !Data\n        INTEGER :: errors = 0\n        INTEGER,DIMENSION(1):: devtest\n        LOGICAL :: dev = .TRUE.\n        LOGICAL :: cpu = .FALSE.\n        devtest(1) = 1\n\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel\n          devtest(1) = 0\n        !$acc end parallel\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        IF (devtest(1) .eq. 1) THEN\n          CALL RANDOM_NUMBER(a)\n          CALL RANDOM_NUMBER(b)\n          c = 0\n\n          !$acc enter data create(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) if(cpu)\n          !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n            !$acc parallel\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                c(x) = a(x) + b(x)\n              END DO\n            !$acc end parallel\n          !$acc end data\n\n          DO x = 1, LOOPCOUNT\n            IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test5 = .FALSE.\n        ELSE\n          test5 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T5\n        LOGICAL :: test5\n#endif\n#ifndef T5\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test5()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 4\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "data",
                            "executable-data",
                            "devonly",
                            "construct-independent",
                            "if"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "exit_data.F90": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:data,executable-data,devonly,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, a_copy !Data\n        INTEGER :: errors = 0\n        INTEGER,DIMENSION(1):: devtest\n        devtest(1) = 1\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel\n          devtest(1) = 0\n        !$acc end parallel\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        a_copy = a\n\n        IF (devtest(1) .eq. 1) THEN\n          !$acc enter data copyin(a(1:LOOPCOUNT))\n          !$acc parallel present(a(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              a(x) = a(x) + 1\n            END DO\n          !$acc end parallel\n          !$acc exit data delete(a(1:LOOPCOUNT))\n\n          DO x = 1, LOOPCOUNT\n            IF (abs(a(x) - a_copy(x)) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "data",
                            "executable-data",
                            "devonly",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:data,executable-data,devonly,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test2()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, a_copy !Data\n        INTEGER :: errors = 0\n        INTEGER,DIMENSION(1):: devtest\n        devtest(1) = 1\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel\n          devtest(1) = 0\n        !$acc end parallel\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        a_copy = a\n        !$acc enter data copyin(a(1:LOOPCOUNT))\n        !$acc parallel present(a(1:LOOPCOUNT))\n          !$acc loop\n          DO x = 1, LOOPCOUNT\n            a(x) = a(x) + 1\n          END DO\n        !$acc end parallel\n        !$acc exit data copyout(a(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(a(x) - (a_copy(x) + 1)) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "data",
                            "executable-data",
                            "devonly",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "exit_data_copyout_no_lower_bound.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:data,executable-data,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        !$acc enter data create(c(1:LOOPCOUNT))\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) present(c(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n        !$acc exit data copyout(c(:LOOPCOUNT))\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "exit_data_copyout_reference_counts.F90": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:data,executable-data,devonly,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n        INTEGER,DIMENSION(1):: devtest\n\n        devtest(1) = 1\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel present(devtest(1:1))\n          devtest(1) = 0\n        !$acc end parallel\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        IF (devtest(1) .eq. 1) THEN\n          !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n          !$acc data copyin(c(1:LOOPCOUNT))\n            !$acc parallel\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                c(x) = c(x) + a(x) + b(x)\n              END DO\n            !$acc end parallel\n            !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n          !$acc end data\n\n          DO x = 1, LOOPCOUNT\n            IF (abs(c(x)) .gt. PRECISION) THEN\n              errors = errors + 1\n              EXIT\n            END IF\n          END DO \n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "data",
                            "executable-data",
                            "devonly",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:data,executable-data,devonly,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test2()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n        INTEGER,DIMENSION(1):: devtest\n\n        devtest(1) = 1\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel present(devtest(1:1))\n          devtest(1) = 0\n        !$acc end parallel\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n        !$acc data copyin(c(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = c(x) + a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n        !$acc exit data copyout(c(1:LOOPCOUNT)) delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 2\n            EXIT\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "data",
                            "executable-data",
                            "devonly",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n!T3:data,executable-data,devonly,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test3()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n        INTEGER,DIMENSION(1):: devtest\n\n        devtest(1) = 1\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel present(devtest(1:1))\n          devtest(1) = 0\n        !$acc end parallel\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n        !$acc enter data copyin(c(1:LOOPCOUNT))\n        !$acc parallel\n          !$acc loop\n          DO x = 1, LOOPCOUNT\n            c(x) = c(x) + a(x) + b(x)\n          END DO\n        !$acc end parallel\n        !$acc exit data delete(c(1:LOOPCOUNT))\n        !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 4\n            EXIT\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test3 = .FALSE.\n        ELSE\n          test3 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T3\n        LOGICAL :: test3\n#endif\n#ifndef T3\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test3()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 2\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "data",
                            "executable-data",
                            "devonly",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "exit_data_delete_no_lower_bound.F90": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:data,executable-data,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n        LOGICAL,DIMENSION(1):: has_device\n\n        has_device(1) = .TRUE.\n        !$acc enter data copyin(has_device(1:1))\n        !$acc parallel present(has_device(1:1))\n          has_device(1) = .FALSE.\n        !$acc end parallel\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n        !$acc data copyout(c(1:LOOPCOUNT)) present(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n        !$acc exit data delete(a(:LOOPCOUNT), b(:LOOPCOUNT))\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:data,executable-data,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test2()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n        LOGICAL,DIMENSION(1):: has_device\n\n        has_device(1) = .TRUE.\n        !$acc enter data copyin(has_device(1:1))\n        !$acc parallel present(has_device(1:1))\n          has_device(1) = .FALSE.\n        !$acc end parallel\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        IF (has_device(1) .eqv. .TRUE.) THEN\n          CALL RANDOM_NUMBER(a)\n          CALL RANDOM_NUMBER(b)\n          c = 0\n          \n          !$acc enter data copyin(c(1:LOOPCOUNT))\n          !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) present(c(1:LOOPCOUNT))\n            !$acc parallel\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                c(x) = a(x) + b(x)\n              END DO\n            !$acc end parallel\n          !$acc end data\n          !$acc exit data delete(c(:LOOPCOUNT))\n\n          DO x = 1, LOOPCOUNT\n            IF (abs(c(x)) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "exit_data_finalize.F90": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:data,executable-data,devonly,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n        INTEGER,DIMENSION(1) :: devtest\n\n        devtest(1) = 1\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel present(devtest(1:1))\n          devtest(1) = 0\n        !$acc end parallel\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n        !$acc enter data create(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n        !$acc parallel present(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n          !$acc loop\n          DO x = 1, LOOPCOUNT\n            c(x) = a(x) + b(x)\n          END DO\n        !$acc end parallel\n        !$acc exit data copyout(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n        IF (devtest(1) .eq. 1) THEN\n          DO x = 1, LOOPCOUNT\n            IF (abs(c(x)) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END IF\n        !$acc exit data copyout(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "data",
                            "executable-data",
                            "devonly",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:data,executable-data,devonly,construct-independent,V:2.5-2.7\n      LOGICAL FUNCTION test2()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n        INTEGER,DIMENSION(1) :: devtest\n\n        devtest(1) = 1\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel present(devtest(1:1))\n          devtest(1) = 0\n        !$acc end parallel\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n        !$acc enter data create(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n        !$acc parallel present(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n          !$acc loop\n          DO x = 1, LOOPCOUNT\n            c(x) = a(x) + b(x)\n          END DO\n        !$acc end parallel\n        !$acc exit data copyout(c(1:LOOPCOUNT)) delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) finalize\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "data",
                            "executable-data",
                            "devonly",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "id": 2,
            "init.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,init,nonvalidating,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: errors = 0\n\n        !$acc init\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "init",
                            "nonvalidating"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "init_device_num.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,construct-independent,internal-control-values,init,nonvalidating,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: device_num\n        INTEGER :: device_type\n        INTEGER :: errors = 0\n\n        device_num = acc_get_device_num(acc_get_device_type())\n        !$acc init device_num(device_num)\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "construct-independent",
                            "internal-control-values",
                            "init",
                            "nonvalidating"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "init_device_type.F90": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,construct-independent,internal-control-values,init,nonvalidating,V:2.5-3.2\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: errors = 0\n\n        !$acc init device_type(host)\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "construct-independent",
                            "internal-control-values",
                            "init",
                            "nonvalidating"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:runtime,construct-independent,internal-control-values,init,nonvalidating,V:2.5-3.2\n      LOGICAL FUNCTION test2()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: errors = 0\n\n        !$acc init device_type(multicore)\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "construct-independent",
                            "internal-control-values",
                            "init",
                            "nonvalidating"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n!T3:runtime,construct-independent,internal-control-values,init,nonvalidating,V:2.5-3.2\n      LOGICAL FUNCTION test3()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: errors = 0\n\n        !$acc init device_type(default)\n\n        IF (errors .eq. 0) THEN\n          test3 = .FALSE.\n        ELSE\n          test3 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T3\n        LOGICAL :: test3\n#endif\n#ifndef T3\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test3()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 2\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "construct-independent",
                            "internal-control-values",
                            "init",
                            "nonvalidating"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "init_device_type_num.F90": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,construct-independent,internal-control-values,init,nonvalidating,V:2.5-3.2\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: device_num\n        INTEGER :: device_type\n        INTEGER :: errors = 0\n\n        device_type = acc_get_device_type()\n        device_num = acc_get_device_num(device_type)\n        !$acc init device_type(host) device_num(device_num)\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "construct-independent",
                            "internal-control-values",
                            "init",
                            "nonvalidating"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:runtime,construct-independent,internal-control-values,init,nonvalidating,V:2.5-3.2\n      LOGICAL FUNCTION test2()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: device_num\n        INTEGER :: device_type\n        INTEGER :: errors = 0\n\n        device_type = acc_get_device_type()\n        device_num = acc_get_device_num(device_type)\n        !$acc init device_type(multicore) device_num(device_num)\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "construct-independent",
                            "internal-control-values",
                            "init",
                            "nonvalidating"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n!T3:runtime,construct-independent,internal-control-values,init,nonvalidating,V:2.5-3.2\n      LOGICAL FUNCTION test3()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: device_num\n        INTEGER :: device_type\n        INTEGER :: errors = 0\n\n        device_type = acc_get_device_type()\n        device_num = acc_get_device_num(device_type)\n        !$acc init device_type(default) device_num(device_num)\n\n        IF (errors .eq. 0) THEN\n          test3 = .FALSE.\n        ELSE\n          test3 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T3\n        LOGICAL :: test3\n#endif\n#ifndef T3\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test3()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 2\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "construct-independent",
                            "internal-control-values",
                            "init",
                            "nonvalidating"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "init_device_type_num_nvidia.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,construct-independent,internal-control-values,init,nonvalidating,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: device_num\n        INTEGER :: device_type\n        INTEGER :: errors = 0\n\n        device_type = acc_get_device_type()\n        device_num = acc_get_device_num(device_type)\n        !$acc init device_type(nvidia) device_num(device_num)\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "construct-independent",
                            "internal-control-values",
                            "init",
                            "nonvalidating"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "init_device_type_nvidia.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,construct-independent,internal-control-values,init,nonvalidating,V:2.5-3.2\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: errors = 0\n\n        !$acc init device_type(nvidia)\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "construct-independent",
                            "internal-control-values",
                            "init",
                            "nonvalidating"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_async.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:async,kernels,update,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, d, e, f, g !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        CALL RANDOM_NUMBER(d)\n        CALL RANDOM_NUMBER(e)\n        f = 0\n        g = 0\n        !$acc enter data create(g(1:LOOPCOUNT), c(1:LOOPCOUNT), f(1:LOOPCOUNT))\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), d(1:LOOPCOUNT), e(1:LOOPCOUNT))\n          !$acc kernels async(1)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end kernels\n          !$acc kernels async(2)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              f(x) = d(x) + e(x)\n            END DO\n          !$acc end kernels\n          !$acc kernels wait(1, 2) async(3)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              g(x) = c(x) + f(x)\n            END DO\n          !$acc end kernels\n        !$acc end data\n        !$acc wait(1, 2)\n        !$acc update host(c(1:LOOPCOUNT), f(1:LOOPCOUNT))\n        !$acc exit data copyout(g(1:LOOPCOUNT)) async(3)\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n            WRITE(*, *) x, \" a: \", c(x), \" = \", a(x), \" + \", b(x)\n          END IF\n          IF (abs(f(x) - (d(x) + e(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n            WRITE(*, *) x, \" b: \", f(x), \" = \", d(x), \" + \", e(x)\n          END IF\n        END DO\n        !$acc wait(3)\n        DO x = 1, LOOPCOUNT\n          IF (abs(g(x) - (c(x) + f(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n            WRITE(*, *) x, \" c: \", g(x), \" = \", c(x), \" + \", f(x)\n          END IF\n        END DO\n        !$acc exit data delete(c(1:LOOPCOUNT), f(1:LOOPCOUNT))\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "async",
                            "kernels",
                            "update"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_copy.F90": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:devonly,kernels,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n        INTEGER,DIMENSION(1):: devtest\n        devtest(1) = 1\n\n        !$acc enter data copyin(devtest(1:1))\n        !$acc kernels present(devtest)\n          devtest(1) = 0\n        !$acc end kernels\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 1\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n          !$acc kernels copy(c(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = c(x) + a(x) + b(x)\n            END DO\n          !$acc end kernels\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x) + 1)) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "kernels"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:devonly,kernels,V:2.0-2.7\n      LOGICAL FUNCTION test2()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n        INTEGER,DIMENSION(1):: devtest\n        devtest(1) = 1\n\n        !$acc enter data copyin(devtest(1:1))\n        !$acc kernels present(devtest)\n          devtest(1) = 0\n        !$acc end kernels\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        IF (devtest(1) .eq. 1) THEN\n          CALL RANDOM_NUMBER(a)\n          CALL RANDOM_NUMBER(b)\n          c = 1\n\n          !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n            !$acc kernels copy(c(1:LOOPCOUNT))\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                c(x) = c(x) + a(x) + b(x)\n              END DO\n            !$acc end kernels\n          !$acc end data\n\n          DO x = 1, LOOPCOUNT\n            IF (abs(c(x) - 1) .gt. PRECISION) THEN\n              IF ((a(x) + b(x)) .gt. PRECISION) THEN\n                errors = errors + 1\n              END IF\n            END IF\n          END DO\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "kernels"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n!T3:devonly,kernels,V:2.0-2.7\n      LOGICAL FUNCTION test3()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n        INTEGER,DIMENSION(1):: devtest\n        devtest(1) = 1\n\n        !$acc enter data copyin(devtest(1:1))\n        !$acc kernels present(devtest)\n          devtest(1) = 0\n        !$acc end kernels\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        IF (devtest(1) .eq. 1) THEN\n          CALL RANDOM_NUMBER(a)\n          CALL RANDOM_NUMBER(b)\n          c = 1\n\n          !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copy(c(1:LOOPCOUNT))\n            DO x = 1, LOOPCOUNT\n              c(x) = 0\n            END DO\n            !$acc kernels copy(c(1:LOOPCOUNT))\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                c(x) = c(x) + a(x) + b(x)\n              END DO\n            !$acc end kernels\n            DO x = 1, LOOPCOUNT\n              IF (abs(c(x)) .gt. PRECISION) THEN\n                errors = errors + 1\n              END IF\n            END DO\n          !$acc end data\n\n          DO x = 1, LOOPCOUNT\n            IF (abs(c(x) - (1 + a(x) + b(x))) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test3 = .FALSE.\n        ELSE\n          test3 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T3\n        LOGICAL :: test3\n#endif\n#ifndef T3\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test3()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 2\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "kernels"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_copyin.F90": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:devonly,kernels,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        INTEGER :: errors = 0\n        INTEGER,DIMENSION(1):: devtest\n        devtest(1) = 1\n\n        !$acc enter data copyin(devtest(1:1))\n        !$acc kernels\n          devtest(1) = 0\n        !$acc end kernels\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        b = 0\n\n        !$acc data copy(b(1:LOOPCOUNT))\n          !$acc kernels copyin(a(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              b(x) = b(x) + a(x)\n            END DO\n          !$acc end kernels\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(a(x) - b(x)) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "kernels"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:devonly,kernels,V:2.0-2.7\n      LOGICAL FUNCTION test2()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        INTEGER :: errors = 0\n        INTEGER,DIMENSION(1):: devtest\n        devtest(1) = 1\n\n        !$acc enter data copyin(devtest(1:1))\n        !$acc kernels\n          devtest(1) = 0\n        !$acc end kernels\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        IF (devtest(1) .eq. 1) THEN\n          CALL RANDOM_NUMBER(a)\n          b = 0\n          !$acc data copy(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            DO x = 1, LOOPCOUNT\n              a(x) = -1\n            END DO\n            !$acc kernels copyin(a(1:LOOPCOUNT))\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                b(x) = a(x)\n              END DO\n            !$acc end kernels\n            DO x = 1, LOOPCOUNT\n              IF (abs(a(x) + 1) .gt. PRECISION) THEN\n                errors = errors + 1\n              END IF\n            END DO\n          !$acc end data\n          DO x = 1, LOOPCOUNT\n            IF (abs(a(x) - b(x)) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "kernels"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n!T3:devonly,kernels,V:2.0-2.7\n      LOGICAL FUNCTION test3()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        INTEGER :: errors = 0\n        INTEGER,DIMENSION(1):: devtest\n        devtest(1) = 1\n\n        !$acc enter data copyin(devtest(1:1))\n        !$acc kernels\n          devtest(1) = 0\n        !$acc end kernels\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        IF (devtest(1) .eq. 1) THEN\n          CALL RANDOM_NUMBER(a)\n          b = 0\n\n          !$acc kernels copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              b(x) = a(x)\n            END DO\n          !$acc end kernels\n\n          DO x = 1, LOOPCOUNT\n            IF (abs(b(x)) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test3 = .FALSE.\n        ELSE\n          test3 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T3\n        LOGICAL :: test3\n#endif\n#ifndef T3\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test3()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 2\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "kernels"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_copyout.F90": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:devonly,kernels,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        INTEGER :: errors = 0\n        INTEGER,DIMENSION(1):: devtest\n        devtest(1) = 1\n\n        !$acc enter data copyin(devtest(1:1))\n        !$acc kernels present(devtest(1:1))\n          devtest(1) = 0\n        !$acc end kernels\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        b = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT))\n          !$acc kernels copyout(b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              b(x) = a(x)\n            END DO\n          !$acc end kernels\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(a(x) - b(x)) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "kernels"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:devonly,kernels,V:2.0-2.7\n      LOGICAL FUNCTION test2()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        INTEGER :: errors = 0\n        INTEGER,DIMENSION(1):: devtest\n        devtest(1) = 1\n\n        !$acc enter data copyin(devtest(1:1))\n        !$acc kernels present(devtest(1:1))\n          devtest(1) = 0\n        !$acc end kernels\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        IF (devtest(1) .eq. 1) THEN\n          CALL RANDOM_NUMBER(a)\n          b = 0\n          \n          !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            !$acc kernels copyout(b(1:LOOPCOUNT))\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                b(x) = a(x)\n              END DO\n            !$acc end kernels\n          !$acc end data\n          \n          DO x = 1, LOOPCOUNT\n            IF (abs(b(x)) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "kernels"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_create.F90": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:devonly,kernels,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n        INTEGER,DIMENSION(1):: devtest\n        devtest(1) = 1\n\n        !$acc enter data copyin(devtest(1:1))\n        !$acc kernels present(devtest(1:1))\n          devtest(1) = 0\n        !$acc end kernels\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        IF (devtest(1) .eq. 1) THEN\n          CALL RANDOM_NUMBER(a)\n          b = 0\n          c = 0\n          !$acc data copyin(a(1:LOOPCOUNT))\n            !$acc kernels create(b(1:LOOPCOUNT))\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                b(x) = a(x)\n              END DO\n            !$acc end kernels\n          !$acc end data\n          DO x = 1, LOOPCOUNT\n            IF (abs(b(x)) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "kernels"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:devonly,kernels,V:2.0-2.7\n      LOGICAL FUNCTION test2()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n        INTEGER,DIMENSION(1):: devtest\n        devtest(1) = 1\n\n        !$acc enter data copyin(devtest(1:1))\n        !$acc kernels present(devtest(1:1))\n          devtest(1) = 0\n        !$acc end kernels\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        b = 0\n        !$acc data copyin(a(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT))\n          !$acc kernels create(b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              b(x) = a(x)\n            END DO\n          !$acc end kernels\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          IF (abs(b(x) - a(x)) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "kernels"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n!T3:devonly,kernels,V:2.0-2.7\n      LOGICAL FUNCTION test3()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n        INTEGER,DIMENSION(1):: devtest\n        devtest(1) = 1\n\n        !$acc enter data copyin(devtest(1:1))\n        !$acc kernels present(devtest(1:1))\n          devtest(1) = 0\n        !$acc end kernels\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        b = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n          !$acc kernels create(b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              b(x) = a(x)\n            END DO\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = b(x)\n            END DO\n          !$acc end kernels\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - a(x)) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test3 = .FALSE.\n        ELSE\n          test3 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T3\n        LOGICAL :: test3\n#endif\n#ifndef T3\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test3()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 2\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "kernels"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_default_copy.F90": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:devonly,kernels,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n        LOGICAL,DIMENSION(1):: devtest\n        devtest(1) = .TRUE.\n\n        !$acc enter data copyin(devtest(1:1))\n        !$acc kernels\n          devtest(1) = .FALSE.\n        !$acc end kernels\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n          !$acc kernels\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = c(x) + a(x) + b(x)\n            END DO\n          !$acc end kernels\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "kernels"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:devonly,kernels,V:2.0-2.7\n      LOGICAL FUNCTION test2()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n        LOGICAL,DIMENSION(1):: devtest\n        devtest(1) = .TRUE.\n\n        !$acc enter data copyin(devtest(1:1))\n        !$acc kernels\n          devtest(1) = .FALSE.\n        !$acc end kernels\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        IF (devtest(1)) THEN\n          CALL RANDOM_NUMBER(a)\n          CALL RANDOM_NUMBER(b)\n          c = 1\n\n          !$acc enter data copyin(c(1:LOOPCOUNT))\n          c = 0\n          !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            !$acc kernels\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                c(x) = c(x) + a(x) + b(x)\n              END DO\n            !$acc end kernels\n          !$acc end data\n          DO x = 1, LOOPCOUNT\n            IF (abs(c(x)) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n          !$acc exit data copyout(c(1:LOOPCOUNT))\n          DO x = 1, LOOPCOUNT\n            IF (abs(c(x) - (a(x) + b(x) + 1)) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "kernels"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_default_present.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,default,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        b = 0\n\n        !$acc enter data copyin(a(1:LOOPCOUNT)) create(b(1:LOOPCOUNT))\n        !$acc kernels default(present)\n          !$acc loop\n          DO x = 1, LOOPCOUNT\n            b(x) = a(x)\n          END DO\n        !$acc end kernels\n        !$acc exit data delete(a(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT)) \n        DO x = 1, LOOPCOUNT\n          IF (abs(a(x) - b(x)) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "default"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_if.F90": {
                "num tests": 4,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:devonly,kernels,if,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        INTEGER :: errors = 0\n        LOGICAL,DIMENSION(1):: devtest\n        LOGICAL:: data_on_device = .FALSE.\n        devtest(1) = .TRUE.\n\n        !$acc enter data copyin(devtest(1:1))\n        !$acc kernels present(devtest(1:1))\n          devtest(1) = .FALSE.\n        !$acc end kernels\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        b = 0\n\n        !$acc kernels if(data_on_device) present(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n          !$acc loop\n          DO x = 1, LOOPCOUNT\n            b(x) = a(x)\n          END DO\n        !$acc end kernels\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(a(x) - b(x)) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "kernels",
                            "if"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:devonly,kernels,if,V:2.0-2.7\n      LOGICAL FUNCTION test2()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        INTEGER :: errors = 0\n        LOGICAL,DIMENSION(1):: devtest\n        LOGICAL:: data_on_device = .FALSE.\n        devtest(1) = .TRUE.\n\n        !$acc enter data copyin(devtest(1:1))\n        !$acc kernels present(devtest(1:1))\n          devtest(1) = .FALSE.\n        !$acc end kernels\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        b = 0\n\n        data_on_device = .TRUE.\n        !$acc enter data copyin(a(1:LOOPCOUNT)) create(b(1:LOOPCOUNT))\n        !$acc kernels if(data_on_device) present(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n          !$acc loop\n          DO x = 1, LOOPCOUNT\n            b(x) = a(x)\n          END DO\n        !$acc end kernels\n        !$acc exit data copyout(b(1:LOOPCOUNT)) delete(a(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(b(x) - a(x)) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "kernels",
                            "if"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n!T3:devonly,kernels,if,V:2.0-2.7\n      LOGICAL FUNCTION test3()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        INTEGER :: errors = 0\n        LOGICAL,DIMENSION(1):: devtest\n        LOGICAL:: data_on_device = .FALSE.\n        devtest(1) = .TRUE.\n\n        !$acc enter data copyin(devtest(1:1))\n        !$acc kernels present(devtest(1:1))\n          devtest(1) = .FALSE.\n        !$acc end kernels\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        IF (devtest(1) .eqv. .TRUE.) THEN\n          CALL RANDOM_NUMBER(a)\n          b = 0\n\n          !$acc enter data copyin(a(1:LOOPCOUNT)) create(b(1:LOOPCOUNT))\n          DO x = 1, LOOPCOUNT\n            a(x) = -1\n          END DO\n\n          !$acc kernels if(data_on_device) present(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              b(x) = a(x)\n            END DO\n          !$acc end kernels\n\n          DO x = 1, LOOPCOUNT\n            IF (abs(a(x) + 1) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n            IF (abs(b(x)) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n\n          !$acc exit data copyout(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n          data_on_device = .FALSE.\n\n          DO x = 1, LOOPCOUNT\n            IF (abs(a(x) - b(x)) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test3 = .FALSE.\n        ELSE\n          test3 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T3\n        LOGICAL :: test3\n#endif\n#ifndef T3\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test3()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 2\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "kernels",
                            "if"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "4": {
                        "content": "#ifndef T4\n!T4:devonly,kernels,if,V:2.0-2.7\n      LOGICAL FUNCTION test4()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        INTEGER :: errors = 0\n        LOGICAL,DIMENSION(1):: devtest\n        LOGICAL:: data_on_device = .FALSE.\n        devtest(1) = .TRUE.\n\n        !$acc enter data copyin(devtest(1:1))\n        !$acc kernels present(devtest(1:1))\n          devtest(1) = .FALSE.\n        !$acc end kernels\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        IF (devtest(1) .eq. 1) THEN\n          CALL RANDOM_NUMBER(a)\n          b = 0\n\n          !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n          !$acc kernels if(data_on_device) present(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              b(x) = a(x)\n            END DO\n          !$acc end kernels\n\n          DO x = 1, LOOPCOUNT\n            IF (abs(a(x) - b(x)) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n\n          !$acc exit data copyout(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n\n          DO x = 1, LOOPCOUNT\n            IF (abs(b(x)) .gt. PRECISION) THEN\n              IF (abs(b(x) - a(x)) .gt. PRECISION) THEN\n                errors = errors + 1\n              END IF\n            END IF\n          END DO\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test4 = .FALSE.\n        ELSE\n          test4 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T4\n        LOGICAL :: test4\n#endif\n#ifndef T4\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test4()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 3\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "kernels",
                            "if"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, _0, _1, _2, _3, _4, _5, _6, _7, _8, _9 !Iterators\n        REAL(8),DIMENSION(1024):: a, b !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        b = 0\n\n        !$acc data copyin(a(1:1024)) copyout(b(1:1024))\n          !$acc kernels\n            !$acc loop\n            DO _0 = 0, 1\n              !$acc loop\n              DO _1 = 0, 1\n                !$acc loop\n                DO _2 = 0, 1\n                  !$acc loop\n                  DO _3 = 0, 1\n                    !$acc loop\n                    DO _4 = 0, 1\n                      !$acc loop\n                      DO _5 = 0, 1\n                        !$acc loop\n                        DO _6 = 0, 1\n                          !$acc loop\n                          DO _7 = 0, 1\n                            !$acc loop\n                            DO _8 = 0, 1\n                              !$acc loop\n                              DO _9 = 1, 2\n                                b(_0*512+_1*256+_2*128+_3*64+_4*32+_5*16+_6*8+_7*4+_8*2+_9)=a(_0*512+_1*256+_2*128+_3*64+_4*32+_5*16+_6*8+_7*4+_8*2+_9)\n                              END DO\n                            END DO\n                          END DO\n                        END DO\n                      END DO\n                    END DO\n                  END DO\n                END DO\n              END DO\n            END DO\n          !$acc end kernels\n        !$acc end data\n\n        DO x = 1, 1024\n          IF (abs(a(x) - b(x)) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_independent.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        b = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(b(1:LOOPCOUNT))\n          !$acc kernels loop independent\n          DO x = 1, LOOPCOUNT\n            b(x) = b(x) + a(x)\n          END DO\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(a(x) - b(x)) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_add_general.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        REAL(8) :: total\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        total = 0\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copy(total)\n          !$acc parallel loop reduction(+:total)\n          DO x = 1, LOOPCOUNT\n            total = total + a(x) + b(x)\n          END DO\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          total = total - (a(x) + b(x))\n        END DO\n        IF (abs(total) .gt. LOOPCOUNT * PRECISION) THEN\n          WRITE(*, *) total\n          errors = 1\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_add_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,private,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(10*LOOPCOUNT):: a, b, c, d !Data\n        REAL(8) :: avg\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        avg = 0\n        !$acc data copyin(a(1:10*LOOPCOUNT), b(1:10*LOOPCOUNT)) create(c(1:10*LOOPCOUNT)) copyout(d(1:10*LOOPCOUNT))\n          !$acc kernels loop gang private(avg)\n          DO x = 0, 9\n            avg = 0\n            !$acc loop worker reduction(+:avg)\n            DO y = 1, LOOPCOUNT\n              avg = avg + a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y)\n              c(x * LOOPCOUNT + y) = a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y)\n            END DO\n            avg = avg / LOOPCOUNT\n            !$acc loop worker\n            DO y = 1, LOOPCOUNT\n              d(x * LOOPCOUNT + y) = c(x * LOOPCOUNT + y) / avg\n            END DO\n          END DO\n        !$acc end data\n        DO x = 0, 9\n          avg = 0\n          DO y = 1, LOOPCOUNT\n            avg = avg + a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y)\n          END DO\n          avg = avg / LOOPCOUNT\n          DO y = 1, LOOPCOUNT\n            IF (abs(d(x * LOOPCOUNT + y) - ((a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y)) / avg)) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_add_vector_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,private,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(10*LOOPCOUNT):: a, b !Data\n        REAL(8),DIMENSION(10) :: c\n        REAL(8) :: temp\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n\n        !$acc data copyin(a(1:10*LOOPCOUNT), b(1:10*LOOPCOUNT)) copyout(c(1:10))\n          !$acc kernels loop private(temp)\n          DO x = 0, 9\n            temp = 0.0\n            !$acc loop vector reduction(+:temp)\n            DO y = 1, LOOPCOUNT\n              temp = temp + a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y)\n            END DO\n            c(x + 1) = temp\n          END DO\n        !$acc end data\n\n        DO x = 0, 9\n          temp = 0\n          DO y = 1, LOOPCOUNT\n            temp = temp + a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y)\n          END DO\n          IF (abs(temp - c(x + 1)) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_and_general.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT):: a !Data\n        LOGICAL :: results = .TRUE.\n        LOGICAL :: host_results = .TRUE.\n        REAL(8) :: false_margin\n        INTEGER :: errors = 0\n        false_margin = exp(log(.5) / LOOPCOUNT)\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          IF (randoms(x) .lt. false_margin) THEN\n            a(x) = .TRUE.\n          ELSE\n            a(x) = .FALSE.\n          END IF\n        END DO\n\n        !$acc data copyin(a(1:LOOPCOUNT))\n          !$acc kernels loop reduction(.and.:results)\n          DO x = 1, LOOPCOUNT\n            results = results .and. a(x)\n          END DO\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          host_results = host_results .and. a(x)\n        END DO\n        IF (host_results .neqv. results) THEN\n          errors = 1\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_and_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        LOGICAL,DIMENSION(10*LOOPCOUNT):: a, a_copy !Data\n        LOGICAL,DIMENSION(10) :: results, has_false\n        LOGICAL :: host_results = .TRUE.\n        LOGICAL :: temp = .TRUE.\n        REAL(8),DIMENSION(10*LOOPCOUNT):: randoms\n        REAL(8) :: false_margin = exp(log(.5) / LOOPCOUNT)\n        INTEGER :: errors = 0\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, 10\n          results(x) = .TRUE.\n          has_false(x) = .FALSE.\n        END DO\n        DO x = 1, 10*LOOPCOUNT\n          IF (randoms(x) .lt. false_margin) THEN\n            a(x) = .TRUE.\n            a_copy(x) = .TRUE.\n          ELSE\n            a(x) = .FALSE.\n            a_copy(x) = .FALSE.\n            has_false(x / LOOPCOUNT) = .TRUE.\n          END IF\n        END DO\n\n        !$acc data copy(a(1:10*LOOPCOUNT), results(1:10))\n          !$acc kernels loop gang\n          DO x = 0, 9\n            temp = .TRUE.\n            !$acc loop worker reduction(.AND.:temp)\n            DO y = 1, LOOPCOUNT\n              temp = temp .AND. a(x * LOOPCOUNT + y)\n            END DO\n            results(x + 1) = temp\n            !$acc loop worker\n            DO y = 1, LOOPCOUNT\n              IF (temp .eqv. .TRUE.) THEN\n                IF (a(x * LOOPCOUNT + y) .eqv. .TRUE.) THEN\n                  a(x * LOOPCOUNT + y) = .FALSE.\n                ELSE\n                  a(x * LOOPCOUNT + y) = .TRUE.\n                END IF\n              END IF\n            END DO\n          END DO\n        !$acc end data\n        DO x = 0, 9\n          temp = .TRUE.\n          DO y = 1, LOOPCOUNT\n            temp = temp .AND. a_copy(x * LOOPCOUNT + y)\n          END DO\n          IF (temp .neqv. results(x + 1)) THEN\n            errors = errors + 1\n          END IF\n          DO y = 1, LOOPCOUNT\n            IF (temp .eqv. .TRUE.) THEN\n              IF (a(x * LOOPCOUNT + y) .eqv. a_copy(x * LOOPCOUNT + y)) THEN\n                errors = errors + 1\n              END IF\n            ELSE\n              IF (a(x * LOOPCOUNT + y) .neqv. a_copy(x * LOOPCOUNT + y)) THEN\n                errors = errors + 1\n              END IF\n            END IF\n          END DO\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_and_vector_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,private,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        LOGICAL,DIMENSION(10*LOOPCOUNT):: a !Data\n        LOGICAL,DIMENSION(10):: b\n        LOGICAL,DIMENSION(10):: has_false\n        LOGICAL :: temp\n        REAL(8) :: false_margin\n        REAL(8),DIMENSION(10*LOOPCOUNT) :: randoms\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        false_margin = exp(log(.5) / LOOPCOUNT)\n        DO x = 1, 10\n          has_false(x) = .FALSE.\n          b(x) = .TRUE.\n        END DO\n\n        DO x = 0, 9\n          DO y = 1, LOOPCOUNT\n            IF (randoms(x * LOOPCOUNT + y) .lt. false_margin) THEN\n              a(x * LOOPCOUNT + y) = .TRUE.\n            ELSE\n              a(x * LOOPCOUNT + y) = .FALSE.\n              has_false(x + 1) = .TRUE.\n            END IF\n          END DO\n        END DO\n\n        !$acc data copyin(a(1:10*LOOPCOUNT)) copy(b(1:10))\n          !$acc kernels loop private(temp)\n          DO x = 0, 9\n            temp = .TRUE.\n            !$acc loop vector reduction(.AND.:temp)\n            DO y = 1, LOOPCOUNT\n              temp = temp .AND. a(x * LOOPCOUNT + y)\n            END DO\n            b(x + 1) = temp\n          END DO\n        !$acc end data\n\n        DO x = 0, 9\n          temp = .FALSE.\n          DO y = 1, LOOPCOUNT\n            IF (a(x * LOOPCOUNT + y) .eqv. .FALSE.) THEN\n              temp = .TRUE.\n            END IF\n          END DO\n          IF (temp .neqv. has_false(x + 1)) THEN\n            errors = 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_bitand_general.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y, z !Iterators\n        INTEGER,DIMENSION(LOOPCOUNT):: a !Data\n        INTEGER :: b\n        REAL(8),DIMENSION(16 * LOOPCOUNT):: randoms\n        REAL(8) :: false_margin\n        INTEGER :: errors = 0\n        INTEGER :: temp = 1\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        false_margin = exp(log(.5)/n)\n        DO x = 1, LOOPCOUNT\n          DO y = 0, 15\n            IF (randoms(y * LOOPCOUNT + x) .lt. false_margin) THEN\n              temp = 1\n              DO z = 0, y\n                temp = temp * 2\n              END DO\n              a(x) = a(x) + temp\n            END IF\n          END DO\n        END DO\n\n        b = a(1)\n\n        !$acc data copyin(a(1:LOOPCOUNT))\n          !$acc kernels loop reduction(iand:b)\n          DO x = 1, LOOPCOUNT\n            b = iand(b, a(x))\n          END DO\n        !$acc end data\n\n        temp = a(1)\n        DO x = 2, LOOPCOUNT\n          temp = iand(a(x), temp)\n        END DO\n        IF (temp .ne. b) THEN\n          WRITE(*, *) temp\n          WRITE(*, *) b\n          errors = 1\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_bitand_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,private,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y, z !Iterators\n        INTEGER,DIMENSION(10*LOOPCOUNT):: a, b, b_copy !Data\n        REAL(8),DIMENSION(10*LOOPCOUNT):: randoms2\n        INTEGER,DIMENSION(10) :: c\n        REAL(8) :: false_margin\n        REAL(8),DIMENSION(160*LOOPCOUNT)::randoms\n        INTEGER :: errors = 0\n        INTEGER :: temp\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        CALL RANDOM_NUMBER(randoms2)\n        b = FLOOR(10000 * randoms2)\n        b_copy = b\n        false_margin = exp(log(.5)/LOOPCOUNT)\n        DO x = 1, 10 * LOOPCOUNT\n          DO y = 1, 16\n            IF (randoms((y - 1) * 10 * LOOPCOUNT + x) < false_margin) THEN\n              temp = 1\n              DO z = 1, y\n                temp = temp * 2\n              END DO\n              a(x) = a(x) + temp\n            END IF\n          END DO\n        END DO\n\n        DO x = 1, 10\n         c(x) = a((x - 1) * LOOPCOUNT + x)\n        END DO\n\n        !$acc data copyin(a(1:10*LOOPCOUNT)) copy(b(1:10*LOOPCOUNT), c(1:10))\n          !$acc kernels loop gang private(temp)\n          DO x = 1, 10\n            temp = a((x - 1) * LOOPCOUNT + 1)\n            !$acc loop worker reduction(iand:temp)\n            DO y = 2, LOOPCOUNT\n              temp = iand(temp, a((x - 1) * LOOPCOUNT + y))\n            END DO\n            c(x) = temp\n            !$acc loop worker\n            DO y = 1, LOOPCOUNT\n              b((x - 1) * LOOPCOUNT + y) = b((x - 1) * LOOPCOUNT + y) + c(x)\n            END DO\n          END DO\n        !$acc end data\n\n       DO x = 1, 10\n         temp = a((x - 1) * LOOPCOUNT + 1)\n         DO y = 2, LOOPCOUNT\n           temp = iand(temp, a((x - 1) * LOOPCOUNT + y))\n         END DO\n         IF (temp .ne. c(x)) THEN\n           errors = errors + 1\n         END IF\n         DO y = 1, LOOPCOUNT\n           IF (b((x - 1) * LOOPCOUNT + y) .ne. b_copy((x - 1) * LOOPCOUNT + y) + temp) THEN\n             errors = errors + 1\n           END IF\n         END DO\n       END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_bitand_vector_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,private,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y, z, i !Iterators\n        INTEGER,DIMENSION(10*LOOPCOUNT):: a !Data\n        INTEGER,DIMENSION(10):: b\n        INTEGER :: c\n        REAL(8),DIMENSION(160*LOOPCOUNT):: random\n        REAL(8) :: false_margin\n        INTEGER :: errors = 0\n        INTEGER :: temp\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(random)\n        false_margin = exp(log(.5) / n)\n        DO x = 0, 9\n          DO y = 1, LOOPCOUNT\n            DO z = 1, 16\n              IF (random(x * 16 * LOOPCOUNT + (y - 1) * 16 + z - 1) < false_margin) THEN\n                temp = 1\n                DO i = 1, z\n                  temp = temp * 2\n                END DO\n                a(x * LOOPCOUNT + y) = a(x * LOOPCOUNT + y) + temp\n              END IF\n            END DO\n          END DO\n        END DO\n\n        !$acc data copyin(a(1:10*LOOPCOUNT)), copy(b(1:10))\n          !$acc kernels loop private(c)\n          DO x = 0, 9\n            c = a(x * LOOPCOUNT + 1)\n            !$acc loop vector reduction(iand:c)\n            DO y = 1, LOOPCOUNT\n              c = iand(c, a(x * LOOPCOUNT + y))\n            END DO\n            b(x + 1) = c\n          END DO\n        !$acc end data\n\n        DO x = 0, 9\n          temp = a(x * LOOPCOUNT + 1)\n          DO y = 2, LOOPCOUNT\n            temp = iand(temp, a(x * LOOPCOUNT + y))\n          END DO\n          IF (b(x + 1) .ne. temp) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_bitor_general.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y, z !Iterators\n        INTEGER,DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8) :: false_margin\n        REAL(8),DIMENSION(16*LOOPCOUNT):: random\n        INTEGER :: errors = 0\n        INTEGER :: temp\n        INTEGER :: b\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(random)\n        false_margin = exp(log(.5)/n)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 16\n            IF (random((y - 1) * LOOPCOUNT + x) < false_margin) THEN\n              temp = 1\n              DO z = 1, y\n                temp = temp * 2\n              END DO\n              a(x) = a(x) + temp\n            END IF\n          END DO\n        END DO\n        b = a(1)\n        !$acc data copyin(a(1:LOOPCOUNT))\n          !$acc kernels loop reduction(ior:b)\n          DO x = 2, LOOPCOUNT\n            b = ior(b, a(x))\n          END DO\n        !$acc end data\n        temp = a(1)\n        DO x = 2, LOOPCOUNT\n          temp = ior(temp, a(x))\n        END DO\n        IF (temp .ne. b) THEN\n          errors = errors + 1\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_bitor_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,private,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y, z, i !Iterators\n        INTEGER,DIMENSION(10*LOOPCOUNT):: a, b, b_copy !Data\n        REAL(8),DIMENSION(10*LOOPCOUNT):: randoms2\n        INTEGER,DIMENSION(10) :: c\n        REAL(8),DIMENSION(160*LOOPCOUNT):: randoms\n        REAL(8) :: false_margin\n        INTEGER :: errors = 0\n        INTEGER :: temp\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        CALL RANDOM_NUMBER(randoms2)\n        false_margin = exp(log(.5)/n)\n        b = FLOOR(6*randoms2)\n        b_copy = b\n        DO x = 0, 9\n          DO y = 1, LOOPCOUNT\n            DO z = 1, 16\n              IF (randoms(x * 16 * LOOPCOUNT + y * 16 + z - 1) .gt. false_margin) THEN\n                temp = 1\n                DO i = 1, z\n                  temp = temp * 2\n                END DO\n                a(x * LOOPCOUNT + y) = a(x * LOOPCOUNT + y) + temp\n              END IF\n            END DO\n          END DO\n        END DO\n\n        !$acc data copyin(a(1:10*LOOPCOUNT)) copy(b(1:10*LOOPCOUNT), c(1:10))\n          !$acc kernels loop gang private(temp)\n          DO x = 0, 9\n            temp = 0\n            !$acc loop worker reduction(ior:temp)\n            DO y = 1, LOOPCOUNT\n              temp = ior(temp, a(x * LOOPCOUNT + y))\n            END DO\n            c(x + 1) = temp\n            !$acc loop worker\n            DO y = 1, LOOPCOUNT\n              b(x * LOOPCOUNT + y) = b(x * LOOPCOUNT + y) + c(x + 1)\n            END DO\n          END DO\n        !$acc end data\n\n        DO x = 0, 9\n          temp = 0\n          DO y = 1, LOOPCOUNT\n            temp = ior(temp, a(x * LOOPCOUNT + y))\n          END DO\n          IF (temp .ne. c(x + 1)) THEN\n            errors = errors + 1\n          END IF\n          DO y = 1, LOOPCOUNT\n            IF (b(x * LOOPCOUNT + y) .ne. b_copy(x * LOOPCOUNT + y) + c(x + 1)) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_bitor_vector_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,private,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y, z !Iterators\n        INTEGER,DIMENSION(10 * LOOPCOUNT):: a !Data\n        INTEGER,DIMENSION(10) :: b\n        REAL(8) :: false_margin\n        REAL(8),DIMENSION(160 * LOOPCOUNT) :: randoms\n        INTEGER :: errors = 0\n        INTEGER :: temp\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        false_margin = exp(log(.5) / n)\n        DO x = 1, 10 * LOOPCOUNT\n          DO y = 1, 16\n            IF (randoms(y * 10 * LOOPCOUNT + y - 1) .gt. false_margin) THEN\n              temp = 1\n              DO z = 1, y\n                temp = temp * 2\n              END DO\n              a(x) = a(x) + temp\n            END IF\n          END DO\n        END DO\n\n        !$acc data copyin(a(1:10*LOOPCOUNT)) copy(b(1:10))\n          !$acc kernels loop private(temp)\n          DO x = 0, 9\n            temp = 0\n            !$acc loop vector reduction(ior:temp)\n            DO y = 1, LOOPCOUNT\n              temp = ior(temp, a(x * LOOPCOUNT + y))\n            END DO\n            b(x + 1) = temp\n          END DO\n        !$acc end data\n\n        DO x = 0, 9\n          temp = 0\n          DO y = 1, LOOPCOUNT\n            temp = ior(temp, a(x * LOOPCOUNT + y))\n          END DO\n          IF (temp .ne. b(x + 1)) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_bitxor_general.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        INTEGER,DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: randoms\n        INTEGER :: errors = 0\n        INTEGER :: b = 0\n        INTEGER :: temp = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        a = FLOOR(randoms*1000000)\n\n        !$acc data copyin(a(1:LOOPCOUNT))\n          !$acc kernels loop reduction(ieor:b)\n          DO x = 1, LOOPCOUNT\n            b = ieor(b, a(x))\n          END DO\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          temp = ieor(temp, a(x))\n        END DO\n        IF (temp .ne. b) THEN\n          errors = errors + 1\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_bitxor_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,private,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        INTEGER,DIMENSION(10*LOOPCOUNT):: a, b, b_copy !Data\n        REAL(8),DIMENSION(10*LOOPCOUNT):: randoms, randoms2\n        INTEGER,DIMENSION(10):: c\n        REAL*8 :: RAND\n        INTEGER :: errors = 0\n        INTEGER :: temp\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        a = FLOOR(randoms*1000000)\n        CALL RANDOM_NUMBER(randoms2)\n        b = FLOOR(randoms2*1000000)\n        b_copy = b\n        c = 0\n\n        !$acc data copyin(a(1:10*LOOPCOUNT)) copy(b(1:10*LOOPCOUNT), c(1:10))\n          !$acc kernels loop gang private(temp)\n          DO x = 0, 9\n            temp = 0\n            !$acc loop worker reduction(ieor:temp)\n            DO y = 1, LOOPCOUNT\n              temp = ieor(temp, a(x * LOOPCOUNT + y))\n            END DO\n            c(x + 1) = temp\n            !$acc loop worker\n            DO y = 1, LOOPCOUNT\n              b(x * LOOPCOUNT + y) = b(x * LOOPCOUNT + y) + c(x + 1)\n            END DO\n          END DO\n        !$acc end data\n\n        DO x = 0, 9\n          temp = 0\n          DO y = 1, LOOPCOUNT\n            temp = ieor(temp, a(x * LOOPCOUNT + y))\n          END DO\n          IF (temp .ne. c(x + 1)) THEN\n            errors = errors + 1\n          END IF\n          DO y = 1, LOOPCOUNT\n            IF (b(x * LOOPCOUNT + y) .ne. b_copy(x * LOOPCOUNT + y) + c(x + 1)) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_bitxor_vector_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,private,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        INTEGER,DIMENSION(10*LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(10*LOOPCOUNT):: randoms\n        INTEGER,DIMENSION(10):: b\n        INTEGER :: errors = 0\n        INTEGER :: temp\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        a = FLOOR(randoms*1000000)\n\n        !$acc data copyin(a(1:10*LOOPCOUNT)) copy(b(1:10))\n          !$acc kernels loop gang private(temp)\n          DO x = 0, 9\n            temp = 0\n            !$acc loop vector reduction(ieor:temp)\n            DO y = 1, LOOPCOUNT\n              temp = ieor(temp, a(x * LOOPCOUNT + y))\n            END DO\n            b(x + 1) = temp\n          END DO\n        !$acc end data\n\n        DO x = 0, 9\n          temp = 0\n          DO y = 1, LOOPCOUNT\n            temp = ieor(temp, a(x * LOOPCOUNT + y))\n          END DO\n          IF (temp .ne. b(x + 1)) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_max_general.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        REAL(8) :: maximum, temp\n        INTEGER :: errors = 0\n\n        !Initilization\n        maximum = 0\n        temp = 0\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n          !$acc kernels loop reduction(max:maximum)\n          DO x = 1, LOOPCOUNT\n            maximum = max(maximum, a(x) * b(x))\n          END DO\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          temp = max(temp, a(x) * b(x))\n        END DO\n        IF (abs(temp - maximum) .gt. PRECISION) THEN\n          errors = errors + 1\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_max_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,private,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(10 * LOOPCOUNT):: a, b, c !Data\n        REAL(8),DIMENSION(10):: maximum\n        REAL(8) :: temp\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc data copyin(a(1:10*LOOPCOUNT), b(1:10*LOOPCOUNT)) copy(c(1:10*LOOPCOUNT))\n          !$acc kernels loop gang private(temp)\n          DO x = 0, 9\n            temp = 0\n            !$acc loop worker reduction(max:temp)\n            DO y = 1, LOOPCOUNT\n              temp = max(temp, a(x * LOOPCOUNT + y) * b(x * LOOPCOUNT + y))\n            END DO\n            maximum(x + 1) = temp\n            !$acc loop worker\n            DO y = 1, LOOPCOUNT\n              c(x * LOOPCOUNT + y) = (a(x * LOOPCOUNT + y) * b(x * LOOPCOUNT + y)) / maximum(x + 1)\n            END DO\n          END DO\n        !$acc end data\n\n        DO x = 0, 9\n          DO y = 1, LOOPCOUNT\n            IF (a(x * LOOPCOUNT + y) * b(x * LOOPCOUNT + y) - maximum(x + 1) .gt. PRECISION) THEN\n              errors = errors + 1\n            ELSE IF ((c(x * LOOPCOUNT + y) - 1) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_max_vector_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,private,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(10 * LOOPCOUNT):: a, b !Data\n        REAL(8),DIMENSION(10):: maximum\n        INTEGER :: errors = 0\n        REAL(8) :: temp\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        maximum = 0\n\n        !$acc data copyin(a(1:10*LOOPCOUNT), b(1:10*LOOPCOUNT)) copy(maximum(1:10))\n          !$acc kernels loop private(temp)\n          DO x = 0, 9\n            temp = 0\n            !$acc loop vector reduction(max:temp)\n            DO y = 1, LOOPCOUNT\n              temp = max(temp, a(x * LOOPCOUNT + y) * b(x * LOOPCOUNT + y))\n            END DO\n            maximum(x + 1) = temp\n          END DO\n        !$acc end data\n\n        DO x = 0, 9\n          temp = 0\n          DO y = 1, LOOPCOUNT\n            temp = max(temp, a(x * LOOPCOUNT + y) * b(x * LOOPCOUNT + y))\n          END DO\n          IF (abs(temp - maximum(x + 1)) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_min_general.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        REAL(8):: minimum = 1000\n        REAL(8):: temp = 1000\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n          !$acc kernels loop reduction(min:minimum)\n          DO x = 1, LOOPCOUNT\n            minimum = min(minimum, a(x) * b(x))\n          END DO\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          temp = min(temp, a(x) * b(x))\n        END DO\n        IF (abs(temp - minimum) .gt. PRECISION) THEN\n          errors = errors + 1\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_min_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,private,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(10 * LOOPCOUNT):: a, b, c !Data\n        REAL(8),DIMENSION(10):: minimum\n        REAL(8):: temp\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        a = a + 1\n        b = b + 1\n\n        !$acc data copyin(a(1:10*LOOPCOUNT), b(1:10*LOOPCOUNT)) copy(c(1:10*LOOPCOUNT)) copy(minimum(1:10))\n          !$acc kernels loop gang independent private(temp)\n          DO x = 0, 9\n            temp = 1000\n            !$acc loop worker independent reduction(min:temp)\n            DO y = 1, LOOPCOUNT\n              temp = min(temp, a(x * LOOPCOUNT + y) * b(x * LOOPCOUNT + y))\n            END DO\n            minimum(x + 1) = temp\n            !$acc loop independent\n            DO y = 1, LOOPCOUNT\n              c(x * LOOPCOUNT + y) = (a(x * LOOPCOUNT + y) * b(x * LOOPCOUNT + y)) / minimum(x + 1)\n            END DO\n          END DO\n        !$acc end data\n\n        DO x = 0, 9\n          temp = 1000\n          DO y = 1, LOOPCOUNT\n            temp = min(temp, a(x * LOOPCOUNT + y) * b(x * LOOPCOUNT + y))\n          END DO\n          IF (abs(temp - minimum(x + 1)) .gt. PRECISION) THEN\n            errors = errors + 1\n            WRITE(*, *) minimum(x + 1)\n          END IF\n          DO y = 1, LOOPCOUNT\n            IF (abs(c(x * LOOPCOUNT + y) - (a(x * LOOPCOUNT + y) * b(x * LOOPCOUNT + y) / temp)) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_min_vector_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,private,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y!Iterators\n        REAL(8),DIMENSION(10*LOOPCOUNT):: a, b !Data\n        REAL(8),DIMENSION(10):: minimum\n        REAL(8):: temp = 1000\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n\n        !$acc data copyin(a(1:10*LOOPCOUNT), b(1:10*LOOPCOUNT)) copy(minimum(1:10))\n          !$acc kernels loop gang private(temp)\n          DO x = 0, 9\n            temp = 1000\n            !$acc loop vector reduction(min:temp)\n            DO y = 1, LOOPCOUNT\n              temp = min(temp, a(x * LOOPCOUNT + y) * b(x * LOOPCOUNT + y))\n            END DO\n            minimum(x + 1) = temp\n          END DO\n        !$acc end data\n\n        DO x = 0, 9\n          temp = 1000\n          DO y = 1, LOOPCOUNT\n            temp = min(temp, a(x * LOOPCOUNT + y) * b(x * LOOPCOUNT + y))\n          END DO\n          IF (abs(temp - minimum(x + 1)) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_multiply_general.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        INTEGER :: errors = 0\n        REAL(8) :: temp = 1\n        REAL(8) :: multiplied_total = 1\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        a = (999.4 + a)/1000\n        b = (999.4 + b)/1000\n\n        !$acc data copyin(a(1:LOOPCOUNT))\n          !$acc kernels loop reduction(*:multiplied_total)\n          DO x = 1, LOOPCOUNT\n            multiplied_total = multiplied_total * (a(x) + b(x))\n          END DO\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          temp = temp * (a(x) + b(x))\n        END DO\n        IF (abs(temp - multiplied_total) .gt. ((temp / 2) + (multiplied_total / 2)) * PRECISION) THEN\n          WRITE(*, *) temp\n          WRITE(*, *) multiplied_total\n          errors = errors + 1\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_multiply_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,private,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(10*LOOPCOUNT):: a, b, c !Data\n        REAL(8),DIMENSION(10):: totals\n        REAL(8) :: temp\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        a = (999.4 + a) / 2000\n        b = (999.4 + b) / 2000\n\n        !$acc data copyin(a(1:10*LOOPCOUNT), b(1:10*LOOPCOUNT)) copy(c(1:10*LOOPCOUNT), totals(1:10))\n          !$acc kernels loop gang private(temp)\n          DO x = 0, 9\n            temp = 1\n            !$acc loop worker reduction(*:temp)\n            DO y = 1, LOOPCOUNT\n              temp = temp * (a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y))\n            END DO\n            totals(x + 1) = temp\n            !$acc loop worker\n            DO y = 1, LOOPCOUNT\n              c(x * LOOPCOUNT + y) = (a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y)) / totals(x + 1)\n            END DO\n          END DO\n        !$acc end data\n\n        DO x = 0, 9\n          temp = 1\n          DO y = 1, LOOPCOUNT\n            temp = temp * (a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y))\n          END DO\n          IF (abs(temp - totals(x + 1)) .gt. ((temp / 2) + (totals(x + 1) / 2)) * PRECISION) THEN\n            errors = errors + 1\n            WRITE(*, *) temp\n            WRITE(*, *) totals(x + 1)\n            WRITE(*, *) \" \"\n          END IF\n          DO y = 1, LOOPCOUNT\n            IF (abs(c(x * LOOPCOUNT + y) - ((a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y)) / totals(x + 1))) .gt. c(x * LOOPCOUNT + y) * PRECISION) THEN\n              errors = errors + 1\n              WRITE(*, *) c(x * LOOPCOUNT + y)\n              WRITE(*, *) a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y)\n              WRITE(*, *) \" \"\n            END IF\n          END DO\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_multiply_vector_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,private,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(10 * LOOPCOUNT):: a, b !Data\n        REAL(8),DIMENSION(10) :: c\n        REAL(8) :: temp\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        a = (999.4 + a) / 1000\n        b = (999.4 + b) / 1000\n\n        !$acc data copyin(a(1:10*LOOPCOUNT), b(1:10*LOOPCOUNT)) copyout(c(1:10))\n          !$acc parallel loop private(temp)\n          DO x = 0, 9\n            temp = 1\n            !$acc loop vector reduction(*:temp)\n            DO y = 1, LOOPCOUNT\n              temp = temp * (a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y))\n            END DO\n            c(x + 1) = temp\n          END DO\n        !$acc end data\n\n        DO x = 0, 9\n          temp = 1\n          DO y = 1, LOOPCOUNT\n            temp = temp * (a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y))\n          END DO\n          IF (abs(temp - c(x + 1)) .gt. ((temp / 2) + (c(x + 1) / 2)) * PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_or_general.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        LOGICAL,DIMENSION(LOOPCOUNT):: a !Data\n        LOGICAL :: results = .FALSE.\n        LOGICAL :: temp = .FALSE.\n        REAL(8) :: false_margin = exp(log(.5) / n)\n        REAL(8),DIMENSION(LOOPCOUNT):: random\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(random)\n        DO x = 1, LOOPCOUNT\n          IF (random(x) > false_margin) THEN\n            a(x) = .TRUE.\n          ELSE\n            a(x) = .FALSE.\n          END IF\n        END DO\n\n        !$acc data copyin(a(1:LOOPCOUNT))\n          !$acc kernels loop reduction(.OR.:results)\n          DO x = 1, LOOPCOUNT\n            results = results .OR. a(x)\n          END DO\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          temp = temp .OR. a(x)\n        END DO\n        IF (temp .neqv. results) THEN\n          errors = errors + 1\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_or_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,private,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        LOGICAL,DIMENSION(10*LOOPCOUNT):: a, a_copy !Data\n        LOGICAL,DIMENSION(10) :: results\n        LOGICAL :: temp = .FALSE.\n        REAL(8),DIMENSION(10 * LOOPCOUNT) :: random\n        REAL(8) :: false_margin = exp(log(.5) / n)\n        INTEGER :: errors = 0\n\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(random)\n\n        !Initilization\n        DO x = 1, 10 * LOOPCOUNT\n          IF (random(x) .gt. false_margin) THEN\n            a(x) = .TRUE.\n          ELSE\n            a(x) = .FALSE.\n          END IF\n          a_copy(x) = a(x)\n        END DO\n\n        DO x = 1, 10\n          results(x) = .FALSE.\n        END DO\n\n        !$acc data copy(a(1:10*LOOPCOUNT), results(1:10))\n          !$acc kernels loop gang private(temp)\n          DO x = 0, 9\n            temp = .FALSE.\n            !$acc loop worker reduction(.OR.:temp)\n            DO y = 1, LOOPCOUNT\n              temp = temp .OR. a(x * LOOPCOUNT + y)\n            END DO\n            results(x + 1) = temp\n            !$acc loop worker\n            DO y = 1, LOOPCOUNT\n              IF (results(x + 1) .eqv. .TRUE.) THEN\n                IF(a(x * LOOPCOUNT + y) .eqv. .TRUE.) THEN\n                  a(x * LOOPCOUNT + y) = .FALSE.\n                ELSE\n                  a(x * LOOPCOUNT + y) = .TRUE.\n                END IF\n              END IF\n            END DO\n          END DO\n        !$acc end data\n\n        DO x = 0, 9\n          temp = .FALSE.\n          DO y = 1, LOOPCOUNT\n            temp = temp .OR. a_copy(x * LOOPCOUNT + y)\n          END DO\n          IF (temp .neqv. results(x + 1)) THEN\n            errors = errors + 1\n          END IF\n          DO y = 1, LOOPCOUNT\n            IF (temp .eqv. .FALSE.) THEN\n              IF (a(x * LOOPCOUNT + y) .neqv. a_copy(x * LOOPCOUNT + y)) THEN\n                errors = errors + 1\n              END IF\n            ELSE\n              IF (a(x * LOOPCOUNT + y) .eqv. a_copy(x * LOOPCOUNT + y)) THEN\n                errors = errors + 1\n              END IF\n            END IF\n          END DO\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_or_vector_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,private,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        LOGICAL,DIMENSION(10*LOOPCOUNT):: a !Data\n        LOGICAL,DIMENSION(10) :: b\n        LOGICAL :: temp\n        REAL(8),DIMENSION(10*LOOPCOUNT):: randoms\n        REAL(8) :: false_margin = exp(log(.5) / 2)\n        INTEGER :: errors = 0\n\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n\n        !Initilization\n        DO x = 1, 10 * LOOPCOUNT\n          IF (randoms(x) > false_margin) THEN\n            a(x) = .TRUE.\n          ELSE\n            a(x) = .FALSE.\n          END IF\n        END DO\n\n        !$acc data copyin(a(1:10*LOOPCOUNT)), copy(b(1:10))\n          !$acc kernels loop private(temp)\n          DO x = 0, 9\n            temp = .FALSE.\n            !$acc loop vector reduction(.OR.:temp)\n            DO y = 1, LOOPCOUNT\n              temp = temp .OR. a(x * LOOPCOUNT + y)\n            END DO\n            b(x + 1) = temp\n          END DO\n        !$acc end data\n\n        DO x = 0, 9\n          temp = .FALSE.\n          DO y = 1, LOOPCOUNT\n            temp = temp .OR. a(x * LOOPCOUNT + y)\n          END DO\n          IF (temp .neqv. b(x + 1)) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_seq.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        b = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(b(1:LOOPCOUNT))\n          !$acc kernels loop seq\n          DO x = 2, LOOPCOUNT\n            b(x) = b(x - 1) + a(x)\n          END DO\n        !$acc end data\n\n        DO x = 2, LOOPCOUNT\n          IF (abs(b(x) - (b(x - 1) + a(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_tile.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,reduction,combined-constructs,loop,tile,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y, z !Iterators\n        REAL(8),DIMENSION(SMALL_LOOPCOUNT):: a, b, c !Data\n        REAL(8),DIMENSION(SMALL_LOOPCOUNT,SMALL_LOOPCOUNT)::d\n        REAL(8) :: temp\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        CALL RANDOM_NUMBER(c)\n\n        !$acc data copyin(a(1:SMALL_LOOPCOUNT), b(1:SMALL_LOOPCOUNT), c(1:SMALL_LOOPCOUNT)) copyout(d(1:SMALL_LOOPCOUNT,1:SMALL_LOOPCOUNT))\n          !$acc kernels loop tile(*, *) reduction(+:temp)\n          DO x = 1, SMALL_LOOPCOUNT\n            DO y = 1, SMALL_LOOPCOUNT\n              temp = 0\n              DO z = 1, SMALL_LOOPCOUNT\n                temp = temp + a(z) + b(z) + c(z)\n              END DO\n              d(x,y) = temp\n            END DO\n          END DO\n        !$acc end data\n\n        DO x = 1, SMALL_LOOPCOUNT\n          DO y = 1, SMALL_LOOPCOUNT\n            temp = 0\n            DO z = 1, SMALL_LOOPCOUNT\n              temp = temp + a(z) + b(z) + c(z)\n            END DO\n            IF (abs(d(x,y) - temp) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "reduction",
                            "combined-constructs",
                            "loop",
                            "tile"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_vector_blocking.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        REAL(8) :: multiplier\n        INTEGER :: errors = 0\n\n        multiplier = 1\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n          !$acc kernels\n            !$acc loop vector\n            DO x = 1, LOOPCOUNT\n              c(x) = (a(x) + b(x)) * multiplier\n            END DO\n            multiplier = multiplier + 1\n            !$acc loop vector\n            DO x = 1, LOOPCOUNT\n              c(x) = c(x) + ((a(x) + b(x)) * multiplier)\n            END DO\n          !$acc end kernels\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (3 * (a(x) + b(x)))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_worker_blocking.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        REAL(8) :: RAND\n        REAL(8) :: multiplier\n        INTEGER :: errors = 0\n\n        multiplier = 1\n\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n          !$acc kernels\n            !$acc loop worker\n            DO x = 1, LOOPCOUNT\n              c(x) = (a(x) + b(x)) * multiplier\n            END DO\n            multiplier = multiplier + 1\n            !$acc loop worker\n            DO x = 1, LOOPCOUNT\n              c(x) = c(x) + (a(x) + b(x)) * multiplier\n            END DO\n          !$acc end kernels\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (3 * (a(x) + b(x)))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_num_gangs.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,reduction,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        INTEGER :: results !Data\n        INTEGER :: errors = 0\n\n        results = 0\n\n        !$acc kernels num_gangs(8)\n          !$acc loop gang reduction(+:results)\n          DO x = 1, LOOPCOUNT\n            results = 1\n          END DO\n        !$acc end kernels\n          \n        IF (results .ne. 8) THEN\n          errors = errors + 1\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "reduction"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_num_workers.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        b = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT))\n          !$acc kernels loop num_workers(16)\n          DO x = 1, LOOPCOUNT\n            b(x) = a(x)\n          END DO\n          !$acc end kernels\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(a(x) - b(x)) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_present.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        b = 0\n\n        !$acc enter data copyin(a(1:LOOPCOUNT)) create(b(1:LOOPCOUNT))\n        !$acc kernels present(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n          !$acc loop\n          DO x = 1, LOOPCOUNT\n            b(x) = a(x)\n          END DO\n        !$acc end kernels\n        !$acc exit data delete(a(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(a(x) - b(x)) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_scalar_default_copy.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        INTEGER :: errors = 0\n        REAL(8) :: total = 0.0\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n\n        DO x = 1, LOOPCOUNT\n          total = total + a(x)\n        END DO\n        !$acc data copyin(b(1:LOOPCOUNT))\n          !$acc kernels num_gangs(1) vector_length(1)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              total = total + b(x)\n            END DO\n          !$acc end kernels\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          total = total - (a(x) + b(x))\n        END DO\n        IF (abs(total) .gt. (2 * LOOPCOUNT - 2) * PRECISION) THEN\n          errors = errors + 1\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_vector_length.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        b = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT))\n          !$acc kernels vector_length(16)\n            !$acc loop vector\n            DO x = 1, LOOPCOUNT\n              b(x) = a(x)\n            END DO\n          !$acc end kernels\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(a(x) - b(x)) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_wait.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:async,kernels,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT)) async(1)\n        !$acc kernels wait(1)\n          !$acc loop\n          DO x = 1, LOOPCOUNT\n            c(x) = a(x) + b(x)\n          END DO\n        !$acc end kernels\n        !$acc exit data copyout(c(1:LOOPCOUNT)) delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "async",
                            "kernels"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "loop_collapse.F90": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(10*LOOPCOUNT):: a, b, c !Data\n        REAL(8):: total\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        DO x = 0, 9\n          c(x*LOOPCOUNT + 1) = a(x*LOOPCOUNT + 1) + b(x*LOOPCOUNT + 1)\n        END DO\n\n        !$acc data copyin(a(1:10*LOOPCOUNT), b(1:10*LOOPCOUNT)) copy(c(1:10*LOOPCOUNT))\n          !$acc parallel\n            !$acc loop independent\n            DO x = 0, 9\n              DO y = 2, LOOPCOUNT\n                c(x*LOOPCOUNT + y) = c(x*LOOPCOUNT + y - 1) + a(x*LOOPCOUNT + y) + b(x*LOOPCOUNT + y)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 0, 9\n          total = 0\n          DO y = 1, LOOPCOUNT\n            total = total + a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y)\n            IF (abs(total - c(x * LOOPCOUNT + y)) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:construct-independent,loop,V:1.0-2.7\n      LOGICAL FUNCTION test2()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(10*LOOPCOUNT):: a, b, c !Data\n        REAL(8):: total\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc data copyin(a(1:10*LOOPCOUNT), b(1:10*LOOPCOUNT)) copyout(c(1:10*LOOPCOUNT))\n          !$acc parallel\n            !$acc loop independent collapse(2)\n            DO x = 0, 9\n              DO y = 1, LOOPCOUNT\n                c(x*LOOPCOUNT + y) = a(x*LOOPCOUNT + y) + b(x*LOOPCOUNT + y)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 0, 9\n          DO y = 1, LOOPCOUNT\n            IF (abs(c(x*LOOPCOUNT+y) - (a(x*LOOPCOUNT+y)+b(x*LOOPCOUNT+y))) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "loop_no_collapse.F90": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(10 * LOOPCOUNT):: a, b, c !Data\n        REAL(8):: total\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        DO x = 0, 9\n          c(x * LOOPCOUNT + 1) = a(x * LOOPCOUNT + 1) + b(x * LOOPCOUNT + 1)\n        END DO\n\n        !$acc data copyin(a(1:10*LOOPCOUNT), b(1:10*LOOPCOUNT)) copy(c(1:10*LOOPCOUNT))\n          !$acc parallel\n            !$acc loop independent\n            DO x = 0, 9\n              DO y = 2, LOOPCOUNT\n                c(x * LOOPCOUNT + y) = c(x * LOOPCOUNT + y - 1) + a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 0, 9\n          total = 0\n          DO y = 1, LOOPCOUNT\n            total = total + a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y)\n            IF (abs(total - c(x * LOOPCOUNT + y)) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:construct-independent,loop,V:1.0-2.7\n      LOGICAL FUNCTION test2()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(10 * LOOPCOUNT):: a, b, c !Data\n        REAL(8):: total\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        DO x = 0, 9\n          c(x * LOOPCOUNT + 1) = a(x * LOOPCOUNT + 1) + b(x * LOOPCOUNT + 1)\n        END DO\n\n        !$acc data copyin(a(1:10*LOOPCOUNT), b(1:10*LOOPCOUNT)) copy(c(1:10*LOOPCOUNT))\n          !$acc kernels\n            !$acc loop independent\n            DO x = 0, 9\n              DO y = 2, LOOPCOUNT\n                c(x * LOOPCOUNT + y) = c(x * LOOPCOUNT + y - 1) + a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y)\n              END DO\n            END DO\n          !$acc end kernels\n        !$acc end data\n\n        DO x = 0, 9\n          total = 0\n          DO y = 1, LOOPCOUNT\n            total = total + a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y)\n            IF (abs(total - c(x * LOOPCOUNT + y)) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, i_a, i_b, i_c, i_d, i_e, i_f, i_g, i_h, i_i, i_j !Iterators\n        INTEGER, PARAMETER :: PRIVATE_LOOPCOUNT = 1024\n        REAL(8),DIMENSION(PRIVATE_LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors\n        errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc data copyin(a(1:PRIVATE_LOOPCOUNT), b(1:PRIVATE_LOOPCOUNT)) copy(c(1:PRIVATE_LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO i_a = 0, 1\n              !$acc loop\n              DO i_b = 0, 1\n                !$acc loop\n                DO i_c = 0, 1\n                  !$acc loop\n                  DO i_d = 0, 1\n                    !$acc loop\n                    DO i_e = 0, 1\n                      !$acc loop\n                      DO i_f = 0, 1\n                        !$acc loop\n                        DO i_g = 0, 1\n                          !$acc loop\n                          DO i_h = 0, 1\n                            !$acc loop\n                            DO i_i = 0, 1\n                              !$acc loop\n                              DO i_j = 0, 1\n                                c(i_a*512 + i_b*256 + i_c*128 + i_d*64 + i_e*32 + i_f*16 + i_g*8 + i_h*4 + i_i*2 + i_j + 1) = &\n                                a(i_a*512 + i_b*256 + i_c*128 + i_d*64 + i_e*32 + i_f*16 + i_g*8 + i_h*4 + i_i*2 + i_j + 1) + &\n                                b(i_a*512 + i_b*256 + i_c*128 + i_d*64 + i_e*32 + i_f*16 + i_g*8 + i_h*4 + i_i*2 + i_j + 1)\n                              END DO\n                            END DO\n                          END DO\n                        END DO\n                      END DO\n                    END DO\n                  END DO\n                END DO\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, PRIVATE_LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_async.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:async,parallel,update,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y, z !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, d, e, f, g !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        CALL RANDOM_NUMBER(d)\n        CALL RANDOM_NUMBER(e)\n        f = 0\n        g = 0\n        \n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), d(1:LOOPCOUNT), e(1:LOOPCOUNT), c(1:LOOPCOUNT), f(1:LOOPCOUNT), g(1:LOOPCOUNT))\n          !$acc parallel async(1)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n          !$acc parallel async(2)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              f(x) = d(x) + e(x)\n            END DO\n          !$acc end parallel\n          !$acc update host(c(1:LOOPCOUNT)) wait(1) async(4)\n          !$acc update host(f(1:LOOPCOUNT)) wait(2) async(5)\n          !$acc parallel wait(1, 2) async(3)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              g(x) = c(x) + f(x)\n            END DO\n          !$acc end parallel\n          !$acc update host(g(1:LOOPCOUNT)) async(3)\n        !$acc end data\n        !$acc wait\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          ELSE IF (abs(f(x) - (d(x) + e(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          ELSE IF (abs(g(x) - (f(x) + c(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "async",
                            "parallel",
                            "update"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_copy.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, a_host !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        a_host = a\n\n        !$acc parallel copy(a(1:LOOPCOUNT))\n          !$acc loop\n          DO x = 1, LOOPCOUNT\n            a(x) = 2 * a(x)\n          END DO \n        !$acc end parallel\n    \n\n        DO x = 1, LOOPCOUNT\n          IF (abs(a_host(x) - (a(x) / 2)) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_copyin.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, a_copy, b !Data\n        INTEGER :: errors = 0\n        INTEGER,DIMENSION(1):: hasDevice\n        hasDevice(1) = 1\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        a_copy = a\n        b = 0\n\n        !$acc enter data copyin(hasDevice(1:1))\n        !$acc parallel present(hasDevice(1:1))\n          hasDevice(1) = 0\n        !$acc end parallel\n\n\n        !$acc parallel copyin(a(1:LOOPCOUNT))\n          !$acc loop\n          DO x = 1, LOOPCOUNT\n            a(x) = 0.0\n          END DO\n\n        !$acc end parallel\n\n        DO x = 1, LOOPCOUNT\n          IF ((abs(a(x) - a_copy(x)) > PRECISION .AND. hasDevice(1) .eq. 1) .OR. (hasDevice(1) .eq. 0 .AND. abs(a(x)) > PRECISION)) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_copyout.F90": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        INTEGER :: errors = 0\n        INTEGER,DIMENSION(1):: hasDevice\n        hasDevice(1) = 1\n        !$acc enter data copyin(hasDevice(1:1))\n        !$acc parallel present(hasDevice(1:1))\n          hasDevice(1) = 0\n        !$acc end parallel\n\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        b = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT))\n          !$acc parallel copyout(b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              b(x) = a(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(a(x) - b(x)) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:parallel,V:2.0-2.7\n      LOGICAL FUNCTION test2()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        INTEGER :: errors = 0\n        INTEGER,DIMENSION(1):: hasDevice\n        hasDevice(1) = 1\n        !$acc enter data copyin(hasDevice(1:1))\n        !$acc parallel present(hasDevice(1:1))\n          hasDevice(1) = 0\n        !$acc end parallel\n\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        b = a\n        IF (hasDevice(1) .eq. 1) THEN\n          !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            !$acc parallel copyout(b(1:LOOPCOUNT))\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                b(x) = b(x) - a(x)\n              END DO\n            !$acc end parallel\n          !$acc end data\n\n          DO x = 1, LOOPCOUNT\n            IF (abs(a(x) - b(x)) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n!T3:parallel,update,V:2.0-2.7\n      LOGICAL FUNCTION test3()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        INTEGER :: errors = 0\n        INTEGER,DIMENSION(1):: hasDevice\n        hasDevice(1) = 1\n        !$acc enter data copyin(hasDevice(1:1))\n        !$acc parallel present(hasDevice(1:1))\n          hasDevice(1) = 0\n        !$acc end parallel\n\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        b = a\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n          !$acc parallel copyout(b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              b(x) = b(x) - a(x)\n            END DO\n          !$acc end parallel\n          !$acc update host(b(1:LOOPCOUNT))\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(b(x)) > 2 * PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test3 = .FALSE.\n        ELSE\n          test3 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T3\n        LOGICAL :: test3\n#endif\n#ifndef T3\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test3()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 2\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "update"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_create.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        b = 0\n        c = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(c(1:LOOPCOUNT))\n          !$acc parallel create(b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              b(x) = a(x)\n            END DO\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          IF (abs(a(x) - c(x)) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_default_copy.F90": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:devonly,parallel,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n        LOGICAL,DIMENSION(1):: devtest\n        devtest(1) = .TRUE.\n\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel\n          devtest(1) = .FALSE.\n        !$acc end parallel\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = c(x) + a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "parallel"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:devonly,parallel,V:2.0-2.7\n      LOGICAL FUNCTION test2()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n        LOGICAL,DIMENSION(1):: devtest\n        devtest(1) = .TRUE.\n\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel\n          devtest(1) = .FALSE.\n        !$acc end parallel\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        IF (devtest(1)) THEN\n          CALL RANDOM_NUMBER(a)\n          CALL RANDOM_NUMBER(b)\n          c = 1\n\n          !$acc enter data copyin(c(1:LOOPCOUNT))\n          c = 0\n          !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            !$acc parallel\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                c(x) = c(x) + a(x) + b(x)\n              END DO\n            !$acc end parallel\n          !$acc end data\n          DO x = 1, LOOPCOUNT\n            IF (abs(c(x)) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n          !$acc exit data copyout(c(1:LOOPCOUNT))\n          DO x = 1, LOOPCOUNT\n            IF (abs(c(x) - (a(x) + b(x) + 1)) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "parallel"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_default_present.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,default,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a !Data\n        INTEGER :: errors = 0\n\n        a = 0\n\n        !$acc data copy(a(1:LOOPCOUNT))\n          !$acc parallel default(present)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              a(x) = 1.0\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(a(x) - 1) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "default"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_firstprivate.F90": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,firstprivate,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(10 * LOOPCOUNT):: a, b, d !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: c, c_copy\n        REAL*8 :: RAND\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        CALL RANDOM_NUMBER(c)\n        c_copy = c\n        d = 0\n        \n        !$acc data copyin(a(1:10*LOOPCOUNT), b(1:10*LOOPCOUNT)) copy(d(1:10*LOOPCOUNT))\n          !$acc parallel firstprivate(c(1:LOOPCOUNT))\n            !$acc loop gang\n            DO x = 0, 9\n              !$acc loop worker\n              DO y = 1, LOOPCOUNT\n                d(x * LOOPCOUNT + y) = a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y) + c(y)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 0, 9\n          DO y = 1, LOOPCOUNT\n            IF (abs(d(x * LOOPCOUNT + y) - (a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y) + c(y))) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "firstprivate"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:parallel,firstprivate,V:1.0-2.7\n      LOGICAL FUNCTION test2()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(10 * LOOPCOUNT):: a, b, d !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: c, c_copy\n        REAL*8 :: RAND\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        d = 0\n        \n        !$acc data copyin(a(1:10*LOOPCOUNT), b(1:10*LOOPCOUNT)) copy(d(1:10*LOOPCOUNT))\n          !$acc parallel firstprivate(c(1:LOOPCOUNT))\n            !$acc loop gang independent\n            DO x = 0, 9\n              !$acc loop worker independent\n              DO y = 1, LOOPCOUNT\n                c(y) = a(x * LOOPCOUNT + y) - b(x * LOOPCOUNT + y)\n              END DO\n              !$acc loop worker independent\n              DO y = 1, LOOPCOUNT\n                d(x * LOOPCOUNT + y) = a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y) + c(y)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, 10 * LOOPCOUNT\n          IF (abs(d(x) - (2 * a(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO       \n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "firstprivate"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_if.F90": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:devonly,parallel,if,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n        LOGICAL :: host = .FALSE.\n        LOGICAL :: device = .TRUE.\n        INTEGER,DIMENSION(1) :: dev_test\n        dev_test(1) = 0\n\n        !$acc enter data copyin(dev_test(1:1))\n        !$acc parallel present(dev_test(1:1))\n          dev_test(1) = 1\n        !$acc end parallel\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc parallel if(host)\n          !$acc loop\n          DO x = 1, LOOPCOUNT\n            c(x) = a(x) + b(x)\n          END DO\n        !$acc end parallel\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "parallel",
                            "if"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:devonly,parallel,if,V:2.0-2.7\n      LOGICAL FUNCTION test2()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n        LOGICAL :: host = .FALSE.\n        LOGICAL :: device = .TRUE.\n        INTEGER,DIMENSION(1) :: dev_test\n        dev_test(1) = 0\n\n        !$acc enter data copyin(dev_test(1:1))\n        !$acc parallel present(dev_test(1:1))\n          dev_test(1) = 1\n        !$acc end parallel\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        IF (dev_test(1) .eq. 0) THEN\n          CALL RANDOM_NUMBER(a)\n          CALL RANDOM_NUMBER(b)\n          c = a + b\n\n          !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n          !$acc parallel if(host) present(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = c(x) + a(x) + b(x)\n            END DO\n          !$acc end parallel\n          !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n\n          DO x = 1, LOOPCOUNT\n            IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "parallel",
                            "if"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n!T3:devonly,parallel,if,V:2.0-2.7\n      LOGICAL FUNCTION test3()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n        LOGICAL :: host = .FALSE.\n        LOGICAL :: device = .TRUE.\n        INTEGER,DIMENSION(1) :: dev_test\n        dev_test(1) = 0\n\n        !$acc enter data copyin(dev_test(1:1))\n        !$acc parallel present(dev_test(1:1))\n          dev_test(1) = 1\n        !$acc end parallel\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = a + b\n        !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n        !$acc parallel if(device) present(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n          !$acc loop\n          DO x = 1, LOOPCOUNT\n            c(x) = c(x) + a(x) + b(x)\n          END DO\n        !$acc end parallel\n        !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT)), copyout(c(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (2 * (a(x) + b(x)))) .gt. 2 * PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test3 = .FALSE.\n        ELSE\n          test3 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T3\n        LOGICAL :: test3\n#endif\n#ifndef T3\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test3()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 2\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "parallel",
                            "if"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop.F90": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        a = 0\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        !$acc data copy(a(1:LOOPCOUNT))\n          !$acc parallel loop\n          DO x = 1, LOOPCOUNT\n            a(x) = 1\n          END DO\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(a(x) - 1) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:parallel,loop,V:1.0-2.7\n      LOGICAL FUNCTION test2()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        a = 0\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(b)\n        CALL RANDOM_NUMBER(c)\n\n        !$acc data copy(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              a(x) = b(x)\n            END DO\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              a(x) = a(x) + c(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(a(x) - (b(x) + c(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_async.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:async,parallel,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(10 * LOOPCOUNT):: a, b, c, d !Data\n\t\t\t\tINTEGER,DIMENSION(10):: errors_array\n        INTEGER :: errors\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        d = a + b\n\t\t\t\terrors = 0\n\n        !$acc data copyin(a(1:10*LOOPCOUNT), b(1:10*LOOPCOUNT), c(1:10*LOOPCOUNT), d(1:10*LOOPCOUNT)) copy(errors_array(1:10))\n          DO x = 0, 9\n            !$acc parallel loop async(x)\n            DO y = 1, LOOPCOUNT\n              c(x * LOOPCOUNT + y) = a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y)\n            END DO\n            !$acc parallel loop async(x) reduction(+:errors_array(x))\n            DO y = 1, LOOPCOUNT\n              IF (c(x * LOOPCOUNT + y) - d(x * LOOPCOUNT + y) .gt.  PRECISION .OR. &\n                d(x * LOOPCOUNT + y) - c(x * LOOPCOUNT + y) .gt. PRECISION) THEN\n                errors_array(x) = errors_array(x) + 1\n              END IF\n            END DO\n          END DO\n\t\t\t\t\t!$acc wait\n        !$acc end data\n\n\t\t\t\tDO x = 1, 10\n\t\t\t\t\terrors = errors + errors_array(x)\n\t\t\t\tEND DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "async",
                            "parallel",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_auto.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,combined-constructs,loop,auto,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, a_copy, b !Data\n        REAL(8) :: temp\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        a_copy = a\n        b = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT))\n          !$acc parallel loop auto\n          DO x = 1, LOOPCOUNT\n            b(x) = a(x)\n          END DO\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(a(x) - b(x)) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        !$acc data copy(a(1:LOOPCOUNT))\n          !$acc parallel loop auto\n          DO x = 2, LOOPCOUNT\n            a(x) = a(x - 1) + a(x)\n          END DO\n        !$acc end data\n\n        temp = 0\n        DO x = 1, LOOPCOUNT\n          temp = temp + a_copy(x)\n          IF (abs(temp - a(x)) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "combined-constructs",
                            "loop",
                            "auto"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_gang.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copy(c(1:LOOPCOUNT))\n          !$acc parallel loop gang\n          DO x = 1, LOOPCOUNT\n            c(x) = a(x) + b(x)\n          END DO\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_add_general.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        REAL(8) :: total\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        total = 0\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copy(total)\n          !$acc parallel loop reduction(+:total)\n          DO x = 1, LOOPCOUNT\n            total = total + a(x) + b(x)\n          END DO\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          total = total - (a(x) + b(x))\n        END DO\n        IF (abs(total) .gt. LOOPCOUNT * PRECISION) THEN\n          WRITE(*, *) total\n          errors = 1\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_add_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,private,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(10*LOOPCOUNT):: a, b, c, d !Data\n        REAL(8) :: avg\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        avg = 0\n        !$acc data copyin(a(1:10*LOOPCOUNT), b(1:10*LOOPCOUNT)) create(c(1:10*LOOPCOUNT)) copyout(d(1:10*LOOPCOUNT))\n          !$acc parallel loop gang private(avg)\n          DO x = 0, 9\n            avg = 0\n            !$acc loop worker reduction(+:avg)\n            DO y = 1, LOOPCOUNT\n              avg = avg + a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y)\n              c(x * LOOPCOUNT + y) = a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y)\n            END DO\n            avg = avg / LOOPCOUNT\n            !$acc loop worker\n            DO y = 1, LOOPCOUNT\n              d(x * LOOPCOUNT + y) = c(x * LOOPCOUNT + y) / avg\n            END DO\n          END DO\n        !$acc end data\n        DO x = 0, 9\n          avg = 0\n          DO y = 1, LOOPCOUNT\n            avg = avg + a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y)\n          END DO\n          avg = avg / LOOPCOUNT\n          DO y = 1, LOOPCOUNT\n            IF (abs(d(x * LOOPCOUNT + y) - ((a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y)) / avg)) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_add_vector_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,private,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(10*LOOPCOUNT):: a, b !Data\n        REAL(8),DIMENSION(10) :: c\n        REAL(8) :: temp\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n\n        !$acc data copyin(a(1:10*LOOPCOUNT), b(1:10*LOOPCOUNT)) copyout(c(1:10))\n          !$acc parallel loop private(temp)\n          DO x = 0, 9\n            temp = 0.0\n            !$acc loop vector reduction(+:temp)\n            DO y = 1, LOOPCOUNT\n              temp = temp + a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y)\n            END DO\n            c(x + 1) = temp\n          END DO\n        !$acc end data\n\n        DO x = 0, 9\n          temp = 0\n          DO y = 1, LOOPCOUNT\n            temp = temp + a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y)\n          END DO\n          IF (abs(temp - c(x + 1)) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_and_general.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT):: a !Data\n        LOGICAL :: results = .TRUE.\n        LOGICAL :: host_results = .TRUE.\n        REAL(8) :: false_margin\n        INTEGER :: errors = 0\n        false_margin = exp(log(.5) / LOOPCOUNT)\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          IF (randoms(x) .lt. false_margin) THEN\n            a(x) = .TRUE.\n          ELSE\n            a(x) = .FALSE.\n          END IF\n        END DO\n\n        !$acc data copyin(a(1:LOOPCOUNT))\n          !$acc parallel loop reduction(.and.:results)\n          DO x = 1, LOOPCOUNT\n            results = results .and. a(x)\n          END DO\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          host_results = host_results .and. a(x)\n        END DO\n        IF (host_results .neqv. results) THEN\n          errors = 1\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_and_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        LOGICAL,DIMENSION(10*LOOPCOUNT):: a, a_copy !Data\n        LOGICAL,DIMENSION(10) :: results, has_false\n        LOGICAL :: host_results = .TRUE.\n        LOGICAL :: temp = .TRUE.\n        REAL(8),DIMENSION(10*LOOPCOUNT):: randoms\n        REAL(8) :: false_margin = exp(log(.5) / LOOPCOUNT)\n        INTEGER :: errors = 0\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, 10\n          results(x) = .TRUE.\n          has_false(x) = .FALSE.\n        END DO\n        DO x = 1, 10*LOOPCOUNT\n          IF (randoms(x) .lt. false_margin) THEN\n            a(x) = .TRUE.\n            a_copy(x) = .TRUE.\n          ELSE\n            a(x) = .FALSE.\n            a_copy(x) = .FALSE.\n            has_false(x / LOOPCOUNT) = .TRUE.\n          END IF\n        END DO\n\n        !$acc data copy(a(1:10*LOOPCOUNT), results(1:10))\n          !$acc parallel loop gang\n          DO x = 0, 9\n            temp = .TRUE.\n            !$acc loop worker reduction(.AND.:temp)\n            DO y = 1, LOOPCOUNT\n              temp = temp .AND. a(x * LOOPCOUNT + y)\n            END DO\n            results(x + 1) = temp\n            !$acc loop worker\n            DO y = 1, LOOPCOUNT\n              IF (temp .eqv. .TRUE.) THEN\n                IF (a(x * LOOPCOUNT + y) .eqv. .TRUE.) THEN\n                  a(x * LOOPCOUNT + y) = .FALSE.\n                ELSE\n                  a(x * LOOPCOUNT + y) = .TRUE.\n                END IF\n              END IF\n            END DO\n          END DO\n        !$acc end data\n        DO x = 0, 9\n          temp = .TRUE.\n          DO y = 1, LOOPCOUNT\n            temp = temp .AND. a_copy(x * LOOPCOUNT + y)\n          END DO\n          IF (temp .neqv. results(x + 1)) THEN\n            errors = errors + 1\n          END IF\n          DO y = 1, LOOPCOUNT\n            IF (temp .eqv. .TRUE.) THEN\n              IF (a(x * LOOPCOUNT + y) .eqv. a_copy(x * LOOPCOUNT + y)) THEN\n                errors = errors + 1\n              END IF\n            ELSE\n              IF (a(x * LOOPCOUNT + y) .neqv. a_copy(x * LOOPCOUNT + y)) THEN\n                errors = errors + 1\n              END IF\n            END IF\n          END DO\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_and_vector_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,private,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        LOGICAL,DIMENSION(10*LOOPCOUNT):: a !Data\n        LOGICAL,DIMENSION(10):: b\n        LOGICAL,DIMENSION(10):: has_false\n        LOGICAL :: temp\n        REAL(8) :: false_margin\n        REAL(8),DIMENSION(10*LOOPCOUNT) :: randoms\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        false_margin = exp(log(.5) / LOOPCOUNT)\n        DO x = 1, 10\n          has_false(x) = .FALSE.\n          b(x) = .TRUE.\n        END DO\n\n        DO x = 0, 9\n          DO y = 1, LOOPCOUNT\n            IF (randoms(x * LOOPCOUNT + y) .lt. false_margin) THEN\n              a(x * LOOPCOUNT + y) = .TRUE.\n            ELSE\n              a(x * LOOPCOUNT + y) = .FALSE.\n              has_false(x + 1) = .TRUE.\n            END IF\n          END DO\n        END DO\n\n        !$acc data copyin(a(1:10*LOOPCOUNT)) copy(b(1:10))\n          !$acc parallel loop private(temp)\n          DO x = 0, 9\n            temp = .TRUE.\n            !$acc loop vector reduction(.AND.:temp)\n            DO y = 1, LOOPCOUNT\n              temp = temp .AND. a(x * LOOPCOUNT + y)\n            END DO\n            b(x + 1) = temp\n          END DO\n        !$acc end data\n\n        DO x = 0, 9\n          temp = .FALSE.\n          DO y = 1, LOOPCOUNT\n            IF (a(x * LOOPCOUNT + y) .eqv. .FALSE.) THEN\n              temp = .TRUE.\n            END IF\n          END DO\n          IF (temp .neqv. has_false(x + 1)) THEN\n            errors = 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_bitand_general.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y, z !Iterators\n        INTEGER,DIMENSION(LOOPCOUNT):: a !Data\n        INTEGER :: b\n        REAL(8),DIMENSION(16 * LOOPCOUNT):: randoms\n        REAL(8) :: false_margin\n        INTEGER :: errors = 0\n        INTEGER :: temp = 1\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        false_margin = exp(log(.5)/n)\n        DO x = 1, LOOPCOUNT\n          DO y = 0, 15\n            IF (randoms(y * LOOPCOUNT + x) .lt. false_margin) THEN\n              temp = 1\n              DO z = 0, y\n                temp = temp * 2\n              END DO\n              a(x) = a(x) + temp\n            END IF\n          END DO\n        END DO\n        \n        b = a(1)\n\n        !$acc data copyin(a(1:LOOPCOUNT))\n          !$acc parallel loop reduction(iand:b)\n          DO x = 1, LOOPCOUNT\n            b = iand(b, a(x))\n          END DO\n        !$acc end data\n \n        temp = a(1)\n        DO x = 2, LOOPCOUNT\n          temp = iand(a(x), temp)\n        END DO\n        IF (temp .ne. b) THEN\n          WRITE(*, *) temp\n          WRITE(*, *) b\n          errors = 1\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_bitand_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,private,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y, z !Iterators\n        INTEGER,DIMENSION(10*LOOPCOUNT):: a, b, b_copy !Data\n        REAL(8),DIMENSION(10*LOOPCOUNT):: randoms2\n        INTEGER,DIMENSION(10) :: c\n        REAL(8) :: false_margin\n        REAL(8),DIMENSION(160*LOOPCOUNT)::randoms\n        INTEGER :: errors = 0\n        INTEGER :: temp\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        CALL RANDOM_NUMBER(randoms2)\n        b = FLOOR(10000 * randoms2)\n        b_copy = b\n        false_margin = exp(log(.5)/LOOPCOUNT)\n        DO x = 1, 10 * LOOPCOUNT\n          DO y = 1, 16\n            IF (randoms((y - 1) * 10 * LOOPCOUNT + x) < false_margin) THEN\n              temp = 1\n              DO z = 1, y\n                temp = temp * 2\n              END DO\n              a(x) = a(x) + temp\n            END IF\n          END DO\n        END DO\n        \n        DO x = 1, 10\n         c(x) = a((x - 1) * LOOPCOUNT + x)\n        END DO\n        \n        \n\n        !$acc data copyin(a(1:10*LOOPCOUNT)) copy(b(1:10*LOOPCOUNT), c(1:10))\n          !$acc parallel loop gang private(temp)\n          DO x = 1, 10\n            temp = a((x - 1) * LOOPCOUNT + 1)\n            !$acc loop worker reduction(iand:temp)\n            DO y = 2, LOOPCOUNT\n              temp = iand(temp, a((x - 1) * LOOPCOUNT + y))\n            END DO\n            c(x) = temp\n            !$acc loop worker\n            DO y = 1, LOOPCOUNT\n              b((x - 1) * LOOPCOUNT + y) = b((x - 1) * LOOPCOUNT + y) + c(x)\n            END DO\n          END DO\n        !$acc end data\n\n       DO x = 1, 10\n         temp = a((x - 1) * LOOPCOUNT + 1)\n         DO y = 2, LOOPCOUNT\n           temp = iand(temp, a((x - 1) * LOOPCOUNT + y))\n         END DO\n         IF (temp .ne. c(x)) THEN\n           errors = errors + 1\n         END IF\n         DO y = 1, LOOPCOUNT\n           IF (b((x - 1) * LOOPCOUNT + y) .ne. b_copy((x - 1) * LOOPCOUNT + y) + temp) THEN\n             errors = errors + 1\n           END IF\n         END DO\n       END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_bitand_vector_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,private,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y, z, i !Iterators\n        INTEGER,DIMENSION(10*LOOPCOUNT):: a !Data\n        INTEGER,DIMENSION(10):: b\n        INTEGER :: c\n        REAL(8),DIMENSION(160*LOOPCOUNT):: random\n        REAL(8) :: false_margin\n        INTEGER :: errors = 0\n        INTEGER :: temp\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(random)\n        false_margin = exp(log(.5) / n)\n        DO x = 0, 9\n          DO y = 1, LOOPCOUNT\n            DO z = 1, 16\n              IF (random(x * 16 * LOOPCOUNT + (y - 1) * 16 + z - 1) < false_margin) THEN\n                temp = 1\n                DO i = 1, z\n                  temp = temp * 2\n                END DO\n                a(x * LOOPCOUNT + y) = a(x * LOOPCOUNT + y) + temp\n              END IF\n            END DO\n          END DO\n        END DO\n                \n        !$acc data copyin(a(1:10*LOOPCOUNT)), copy(b(1:10))\n          !$acc parallel loop private(c)\n          DO x = 0, 9\n            c = a(x * LOOPCOUNT + 1)\n            !$acc loop vector reduction(iand:c)\n            DO y = 1, LOOPCOUNT\n              c = iand(c, a(x * LOOPCOUNT + y))\n            END DO\n            b(x + 1) = c\n          END DO\n        !$acc end data\n\n        DO x = 0, 9\n          temp = a(x * LOOPCOUNT + 1)\n          DO y = 2, LOOPCOUNT\n            temp = iand(temp, a(x * LOOPCOUNT + y))\n          END DO\n          IF (b(x + 1) .ne. temp) THEN\n            errors = errors + 1\n          END IF\n        END DO       \n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_bitor_general.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y, z !Iterators\n        INTEGER,DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8) :: false_margin\n        REAL(8),DIMENSION(16*LOOPCOUNT):: random\n        INTEGER :: errors = 0\n        INTEGER :: temp\n        INTEGER :: b\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(random)\n        false_margin = exp(log(.5)/n)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 16\n            IF (random((y - 1) * LOOPCOUNT + x) < false_margin) THEN\n              temp = 1\n              DO z = 1, y\n                temp = temp * 2\n              END DO\n              a(x) = a(x) + temp\n            END IF\n          END DO\n        END DO\n        b = a(1)\n        !$acc data copyin(a(1:LOOPCOUNT))\n          !$acc parallel loop reduction(ior:b)\n          DO x = 2, LOOPCOUNT\n            b = ior(b, a(x))\n          END DO\n        !$acc end data\n        temp = a(1)\n        DO x = 2, LOOPCOUNT\n          temp = ior(temp, a(x))\n        END DO\n        IF (temp .ne. b) THEN\n          errors = errors + 1\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_bitor_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,private,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y, z, i !Iterators\n        INTEGER,DIMENSION(10*LOOPCOUNT):: a, b, b_copy !Data\n        REAL(8),DIMENSION(10*LOOPCOUNT):: randoms2\n        INTEGER,DIMENSION(10) :: c\n        REAL(8),DIMENSION(160*LOOPCOUNT):: randoms\n        REAL(8) :: false_margin\n        INTEGER :: errors = 0\n        INTEGER :: temp\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        CALL RANDOM_NUMBER(randoms2)\n        false_margin = exp(log(.5)/n)\n        b = FLOOR(6*randoms2)\n        b_copy = b\n        DO x = 0, 9\n          DO y = 1, LOOPCOUNT\n            DO z = 1, 16\n              IF (randoms(x * 16 * LOOPCOUNT + y * 16 + z - 1) .gt. false_margin) THEN\n                temp = 1\n                DO i = 1, z\n                  temp = temp * 2\n                END DO\n                a(x * LOOPCOUNT + y) = a(x * LOOPCOUNT + y) + temp\n              END IF\n            END DO\n          END DO\n        END DO\n\n        !$acc data copyin(a(1:10*LOOPCOUNT)) copy(b(1:10*LOOPCOUNT), c(1:10))\n          !$acc parallel loop gang private(temp)\n          DO x = 0, 9\n            temp = 0\n            !$acc loop worker reduction(ior:temp)\n            DO y = 1, LOOPCOUNT\n              temp = ior(temp, a(x * LOOPCOUNT + y))\n            END DO\n            c(x + 1) = temp\n            !$acc loop worker\n            DO y = 1, LOOPCOUNT\n              b(x * LOOPCOUNT + y) = b(x * LOOPCOUNT + y) + c(x + 1)\n            END DO\n          END DO\n        !$acc end data\n        \n        DO x = 0, 9\n          temp = 0\n          DO y = 1, LOOPCOUNT\n            temp = ior(temp, a(x * LOOPCOUNT + y))\n          END DO\n          IF (temp .ne. c(x + 1)) THEN\n            errors = errors + 1\n          END IF\n          DO y = 1, LOOPCOUNT\n            IF (b(x * LOOPCOUNT + y) .ne. b_copy(x * LOOPCOUNT + y) + c(x + 1)) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_bitor_vector_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,private,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y, z !Iterators\n        INTEGER,DIMENSION(10 * LOOPCOUNT):: a !Data\n        INTEGER,DIMENSION(10) :: b\n        REAL(8) :: false_margin\n        REAL(8),DIMENSION(160 * LOOPCOUNT) :: randoms\n        INTEGER :: errors = 0\n        INTEGER :: temp\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        false_margin = exp(log(.5) / n)\n        DO x = 1, 10 * LOOPCOUNT\n          DO y = 1, 16\n            IF (randoms(y * 10 * LOOPCOUNT + y - 1) .gt. false_margin) THEN\n              temp = 1\n              DO z = 1, y\n                temp = temp * 2\n              END DO\n              a(x) = a(x) + temp\n            END IF\n          END DO\n        END DO\n\n        !$acc data copyin(a(1:10*LOOPCOUNT)) copy(b(1:10))\n          !$acc parallel loop private(temp)\n          DO x = 0, 9\n            temp = 0\n            !$acc loop vector reduction(ior:temp)\n            DO y = 1, LOOPCOUNT\n              temp = ior(temp, a(x * LOOPCOUNT + y))\n            END DO\n            b(x + 1) = temp\n          END DO\n        !$acc end data\n\n        DO x = 0, 9\n          temp = 0\n          DO y = 1, LOOPCOUNT\n            temp = ior(temp, a(x * LOOPCOUNT + y))\n          END DO\n          IF (temp .ne. b(x + 1)) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_bitxor_general.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        INTEGER,DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: randoms\n        INTEGER :: errors = 0\n        INTEGER :: b = 0\n        INTEGER :: temp = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        a = FLOOR(randoms*1000000)\n\n        !$acc data copyin(a(1:LOOPCOUNT))\n          !$acc parallel loop reduction(ieor:b)\n          DO x = 1, LOOPCOUNT\n            b = ieor(b, a(x))\n          END DO\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          temp = ieor(temp, a(x))\n        END DO\n        IF (temp .ne. b) THEN\n          errors = errors + 1\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_bitxor_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,private,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        INTEGER,DIMENSION(10*LOOPCOUNT):: a, b, b_copy !Data\n        REAL(8),DIMENSION(10*LOOPCOUNT):: randoms, randoms2\n        INTEGER,DIMENSION(10):: c\n        REAL*8 :: RAND\n        INTEGER :: errors = 0\n        INTEGER :: temp\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        a = FLOOR(randoms*1000000)\n        CALL RANDOM_NUMBER(randoms2)\n        b = FLOOR(randoms2*1000000)\n        b_copy = b\n        c = 0\n\n        !$acc data copyin(a(1:10*LOOPCOUNT)) copy(b(1:10*LOOPCOUNT), c(1:10))\n          !$acc parallel loop gang private(temp)\n          DO x = 0, 9\n            temp = 0\n            !$acc loop worker reduction(ieor:temp)\n            DO y = 1, LOOPCOUNT\n              temp = ieor(temp, a(x * LOOPCOUNT + y))\n            END DO\n            c(x + 1) = temp\n            !$acc loop worker\n            DO y = 1, LOOPCOUNT\n              b(x * LOOPCOUNT + y) = b(x * LOOPCOUNT + y) + c(x + 1)\n            END DO\n          END DO\n        !$acc end data\n\n        DO x = 0, 9\n          temp = 0\n          DO y = 1, LOOPCOUNT\n            temp = ieor(temp, a(x * LOOPCOUNT + y))\n          END DO\n          IF (temp .ne. c(x + 1)) THEN\n            errors = errors + 1\n          END IF\n          DO y = 1, LOOPCOUNT\n            IF (b(x * LOOPCOUNT + y) .ne. b_copy(x * LOOPCOUNT + y) + c(x + 1)) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_bitxor_vector_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,private,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        INTEGER,DIMENSION(10*LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(10*LOOPCOUNT):: randoms\n        INTEGER,DIMENSION(10):: b\n        INTEGER :: errors = 0\n        INTEGER :: temp\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        a = FLOOR(randoms*1000000)\n\n        !$acc data copyin(a(1:10*LOOPCOUNT)) copy(b(1:10))\n          !$acc parallel loop gang private(temp)\n          DO x = 0, 9\n            temp = 0\n            !$acc loop vector reduction(ieor:temp)\n            DO y = 1, LOOPCOUNT\n              temp = ieor(temp, a(x * LOOPCOUNT + y))\n            END DO\n            b(x + 1) = temp\n          END DO\n        !$acc end data\n        \n        DO x = 0, 9\n          temp = 0\n          DO y = 1, LOOPCOUNT\n            temp = ieor(temp, a(x * LOOPCOUNT + y))\n          END DO\n          IF (temp .ne. b(x + 1)) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_max_general.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        REAL(8) :: maximum, temp\n        INTEGER :: errors = 0\n\n        !Initilization\n        maximum = 0\n        temp = 0\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n          !$acc parallel loop reduction(max:maximum)\n          DO x = 1, LOOPCOUNT\n            maximum = max(maximum, a(x) * b(x))\n          END DO\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          temp = max(temp, a(x) * b(x))\n        END DO\n        IF (abs(temp - maximum) .gt. PRECISION) THEN\n          errors = errors + 1\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_max_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,private,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(10 * LOOPCOUNT):: a, b, c !Data\n        REAL(8),DIMENSION(10):: maximum\n        REAL(8) :: temp\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc data copyin(a(1:10*LOOPCOUNT), b(1:10*LOOPCOUNT)) copy(c(1:10*LOOPCOUNT))\n          !$acc parallel loop gang private(temp)\n          DO x = 0, 9\n            temp = 0\n            !$acc loop worker reduction(max:temp)\n            DO y = 1, LOOPCOUNT\n              temp = max(temp, a(x * LOOPCOUNT + y) * b(x * LOOPCOUNT + y))\n            END DO\n            maximum(x + 1) = temp\n            !$acc loop worker\n            DO y = 1, LOOPCOUNT\n              c(x * LOOPCOUNT + y) = (a(x * LOOPCOUNT + y) * b(x * LOOPCOUNT + y)) / maximum(x + 1)\n            END DO\n          END DO\n        !$acc end data\n        \n        DO x = 0, 9\n          DO y = 1, LOOPCOUNT\n            IF (a(x * LOOPCOUNT + y) * b(x * LOOPCOUNT + y) - maximum(x + 1) .gt. PRECISION) THEN\n              errors = errors + 1\n            ELSE IF ((c(x * LOOPCOUNT + y) - 1) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_max_vector_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,private,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(10 * LOOPCOUNT):: a, b !Data\n        REAL(8),DIMENSION(10):: maximum\n        INTEGER :: errors = 0\n        REAL(8) :: temp\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        maximum = 0\n\n        !$acc data copyin(a(1:10*LOOPCOUNT), b(1:10*LOOPCOUNT)) copy(maximum(1:10))\n          !$acc parallel loop private(temp)\n          DO x = 0, 9\n            temp = 0\n            !$acc loop vector reduction(max:temp)\n            DO y = 1, LOOPCOUNT\n              temp = max(temp, a(x * LOOPCOUNT + y) * b(x * LOOPCOUNT + y))\n            END DO\n            maximum(x + 1) = temp\n          END DO\n        !$acc end data\n\n        DO x = 0, 9\n          temp = 0\n          DO y = 1, LOOPCOUNT\n            temp = max(temp, a(x * LOOPCOUNT + y) * b(x * LOOPCOUNT + y))\n          END DO\n          IF (abs(temp - maximum(x + 1)) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_min_general.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        REAL(8):: minimum = 1000\n        REAL(8):: temp = 1000\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n          !$acc parallel loop reduction(min:minimum)\n          DO x = 1, LOOPCOUNT\n            minimum = min(minimum, a(x) * b(x))\n          END DO\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          temp = min(temp, a(x) * b(x))\n        END DO\n        IF (abs(temp - minimum) .gt. PRECISION) THEN\n          errors = errors + 1\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_min_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,private,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(10 * LOOPCOUNT):: a, b, c !Data\n        REAL(8),DIMENSION(10):: minimum\n        REAL(8):: temp\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        a = a + 1\n        b = b + 1\n\n        !$acc data copyin(a(1:10*LOOPCOUNT), b(1:10*LOOPCOUNT)) copy(c(1:10*LOOPCOUNT)) copy(minimum(1:10))\n          !$acc parallel loop gang private(temp)\n          DO x = 0, 9\n            temp = 1000\n            !$acc loop worker reduction(min:temp)\n            DO y = 1, LOOPCOUNT\n              temp = min(temp, a(x * LOOPCOUNT + y) * b(x * LOOPCOUNT + y))\n            END DO\n            minimum(x + 1) = temp\n            !$acc loop\n            DO y = 1, LOOPCOUNT\n              c(x * LOOPCOUNT + y) = (a(x * LOOPCOUNT + y) * b(x * LOOPCOUNT + y)) / minimum(x + 1)\n            END DO\n          END DO\n        !$acc end data\n\n        DO x = 0, 9\n          temp = 1000\n          DO y = 1, LOOPCOUNT\n            temp = min(temp, a(x * LOOPCOUNT + y) * b(x * LOOPCOUNT + y))\n          END DO\n          IF (abs(temp - minimum(x + 1)) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n          DO y = 1, LOOPCOUNT\n            IF (abs(c(x * LOOPCOUNT + y) - (a(x * LOOPCOUNT + y) * b(x * LOOPCOUNT + y) / temp)) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_min_vector_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,private,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y!Iterators\n        REAL(8),DIMENSION(10*LOOPCOUNT):: a, b !Data\n        REAL(8),DIMENSION(10):: minimum\n        REAL(8):: temp = 1000\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n\n        !$acc data copyin(a(1:10*LOOPCOUNT), b(1:10*LOOPCOUNT)) copy(minimum(1:10))\n          !$acc parallel loop gang private(temp)\n          DO x = 0, 9\n            temp = 1000\n            !$acc loop vector reduction(min:temp)\n            DO y = 1, LOOPCOUNT\n              temp = min(temp, a(x * LOOPCOUNT + y) * b(x * LOOPCOUNT + y))\n            END DO\n            minimum(x + 1) = temp\n          END DO\n        !$acc end data\n        \n        DO x = 0, 9\n          temp = 1000\n          DO y = 1, LOOPCOUNT\n            temp = min(temp, a(x * LOOPCOUNT + y) * b(x * LOOPCOUNT + y))\n          END DO\n          IF (abs(temp - minimum(x + 1)) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_multiply_general.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        INTEGER :: errors = 0\n        REAL(8) :: temp = 1\n        REAL(8) :: multiplied_total = 1\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        a = (999.4 + a)/1000\n        b = (999.4 + b)/1000\n\n        !$acc data copyin(a(1:LOOPCOUNT))\n          !$acc parallel loop reduction(*:multiplied_total)\n          DO x = 1, LOOPCOUNT\n            multiplied_total = multiplied_total * (a(x) + b(x))\n          END DO\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          temp = temp * (a(x) + b(x))\n        END DO\n        IF (abs(temp - multiplied_total) .gt. ((temp / 2) + (multiplied_total / 2)) * PRECISION) THEN\n          WRITE(*, *) temp\n          WRITE(*, *) multiplied_total\n          errors = errors + 1\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_multiply_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,private,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(10*LOOPCOUNT):: a, b, c !Data\n        REAL(8),DIMENSION(10):: totals\n        REAL(8) :: temp\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        a = (999.4 + a) / 2000\n        b = (999.4 + b) / 2000\n\n        !$acc data copyin(a(1:10*LOOPCOUNT), b(1:10*LOOPCOUNT)) copy(c(1:10*LOOPCOUNT), totals(1:10))\n          !$acc parallel loop gang private(temp)\n          DO x = 0, 9\n            temp = 1\n            !$acc loop worker reduction(*:temp)\n            DO y = 1, LOOPCOUNT\n              temp = temp * (a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y))\n            END DO\n            totals(x + 1) = temp\n            !$acc loop worker\n            DO y = 1, LOOPCOUNT\n              c(x * LOOPCOUNT + y) = (a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y)) / totals(x + 1)\n            END DO\n          END DO\n        !$acc end data\n\n        DO x = 0, 9\n          temp = 1\n          DO y = 1, LOOPCOUNT\n            temp = temp * (a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y))\n          END DO\n          IF (abs(temp - totals(x + 1)) .gt. ((temp / 2) + (totals(x + 1) / 2)) * PRECISION) THEN\n            errors = errors + 1\n            WRITE(*, *) temp\n            WRITE(*, *) totals(x + 1)\n            WRITE(*, *) \" \"\n          END IF\n          DO y = 1, LOOPCOUNT \n            IF (abs(c(x * LOOPCOUNT + y) - ((a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y)) / totals(x + 1))) .gt. c(x * LOOPCOUNT + y) * PRECISION) THEN\n              errors = errors + 1\n              WRITE(*, *) c(x * LOOPCOUNT + y)\n              WRITE(*, *) a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y)\n              WRITE(*, *) \" \"\n            END IF\n          END DO\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_multiply_vector_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,private,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(10 * LOOPCOUNT):: a, b !Data\n        REAL(8),DIMENSION(10) :: c\n        REAL(8) :: temp\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        a = (999.4 + a) / 1000\n        b = (999.4 + b) / 1000\n\n        !$acc data copyin(a(1:10*LOOPCOUNT), b(1:10*LOOPCOUNT)) copyout(c(1:10))\n          !$acc parallel loop private(temp)\n          DO x = 0, 9\n            temp = 1\n            !$acc loop vector reduction(*:temp)\n            DO y = 1, LOOPCOUNT\n              temp = temp * (a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y))\n            END DO\n            c(x + 1) = temp\n          END DO\n        !$acc end data\n\n        DO x = 0, 9\n          temp = 1\n          DO y = 1, LOOPCOUNT\n            temp = temp * (a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y))\n          END DO\n          IF (abs(temp - c(x + 1)) .gt. ((temp / 2) + (c(x + 1) / 2)) * PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_or_general.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        LOGICAL,DIMENSION(LOOPCOUNT):: a !Data\n        LOGICAL :: results = .FALSE.\n        LOGICAL :: temp = .FALSE.\n        REAL(8) :: false_margin = exp(log(.5) / n)\n        REAL(8),DIMENSION(LOOPCOUNT):: random\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(random)\n        DO x = 1, LOOPCOUNT\n          IF (random(x) > false_margin) THEN\n            a(x) = .TRUE.\n          ELSE\n            a(x) = .FALSE.\n          END IF\n        END DO\n\n        !$acc data copyin(a(1:LOOPCOUNT))\n          !$acc parallel loop reduction(.OR.:results)\n          DO x = 1, LOOPCOUNT\n            results = results .OR. a(x)\n          END DO\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          temp = temp .OR. a(x)\n        END DO\n        IF (temp .neqv. results) THEN\n          errors = errors + 1\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_or_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,private,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        LOGICAL,DIMENSION(10*LOOPCOUNT):: a, a_copy !Data\n        LOGICAL,DIMENSION(10) :: results\n        LOGICAL :: temp = .FALSE.\n        REAL(8),DIMENSION(10 * LOOPCOUNT) :: random\n        REAL(8) :: false_margin = exp(log(.5) / n)\n        INTEGER :: errors = 0\n\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(random)\n\n        !Initilization\n        DO x = 1, 10 * LOOPCOUNT\n          IF (random(x) .gt. false_margin) THEN\n            a(x) = .TRUE.\n          ELSE\n            a(x) = .FALSE.\n          END IF\n          a_copy(x) = a(x)\n        END DO\n\n        DO x = 1, 10\n          results(x) = .FALSE.\n        END DO\n\n        !$acc data copy(a(1:10*LOOPCOUNT), results(1:10))\n          !$acc parallel loop gang private(temp)\n          DO x = 0, 9\n            temp = .FALSE.\n            !$acc loop worker reduction(.OR.:temp)\n            DO y = 1, LOOPCOUNT\n              temp = temp .OR. a(x * LOOPCOUNT + y)\n            END DO\n            results(x + 1) = temp\n            !$acc loop worker\n            DO y = 1, LOOPCOUNT\n              IF (results(x + 1) .eqv. .TRUE.) THEN\n                IF(a(x * LOOPCOUNT + y) .eqv. .TRUE.) THEN\n                  a(x * LOOPCOUNT + y) = .FALSE.\n                ELSE\n                  a(x * LOOPCOUNT + y) = .TRUE.\n                END IF\n              END IF\n            END DO\n          END DO\n        !$acc end data\n\n        DO x = 0, 9\n          temp = .FALSE.\n          DO y = 1, LOOPCOUNT\n            temp = temp .OR. a_copy(x * LOOPCOUNT + y)\n          END DO\n          IF (temp .neqv. results(x + 1)) THEN\n            errors = errors + 1\n          END IF\n          DO y = 1, LOOPCOUNT\n            IF (temp .eqv. .FALSE.) THEN\n              IF (a(x * LOOPCOUNT + y) .neqv. a_copy(x * LOOPCOUNT + y)) THEN\n                errors = errors + 1\n              END IF\n            ELSE\n              IF (a(x * LOOPCOUNT + y) .eqv. a_copy(x * LOOPCOUNT + y)) THEN\n                errors = errors + 1\n              END IF\n            END IF\n          END DO\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_or_vector_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,private,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        LOGICAL,DIMENSION(10*LOOPCOUNT):: a !Data\n        LOGICAL,DIMENSION(10) :: b\n        LOGICAL :: temp\n        REAL(8),DIMENSION(10*LOOPCOUNT):: randoms\n        REAL(8) :: false_margin = exp(log(.5) / 2)\n        INTEGER :: errors = 0\n\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n\n        !Initilization\n        DO x = 1, 10 * LOOPCOUNT\n          IF (randoms(x) > false_margin) THEN\n            a(x) = .TRUE.\n          ELSE\n            a(x) = .FALSE.\n          END IF\n        END DO\n\n        !$acc data copyin(a(1:10*LOOPCOUNT)), copy(b(1:10))\n          !$acc parallel loop private(temp)\n          DO x = 0, 9\n            temp = .FALSE.\n            !$acc loop vector reduction(.OR.:temp)\n            DO y = 1, LOOPCOUNT\n              temp = temp .OR. a(x * LOOPCOUNT + y)\n            END DO\n            b(x + 1) = temp\n          END DO\n        !$acc end data\n\n        DO x = 0, 9\n          temp = .FALSE.\n          DO y = 1, LOOPCOUNT\n            temp = temp .OR. a(x * LOOPCOUNT + y)\n          END DO\n          IF (temp .neqv. b(x + 1)) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_seq.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        b = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(b(1:LOOPCOUNT))\n          !$acc parallel loop seq\n          DO x = 2, LOOPCOUNT\n            b(x) = b(x - 1) + a(x)\n          END DO\n        !$acc end data\n        \n        DO x = 2, LOOPCOUNT\n          IF (abs(b(x) - (b(x - 1) + a(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_tile.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,reduction,combined-constructs,loop,tile,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y, z !Iterators\n        REAL(8),DIMENSION(SMALL_LOOPCOUNT):: a, b, c !Data\n        REAL(8),DIMENSION(SMALL_LOOPCOUNT,SMALL_LOOPCOUNT)::d\n        REAL(8) :: temp\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        CALL RANDOM_NUMBER(c)\n\n        !$acc data copyin(a(1:SMALL_LOOPCOUNT), b(1:SMALL_LOOPCOUNT), c(1:SMALL_LOOPCOUNT)) copyout(d(1:SMALL_LOOPCOUNT,1:SMALL_LOOPCOUNT))\n          !$acc parallel loop tile(*, *) reduction(+:temp)\n          DO x = 1, SMALL_LOOPCOUNT\n            DO y = 1, SMALL_LOOPCOUNT \n              temp = 0\n              DO z = 1, SMALL_LOOPCOUNT\n                temp = temp + a(z) + b(z) + c(z)\n              END DO\n              d(x,y) = temp\n            END DO\n          END DO\n        !$acc end data\n        \n        DO x = 1, SMALL_LOOPCOUNT \n          DO y = 1, SMALL_LOOPCOUNT \n            temp = 0\n            DO z = 1, SMALL_LOOPCOUNT\n              temp = temp + a(z) + b(z) + c(z) \n            END DO\n            IF (abs(d(x,y) - temp) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "reduction",
                            "combined-constructs",
                            "loop",
                            "tile"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_vector.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copy(c(1:LOOPCOUNT))\n          !$acc parallel loop vector\n          DO x = 1, LOOPCOUNT\n            c(x) = a(x) + b(x)\n          END DO\n        !$acc end data\n        \n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_vector_blocking.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        REAL(8) :: multiplyer\n        INTEGER :: errors = 0\n\n        multiplyer = 1\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop vector\n            DO x = 1, LOOPCOUNT\n              c(x) = (a(x) + b(x)) * multiplyer\n            END DO\n            multiplyer = multiplyer + 1\n            !$acc loop vector\n            DO x = 1, LOOPCOUNT\n              c(x) = c(x) + ((a(x) + b(x)) * multiplyer)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (3 * (a(x) + b(x)))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_worker.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n          !$acc parallel loop worker\n          DO x = 1, LOOPCOUNT\n            c(x) = a(x) + b(x)\n          END DO\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_worker_blocking.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        REAL(8) :: multiplyer\n        INTEGER :: errors = 0\n\n        multiplyer = 1\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop worker\n            DO x = 1, LOOPCOUNT\n              c(x) = (a(x) + b(x)) * multiplyer\n            END DO\n            multiplyer = multiplyer + 1\n            !$acc loop worker\n            DO x = 1, LOOPCOUNT\n              c(x) = c(x) + (a(x) + b(x)) * multiplyer\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (3 * (a(x) + b(x)))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_present.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n        !$acc parallel present(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copy(c(1:LOOPCOUNT))\n          !$acc loop\n          DO x = 1, LOOPCOUNT\n            c(x) = a(x) + b(x)\n          END DO\n        !$acc end parallel\n        !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_private.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,private,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(10 * LOOPCOUNT):: a, b !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: c\n        REAL(8),DIMENSION(10)::d\n        REAL(8) :: temp\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        d = 0\n\n        !$acc enter data copyin(a(1:10*LOOPCOUNT), b(1:10*LOOPCOUNT), d(1:10)) \n        !$acc parallel num_gangs(10) private(c(1:LOOPCOUNT))\n          !$acc loop gang\n          DO x = 1, 10\n            !$acc loop worker\n            DO y = 1, LOOPCOUNT\n              c(y) = a((x - 1) * LOOPCOUNT + y) + b((x - 1) * LOOPCOUNT + y)\n            END DO\n            !$acc loop seq\n            DO y = 1, LOOPCOUNT\n              d(x) = d(x) + c(y)\n            END DO\n          END DO\n        !$acc end parallel\n        !$acc exit data copyout(d(1:10)) delete(a(1:10*LOOPCOUNT), b(1:10*LOOPCOUNT))\n\n        DO x = 0, 9\n          temp = 0\n          DO y = 1, LOOPCOUNT\n            temp = temp + a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y)\n          END DO\n          IF (abs(temp - d(x + 1)) .gt. 2 * PRECISION * LOOPCOUNT) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "private"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_reduction.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,reduction,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8) :: results = 0\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        !$acc data copyin(a(1:LOOPCOUNT))\n          !$acc parallel reduction(+:results)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              results = results + a(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          results = results - a(x)\n        END DO\n        IF (abs(results) .gt. PRECISION) THEN\n          errors = errors + 1\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "reduction"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_scalar_default_firstprivate.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        REAL(8),DIMENSION(1):: random\n        INTEGER :: errors = 0\n        REAL(8) :: scalar\n        REAL(8) :: scalar_copy\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(random)\n        scalar = random(1)\n        scalar_copy = scalar\n        CALL RANDOM_NUMBER(a)\n        b = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              b(x) = a(x) + scalar\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          IF (abs(b(x) - (a(x) + scalar_copy)) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n        IF (abs(scalar_copy - scalar) .gt. PRECISION) THEN\n          errors = errors + 1\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_switch.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        INTEGER,DIMENSION(LOOPCOUNT):: a\n        REAL(8),DIMENSION(LOOPCOUNT):: b, c, randoms!Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        CALL RANDOM_NUMBER(randoms)\n        a = floor(randoms * 3)\n\n        !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n        !$acc parallel present(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n          !$acc loop\n          DO x = 1, LOOPCOUNT\n            SELECT CASE (a(x))\n              CASE (0)\n                c(x) = b(x) * b(x)\n              CASE (1)\n                c(x) = b(x) / b(x)\n              CASE (2)\n                c(x) = b(x) / 2\n            END SELECT\n          END DO\n        !$acc end parallel\n        !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          SELECT CASE (a(x))\n            CASE (0)\n              IF (abs(c(x) - (b(x) * b(x))) .gt. PRECISION) THEN\n                errors = errors + 1\n              END IF\n            CASE (1)\n              IF (abs(c(x) - (b(x) / b(x))) .gt. PRECISION) THEN\n                errors = errors + 1\n              END IF\n            CASE (2)\n              IF (abs(c(x) - (b(x) / 2)) .gt. PRECISION) THEN\n                errors = errors + 1\n              END IF\n          END SELECT\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_wait.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:async,parallel,update,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        b = a\n\n        !$acc enter data create(a(1:LOOPCOUNT))\n        !$acc update device(a(1:LOOPCOUNT)) async(1)\n        !$acc parallel present(a(1:LOOPCOUNT)) wait(1)\n          !$acc loop\n          DO x = 1, LOOPCOUNT\n            a(x) = a(x) + 1\n          END DO\n        !$acc end parallel\n        !$acc exit data copyout(a(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(a(x) - (b(x) + 1)) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "async",
                            "parallel",
                            "update"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_while_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,reduction,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(10, LOOPCOUNT):: a !Data\n        REAL(8) :: avg\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n \n        !$acc data copy(a(1:10, 1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, 10\n              avg = 0.0\n              DO WHILE (avg - 1000 .lt. PRECISION * LOOPCOUNT)\n                avg = 0.0\n                !$acc loop\n                DO y = 1, LOOPCOUNT\n                  a(x, y) = a(x, y) * 1.5\n                END DO\n                !$acc loop reduction(+:avg)\n                DO y = 1, LOOPCOUNT\n                  avg = avg + (a(x, y) / LOOPCOUNT)\n                END DO\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, 10\n          avg = 0.0\n          DO y = 1, LOOPCOUNT\n            avg = avg + (a(x, y) / LOOPCOUNT)\n          END DO\n          IF (avg < 1000 .OR. avg > 1600) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "reduction",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: x, i_a, i_b, i_c, i_d, i_e, i_f, i_g, i_h, i_i, i_j !Iterators\n  INTEGER, PARAMETER :: PRIVATE_LOOPCOUNT = 1024\n  REAL(8),DIMENSION(PRIVATE_LOOPCOUNT):: a, b, c !Data\n  INTEGER :: errors\n  errors = 0\n\n  !Initilization\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n  c = 0\n\n  !$acc data copyin(a(1:PRIVATE_LOOPCOUNT), b(1:PRIVATE_LOOPCOUNT)) copy(c(1:PRIVATE_LOOPCOUNT))\n    !$acc serial\n      !$acc loop\n      DO i_a = 0, 1\n        !$acc loop\n        DO i_b = 0, 1\n          !$acc loop\n          DO i_c = 0, 1\n            !$acc loop\n            DO i_d = 0, 1\n              !$acc loop\n              DO i_e = 0, 1\n                !$acc loop\n                DO i_f = 0, 1\n                  !$acc loop\n                  DO i_g = 0, 1\n                    !$acc loop\n                    DO i_h = 0, 1\n                      !$acc loop\n                      DO i_i = 0, 1\n                        !$acc loop\n                        DO i_j = 0, 1\n                          c(i_a*512 + i_b*256 + i_c*128 + i_d*64 + i_e*32 + i_f*16 + i_g*8 + i_h*4 + i_i*2 + i_j + 1) = &\n                          a(i_a*512 + i_b*256 + i_c*128 + i_d*64 + i_e*32 + i_f*16 + i_g*8 + i_h*4 + i_i*2 + i_j + 1) + &\n                          b(i_a*512 + i_b*256 + i_c*128 + i_d*64 + i_e*32 + i_f*16 + i_g*8 + i_h*4 + i_i*2 + i_j + 1)\n                        END DO\n                      END DO\n                    END DO\n                  END DO\n                END DO\n              END DO\n            END DO\n          END DO\n        END DO\n      END DO\n    !$acc end serial\n  !$acc end data\n\n  DO x = 1, PRIVATE_LOOPCOUNT\n    IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            ""
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_async.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:async,serial,update,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER:: errors\n  REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, d, e, f, g\n  INTEGER:: x\n\n  errors = 0\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n  c = 0\n  CALL RANDOM_NUMBER(d)\n  CALL RANDOM_NUMBER(e)\n  f = 0\n  g = 0\n\n  !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT), d(1:LOOPCOUNT), e(1:LOOPCOUNT), f(1:LOOPCOUNT), g(1:LOOPCOUNT))\n    !$acc serial async(1)\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        c(x) = a(x) + b(x)\n      END DO\n    !$acc end serial\n    !$acc serial async(2)\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        f(x) = d(x) + e(x)\n      END DO\n    !$acc end serial\n    !$acc serial wait(1, 2) async(3)\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        g(x) = c(x) + f(x)\n      END DO\n    !$acc end serial\n\n    !$acc update host(c(1:LOOPCOUNT)) async(1)\n    !$acc update host(f(1:LOOPCOUNT)) async(2)\n    !$acc update host(g(1:LOOPCOUNT)) async(3)\n\n    !$acc wait(1)\n    DO x = 1, LOOPCOUNT\n      IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n        errors = errors + 1\n      END IF\n    END DO\n\n    !$acc wait(2)\n    DO x = 1, LOOPCOUNT\n      IF (abs(f(x) - (d(x) + e(x))) .gt. PRECISION) THEN\n        errors = errors + 1\n      END IF\n    END DO\n\n    !$acc wait(3)\n    DO x = 1, LOOPCOUNT\n      IF (abs(g(x) - (a(x) + b(x) + d(x) + e(x))) .gt. 4 * PRECISION) THEN\n        errors = errors + 1\n      END IF\n    END DO\n  !$acc end data\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "async",
                            "serial",
                            "update"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_copy.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER:: errors\n  REAL(8),DIMENSION(LOOPCOUNT):: a, a_host\n  INTEGER:: x\n  errors = 0\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  a_host = a\n\n  !$acc serial copy(a(1:LOOPCOUNT))\n    !$acc loop\n    DO x = 1, N\n      a(x) = 2 * a(x)\n    END DO\n  !$acc end serial\n\n  DO x = 1, N\n    IF (abs(a(x) - (2 * a_host(x))) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_copyin.F90": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER:: errors\n  REAL(8),DIMENSION(LOOPCOUNT):: a, a_copy, b\n  INTEGER,DIMENSION(1):: hasDevice\n  INTEGER:: x\n  errors = 0\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  a_copy = a\n  b = 0\n\n  hasDevice(1) = 1\n  !$acc enter data copyin(hasDevice(1:1))\n  !$acc parallel present(hasDevice(1:1))\n    hasDevice(1) = 0\n  !$acc end parallel\n\n  !$acc serial copyin(a(1:LOOPCOUNT))\n    !$acc loop\n    DO x = 1, LOOPCOUNT\n      a(x) = 0\n    END DO\n  !$acc end serial\n\n  DO x = 1, LOOPCOUNT\n    IF (hasDevice(1) .eq. 1) THEN\n      IF (abs(a(x) - a_copy(x)) .gt. PRECISION) THEN\n        errors = errors + 1\n      END IF\n    ELSE\n      IF (abs(a(x)) .gt. PRECISION) THEN\n        errors = errors + 1\n      END IF\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:serial,V:2.6-2.7\n      LOGICAL FUNCTION test2()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER:: errors\n  REAL(8),DIMENSION(LOOPCOUNT):: a, a_copy, b\n  INTEGER,DIMENSION(1):: hasDevice\n  INTEGER:: x\n  errors = 0\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n\n  !$acc data copy(b(1:LOOPCOUNT))\n    !$acc serial copyin(a(1:LOOPCOUNT))\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        b(x) = a(x)\n      END DO\n    !$acc end serial\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    IF (abs(a(x) - b(x)) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_copyout.F90": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER:: errors\n  REAL(8),DIMENSION(LOOPCOUNT):: a, b\n  INTEGER:: x\n  INTEGER,DIMENSION(1):: hasDevice\n  errors = 0\n\n  hasDevice(1) = 1\n  !$acc enter data copyin(hasDevice(1:1))\n  !$acc parallel present(hasDevice(1:1))\n  hasDevice(1) = 0\n  !$acc end parallel\n  \n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  b = 0\n\n\n  !$acc data copyin(a(1:LOOPCOUNT))\n    !$acc serial copyout(b(1:LOOPCOUNT))\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        b(x) = a(x)\n      END DO\n    !$acc end serial\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    IF (abs(a(x) - b(x)) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:serial,V:2.6-2.7\n      LOGICAL FUNCTION test2()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER:: errors\n  REAL(8),DIMENSION(LOOPCOUNT):: a, b\n  INTEGER:: x\n  INTEGER,DIMENSION(1):: hasDevice\n  errors = 0\n\n  hasDevice(1) = 1\n  !$acc enter data copyin(hasDevice(1:1))\n  !$acc parallel present(hasDevice(1:1))\n  hasDevice(1) = 0\n  !$acc end parallel\n  \n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  IF (hasDevice(1) .eq. 1) THEN\n    !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n      !$acc serial copyout(b(1:LOOPCOUNT))\n        !$acc loop\n        DO x = 1, LOOPCOUNT\n          b(x) = b(x) - a(x)\n        END DO\n      !$acc end serial\n    !$acc end data\n\n    DO x = 1, LOOPCOUNT\n      IF (abs(a(x) - b(x)) .gt. PRECISION) THEN\n        errors = errors + 1\n      END IF\n    END DO\n  END IF\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n!T3:serial,update,V:2.6-2.7\n      LOGICAL FUNCTION test3()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER:: errors\n  REAL(8),DIMENSION(LOOPCOUNT):: a, b\n  INTEGER:: x\n  INTEGER,DIMENSION(1):: hasDevice\n  errors = 0\n\n  hasDevice(1) = 1\n  !$acc enter data copyin(hasDevice(1:1))\n  !$acc parallel present(hasDevice(1:1))\n  hasDevice(1) = 0\n  !$acc end parallel\n  \n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n    !$acc serial copyout(b(1:LOOPCOUNT))\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        b(x) = b(x) - a(x)\n      END DO\n    !$acc end serial\n    !$acc update host(b(1:LOOPCOUNT))\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    IF (abs(b(x)) .gt. 2 * PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test3 = .FALSE.\n        ELSE\n          test3 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T3\n        LOGICAL :: test3\n#endif\n#ifndef T3\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test3()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 2\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "update"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_create.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER:: errors\n  REAL(8),DIMENSION(LOOPCOUNT):: a, b, c\n  INTEGER:: x\n  errors = 0\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  b = 0\n  c = 0\n\n  !$acc data copyin(a(1:LOOPCOUNT)) copy(c(1:LOOPCOUNT))\n    !$acc serial create(b(1:LOOPCOUNT))\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        b(x) = a(x)\n      END DO\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        c(x) = b(x)\n      END DO\n    !$acc end serial\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    IF (abs(a(x) - c(x)) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_default_copy.F90": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:devonly,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER:: errors\n  REAL(8),DIMENSION(LOOPCOUNT):: a, b, c\n  INTEGER,DIMENSION(1):: devtest\n  INTEGER:: x\n  errors = 0\n\n  devtest(1) = 1\n  !$acc enter data copyin(devtest(1:1))\n  !$acc parallel present(devtest(1:1))\n    devtest(1) = 0\n  !$acc end parallel\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n  c = 0\n\n  !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n    !$acc serial\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        c(x) = c(x) + b(x) + a(x)\n      END DO\n    !$acc end serial\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:devonly,V:2.6-2.7\n      LOGICAL FUNCTION test2()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER:: errors\n  REAL(8),DIMENSION(LOOPCOUNT):: a, b, c\n  INTEGER,DIMENSION(1):: devtest\n  INTEGER:: x\n  errors = 0\n\n  devtest(1) = 1\n  !$acc enter data copyin(devtest(1:1))\n  !$acc parallel present(devtest(1:1))\n    devtest(1) = 0\n  !$acc end parallel\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  IF (devtest(1) .eq. 1) THEN\n    CALL RANDOM_NUMBER(a)\n    CALL RANDOM_NUMBER(b)\n    c = 1\n\n    !$acc enter data copyin(c(1:LOOPCOUNT))\n    DO x = 1, LOOPCOUNT\n      c(x) = 0\n    END DO\n\n    !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n      !$acc serial\n        !$acc loop\n        DO x = 1, LOOPCOUNT\n          c(x) = c(x) + a(x) + b(x)\n        END DO\n      !$acc end serial\n    !$acc end data\n\n    DO x = 1, LOOPCOUNT\n      if (abs(c(x)) .gt. PRECISION) THEN\n        errors = errors + 1\n      END IF\n    END DO\n\n    !$acc exit data copyout(c(1:LOOPCOUNT))\n\n    DO x = 1, LOOPCOUNT\n      IF (abs(c(x) - (a(x) + b(x) + 1)) .gt. PRECISION) THEN\n        errors = errors + 1\n      END IF\n    END DO\n  END IF\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_default_present.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,default,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER:: errors\n  REAL(8),DIMENSION(LOOPCOUNT):: a\n  INTEGER:: x\n  errors = 0\n\n  a = 0\n\n  !$acc enter data copyin(a(1:LOOPCOUNT))\n  !$acc serial default(present)\n    !$acc loop\n    DO x = 1, LOOPCOUNT\n      a(x) = 1\n    END DO\n  !$acc end serial\n  !$acc exit data copyout(a(1:LOOPCOUNT))\n\n  DO x = 1, LOOPCOUNT\n    IF (abs(a(x) - 1) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "default"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_firstprivate.F90": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,firstprivate,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER:: errors\n  REAL(8),DIMENSION(10, LOOPCOUNT):: a, b, d\n  REAL(8),DIMENSION(10):: c, c_copy\n  INTEGER:: x, y\n\n  errors = 0\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n  CALL RANDOM_NUMBER(c)\n  c_copy = c\n  d = 0\n  !$acc data copyin(a(1:10, 1:LOOPCOUNT), b(1:10, 1:LOOPCOUNT)) copy(d(1:10, 1:LOOPCOUNT))\n    !$acc serial firstprivate(c(1:10))\n      !$acc loop gang\n      DO y = 1, LOOPCOUNT\n        !$acc loop worker\n        DO x = 1, 10\n          d(x, y) = a(x, y) + b(x, y) + c(x)\n        END DO\n      END DO\n    !$acc end serial\n  !$acc end data\n\n  DO y = 1, LOOPCOUNT\n    DO x = 1, 10\n      IF (abs(d(x, y) - (a(x, y) + b(x, y) + c_copy(x))) .gt. PRECISION) THEN\n        errors = errors + 1\n      END IF\n    END DO\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "firstprivate"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:serial,firstprivate,V:2.6-2.7\n      LOGICAL FUNCTION test2()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER:: errors\n  REAL(8),DIMENSION(10, LOOPCOUNT):: a, b, d\n  REAL(8),DIMENSION(10):: c, c_copy\n  INTEGER:: x, y\n\n  errors = 0\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n  d = 0\n  c = 0\n\n  !$acc data copyin(a(1:10, 1:LOOPCOUNT), b(1:10, 1:LOOPCOUNT)) copy(d(1:10, 1:LOOPCOUNT))\n    !$acc serial firstprivate(c(1:10))\n      !$acc loop gang independent\n      DO y = 1, LOOPCOUNT\n        !$acc loop worker independent\n        DO x = 1, 10\n          c(x) = a(x, y) - b(x, y)\n        END DO\n        !$acc loop worker independent\n        DO x = 1, 10\n          d(x, y) = a(x, y) + b(x, y) + c(x)\n        END DO\n      END DO\n    !$acc end serial\n  !$acc end data\n\n  DO y = 1, LOOPCOUNT\n    DO x = 1, 10\n      IF (abs(d(x, y) - (2 * a(x, y))) .gt. PRECISION) THEN\n        errors = errors + 1\n      END IF\n    END DO\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "firstprivate"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_if.F90": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:devonly,serial,if,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER:: errors\n  REAL(8),DIMENSION(LOOPCOUNT):: a, b, c\n  LOGICAL,DIMENSION(1):: devtest\n  LOGICAL:: host, device\n  INTEGER:: x\n  host = .FALSE.\n  device = .TRUE.\n  errors = 0\n\n  devtest(1) = .TRUE.\n  !$acc enter data copyin(devtest(1:1))\n  !$acc parallel present(devtest(1:1))\n    devtest(1) = .FALSE.\n  !$acc end parallel\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n  c = 0\n\n  !$acc serial if(host)\n    !$acc loop\n    DO x = 1, LOOPCOUNT\n      c(x) = a(x) + b(x)\n    END DO\n  !$acc end serial\n\n  DO x = 1, N\n    IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "serial",
                            "if"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:devonly,serial,if,V:2.6-2.7\n      LOGICAL FUNCTION test2()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER:: errors\n  REAL(8),DIMENSION(LOOPCOUNT):: a, b, c\n  LOGICAL,DIMENSION(1):: devtest\n  LOGICAL:: host, device\n  INTEGER:: x\n  host = .FALSE.\n  device = .TRUE.\n  errors = 0\n\n  devtest(1) = .TRUE.\n  !$acc enter data copyin(devtest(1:1))\n  !$acc parallel present(devtest(1:1))\n    devtest(1) = .FALSE.\n  !$acc end parallel\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  IF (devtest(1)) THEN\n    CALL RANDOM_NUMBER(a)\n    CALL RANDOM_NUMBER(b)\n    c = a + b\n\n    !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n    !$acc serial if(host) present(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        c(x) = c(x) + a(x) + b(x)\n      END DO\n    !$acc end serial\n    !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n\n    DO x = 1, LOOPCOUNT\n      IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n        errors = errors + 1\n      END IF\n    END DO\n  END IF\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "serial",
                            "if"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n!T3:devonly,serial,if,V:2.6-2.7\n      LOGICAL FUNCTION test3()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER:: errors\n  REAL(8),DIMENSION(LOOPCOUNT):: a, b, c\n  LOGICAL,DIMENSION(1):: devtest\n  LOGICAL:: host, device\n  INTEGER:: x\n  host = .FALSE.\n  device = .TRUE.\n  errors = 0\n\n  devtest(1) = .TRUE.\n  !$acc enter data copyin(devtest(1:1))\n  !$acc parallel present(devtest(1:1))\n    devtest(1) = .FALSE.\n  !$acc end parallel\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n  c = a + b\n  \n  !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n  !$acc serial if(device) present(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n    !$acc loop\n    DO x = 1, LOOPCOUNT\n      c(x) = c(x) + a(x) + b(x)\n    END DO\n  !$acc end serial\n  !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n\n  DO x = 1, LOOPCOUNT\n    IF (abs(c(x) - (2 * (a(x) + b(x)))) .gt. PRECISION * 2) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test3 = .FALSE.\n        ELSE\n          test3 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T3\n        LOGICAL :: test3\n#endif\n#ifndef T3\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test3()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 2\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "serial",
                            "if"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  REAL(8),DIMENSION(LOOPCOUNT):: a, b, c\n  INTEGER:: x\n  INTEGER:: errors\n\n  errors = 0\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n  c = 0\n\n  !$acc data copy(c(1:LOOPCOUNT))\n    !$acc serial loop\n    DO x = 1, LOOPCOUNT\n      c(x) = 1\n    END DO\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    IF (abs(c(x) - 1) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n  !$acc data copy(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n    !$acc serial\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        c(x) = b(x)\n      END DO\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        c(x) = c(x) + a(x)\n      END DO\n    !$acc end serial\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_async.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:async,serial,combined-constructs,loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER:: errors\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b, c, d\n  INTEGER,DIMENSION(10):: error_array\n  INTEGER:: x, y\n\n  errors = 0\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n  c = 0\n\n  DO y = 1, 10\n    DO x = 1, LOOPCOUNT\n      d(x, y) = a(x, y) + b(x, y)\n    END DO\n  END DO\n\n  error_array = 0\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10), b(1:LOOPCOUNT, 1:10), c(1:LOOPCOUNT, 1:10), d(1:LOOPCOUNT, 1:10)) copy(error_array(1:10))\n    DO y = 1, 10\n      !$acc serial loop async(y)\n      DO x = 1, LOOPCOUNT\n        c(x, y) = a(x, y) + b(x, y)\n      END DO\n      !$acc serial loop async(y)\n      DO x = 1, LOOPCOUNT\n        IF (((c(x, y) - d(x, y)) .gt. PRECISION) .OR. ((d(x, y) - c(x, y)) .gt. PRECISION)) THEN\n          error_array(y) = error_array(y) + 1\n        END IF\n      END DO\n    END DO\n  !$acc end data\n\n  DO x = 1, 10\n    errors = errors + error_array(x)\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "async",
                            "serial",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_auto.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,combined-constructs,loop,auto,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER:: errors\n  REAL(8),DIMENSION(LOOPCOUNT):: a, a_copy, b\n  INTEGER:: x\n  REAL(8):: temp\n  errors = 0\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  a_copy = a\n  b = 0\n\n  !$acc data copyin(a(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT))\n    !$acc serial loop auto\n    DO x = 1, LOOPCOUNT\n      b(x) = a(x)\n    END DO\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    IF (abs(b(x) - a(x)) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n  !$acc data copy(a(1:LOOPCOUNT))\n    !$acc serial loop auto\n    DO x = 2, LOOPCOUNT\n      a(x) = a(x - 1) + a(x)\n    END DO\n  !$acc end data\n\n  temp = 0\n  DO x = 1, LOOPCOUNT\n    temp = temp + a_copy(x)\n    IF (abs(temp - a(x)) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "combined-constructs",
                            "loop",
                            "auto"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_gang.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,combined-constructs,loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER:: errors\n  REAL(8),DIMENSION(LOOPCOUNT):: a, b, c\n  INTEGER:: x\n\n  errors = 0\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n  c = 0\n\n  !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copy(c(1:LOOPCOUNT))\n    !$acc serial loop gang\n    DO x = 1, LOOPCOUNT\n      c(x) = a(x) + b(x)\n    END DO\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_add_general.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,reduction,combined-constructs,loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER:: errors\n  REAL(8),DIMENSION(LOOPCOUNT):: a, b\n  REAL(8):: total\n  INTEGER:: x\n  errors = 0\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n\n  total = 10\n  !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n    !$acc serial loop reduction(+:total)\n    DO x = 1, LOOPCOUNT\n      total = total + a(x) + b(x)\n    END DO\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    total = total - (a(x) + b(x))\n  END DO\n\n  IF (abs(total - 10) .gt. PRECISION) THEN\n    errors = errors + 1\n  END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_add_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,private,reduction,combined-constructs,loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER:: errors\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b, c, d\n  REAL(8):: avg, temp\n  INTEGER:: x, y\n  avg = 0\n  errors = 0\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10), b(1:LOOPCOUNT, 1:10)) create(c(1:LOOPCOUNT, 1:10)) copyout(d(1:LOOPCOUNT, 1:10))\n    !$acc serial loop gang private(avg)\n    DO y = 1, 10\n      avg = 0\n      !$acc loop worker reduction(+:avg)\n      DO x = 1, LOOPCOUNT\n        c(x, y) = a(x, y) + b(x, y)\n        avg = avg + c(x, y)\n      END DO\n      avg = avg / LOOPCOUNT\n      !$acc loop worker\n      DO x = 1, LOOPCOUNT\n        d(x, y) = c(x, y) - avg\n      END DO\n    END DO\n  !$acc end data\n\n  DO y = 1, 10\n    temp = 0\n    DO x = 1, LOOPCOUNT\n      temp = temp + (a(x, y) + b(x, y))\n    END DO\n    temp = temp / LOOPCOUNT\n    DO x = 1, LOOPCOUNT\n      IF (abs(d(x, y) - ((a(x, y) + b(x, y)) - temp)) .gt. PRECISION) THEN\n        errors = errors + 1\n      END IF\n    END DO\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_add_vector_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,private,reduction,combined-constructs,loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER:: errors\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b\n  REAL(8),DIMENSION(10):: c\n  REAL(8):: temp\n  INTEGER:: x, y\n\n  errors = 0\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n\n  !$acc data copyin(a(1:LOOPCOUNT,1:10), b(1:LOOPCOUNT,1:10)) copyout(c(1:10))\n    !$acc serial loop private(temp)\n    DO y = 1, 10\n      temp = 0\n      !$acc loop vector reduction(+:temp)\n      DO x = 1, LOOPCOUNT\n        temp = temp + (a(x, y) + b(x, y))\n      END DO\n      c(y) = temp\n    END DO\n  !$acc end data\n\n  DO y = 1, 10\n    DO x = 1, LOOPCOUNT\n      c(y) = c(y) - (a(x, y) + b(x, y))\n    END DO\n    IF (abs(c(y)) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_and_general.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,reduction,combined-constructs,loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER:: errors\n  INTEGER:: x\n  LOGICAL,DIMENSION(LOOPCOUNT):: a\n  LOGICAL:: result, host_result\n  REAL(8),DIMENSION(LOOPCOUNT):: randoms\n  REAL(8):: false_margin = EXP(LOG(.5) / LOOPCOUNT)\n\n  errors = 0\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(randoms)\n\n  DO x = 1, LOOPCOUNT\n    IF (randoms(x) .lt. false_margin) THEN\n      a(x) = .TRUE.\n    ELSE\n      a(x) = .FALSE.\n    END IF\n  END DO\n\n  result = .TRUE.\n  !$acc data copyin(a(1:LOOPCOUNT))\n    !$acc serial loop reduction(.AND.:result)\n    DO x = 1, LOOPCOUNT\n      result = result .AND. a(x)\n    END DO\n  !$acc end data\n\n  host_result = .TRUE.\n  DO x = 1, LOOPCOUNT\n    host_result = host_result .AND. a(x)\n  END DO\n\n  IF (host_result .NEQV. result) THEN\n    errors = errors + 1\n  END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_and_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,private,reduction,combined-constructs,loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER:: errors\n  REAL(8):: false_margin\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n  LOGICAL,DIMENSION(LOOPCOUNT, 10):: a, a_copy\n  LOGICAL,DIMENSIOn(10):: has_false\n  LOGICAL:: temp\n  INTEGER:: x, y\n  errors = 0\n  false_margin = EXP(LOG(.5) / LOOPCOUNT)\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(randoms)\n\n  has_false = .FALSE.\n  a = .TRUE.\n  DO y = 1, 10\n    DO x = 1, LOOPCOUNT\n      IF (randoms(x, y) .gt. false_margin) THEN\n        a(x, y) = .FALSE.\n        has_false(y) = .TRUE.\n      END IF\n    END DO\n  END DO\n  a_copy = a\n\n  !$acc data copy(a(1:LOOPCOUNT, 1:10))\n    !$acc serial loop gang private(temp)\n    DO y = 1, 10\n      temp = .TRUE.\n      !$acc loop worker reduction(.AND.:temp)\n      DO x = 1, LOOPCOUNT\n        temp = temp .AND. a(x, y)\n      END DO\n      !$acc loop worker\n      DO x = 1, LOOPCOUNT\n        IF (temp) THEN\n          IF (a(x, y) .eq. 1) THEN\n            a(x, y) = .FALSE.\n          ELSE\n            a(x, y) = .TRUE.\n          END IF\n        END IF\n      END DO\n    END DO\n  !$acc end data\n\n  DO y = 1, 10\n    DO x = 1, LOOPCOUNT\n      IF ((has_false(y) .eqv. .TRUE.) .AND. (a(x, y) .neqv. a_copy(x, y))) THEN\n        errors = errors + 1\n      ELSEIF ((has_false(y) .eqv. .FALSE.) .AND. (a(x, y) .eqv. a_copy(x, y))) THEN\n        errors = errors + 1\n      END IF\n    END DO\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_and_vector_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,private,reduction,combined-constructs,loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  LOGICAL,DIMENSION(LOOPCOUNT, 10):: a\n  LOGICAL,DIMENSION(10):: b, has_false\n  LOGICAL:: temp\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n  REAL(8):: false_margin\n  INTEGER:: errors, x, y\n\n  errors = 0\n  false_margin = exp(log(.5) / LOOPCOUNT)\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(randoms)\n\n  has_false = .FALSE.\n  DO y = 1, 10\n    DO x = 1, LOOPCOUNT\n      IF (randoms(x, y) .lt. false_margin) THEN\n        a(x, y) = .TRUE.\n      ELSE\n        a(x, y) = .FALSE.\n        has_false(y) = .TRUE.\n      END IF\n    END DO\n  END DO\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(b(1:10))\n    !$acc serial loop private(temp)\n    DO y = 1, 10\n      temp = .TRUE.\n      !$acc loop vector reduction(.AND.:temp)\n      DO x = 1, LOOPCOUNT\n        temp = temp .AND. a(x, y)\n      END DO\n      b(y) = temp\n    END DO\n  !$acc end data\n\n  DO x = 1, 10\n    IF (has_false(x) .eqv. b(x)) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_bitand_general.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,reduction,combined-constructs,loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER,DIMENSION(N):: a\n  INTEGER:: b, host_b\n  REAL(8):: false_margin\n  REAL(8),DIMENSION(LOOPCOUNT, 16):: randoms\n  INTEGER:: x, y\n  INTEGER:: errors\n\n  errors = 0\n  false_margin = exp(log(.5)/LOOPCOUNT)\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(randoms)\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 16\n      IF (randoms(x, y) .lt. false_margin) THEN\n        a(x) = a(x) + 2**(y - 1)\n      END IF\n    END DO\n  END DO\n\n  b = a(1)\n  host_b = a(1)\n  DO x = 2, LOOPCOUNT\n    host_b = iand(host_b, a(x))\n  END DO\n\n  !$acc data copyin(a(1:LOOPCOUNT))\n    !$acc serial loop reduction(iand: b)\n    DO x = 1, LOOPCOUNT\n      b = iand(b, a(x))\n    END DO\n  !$acc end data\n\n  IF (b .ne. host_b) THEN\n    errors = errors + 1\n  END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_bitand_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,private,reduction,combined-constructs,loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER,DIMENSION(LOOPCOUNT, 10):: a, b, b_copy\n  INTEGER,DIMENSION(10):: c, host_c\n  INTEGER:: errors, x, y, z, temp\n  REAL(8):: false_margin\n  REAL(8),DIMENSION(LOOPCOUNT, 10, 17):: randoms\n\n  errors = 0\n  false_margin = exp(log(.5) / LOOPCOUNT)\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(randoms)\n\n  DO y = 1, 10\n    DO x = 1, LOOPCOUNT\n      b(x) = INT(10 * randoms(x, y, 17))\n      DO z = 1, 16\n        IF (randoms(x, y, z) .lt. false_margin) THEN\n          a(x) = a(x) + 2**(z - 1)\n        END IF\n      END DO\n    END DO\n  END DO\n\n  b_copy = b\n\n  DO y = 1, 10\n    temp = a(1, y)\n    DO x = 1, LOOPCOUNT\n      temp = iand(temp, a(x, y))\n    END DO\n    host_c(y) = temp\n  END DO\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(b(1:LOOPCOUNT, 1:10), c(1:10))\n    !$acc serial loop gang private(temp)\n    DO y = 1, 10\n      temp = a(1, y)\n      !$acc loop worker reduction(iand:temp)\n      DO x = 1, LOOPCOUNT\n        temp = iand(temp, a(x, y))\n      END DO\n      c(y) = temp\n      !$acc loop worker\n      DO x = 1, LOOPCOUNT\n        b(x, y) = b(x, y) + c(y)\n      END DO\n    END DO\n  !$acc end data\n\n  DO y = 1, 10\n    IF (host_c(y) .ne. c(y)) THEN\n      errors = errors + 1\n    END IF\n    DO x = 1, LOOPCOUNT\n      IF (b(x, y) .ne. b_copy(x, y) + c(y)) THEN\n        errors = errors + 1\n      END IF\n    END DO\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_bitand_vector_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,private,reduction,combined-constructs,loop,V:2.6-2.7\n  LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER,DIMENSION(LOOPCOUNT, 10):: a\n  INTEGER,DIMENSION(10):: b, b_host\n  REAL(8),DIMENSION(LOOPCOUNT, 10, 16):: randoms\n  REAL(8):: false_margin\n  INTEGER:: x, y, temp, c, z\n  INTEGER:: errors\n\n  errors = 0\n  false_margin = exp(log(.5) / LOOPCOUNT)\n  SEEDDIM(1) = 1\n  #ifdef SEED\n  SEEDDIM(1) = SEED\n  #endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(randoms)\n\n  DO y = 1, 10\n    DO x = 1, LOOPCOUNT\n      DO z = 1, 16\n        IF (randoms(x, y, z) .lt. false_margin) THEN\n          a(x, y) = a(x, y) + 2**(z - 1)\n        END IF\n      END DO\n    END DO\n  END DO\n\n  DO y = 1, 10\n    b_host(y) = a(1, y)\n    DO x = 1, LOOPCOUNT\n      b_host(y) = iand(b_host(y), a(x, y))\n    END DO\n  END DO\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(b(1:10))\n    !$acc serial loop private(c)\n    DO y = 1, 10\n      c = a(1, y)\n      !$acc loop vector reduction(iand:c)\n      DO x = 1, LOOPCOUNT\n        c = iand(c, a(x, y))\n      END DO\n      b(y) = c\n    END DO\n  !$acc end data\n\n  DO x = 1, 10\n    IF (b(x) .ne. b_host(x)) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_bitor_general.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,reduction,combined-constructs,loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER:: errors, temp, x, y, b, host_b\n  INTEGER,DIMENSION(LOOPCOUNT):: a\n  REAL(8):: false_margin\n  REAL(8),DIMENSION(LOOPCOUNT, 16):: randoms\n  errors = 0\n  false_margin = exp(log(.5) / LOOPCOUNT)\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(randoms)\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 16\n      IF (randoms(x, y) .gt. false_margin) THEN\n        a(x) = a(x) + 2**(y - 1)\n      END IF\n    END DO\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    host_b = ior(host_b, a(x))\n  END DO\n\n  !$acc data copyin(a(1:LOOPCOUNT))\n    !$acc serial loop reduction(ior:b)\n    DO x = 1, LOOPCOUNT\n      b = ior(b, a(x))\n    END DO\n  !$acc end data\n\n  IF (b .ne. host_b) THEN\n    errors = errors + 1\n  END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_bitor_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,private,reduction,combined-constructs,loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER:: errors, x, y, z, temp\n  INTEGER,DIMENSION(LOOPCOUNT, 10):: a, b, b_copy\n  INTEGER,DIMENSION(10):: c\n  REAL(8):: false_margin\n  REAL(8),DIMENSION(LOOPCOUNT, 10, 17):: randoms\n\n  errors = 0\n  false_margin = exp(log(.5) / LOOPCOUNT)\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(randoms)\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      b(x, y) = INT(randoms(x, y, 17) * 1000)\n      DO z = 1, 16\n        IF (randoms(x, y, z) .gt. false_margin) THEN\n          a(x, y) = a(x, y) + 2**(z-1)\n        END IF\n      END DO\n    END DO\n  END DO\n\n  b_copy = b\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(b(1:LOOPCOUNT, 1:10), c(1:10))\n    !$acc serial loop gang private(temp)\n    DO y = 1, 10\n      temp = 0\n      !$acc loop worker reduction(ior:temp)\n      DO x = 1, LOOPCOUNT\n        temp = ior(temp, a(x, y))\n      END DO\n      c(y) = temp\n      !$acc loop worker\n      DO x = 1, LOOPCOUNT\n        b(x, y) = b(x, y) + c(y)\n      END DO\n    END DO\n  !$acc end data\n\n  DO y = 1, 10\n    temp = a(1, y)\n    DO x = 2, LOOPCOUNT\n      temp = ior(temp, a(x, y))\n    END DO\n    IF (temp .ne. c(y)) THEN\n      errors = errors + 1\n    END IF\n    DO x = 1, LOOPCOUNT\n      IF (b(x, y) .ne. (b_copy(x, y) + temp)) THEN\n        errors = errors + 1\n      END IF\n    END DO\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_bitor_vector_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,private,reduction,combined-constructs,loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER:: errors, x, y, z, temp\n  INTEGER,DIMENSION(LOOPCOUNT, 10):: a\n  INTEGER,DIMENSION(10):: b\n  REAL(8):: false_margin\n  REAL(8),DIMENSION(LOOPCOUNT, 10, 16):: randoms\n\n  errors = 0\n  false_margin = exp(log(.5) / LOOPCOUNT)\n  SEEDDIM(1) = 1\n  #ifdef SEED\n  SEEDDIM(1) = SEED\n  #endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(randoms)\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      DO z = 1, 16\n        IF (randoms(x, y, z) .gt. false_margin) THEN\n          a(x, y) = a(x, y) + 2**(z - 1)\n        END IF\n      END DO\n    END DO\n  END DO\n\n  !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(b(1:10))\n    !$acc serial loop private(temp)\n    DO y = 1, 10\n      temp = 0\n      !$acc loop vector reduction(ior:temp)\n      DO x = 1, LOOPCOUNT\n        temp = ior(temp, a(x, y))\n      END DO\n      b(y) = temp\n    END DO\n  !$acc end data\n\n  DO y = 1, 10\n    temp = a(1, y)\n    DO x = 2, LOOPCOUNT\n      temp = ior(temp, a(x, y))\n    END DO\n    IF (temp .ne. b(y)) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_bitxor_general.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,reduction,combined-constructs,loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER,DIMENSION(LOOPCOUNT):: a\n  REAL(8),DIMENSION(LOOPCOUNT):: randoms\n  INTEGER:: errors, b, host_b, x\n\n  errors = 0\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(randoms)\n\n  DO x = 1, LOOPCOUNT\n    a(x) = INT(randoms(x) * 100000)\n  END DO\n\n  b = 0\n  host_b = 0\n\n  DO x = 1, LOOPCOUNT\n    host_b = ieor(host_b, a(x))\n  END DO\n\n  !$acc data copyin(a(1:LOOPCOUNT))\n    !$acc serial loop reduction(ieor:b)\n    DO x = 1, LOOPCOUNT\n      b = ieor(b, a(x))\n    END DO\n  !$acc end data\n\n  IF (b .ne. host_b) THEN\n    errors = errors + 1\n  END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_bitxor_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,private,reduction,combined-constructs,loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER,DIMENSION(LOOPCOUNT, 10):: a, b, host_b\n  INTEGER,DIMENSION(10):: c, host_c\n  REAL(8),DIMENSION(LOOPCOUNT, 10, 2):: randoms\n  INTEGER:: errors, x, y, temp\n\n  errors = 0\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(randoms)\n\n  c = 0\n  host_c = 0\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      b(x, y) = INT(randoms(x, y, 1) * 1000)\n      a(x, y) = INT(randoms(x, y, 2) * 1000)\n    END DO\n  END DO\n  host_b = b\n\n  DO y = 1, 10\n    DO x = 1, LOOPCOUNT\n      host_c(y) = ieor(host_c(y), a(x, y))\n    END DO\n    DO x = 1, LOOPCOUNT\n      host_b(x, y) = host_b(x, y) + host_c(y)\n    END DO\n  END DO\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(b(1:LOOPCOUNT, 1:10), c(1:10))\n    !$acc serial loop gang private(temp)\n    DO y = 1, 10\n      temp = 0\n      !$acc loop worker reduction(ieor:temp)\n      DO x = 1, LOOPCOUNT\n        temp = ieor(temp, a(x, y))\n      END DO\n      c(y) = temp\n      DO x = 1, LOOPCOUNT\n        b(x, y) = b(x, y) + c(y)\n      END DO\n    END DO\n  !$acc end data\n\n  DO y = 1, 10\n    IF (c(y) .ne. host_c(y)) THEN\n      errors = errors + 1\n    END IF\n    DO x = 1, LOOPCOUNT\n      IF (host_b(x, y) .ne. b(x, y)) THEN\n        errors = errors + 1\n      END IF\n    END DO\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_bitxor_vector_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,private,reduction,combined-constructs,loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER,DIMENSION(LOOPCOUNT, 10):: a\n  INTEGER,DIMENSION(10):: b, host_b\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n  INTEGER:: errors, x, y, temp\n\n  errors = 0\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(randoms)\n\n  DO y = 1, 10\n    DO x = 1, LOOPCOUNT\n      a(x, y) = INT(randoms(x, y) * 10000)\n    END DO\n  END DO\n\n  DO y = 1, 10\n    DO x = 1, LOOPCOUNT\n      host_b(y) = ieor(host_b(y), a(x, y))\n    END DO\n  END DO\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10))\n    !$acc serial loop private(temp)\n    DO y = 1, 10\n      temp = 0\n      !$acc loop vector reduction(ieor:temp)\n      DO x = 1, LOOPCOUNT\n        temp = ieor(temp, a(x, y))\n      END DO\n      b(y) = temp\n    END DO\n  !$acc end data\n\n  DO y = 1, 10\n    IF (b(y) .ne. host_b(y)) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_max_general.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,reduction,combined-constructs,loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  REAL(8),DIMENSION(LOOPCOUNT):: a, b\n  REAL(8):: maxval, host_max\n  INTEGER:: errors, x\n\n  SEEDDIM(1) = 1\n  #ifdef SEED\n  SEEDDIM(1) = SEED\n  #endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n\n  errors = 0\n\n  DO x = 1, LOOPCOUNT\n    host_max = max(host_max, a(x) * b(x))\n  END DO\n\n  !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n    !$acc serial loop reduction(max:maxval)\n    DO x = 1, LOOPCOUNT\n      maxval = max(maxval, a(x) * b(x))\n    END DO\n  !$acc end data\n\n  IF (abs(host_max - maxval) .gt. PRECISION) THEN\n    errors = errors + 1\n  END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_max_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,private,reduction,combined-constructs,loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b, c\n  REAL(8),DIMENSIOn(10):: host_maximums, maximums\n  REAL(8):: temp\n  INTEGER:: errors, x, y\n\n  errors = 0\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n  c = 0\n  maximums = 0\n  host_maximums = 0\n\n  DO y = 1, 10\n    DO x = 1, LOOPCOUNT\n      host_maximums(y) = max(host_maximums(y), a(x, y) * b(x, y))\n    ENDDO\n  END DO\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10), b(1:LOOPCOUNT, 1:10)) copy(c(1:LOOPCOUNT, 1:10), maximums(1:10))\n    !$acc serial loop gang private(temp)\n    DO y = 1, 10\n      temp = 0\n      !$acc loop worker reduction(max:temp)\n      DO x = 1, LOOPCOUNT\n        temp = max(temp, a(x, y) * b(x, y))\n      END DO\n      maximums(y) = temp\n      !$acc loop worker\n      DO x = 1, LOOPCOUNT\n        c(x, y) = (a(x, y) * b(x, y)) / maximums(y)\n      END DO\n    END DO\n  !$acc end data\n\n  DO y = 1, 10\n    IF (maximums(y) .ne. host_maximums(y)) THEN\n      errors = errors + 1\n    END IF\n    DO x = 1, LOOPCOUNT\n      IF (abs(c(x, y) - ((a(x, y) * b(x, y)) / maximums(y))) .gt. PRECISION) THEN\n        errors = errors + 1\n      END IF\n    END DO\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_max_vector_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,private,reduction,combined-constructs,loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b\n  REAL(8),DIMENSION(10):: maximums, host_maximums\n  REAL(8):: temp\n  INTEGER:: errors, x, y\n\n  errors = 0\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n\n  host_maximums = 0\n  DO y = 1, 10\n    DO x = 1, LOOPCOUNT\n      host_maximums(y) = max(host_maximums(y), a(x, y) * b(x, y))\n    END DO\n  END DO\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10), b(1:LOOPCOUNT, 1:10)) copy(maximums(1:10))\n    !$acc serial loop private(temp)\n    DO y = 1, 10\n      temp = 0\n      !$acc loop vector reduction(max:temp)\n      DO x = 1, LOOPCOUNT\n        temp = max(temp, a(x, y) * b(x, y))\n      END DO\n      maximums(y) = temp\n    END DO\n  !$acc end data\n\n  DO x = 1, 10\n    IF (abs(host_maximums(x) - maximums(x)) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_min_general.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,reduction,combined-constructs,loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER:: errors, x\n  REAL(8),DIMENSION(LOOPCOUNT):: a, b\n  REAL(8):: minimum, host_minimum\n\n  errors = 0\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n\n  minimum = a(1) * b(1)\n  host_minimum = minimum\n\n  DO x = 2, LOOPCOUNT\n    host_minimum = min(host_minimum, a(x) * b(x))\n  END DO\n\n  !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n    !$acc serial loop reduction(min:minimum)\n    DO x = 1, LOOPCOUNT\n      minimum = min(minimum, a(x) * b(x))\n    END DO\n  !$acc end data\n\n  IF (abs(host_minimum - minimum) .gt. PRECISION) THEN\n    errors = errors + 1\n  END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_min_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,private,reduction,combined-constructs,loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b, c\n  REAL(8),DIMENSION(10):: minimums, host_minimums\n  REAL(8):: temp\n  INTEGER:: errors, x, y\n\n  errors = 0\n\n  SEEDDIM(1) = 1\n  #ifdef SEED\n  SEEDDIM(1) = SEED\n  #endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n  c = 0\n  minimums = 0\n  host_minimums = 0\n\n  DO y = 1, 10\n    DO x = 1, LOOPCOUNT\n      host_minimums(y) = min(host_minimums(y), a(x, y) * b(x, y))\n    END DO\n  END DO\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10), b(1:LOOPCOUNT, 1:10)) copy(c(1:LOOPCOUNT, 1:10), minimums(1:10))\n    !$acc serial loop gang private(temp)\n    DO y = 1, 10\n      temp = 1\n      !$acc loop reduction(min: temp)\n      DO x = 1, LOOPCOUNT\n        temp = min(temp, a(x, y) * b(x, y))\n      END DO\n      minimums(y) = temp\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        c(x, y) = (a(x, y) * b(x, y)) / minimums(y)\n      END DO\n    END DO\n  !$acc end data\n\n  DO y = 1, 10\n    IF (abs(minimums(y) - host_minimums(y)) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n    DO x = 1, LOOPCOUNT\n      IF (abs(c(x, y) - ((a(x, y) * b(x, y)) / minimums(y))) .gt. PRECISION) THEN\n        errors = errors + 1\n      END IF\n    END DO\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_min_vector_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,private,reduction,combined-constructs,loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b\n  REAL(8),DIMENSION(10):: minimums, host_minimums\n  REAL(8):: temp\n  INTEGER:: errors, x, y\n\n  errors = 0\n  minimums = 1\n  host_minimums = 1\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n\n  DO y = 1, 10\n    DO x = 1, LOOPCOUNT\n      host_minimums(y) = min(host_minimums(y), a(x, y) * b(x, y))\n    END DO\n  END DO\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10), b(1:LOOPCOUNT, 1:10)) copy(minimums(1:10))\n    !$acc serial loop gang private(temp)\n    DO y = 1, 10\n      temp = 1\n      !$acc loop vector reduction(min:temp)\n      DO x = 1, LOOPCOUNT\n        temp = min(temp, a(x, y) * b(x, y))\n      END DO\n      minimums(y) = temp\n    END DO\n  !$acc end data\n\n  DO x = 1, 10\n    IF (abs(host_minimums(x) - minimums(x)) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_multiply_general.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,reduction,combined-constructs,loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  REAL(8),DIMENSION(10):: a, b\n  REAL(8):: reduced, host_reduced\n  INTEGER:: errors, x, y\n\n  errors = 0\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  DO y = 1, LOOPCOUNT\n    CALL RANDOM_NUMBER(a)\n    CALL RANDOM_NUMBER(b)\n    reduced = 1\n    host_reduced = 1\n\n    DO x = 1, 10\n      host_reduced = host_reduced * (a(x) + b(x))\n    END DO\n\n    !$acc data copyin(a(1:10), b(1:10))\n      !$acc serial loop reduction(*:reduced)\n      DO x = 1, 10\n        reduced = reduced * (a(x) + b(x))\n      END DO\n    !$acc end data\n\n    IF (abs(host_reduced - reduced) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_multiply_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,private,reduction,combined-constructs,loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  REAL(8),DIMENSION(10, LOOPCOUNT):: a, b, c\n  REAL(8),DIMENSION(LOOPCOUNT):: totals, host_totals\n  REAL(8):: temp\n  INTEGER:: errors, x, y\n\n  errors = 0\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n  c = 0\n\n\n  host_totals = 1\n  DO y = 1, LOOPCOUNT\n    DO x = 1, 10\n      host_totals(y) = host_totals(y) * (a(x, y) + b(x, y))\n    END DO\n  END DO\n\n  !$acc data copyin(a(1:10, 1:LOOPCOUNT), b(1:10, 1:LOOPCOUNT)) copyout(c(1:10, 1:LOOPCOUNT)) copy(totals(1:LOOPCOUNT))\n    !$acc serial loop gang private(temp)\n    DO y = 1, LOOPCOUNT\n      temp = 1\n      !$acc loop worker reduction(*:temp)\n      DO x = 1, 10\n        temp = temp * (a(x, y) + b(x, y))\n      END DO\n      totals(y) = temp\n      !$acc loop worker\n      DO x = 1, 10\n        c(x, y) = (a(x, y) + b(x, y)) / totals(y)\n      END DO\n    END DO\n  !$acc end data\n\n  DO y = 1, LOOPCOUNT\n    IF (abs(host_totals(y) - totals(y)) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n    DO x = 1, 10\n      IF (c(x, y) - ((a(x, y) + b(x, y)) / totals(y)) .gt. PRECISION) THEN\n        errors = errors + 1\n      END IF\n    END DO\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_multiply_vector_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,private,reduction,combined-constructs,loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  REAL(8),DIMENSION(10, LOOPCOUNT):: a, b\n  REAL(8),DIMENSION(LOOPCOUNT):: totals, host_totals\n  REAL(8):: temp\n  INTEGER:: errors, x, y\n\n  errors = 0\n\n  SEEDDIM(1) = 1\n  #ifdef SEED\n  SEEDDIM(1) = SEED\n  #endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n\n  host_totals = 1\n  DO y = 1, LOOPCOUNT\n    DO x = 1, 10\n      host_totals(y) = host_totals(y) * (a(x, y) + b(x, y))\n    END DO\n  END DO\n\n  !$acc data copyin(a(1:10, 1:LOOPCOUNT), b(1:10, 1:LOOPCOUNT)) copyout(totals(1:LOOPCOUNT))\n    !$acc serial loop private(temp)\n    DO y = 1, LOOPCOUNT\n      temp = 1\n      !$acc loop vector reduction(*:temp)\n      DO x = 1, 10\n        temp = temp * (a(x, y) + b(x, y))\n      END DO\n      totals(y) = temp\n    END DO\n  !$acc end data\n\n  DO y = 1, LOOPCOUNT\n    IF (abs(host_totals(y) - totals(y)) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_or_general.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,reduction,combined-constructs,loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  LOGICAL,DIMENSION(LOOPCOUNT):: a\n  LOGICAL:: result, host_result\n  REAL(8),DIMENSION(LOOPCOUNT):: randoms\n  REAL(8):: false_margin\n  INTEGER:: errors, x\n\n  errors = 0\n  false_margin = exp(log(.5) / LOOPCOUNT)\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(randoms)\n\n  DO x = 1, LOOPCOUNT\n    IF (randoms(x) .gt. false_margin) THEN\n      a(x) = .TRUE.\n    ELSE\n      a(x) = .FALSE.\n    END IF\n  END DO\n\n  host_result = .FALSE.\n  result = .FALSE.\n\n  DO x = 1, LOOPCOUNT\n    host_result = host_result .OR. a(x)\n  END DO\n\n  !$acc data copyin(a(1:LOOPCOUNT))\n    !$acc serial loop reduction(.OR.: result)\n    DO x = 1, LOOPCOUNT\n      result = result .OR. a(x)\n    END DO\n  !$acc end data\n\n  IF (host_result .neqv. result) THEN\n    errors = errors + 1\n  END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_or_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,private,reduction,combined-constructs,loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  LOGICAL,DIMENSION(LOOPCOUNT, 10):: a, a_copy\n  LOGICAL,DIMENSION(10):: results\n  LOGICAL:: temp\n  REAL(8):: false_margin\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n  INTEGER:: errors\n  INTEGER:: x, y\n\n  errors = 0\n  SEEDDIM(1) = 1\n  #ifdef SEED\n  SEEDDIM(1) = SEED\n  #endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(randoms)\n\n  DO y = 1, 10\n    DO x = 1, LOOPCOUNT\n      IF (randoms(x, y) .gt. false_margin) THEN\n        a(x, y) = .TRUE.\n      ELSE\n        a(x, y) = .FALSE.\n      END IF\n    END DO\n  END DO\n\n  a_copy = a\n\n  !$acc data copy(a(1:LOOPCOUNT, 1:10))\n    !$acc serial loop gang private(temp)\n    DO y = 1, 10\n      temp = .FALSE.\n      !$acc loop worker reduction(.OR.:temp)\n      DO x = 1, LOOPCOUNT\n        temp = temp .OR. a(x, y)\n      END DO\n      results(y) = temp\n      !$acc loop worker\n      DO x = 1, LOOPCOUNT\n        IF (results(y)) THEN\n          IF (a(x, y)) THEN\n            a(x, y) = .FALSE.\n          ELSE\n            a(x, y) = .TRUE.\n          END IF\n        END IF\n      END DO\n    END DO\n  !$acc end data\n\n  DO y = 1, 10\n    temp = .FALSE.\n    DO x = 1, LOOPCOUNT\n      temp = temp .OR. a(x, y)\n    END DO\n    IF (temp .neqv. results(y)) THEN\n      errors = errors + 1\n    END IF\n    DO x = 1, LOOPCOUNT\n      IF (temp) THEN\n        IF (a(x, y) .eqv. a_copy(x, y)) THEN\n          errors = errors + 1\n        END IF\n      ELSE\n        IF (a(x, y) .neqv. a_copy(x, y)) THEN\n          errors = errors + 1\n        END IF\n      END IF\n    END DO\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_or_vector_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,private,reduction,combined-constructs,loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  LOGICAL,DIMENSION(LOOPCOUNT, 10):: a\n  LOGICAL,DIMENSION(10):: b\n  LOGICAL:: temp\n  REAL(8):: false_margin\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n  INTEGER:: errors\n  INTEGER:: x, y\n\n  errors = 0\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(randoms)\n\n  DO y = 1, 10\n    DO x = 1, LOOPCOUNT\n      IF (randoms(x, y) .gt. false_margin) THEN\n        a(x, y) = .TRUE.\n      ELSE\n        a(x, y) = .FALSE.\n      END IF\n    END DO\n  END DO\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(b(1:10))\n    !$acc serial loop private(temp)\n    DO y = 1, 10\n      temp = .FALSE.\n      !$acc loop vector reduction(.OR.:temp)\n      DO x = 1, LOOPCOUNT\n        temp = temp .OR. a(x, y)\n      END DO\n      b(y) = temp\n    END DO\n  !$acc end data\n\n  DO y = 1, 10\n    temp = .FALSE.\n    DO x = 1, LOOPCOUNT\n      temp = temp .OR. a(x, y)\n    END DO\n    IF (temp .neqv. b(y)) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_seq.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,combined-constructs,loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  REAL(8),DIMENSION(LOOPCOUNT):: a, b\n  REAL(8):: temp\n  INTEGER:: errors, x\n\n  errors = 0\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  b = 0\n\n  !$acc data copyin(a(1:LOOPCOUNT)) copy(b(1:LOOPCOUNT))\n    !$acc serial loop seq\n    DO x = 2, LOOPCOUNT\n      b(x) = b(x - 1) + a(x)\n    END DO\n  !$acc end data\n\n  temp = 0\n  DO x = 2, LOOPCOUNT\n    temp = temp + a(x)\n    IF (abs(b(x) - temp) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_tile.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,combined-constructs,loop,tile,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER:: errors\n  REAL(8),DIMENSION(100):: a, b, c\n  REAL(8),DIMENSION(100, 100):: d2\n  REAL(8),DIMENSION(100, 100, 100):: d3\n  INTEGER:: x, y, z\n  errors = 0\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n  CALL RANDOM_NUMBER(c)\n  d2 = 0\n  d3 = 0\n\n  !$acc data copyin(a(1:100), b(1:100), c(1:100)) copyout(d2(1:100, 1:100))\n    !$acc serial loop tile(*, *)\n    DO x = 1, 100\n      DO y = 1, 100\n        DO z = 1, 100\n          d2(x, y) = d2(x, y) + (a(x) * b(y) * c(z))\n        END DO\n      END DO\n    END DO\n  !$acc end data\n\n  DO x = 1, 100\n    DO y = 1, 100\n      DO z = 1, 100\n        d2(x, y) = d2(x, y) - (a(x) * b(y) * c(z))\n      END DO\n      IF (abs(d2(x, y)) .gt. 10*PRECISION) THEN\n        errors = errors + 1\n      END IF\n    END DO\n  END DO\n\n  !$acc data copyin(a(1:100), b(1:100), c(1:100)) copyout(d3(1:100, 1:100, 1:100))\n    !$acc serial loop tile(*, *, *)\n    DO x = 1, 100\n      DO y = 1, 100\n        DO z = 1, 100\n          d3(x, y, z) = a(x) * b(y) * c(z)\n        END DO\n      END DO\n    END DO\n  !$acc end data\n\n  DO x = 1, 100\n    DO y = 1, 100\n      DO z = 1, 100\n        IF (abs(d3(x, y, z) - (a(x) * b(y) * c(z))) .gt. PRECISION) THEN\n          errors = errors + 1\n        END IF\n      END DO\n    END DO\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "combined-constructs",
                            "loop",
                            "tile"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_vector.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,combined-constructs,loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  REAL(8),DIMENSION(LOOPCOUNT):: a, b, c\n  INTEGER:: x\n  INTEGER:: errors\n\n  errors = 0\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n  c = 0\n\n  !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copy(c(1:LOOPCOUNT))\n    !$acc serial loop vector\n    DO x = 1, LOOPCOUNT\n      c(x) = a(x) + b(x)\n    END DO\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_vector_blocking.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER:: errors\n  REAL(8),DIMENSION(LOOPCOUNT):: a, b, c\n  INTEGER:: multiplier, x\n  errors = 0\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n  c = 0\n\n  !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n    !$acc serial\n      !$acc loop vector\n      DO x = 1, LOOPCOUNT\n        c(x) = (a(x) + b(x)) * multiplier\n      END DO\n      multiplier = multiplier + 1\n      !$acc loop vector\n      DO x = 1, LOOPCOUNT\n        c(x) = c(x) + ((a(x) + b(x)) * multiplier)\n      END DO\n    !$acc end serial\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    IF (abs(c(x) - ((a(x) + b(x)) * 3)) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_worker.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,combined-constructs,loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  REAL(8),DIMENSION(LOOPCOUNT):: a, b, c\n  INTEGER:: x\n  INTEGER:: errors\n\n  errors = 0\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n  c = 0\n\n  !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copy(c(1:LOOPCOUNT))\n    !$acc serial loop worker\n    DO x = 1, LOOPCOUNT\n      c(x) = a(x) + b(x)\n    END DO\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_worker_blocking.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  REAL(8),DIMENSION(LOOPCOUNT):: a, b, c\n  INTEGER:: multiplier\n  INTEGER:: x\n  INTEGER:: errors\n\n  errors = 0\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n  c = 0\n\n  !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n    !$acc serial\n      !$acc loop worker\n      DO x = 1, LOOPCOUNT\n        c(x) = (a(x) + b(x)) * multiplier\n      END DO\n      multiplier = multiplier + 1\n      !$acc loop worker\n      DO x = 1, LOOPCOUNT\n        c(x) = c(x) + ((a(x) + b(x)) * multiplier)\n      END DO\n    !$acc end serial\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    IF (abs(c(x) - (3 * (a(x) + b(x)))) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_present.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  REAL(8),DIMENSION(LOOPCOUNT):: a, b, c\n  INTEGER:: x\n  INTEGER:: errors\n\n  errors = 0\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n  c = 0\n\n  !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) create(c(1:LOOPCOUNT))\n  !$acc serial present(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n    !$acc loop\n    DO x = 1, LOOPCOUNT\n      c(x) = a(x) + b(x)\n    END DO\n  !$acc end serial\n  !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n\n  DO x = 1, LOOPCOUNT\n    IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_private.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,private,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b\n  REAL(8),DIMENSION(LOOPCOUNT):: c\n  REAL(8),DIMENSION(10):: d\n  REAL(8):: temp\n  INTEGER:: x, y\n  INTEGER:: errors\n\n  errors = 0\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n  c = 0\n  d = 0\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10), b(1:LOOPCOUNT, 1:10)) copy(d(1:10))\n    !$acc serial private(c(1:LOOPCOUNT))\n      !$acc loop gang\n      DO y = 1, 10\n        !$acc loop worker\n        DO x = 1, LOOPCOUNT\n          c(x) = a(x, y) + b(x, y)\n        END DO\n        !$acc loop seq\n        DO x = 1, LOOPCOUNT\n          d(y) = d(y) + c(x)\n        END DO\n      END DO\n    !$acc end serial\n  !$acc end data\n\n  DO y = 1, 10\n    temp = 0\n    DO x = 1, LOOPCOUNT\n      temp = temp + (a(x, y) + b(x, y))\n    END DO\n    IF (abs(d(x) - temp) .gt. (2 * PRECISION * LOOPCOUNT)) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "private"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_reduction.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,reduction,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  REAL(8),DIMENSION(LOOPCOUNT):: a\n  REAL(8):: reduction\n  INTEGER:: errors, x\n\n  errors = 0\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n\n  !$acc serial copyin(a(1:LOOPCOUNT)) reduction(+:reduction)\n    !$acc loop\n    DO x = 1, LOOPCOUNT\n      reduction = reduction + a(x)\n    END DO\n  !$acc end serial\n\n  DO x = 1, LOOPCOUNT\n    reduction = reduction - a(x)\n  END DO\n\n  IF (abs(reduction) .gt. PRECISION) THEN\n    errors = errors + 1\n  END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "reduction"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_scalar_default_firstprivate.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  REAL(8),DIMENSION(LOOPCOUNT):: a, b\n  REAL(8):: scalar, scalar_copy\n  INTEGER:: x\n  INTEGER:: errors\n\n  errors = 0\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  b = 0\n  scalar = 5.5\n  scalar_copy = scalar\n\n  !$acc data copyin(a(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT))\n    !$acc serial\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        b(x) = a(x) + scalar\n      END DO\n    !$acc end serial\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    IF (abs(b(x) - (a(x) + scalar_copy)) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n  IF (abs(scalar_copy - scalar) .gt. PRECISION) THEN\n    errors = errors + 1\n  END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            ""
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_switch.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER,DIMENSION(LOOPCOUNT):: a\n  REAL(8),DIMENSION(LOOPCOUNT):: a_randoms, b, b_host, c\n  INTEGER:: errors, x\n\n  errors = 0\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a_randoms)\n  CALL RANDOM_NUMBER(b)\n  c = 0\n  b_host = b\n\n  DO x = 1, LOOPCOUNT\n    a(x) = INT(a_randoms(x) * 4)\n  END DO\n\n  !$acc data copyin(a(1:LOOPCOUNT)) copy(b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n    !$acc serial\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        SELECT CASE(a(x))\n        CASE (0)\n          c(x) = b(x) * b(x)\n        CASE (1)\n          c(x) = b(x) / b(x)\n        CASE (2)\n          b(x) = b(x) / 2\n        CASE DEFAULT\n          c(x) = a(x) + b(x)\n        END SELECT\n      END DO\n    !$acc end serial\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    SELECT CASE(a(x))\n    CASE(0)\n      IF (abs(c(x) - (b_host(x) * b_host(x))) .gt. PRECISION) THEN\n        errors = errors + 1\n      END IF\n    CASE(1)\n      IF (abs(c(x) - 1) .gt. PRECISION) THEN\n        errors = errors + 1\n      END IF\n    CASE(2)\n      IF (abs(c(x)) .gt. PRECISION) THEN\n        errors = errors + 1\n      END IF\n      IF (abs(b(x) - (b_host(x) / 2)) .gt. PRECISION) THEN\n        errors = errors + 1\n      END IF\n    CASE DEFAULT\n      IF (abs(c(x) - (b_host(x) + a(x))) .gt. PRECISION) THEN\n        errors = errors + 1\n      END IF\n    END SELECT\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            ""
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_wait.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:async,serial,update,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  REAL(8),DIMENSION(LOOPCOUNT):: a, a_copy\n  INTEGER:: errors, x\n\n  errors = 0\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  a_copy = a\n\n  !$acc enter data create(a(1:LOOPCOUNT))\n  !$acc update device(a(1:LOOPCOUNT)) async(1)\n  !$acc serial present(a(1:lOOPCOUNT)) wait(1)\n    !$acc loop\n    DO x = 1, LOOPCOUNT\n      a(x) = a(x) + 1\n    END DO\n  !$acc end serial\n  !$acc exit data copyout(a(1:LOOPCOUNT))\n\n  DO x = 1, LOOPCOUNT\n    IF (abs(a(x) - (a_copy(x) + 1)) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "async",
                            "serial",
                            "update"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_while_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:reduction,loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: a\n  REAL(8):: avg\n  INTEGER:: errors, x, y\n\n  errors = 0\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n\n  !$acc data copy(a(1:LOOPCOUNT, 1:10))\n    !$acc serial\n      !$acc loop\n      DO y = 1, 10\n        avg = 0\n        DO WHILE (avg .lt. 1000)\n          avg = 0\n          !$acc loop reduction(+:avg)\n          DO x = 1, LOOPCOUNT\n            a(x, y) = a(x, y) * 1.5\n            avg = avg + (a(x, y) / LOOPCOUNT)\n          END DO\n        END DO\n      END DO\n    !$acc end serial\n  !$acc end data\n\n  DO y = 1, 10\n    avg = 0\n    DO x = 1, LOOPCOUNT\n      avg = avg + (a(x, y) / LOOPCOUNT)\n    END DO\n    IF ((avg .lt. 1000) .or. (avg .gt. 1500)) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "reduction",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "set_default_async.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:async,construct-independent,internal-control-values,set,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, a_host, b_host !Data\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        a_host = a\n        b_host = b\n        c = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n          !$acc set default_async(1)\n          !$acc parallel async\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              a(x) = a(x) * a(x)\n            END DO\n          !$acc end parallel\n          !$acc set default_async(2)\n          !$acc parallel async\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              b(x) = b(x) * b(x)\n            END DO\n          !$acc end parallel\n          !$acc parallel async(1) wait(2)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n          !$acc wait(1)\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a_host(x) * a_host(x) + b_host(x) * b_host(x))) .gt. 4 * PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "async",
                            "construct-independent",
                            "internal-control-values",
                            "set"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "set_device_num.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,construct-independent,internal-control-values,set,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(:, :),ALLOCATABLE :: host_copy\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n        INTEGER :: temp\n\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        ALLOCATE(host_copy(acc_get_num_devices(acc_get_device_type()), LOOPCOUNT))\n\n        IF (acc_get_device_type() .ne. acc_device_none) THEN\n          !host_copy(acc_get_num_devices(acc_get_device_type()), LOOPCOUNT)\n          DO x = 1, acc_get_num_devices(acc_get_device_type())\n            CALL RANDOM_NUMBER(a)\n            host_copy(x, :) = a\n            !$acc set device_num(x)\n            !$acc enter data copyin(a(1:LOOPCOUNT))\n          END DO\n\n          DO x = 1, acc_get_num_devices(acc_get_device_type())\n            !$acc set device_num(x)\n            !$acc data present(a(1:LOOPCOUNT))\n              !$acc parallel\n                !$acc loop\n                DO y = 1, LOOPCOUNT\n                  a(y) = a(y) + 1\n                END DO\n              !$acc end parallel\n            !$acc end data\n          END DO\n\n          DO x = 1, acc_get_num_devices(acc_get_device_type())\n            !$acc set device_num(x)\n            !$acc exit data copyout(a(1:LOOPCOUNT))\n            temp = errors\n            DO y = 1, LOOPCOUNT\n              IF (abs(a(y) - (host_copy(x, y) + 1)) .gt. PRECISION) THEN\n                PRINT*, a(y)\n                PRINT*, host_copy(x, y)\n                errors = errors + 1\n              END IF\n            END DO\n            IF (temp .ne. errors) THEN\n              PRINT*, x\n            END IF\n          END DO\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "construct-independent",
                            "internal-control-values",
                            "set"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "set_device_type.F90": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,construct-independent,internal-control-values,set,V:2.5-3.2\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: errors = 0\n\n        !$acc set device_type(host)\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "construct-independent",
                            "internal-control-values",
                            "set"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:runtime,construct-independent,internal-control-values,set,V:2.5-3.2\n      LOGICAL FUNCTION test2()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: errors = 0\n\n        !$acc set device_type(multicore)\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "construct-independent",
                            "internal-control-values",
                            "set"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n!T3:runtime,construct-independent,internal-control-values,set,V:2.5-3.2\n      LOGICAL FUNCTION test3()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: errors = 0\n\n        !$acc set device_type(default)\n\n        IF (errors .eq. 0) THEN\n          test3 = .FALSE.\n        ELSE\n          test3 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T3\n        LOGICAL :: test3\n#endif\n#ifndef T3\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test3()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 2\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "construct-independent",
                            "internal-control-values",
                            "set"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "set_device_type_nvidia.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,construct-independent,internal-control-values,set,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: errors = 0\n\n        !$acc set device_type(nvidia)\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "construct-independent",
                            "internal-control-values",
                            "set"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "shutdown.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,shutdown,nonvalidating,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: errors = 0\n\n        !$acc shutdown\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "shutdown",
                            "nonvalidating"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "shutdown_device_num.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,construct-independent,internal-control-values,shutdown,nonvalidating,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: device_num\n        INTEGER :: device_type\n        INTEGER :: errors = 0\n\n        device_num = acc_get_device_num(acc_get_device_type())\n        !$acc shutdown device_num(device_num)\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "construct-independent",
                            "internal-control-values",
                            "shutdown",
                            "nonvalidating"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "shutdown_device_type.F90": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,construct-independent,internal-control-values,shutdown,nonvalidating,V:2.5-3.2\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: errors = 0\n\n        !$acc shutdown device_type(host)\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "construct-independent",
                            "internal-control-values",
                            "shutdown",
                            "nonvalidating"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:runtime,construct-independent,internal-control-values,shutdown,nonvalidating,V:2.5-3.2\n      LOGICAL FUNCTION test2()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: errors = 0\n\n        !$acc shutdown device_type(multicore)\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "construct-independent",
                            "internal-control-values",
                            "shutdown",
                            "nonvalidating"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n!T3:runtime,construct-independent,internal-control-values,shutdown,nonvalidating,V:2.5-3.2\n      LOGICAL FUNCTION test3()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: errors = 0\n\n        !$acc shutdown device_type(default)\n\n        IF (errors .eq. 0) THEN\n          test3 = .FALSE.\n        ELSE\n          test3 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T3\n        LOGICAL :: test3\n#endif\n#ifndef T3\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test3()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "construct-independent",
                            "internal-control-values",
                            "shutdown",
                            "nonvalidating"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "shutdown_device_type_num.F90": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,construct-independent,internal-control-values,shutdown,nonvalidating,V:2.5-3.2\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: device_num\n        INTEGER :: device_type\n        INTEGER :: errors = 0\n\n        device_type = acc_get_device_type()\n        device_num = acc_get_device_num(device_type)\n        !$acc shutdown device_type(host) device_num(device_num)\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "construct-independent",
                            "internal-control-values",
                            "shutdown",
                            "nonvalidating"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:runtime,construct-independent,internal-control-values,shutdown,nonvalidating,V:2.5-3.2\n      LOGICAL FUNCTION test2()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: device_num\n        INTEGER :: device_type\n        INTEGER :: errors = 0\n\n        device_type = acc_get_device_type()\n        device_num = acc_get_device_num(device_type)\n        !$acc shutdown device_type(multicore) device_num(device_num)\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "construct-independent",
                            "internal-control-values",
                            "shutdown",
                            "nonvalidating"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n!T3:runtime,construct-independent,internal-control-values,shutdown,nonvalidating,V:2.5-3.2\n      LOGICAL FUNCTION test3()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: device_num\n        INTEGER :: device_type\n        INTEGER :: errors = 0\n\n        device_type = acc_get_device_type()\n        device_num = acc_get_device_num(device_type)\n        !$acc shutdown device_type(default) device_num(device_num)\n\n        IF (errors .eq. 0) THEN\n          test3 = .FALSE.\n        ELSE\n          test3 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T3\n        LOGICAL :: test3\n#endif\n#ifndef T3\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test3()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 2\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "construct-independent",
                            "internal-control-values",
                            "shutdown",
                            "nonvalidating"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "shutdown_device_type_num_nvidia.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,construct-independent,internal-control-values,shutdown,nonvalidating,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: device_num\n        INTEGER :: device_type\n        INTEGER :: errors = 0\n\n        device_type = acc_get_device_type()\n        device_num = acc_get_device_num(device_type)\n        !$acc shutdown device_type(nvidia) device_num(device_num)\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "construct-independent",
                            "internal-control-values",
                            "shutdown",
                            "nonvalidating"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "shutdown_device_type_nvidia.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,construct-independent,internal-control-values,shutdown,nonvalidating,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: errors = 0\n\n        !$acc shutdown device_type(nvidia)\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "construct-independent",
                            "internal-control-values",
                            "shutdown",
                            "nonvalidating"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "template.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT))\n          !$acc parallel\n\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          IF (abs(a(x)) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            }
        }
    ]
}